<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于洛谷113号题单对线性表的总结</title>
    <link href="/2024/06/03/113/"/>
    <url>/2024/06/03/113/</url>
    
    <content type="html"><![CDATA[<h2 id="1-P3156-询问学号">1 P3156 询问学号</h2><p><a href="https://www.luogu.com.cn/problem/P3156">传送门</a></p><p>没啥好说的，跳</p><h2 id="2-P3613-寄包柜">2 P3613 寄包柜</h2><p><a href="https://www.luogu.com.cn/problem/P3613">传送门</a></p><p><s>二维数组秒了</s></p><p>虽然这题的题目是寄包柜，但他真的是考察寄包柜吗？<s>是的</s></p><p>根据问题找答案，显然对于每个问题有三个元素:第i个寄包柜，第j个格子里的物品。如果用二维数组，显然10<sup>5</sup> * 10<sup>9</sup>会MLE，即使是动态数组也不太妥。</p><p>所以呢？最简单的方法当然是STL大法！</p><p>但有个问题，一个map元素只有两个值，比如map&lt;int,int&gt; b;但我们有三个元素。</p><p><s>aabandon</s></p><h3 id="2-1-方法1">2.1 方法1</h3><p>把第一个int改成long long，将第一个元素改成10<sup>5</sup>*i + j</p><h3 id="2-2-方法2">2.2 方法2</h3><p>map&lt;int,int&gt; b[MAX];<br>b[i][j] = k;</p><h2 id="3-P1449-后缀表达式">3 P1449 后缀表达式</h2><p><a href="https://www.luogu.com.cn/problem/P1449">传送门</a></p><p>很显然，这题需要用到栈。当输入不是数字时，将这个数字压入栈。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>(i &lt; postfix.<span class="hljs-built_in">length</span>() &amp;&amp; <span class="hljs-built_in">isdigit</span>(postfix[i]))<br>&#123;<br>   val = val * <span class="hljs-number">10</span> + (postfix[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<span class="hljs-comment">//这里注意，由于是从char型字符转化为int型字符，所以需要postfix[i] - &#x27;0&#x27;</span><br>   i++;<br>&#125;<br></code></pre></td></tr></table></figure><p>当输入不是数字时，就从栈中弹出两个数字进行运算，注意顺序：第一个弹出来的是val2，第二个弹出来的是val1，这对于减法和除法很重要</p><p>AC代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>string postfix;<br>stack&lt;<span class="hljs-type">int</span>&gt; s;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; postfix;<br>    <br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(i &lt; postfix.<span class="hljs-built_in">length</span>())<br>    &#123;<br>        <span class="hljs-keyword">if</span>(postfix[i] == <span class="hljs-string">&#x27;@&#x27;</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(postfix[i]))<br>        &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(postfix[i]))<br>            &#123;<br>                t = t * <span class="hljs-number">10</span> + (postfix[i++] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>            &#125;<br>            i++;<br>            s.<span class="hljs-built_in">push</span>(t);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> val2 = s.<span class="hljs-built_in">top</span>(); s.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-type">int</span> val1 = s.<span class="hljs-built_in">top</span>(); s.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-type">char</span> c = postfix[i];<br>            <span class="hljs-keyword">switch</span>(c)<br>            &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span> : s.<span class="hljs-built_in">push</span>(val1 + val2); <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span> : s.<span class="hljs-built_in">push</span>(val1 - val2); <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span> : s.<span class="hljs-built_in">push</span>(val1 * val2); <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span> : s.<span class="hljs-built_in">push</span>(val1 / val2); <span class="hljs-keyword">break</span>;<br>            &#125;<br>            i++;<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; s.<span class="hljs-built_in">top</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>------------------------手动分割线--------------------</p><p>单纯做这题其实并不难，但是我想到了一个问题：前缀表达式和前序遍历、中缀表达式和中序遍历、后续表达式和后序遍历之间是否有关系？</p><p>根据我自己的探索，发现其实前、中、后缀表达式可以说是前、中、后序遍历的一种特殊形式</p><p>举个例子，对于<code>3*(5-2)+7</code>这个表达式，可以转化为树。</p><p>很显然，我们最先算<code>3*(5-2)</code>与<code>7</code>的和，其次算<code>3</code>和<code>(5-2)</code>的乘积，要算<code>5-2</code>我们要先做<code>5</code>和<code>2</code>的减法，因此<code>*</code>的子节点是<code>3</code>和<code>-</code>。显然<code>-</code>的子节点是<code>5</code>和<code>2</code>。最后计算的是</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">    +</span><br>   / \<br><span class="hljs-bullet">  *</span>   7<br> / \<br>3   -<br>   / \<br>  5   2<br></code></pre></td></tr></table></figure><p>前缀表达式(前序遍历)：<br>+*3-5.2.7</p><p>中缀表达式(中序遍历)<br>3*5-2+7</p><p>后缀表达式(后序遍历):<br>3.5.2.-*7+</p><h2 id="4-P1996">4 P1996</h2><p><a href="https://www.luogu.com.cn/problem/P1996">传送门</a></p><p>这题有两个方法：模拟法和递推法。模拟法更加直观，而递推法更加优雅</p><h3 id="4-1-模拟法">4.1 模拟法</h3><p>模拟法很直观，直接模拟整个出圈的过程，可以使用队列来解决。</p><p>将所有小朋友排好编号排成一列，在出列时报数。如果报数不是m的倍数则入列；否则直接出列，同时输出小朋友的编号</p><h4 id="4-1-1-AC代码">4.1.1 AC代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">joes</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        q.<span class="hljs-built_in">push</span>(i);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        t++;<br>        <span class="hljs-keyword">if</span>(t % m != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            q.<span class="hljs-built_in">push</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout &lt;&lt; q.<span class="hljs-built_in">front</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            q.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-built_in">joes</span>(n, m);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-数学法-约瑟夫环递推公式">4.2 数学法(约瑟夫环递推公式)</h3><p>约瑟夫环问题有一个著名的递推公式解法。设f(n,m)为n个人报数，每次数到m出列的最终胜利者，则有递推关系：</p><p>f(n,m) = (f(n - 1), m) mod n</p><p>从只有一个人开始推，直到n个人。基于此我们可以反向推导出每一步出圈的人的编号。</p><p>现在让我们进行递推公式</p><p>设f(n, m)为n个人报数，每次数到m的情况下，最后那个人的位置。</p><p>当只有一个人的时候，(即n=1)，很显然此人(编号’0’)是最后的存活者</p><p>基于前一个数量的结果，但是因为我们现在有 <code>n</code> 个人，所以我们要在这个位置基础上加上 <code>m</code>（因为每次都是数到 <code>m</code> 的人出列），然后对当前人数 <code>n</code> 取模，以确保我们得到的索引是有效的（即不会超出当前的人数范围）</p><p>举个例子</p><p>假设现在有<code>3</code>个人，每次数到<code>2</code>时出列，我们要找到最后存活的位置</p><ol><li>f(1,2) = 0;</li><li>f(2,2) = (f(1,2) + 2) % 2 = 0;</li><li>f(3,2) = (f(2,2) + 2) % 3 = 2;</li></ol><h4 id="4-2-2-AC代码">4.2.2 AC代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">josephus</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">people</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        people[i] = i + <span class="hljs-number">1</span>;<br>        <br>    vector&lt;<span class="hljs-type">int</span>&gt; result;<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(!people.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        index = (index + m - <span class="hljs-number">1</span>) % people.<span class="hljs-built_in">size</span>();<br>        result.<span class="hljs-built_in">push_back</span>(people[index]);<br>        people.<span class="hljs-built_in">erase</span>(people.<span class="hljs-built_in">begin</span>() + index);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; order = <span class="hljs-built_in">josephus</span>(n, m);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> person : order)<br>        cout &lt;&lt; person &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <br>    cout &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-P1160-队列安排">5 P1160 队列安排</h2><p><a href="https://www.luogu.com.cn/problem/P1160">传送门</a></p><p>此题有两个难点：</p><ol><li>如何插入同学？</li><li>如何删除同学？</li></ol><h3 id="5-1-如何插入同学？">5.1 如何插入同学？</h3><p>对于此类需要频繁插入的问题，数组显然不行，第一反应当然是链表。</p><p>我们可以把每个同学想象成互相握住肩膀，比如a同学的右边是b同学，a同学握着b同学的肩膀，b同学握住a同学的肩膀。如果想要在a同学的右边插入c同学，首先要让c同学握住a同学，之后c同学握住a同学握着的b同学，接着a同学右边的b同学握住a同学的手转为握住c同学，a同学握住b同学的手转为握住c同学。</p><p>这题可以使用结构体，但结构体比数组慢，所以我们可以用数组来模拟结构体。</p><p>但是要注意避免数据溢出，即第一个同学左边的同学是谁？所以对于同学的编号我们应该从1开始而不是从0开始</p><h3 id="5-2-如何删除同学？">5.2 如何删除同学？</h3><p>当时第一反应是通过一个双重循环，即每输入一个需要删除的i号同学就搜索一遍链表，将i号同学改为0。输出时进行检查，如果是0则不输出。但显然时间复杂度则为O(N<sup>2</sup>)了。</p><p>正难则反，以退为进。我们不妨先用一个布尔数组标记所有要删除的学号，接着依次输出链表，当遇到要输出的学号被标记时则不输出，时间复杂度O(N)。</p><h3 id="5-3-AC代码">5.3 AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> l[N], r[N], res[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <br>    r[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, l[n + <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    r[<span class="hljs-number">1</span>] = n + <span class="hljs-number">1</span>, l[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> k, p;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;k, &amp;p);<br>        <br>        <span class="hljs-keyword">if</span>(p == <span class="hljs-number">0</span>)<br>        &#123;<br>            r[i] = k;<br>            l[i] = l[k];<br>            r[l[k]] = i;<br>            l[k] = i;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p == <span class="hljs-number">1</span>)<br>        &#123;<br>            l[i] = k;<br>            r[i] = r[k];<br>            l[r[k]] = i;<br>            r[k] = i;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> idx = <span class="hljs-number">1</span>, temp = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(r[temp] != n + <span class="hljs-number">1</span>)<br>    &#123;<br>        res[idx++] = r[temp];<br>        temp = r[temp];<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-type">bool</span> isDeleted[N] = &#123;<span class="hljs-literal">false</span>&#125;;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        isDeleted[x] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!isDeleted[res[i]])<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, res[i]);<br>    &#125;<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-P1540-机器翻译">6 P1540 机器翻译</h2><p><a href="https://www.luogu.com.cn/problem/P1540">传送门</a></p><p>解题思路：</p><ol><li><p>初始化</p><ul><li>使用一个固定大小的队列或列表来模拟内存</li><li>使用一个计算器来记录查词典的次数</li></ul></li><li><p>对于文章中的每个单词</p><ul><li>对于文章中每个单词首先要判断他是否在内存（这里用队列来模拟）中<ul><li>如果在，不需要做任何操作</li><li>如果不在<ul><li>如果内存未满，直接将单词添加到内存中</li><li>如果队列已满，移除最先进入内存的单词(直接pop())，然后将新单词添加到内存中</li><li>每次将单词加入内存时，增加查词典的计数</li></ul></li></ul></li></ul></li><li><p>输出结果</p><ul><li>文章处理完成后，输出查词典的总次数</li></ul></li></ol><p>AC代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;deque&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>deque&lt;<span class="hljs-type">int</span>&gt; words;<br><span class="hljs-type">int</span> m, n;<span class="hljs-comment">//m为内存容量，n为文章长度</span><br><span class="hljs-type">int</span> res;<br><span class="hljs-type">bool</span> isFound;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; m &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">while</span>(n -- )<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <br>        cin &gt;&gt; x;<br>        <br>        isFound = <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it = words.<span class="hljs-built_in">begin</span>(); it != words.<span class="hljs-built_in">end</span>(); it ++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span>(x == *it) <br>            &#123;<br>                isFound = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(!isFound)<br>        &#123;<br>            res ++ ;<br>            <br>            <span class="hljs-keyword">if</span>(words.<span class="hljs-built_in">size</span>() &gt;= m)<br>            &#123;<br>                words.<span class="hljs-built_in">pop_front</span>();<br>                words.<span class="hljs-built_in">push_back</span>(x);<br>            &#125;<span class="hljs-keyword">else</span> words.<span class="hljs-built_in">push_back</span>(x);<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上是本蒟蒻的代码，时间复杂度O(N<sup>2</sup>)。翻看题解，看到一位大佬的代码，居然将时间复杂度做到O(N)</p><p>用内存换时间，这是很划算的做法。</p><ul><li>开辟两个数组a[MAX]、b[MAX]</li><li>用b[MAX]表示依次存入的单词,比如b[1] = 3, b[2] = 5,表示第一个存入的单词是3，第二个存入的单词是5</li><li>a[MAX]表示查询单词是否在区域中，如果在则为1，不在为0</li><li>用左、右指针计算内存的长度</li></ul><p>大佬的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,x,ans,l,r,a[<span class="hljs-number">1005</span>],b[<span class="hljs-number">1005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;m&gt;&gt;n;<br>    l=<span class="hljs-number">0</span>;r=<span class="hljs-number">0</span>;<span class="hljs-comment">//初始化两个指针</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>         <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<span class="hljs-comment">//边读入边做</span><br>         <span class="hljs-keyword">if</span> (a[x]==<span class="hljs-number">0</span>) <br>         &#123;<br>             ans++;<br>            r++;b[r]=x;a[x]=<span class="hljs-number">1</span>;<span class="hljs-comment">//因为每次遇到新单词都要做这些操作，不如搬到判断语句外做，这样程序更简洁</span><br>            <span class="hljs-keyword">if</span> (r&gt;m) &#123;l++;a[b[l]]=<span class="hljs-number">0</span>;&#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//千万不能忘记打这句，不然在比赛中会出错</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构， C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图(C++干货版)</title>
    <link href="/2024/05/28/graph/"/>
    <url>/2024/05/28/graph/</url>
    
    <content type="html"><![CDATA[<p>本章除了1:图的定义之外，其他内容很少讲概念，主要通过例题来感悟。因为我<s>懒</s>认为通过例题是一种更直观，也更实用的方法。</p><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="ie=edge">    <title>Document</title>    <script src="https://cdn.jsdelivr.net/npm/mermaid@10.6.1/dist/mermaid.min.js"></script>    <script>    window.onload=mermaid.initialize({"theme": "forest"});    </script></head><h2 id="1-图的定义">1 图的定义</h2><p>图(graph)是由顶点的有穷非空集合V(G)和顶点之间边的集合E(G)组成，通常表示为:G=(V, E),其中G表示图，V是图G中顶点的个数，E是图G中边的集合</p><h2 id="2-图的基本概念和术语">2 图的基本概念和术语</h2><h3 id="2-1-有向图">2.1 有向图</h3><p>若E是有向边的有限集合时，则图G为有向图。弧是顶点的有序对，记为&lt;v,w&gt;。其中v，w是顶点，v为弧头，w是弧尾，&lt;v,w&gt;称为从v到w的弧，也称v邻接到w，或w邻接自v。</p><div class="mermaid">        graph LR;            1-->2;            2-->1;            2-->3;</div><p>图中有向图可表示为<br>G<sub>1</sub>=(V<sub>1</sub>,E<sub>1</sub>);<br>V<sub>1</sub>={1,2,3}<br>E<sub>1</sub>={&lt;1,2&gt;,&lt;2,1&gt;,&lt;2,3&gt;}</p><h3 id="2-2-无向图">2.2 无向图</h3><p>若E是无向边(简称边)的有限集合时，则图G为无向图。边是顶点的无序对，记为(v,w)或(w,v)。其中v,w是顶点。可以说顶点v和顶点w互为邻接点。边(v,w)依附于顶点w和v，或者说边(v,w)和顶点v,w相关联</p><div class="mermaid">        graph LR;            1 --- 2;            1 --- 3;            2 --- 3;</div><p>图中所示无向图可表示为<br>G<sub>2</sub>=(V<sub>2</sub>,E<sub>2</sub>);<br>V<sub>2</sub>={1, 2, 3};<br>E<sub>2</sub>={(1,2),(1,3),(2,3)};</p><h3 id="2-3-简单图">2.3 简单图</h3><p>一个图G若满足：<br>1. 不存在重复边<br>2. 不存在顶点到自身的边<br>则其被称为简单图。</p><p><em>数据结构仅讨论简单图</em></p><h3 id="2-4-多重图">2.4 多重图</h3><p>若图G中某两个结点之间的边数多于一条，又运行顶点通过一条边与自己关联，则G为多重图。多重图的定义和简单图是相对的。</p><h3 id="2-5-完全图-也称简单完全图">2.5 完全图(也称简单完全图)</h3><p>完全图是一个简单图，其中每对不同的顶点都恰好由一条边相连。这意味着在完全图中，任意两个不同的顶点之间都有直接的相连，没有任何的顶点是孤立的。</p><p>完全图的性质：<br>* 顶点的数量：用(V)表示<br>* 边的数量：V*(V-1)/2<br>* 度数：完全图中每个结点的度数都是(V-1)</p><h2 id="3-图的存储结构">3 图的存储结构</h2><h3 id="3-1-邻接矩阵">3.1 邻接矩阵</h3><p>相关概念不赘述，因为<s>懒</s>觉得没必要，直接上例子：</p><p>假设我们有三个顶点A、B、C，顶点之间的关系：</p><div class="mermaid">    graph LR;        A --> B;        B --> C;        C --> A;</div><p>为了用邻接矩阵表示这个图，首先定义一个二维数组，其中行和列的索引分别代表起点和终点。如果结点i有一条边指向j，则martix[i][j]被设置为1(无向图)或边的权重(如果是有权图)。如果没有直接连接，则设置为0。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> V = <span class="hljs-number">3</span>;<span class="hljs-comment">//顶点数</span><br><span class="hljs-type">int</span> adjMartix[V][V];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    adjMartix[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    adjMartix[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    adjMartix[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;邻接矩阵为：&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; V; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; V; j++)<br>            cout &lt;&lt; adjMartix[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-邻接表">3.2 邻接表</h3><p>邻接表是另一种常用的图的表示方法，适用于稀疏图，即边的数量远少于顶点的数量</p><p>假设我们有四个顶点:A,B,C,D。顶点之间的关系如下：</p><div class="mermaid">    graph LR;        A --- B;        A --- C;        B --- D;        C --- D;</div><p>为了使用邻接表表示这个图，我们可以使用一个数组。其中每个元素是一个列表，列表中包含与该顶点相连的其他顶点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> V = <span class="hljs-number">4</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">adjList</span>(V);<span class="hljs-comment">//创建一个大小为V的向量</span><br><br>    adjList[<span class="hljs-number">0</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//A与B相连</span><br>    adjList[<span class="hljs-number">1</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//B与A相连</span><br>    adjlist[<span class="hljs-number">0</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>    adjList[<span class="hljs-number">2</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>    adjList[<span class="hljs-number">1</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>    adjList[<span class="hljs-number">3</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    adjList[<span class="hljs-number">2</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>    adjList[<span class="hljs-number">3</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;邻接表为：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; V; i++)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;顶点&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;: &quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j : adjList[i])<br>        &#123;<br>            cout &lt;&lt; j &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-十字链表">3.3 十字链表</h3><p>十字链表适用于表示有向图的数据结构，特别适用于稀疏图。在十字链表中，每个顶点和每条边都用一个结点表示，这种结构特别适用于访问任何顶点的入边和出边</p><p>基本结构：<br>* 顶点结点：<br>- 包含顶点的信息<br>- 两个指针，一个指向该顶点的第一条出边，另一个指向该顶点的第一条入边<br>* 边结点：<br>- 包含边的信息<br>- 有四个指针，两个用于在顶点的出边或入边中前后链表，另外两个用于链接同一个顶点的下一条出边或入边</p><p><em>听不懂？没关系，看完例子再回过头来看</em></p><p>假设有一个有向图，包含A,B,C,D</p><p>考虑以下有向图：</p><div class="mermaid">    graph LR;        1 --> 2;        1 --> 3;        3 --> 4;        2 --> 4;</div><p>使用十字链表构建有向图：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span><br>&#123;<br>    <span class="hljs-type">int</span> tail, head;<span class="hljs-comment">//边的尾和头</span><br>    ArcNode *tailLink, *headLink;<span class="hljs-comment">//指向下一个相同尾、头的边</span><br>    <span class="hljs-built_in">ArcNode</span>(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> h): <span class="hljs-built_in">tail</span>(t), <span class="hljs-built_in">head</span>(h), <span class="hljs-built_in">tailLink</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">headLink</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">VertexNode</span><br>&#123;<br>    <span class="hljs-type">int</span> vertex;<span class="hljs-comment">//顶点信息</span><br>    ArcNode *firstIn, *firstOut;<span class="hljs-comment">//指向该顶点的第一个入边和出边</span><br>    <span class="hljs-built_in">VertexNode</span>(<span class="hljs-type">int</span> v): <span class="hljs-built_in">vertex</span>(v), <span class="hljs-built_in">firstIn</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">firstOut</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><br>vector&lt;VertexNode*&gt; vertices;<br><br><span class="hljs-comment">// 添加顶点</span><br><span class="hljs-function">VertexNode* <span class="hljs-title">addVertex</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>    VertexNode* vertex = <span class="hljs-keyword">new</span> <span class="hljs-built_in">VertexNode</span>(id);<br>    vertices.<span class="hljs-built_in">push_back</span>(vertex);<br>    <span class="hljs-keyword">return</span> vertex;<br>&#125;<br><br><span class="hljs-comment">// 查找顶点</span><br><span class="hljs-function">VertexNode* <span class="hljs-title">findVertex</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : vertices) &#123;<br>        <span class="hljs-keyword">if</span> (v-&gt;id == id) <span class="hljs-keyword">return</span> v;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-comment">// 添加边</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> tail, <span class="hljs-type">int</span> head)</span> </span>&#123;<br>    VertexNode* tailVertex = <span class="hljs-built_in">findVertex</span>(tail);<br>    VertexNode* headVertex = <span class="hljs-built_in">findVertex</span>(head);<br>    <span class="hljs-keyword">if</span> (!tailVertex) tailVertex = <span class="hljs-built_in">addVertex</span>(tail);<br>    <span class="hljs-keyword">if</span> (!headVertex) headVertex = <span class="hljs-built_in">addVertex</span>(head);<br><br>    ArcNode* arc = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArcNode</span>(tail, head);<br>    arc-&gt;tailNext = tailVertex-&gt;firstOut;<br>    tailVertex-&gt;firstOut = arc;<br>    arc-&gt;headNext = headVertex-&gt;firstIn;<br>    headVertex-&gt;firstIn = arc;<br>&#125;<br><br><span class="hljs-comment">// 显示图的信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : vertices) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Vertex &quot;</span> &lt;&lt; v-&gt;id &lt;&lt; <span class="hljs-string">&quot;:\n&quot;</span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;  Outgoing: &quot;</span>;<br>        <span class="hljs-keyword">for</span> (ArcNode* arc = v-&gt;firstOut; arc; arc = arc-&gt;tailNext)<br>            std::cout &lt;&lt; arc-&gt;head &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;\n  Incoming: &quot;</span>;<br>        <span class="hljs-keyword">for</span> (ArcNode* arc = v-&gt;firstIn; arc; arc = arc-&gt;headNext)<br>            std::cout &lt;&lt; arc-&gt;tail &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 清理内存</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cleanup</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : vertices) &#123;<br>        <span class="hljs-keyword">while</span> (v-&gt;firstOut) &#123;<br>            ArcNode* tmp = v-&gt;firstOut;<br>            v-&gt;firstOut = tmp-&gt;tailNext;<br>            <span class="hljs-keyword">delete</span> tmp;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (v-&gt;firstIn) &#123;<br>            ArcNode* tmp = v-&gt;firstIn;<br>            v-&gt;firstIn = tmp-&gt;headNext;<br>            <span class="hljs-keyword">delete</span> tmp;<br>        &#125;<br>        <span class="hljs-keyword">delete</span> v;<br>    &#125;<br>    vertices.<span class="hljs-built_in">clear</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">addEdge</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">addEdge</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">addEdge</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">addEdge</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><br>    <span class="hljs-built_in">display</span>();<br><br>    <span class="hljs-built_in">cleanup</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>代码解释：</em></p><ul><li>我们定义了结构体<code>ArcNode</code>和<code>VertexNode</code>来表示图中的边和顶点</li><li>使用全局的<code>vertices</code>向量来存储图中的所有顶点</li></ul><p>例题</p><h3 id="题目描述">题目描述</h3><p>假设你是一家航空公司的数据分析师，你需要管理和分析航班与机场之间的关系。使用十字链表来存储航班信息。每个机场都可以有多个航班起飞和降落。设计一个系统，能够快速回答关于航班起降的查询。</p><h4 id="输入格式">输入格式</h4><ul><li>首先输入一个整数n，表示机场的数量</li><li>接着输入一个整数m，表示航班的数量</li><li>然后输入m行航班信息，每行包括起始机场和目的地机场编号</li></ul><h4 id="功能要求">功能要求</h4><ul><li>给定一个机场编号，查询从该机场起飞的所有航班的目的地机场。</li><li>给定一个机场编号，查询降落到该机场的所有航班的起始机场。</li><li>查询每个机场的出发航班数和到达航班数。</li></ul><h4 id="示例输入">示例输入</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">4</span>  <span class="hljs-comment">// 机场数量</span><br><span class="hljs-number">5</span>  <span class="hljs-comment">// 航班数量</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-number">4</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="示例输出">示例输出</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp">From airport <span class="hljs-number">1</span>:<br>  Departures to: <span class="hljs-number">2</span>, <span class="hljs-number">3</span><br>  Arrivals from: <span class="hljs-number">4</span><br>Departure count: <span class="hljs-number">2</span>, Arrival count: <span class="hljs-number">1</span><br><br>From airport <span class="hljs-number">2</span>:<br>  Departures to: <span class="hljs-number">3</span><br>  Arrivals from: <span class="hljs-number">1</span><br>Departure count: <span class="hljs-number">1</span>, Arrival count: <span class="hljs-number">1</span><br><br>From airport <span class="hljs-number">3</span>:<br>  Departures to: <span class="hljs-number">4</span><br>  Arrivals from: <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br>Departure count: <span class="hljs-number">1</span>, Arrival count: <span class="hljs-number">2</span><br><br>From airport <span class="hljs-number">4</span>:<br>  Departures to: <span class="hljs-number">1</span><br>  Arrivals from: <span class="hljs-number">3</span><br>Departure count: <span class="hljs-number">1</span>, Arrival count: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="代码示例">代码示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span><br>&#123;<br>    <span class="hljs-type">int</span> tail, head;<br>    ArcNode *tailnext, *headnext;<br>    <span class="hljs-built_in">ArcNode</span>(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> h) : <span class="hljs-built_in">tail</span>(t), <span class="hljs-built_in">head</span>(h), <span class="hljs-built_in">tailNext</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">headNext</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">VertexNode</span><br>&#123;<br>    <span class="hljs-type">int</span> id;<br>    ArcNode *firstOut, *firstIn;<br>    <span class="hljs-built_in">VertexNode</span>(<span class="hljs-type">int</span> v) : <span class="hljs-built_in">id</span>(v), <span class="hljs-built_in">firstOut</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">firstIn</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><br>map&lt;<span class="hljs-type">int</span>, VertexNode*&gt; airports;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addFlight</span><span class="hljs-params">(<span class="hljs-type">int</span> tail, <span class="hljs-type">int</span> head)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(airports.<span class="hljs-built_in">find</span>(tail) == airports.<span class="hljs-built_in">end</span>())<br>    &#123;<br>        airports[tail] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">VertexNode</span>(tail);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(airports.<span class="hljs-built_in">find</span>(head) == airports.<span class="hljs-built_in">end</span>())<br>    &#123;<br>        airports[head] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">VertexNode</span>(head);<br>    &#125;<br><br>    ArcNode* newArc = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArcNode</span>(tail, head);<br>    newArc-&gt;tailNext = airports[tail]-&gt;firstOut;<br>    airports[tail]-&gt;firstOut = newArc;<br>    newArc-&gt;headNext = airports[head]-&gt;firstIn;<br>    airports[head]-&gt;firstIn = newArc;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;v : airports)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;From airport&quot;</span> &lt;&lt; v.first &lt;&lt; <span class="hljs-string">&quot;:\n Departures to: &quot;</span>;<br>        <span class="hljs-keyword">for</span>(ArcNode* arc = v.second-&gt;firstOut; arc != <span class="hljs-literal">nullptr</span>; arc = arc-&gt;tailNext)<br>            cout &lt;&lt; arc-&gt;head &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;  Arrivals from: &quot;</span>;<br>        <span class="hljs-keyword">for</span>(ArcNode* arc = v.second-&gt;firstIn; arc != <span class="hljs-literal">nullptr</span>; arc = arc-&gt;headNext)<br>            cout &lt;&lt; arc-&gt;tail &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-type">int</span>  outCount = <span class="hljs-number">0</span>, inCount = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(ArcNode* arc = v.second-&gt;firstOut; arc; arc = arc-&gt;tailNext) outCount++;<br>        <span class="hljs-keyword">for</span>(ArcNode* arc = v.second-&gt;firstIn; arc; arc = arc-&gt;headNext) inCount++;<br>        cout &lt;&lt; <span class="hljs-string">&quot;\nDeparture count:&quot;</span> &lt;&lt; outCount &lt;&lt; <span class="hljs-string">&quot;, Arrival count: &quot;</span> &lt;&lt; inCount &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, u, v;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        cin &gt;&gt; u &gt;&gt; v;<br>        <span class="hljs-built_in">addFlight</span>(u, v);<br>    &#125;<br><br>    <span class="hljs-built_in">display</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS(够用版)</title>
    <link href="/2024/05/27/css/"/>
    <url>/2024/05/27/css/</url>
    
    <content type="html"><![CDATA[<h2 id="1-CSS简介">1 CSS简介</h2><h3 id="1-1-什么是CSS？">1.1 什么是CSS？</h3><p><code>CSS</code>: Cascading Style Sheet</p><p><em>为什么被命名为CSS？</em><br><em>级联（Cascading）：CSS的“级联”特性意味着当多个样式应用于同一个HTML元素时，这些样式会根据它们的来源（例如用户样式表、作者样式表或浏览器默认样式）和优先级（例如内联样式、ID选择器、类选择器等）来决定如何组合或覆盖。这种机制允许开发者在多个地方定义样式，而浏览器会根据一定的规则来确定最终应用于元素的样式。</em><br><em>样式表（Style Sheets）：CSS使用“样式表”的方式来组织样式信息。一个样式表包含了一组规则，每个规则都由一个或多个选择器和一条或多条声明组成。选择器用于指定哪些HTML元素应用该规则，而声明则指定了这些元素应该如何被渲染（例如颜色、字体、布局等）。</em></p><h3 id="1-2-CSS的作用">1.2 CSS的作用</h3><p>页面外观美化</p><p>布局和定位</p><h2 id="2-基本用法">2 基本用法</h2><h3 id="2-1-CSS语法">2.1 CSS语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        选择器&#123;</span><br><span class="language-css">            属性名:属性值;</span><br><span class="language-css">            属性名:属性值;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>选择器：要修饰的对象</li><li>属性名：修饰对象的属性</li><li>属性值：样式的取值</li></ul><p><em>没听懂？没关系，接着往后看就行</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>:<span class="hljs-number">#cccccc</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">h2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>:blue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>CSS从入门到入土<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-CSS应用方式">2.2 CSS应用方式</h3><ul><li>内部样式(internal styles)</li><li>行内样式(inline styles)</li><li>外部样式(external styles)</li></ul><h4 id="2-2-1-内部样式">2.2.1 内部样式</h4><p>也称为内嵌样式，在页面头部通过style标签定义</p><p>对当前页面所有符合样式选择器的标签都起作用</p><h4 id="2-2-2-行内样式">2.2.2 行内样式</h4><p>也称为嵌入样式，使用HTML标签的style属性定义</p><p>只对设置style属性的标签起作用</p><h3 id="2-2-3-外部样式">2.2.3 外部样式</h3><p>使用单独的<code>.css</code>文件定义，然后在页面中使用<code>link标签</code>或<code>@import指令</code>引入</p><ul><li>使用<code>link标签</code>链接外部样式文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;path/to/your/example.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><em>小提示：type可省略</em></p><ul><li><code>@import</code>指令导入外部样式文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;path/to/your/example.css&quot;</span>;</span><br><span class="language-css">    <span class="hljs-keyword">@import</span> url(path/to/your/example.css);</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-选择器">3 选择器</h2><h3 id="3-1-基础选择器">3.1 基础选择器</h3><h4 id="3-1-1-标签选择器">3.1.1 标签选择器</h4><p>也称为元素选择器，使用HTML标签作为选择器的名称</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">p &#123;  <br>    color: red;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-2-类选择器">3.1.2 类选择器</h4><p>使用自定义的名称，以<code>.</code>号作为前缀，然后通过HTML标签的class属性调用类选择器</p><p><em>注意</em><br></p><ul><li>调用时不能添加<code>.</code>号；</li><li>同时调用多个类选择器时，用<code>空格</code>分割</li><li>类选择器名称不能以<code>数字</code>开头</li></ul><h4 id="3-1-3-ID选择器">3.1.3 ID选择器</h4><p>使用自定义的名称，以<code>#</code>作为前缀，然后通过HTML标签的id属性进行名称匹配</p><p>ID属性是一对一的关系</p><h3 id="3-2-复杂选择器">3.2 复杂选择器</h3><h4 id="3-2-1-复合选择器">3.2.1 复合选择器</h4><p>标签选择器和类选择器、标签选择器和ID选择器一起使用</p><p>必须同时满足两个条件才能应用样式</p><ul><li><p>交集选择器</p><ul><li>语法：E.F</li><li>例子：<code>p.intro</code>将选择所有既是<code>&lt;p&gt;</code>元素又拥有<code>intro</code>类的元素</li></ul></li><li><p>并集选择器</p><ul><li>语法：E,f</li><li>例子：<code>h1,h2&#123;color:blue;&#125;</code>将选择所有的<code>&lt;h1&gt;</code>和<code>&lt;h2&gt;</code>元素，并将他们的颜色设为蓝色</li></ul></li></ul><h4 id="3-2-2-组合选择器">3.2.2 组合选择器</h4><p>组合选择器描述了元素之间的关系，如父子关系、兄弟关系等，允许开发者更精准的选择元素</p><ul><li><p>后代选择器</p><ul><li>符号：空格</li><li>例子: <code>div p</code>将选择所有<code>&lt;div&gt;</code>元素内部的<code>&lt;p&gt;</code>元素</li></ul></li><li><p>子元素选择器</p><ul><li>符号： &gt;</li><li>例子： <code>ul&gt;li</code>将选择所有<code>ul</code>元素内部的直接子元素<code>li</code></li></ul></li><li><p>相邻兄弟选择器</p><ul><li>符号：<code>+</code></li><li>例子：<code>h2+p</code>将选择紧接在<code>&lt;h2&gt;</code>元素后面的<code>&lt;p&gt;</code>元素</li></ul></li><li><p>通用兄弟选择器</p><ul><li>符号：<code>~</code></li><li>例子：<code>h2~p</code>将选择所有与<code>&lt;h2&gt;</code>元素在同一层级的<code>&lt;p&gt;</code>元素</li></ul></li></ul><h4 id="3-2-3-嵌套组合器">3.2.3 嵌套组合器</h4><p>嵌套组合器允许在一个选择器的内部定义另一个选择器，以形成嵌套的样式规则</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/* 1.标签选择器和类选择器合起来使用----复合选择器 */</span></span><br><span class="language-css"><span class="hljs-selector-tag">h1</span><span class="hljs-selector-class">.aaa</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 1.标签选择器和ID选择器合起来使用----复合选择器 */</span></span><br><span class="language-css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-id">#bbb</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:blue;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 2.组合选择器 */</span></span><br><span class="language-css"><span class="hljs-selector-tag">h1</span>,<span class="hljs-selector-tag">p</span>,<span class="hljs-selector-tag">div</span>,<span class="hljs-selector-tag">span</span>,<span class="hljs-selector-class">.ccc</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>:<span class="hljs-number">30px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">background</span>:violet;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.ccc</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-weight</span>:bold;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.first</span> + <span class="hljs-selector-class">.second</span> &#123;  </span><br><span class="language-css">    <span class="hljs-attribute">color</span>: red;  </span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.first</span> ~ <span class="hljs-selector-tag">p</span> &#123;  </span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: lightblue;  </span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 3.嵌套选择器 */</span></span><br><span class="language-css"><span class="hljs-comment">/* div p&#123;</span></span><br><span class="hljs-comment"><span class="language-css">color:green;</span></span><br><span class="hljs-comment"><span class="language-css">text-decoration:underline;</span></span><br><span class="hljs-comment"><span class="language-css">&#125; */</span></span><br><span class="language-css"><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:green;</span><br><span class="language-css"><span class="hljs-attribute">text-decoration</span>:underline;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">h3</span><span class="hljs-selector-class">.ddd</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需求：只想修饰class属性为aaa的h1标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aaa&quot;</span>&gt;</span>welcome<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aaa&quot;</span>&gt;</span>css<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 我要修饰ID属性为bbb的p标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bbb&quot;</span>&gt;</span>world&lt;/p &gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>html<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bbb&quot;</span>&gt;</span>主讲：叽叽<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 给h1、p、div、span标签中的内容设置字号为30px --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>WEB开发<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ccc&quot;</span>&gt;</span>JAVA开发<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需求：修饰div内部的p标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>div内部的p标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>div内部的h3标签<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>div内部的h3内部的p标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需求：修饰div内部的class为ddd的标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>div内部的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ddd&quot;</span>&gt;</span>div内部的h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ddd&quot;</span>&gt;</span>PPPP<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ddd&quot;</span>&gt;</span>h3h3h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需求：修饰div内部class为first的标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;first&quot;</span>&gt;</span>我是第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;second&quot;</span>&gt;</span>我是相邻的段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;third&quot;</span>&gt;</span>我不是相邻的段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="伪类选择器">伪类选择器</h4><p>根据不同的状态显示不同的样式，一般用于标签</p><p>四种状态：<br>* <code>:link</code>：未访问的链接<br>* <code>:visited</code>：已访问的链接<br>* <code>:hover</code>：鼠标悬浮在链接上，即移动在链接上<br>* <code>:active</code>：选定的链接，被激活</p><p><em>注意：默认超链接为：蓝色，不划线</em></p><h3 id="3-3-选择器优先级">3.3 选择器优先级</h3><h4 id="3-3-1-优先级">3.3.1 优先级</h4><p>行内样式 &gt; ID选择器 &gt; class选择器 &gt; 标签选择器</p><p><em>原因：首先加载标签选择器，再加载类选择器 ，然后加载ID选择器，最后加载行内样式</em><br><em>后加载会覆盖先加载的同名样式</em></p><h4 id="3-3-2-内外部样式加载顺序">3.3.2 内外部样式加载顺序</h4><p>就近原则<s>英语的DNA动了</s></p><p><em>原因和上诉一样，在同优先级的前提下，后加载的会覆盖先加载的同名样式，所以离得越近越优先</em></p><h4 id="3-3-3-important">3.3.3 !important</h4><p>可以使用<code>!important</code>使某个样式有最高的优先级</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red !important;&quot;</span>&gt;</span>这段文字是红色的，因为使用了 !important。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-常见CSS属性">4 常见CSS属性</h2><h3 id="4-1-字体属性">4.1 字体属性</h3><p>设置字体相关的样式</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">含义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">font-size</td><td style="text-align:left">大小、尺寸</td><td style="text-align:left">可以使用多种单位</td></tr><tr><td style="text-align:left">font-weight</td><td style="text-align:left">粗细</td><td style="text-align:left">取值:normal,bold,自定义</td></tr><tr><td style="text-align:left">font-family</td><td style="text-align:left">字体</td><td style="text-align:left">系统中要安装指定的字体</td></tr><tr><td style="text-align:left">font-style</td><td style="text-align:left">样式</td><td style="text-align:left">取值：normal,italic</td></tr><tr><td style="text-align:left">font</td><td style="text-align:left">简写</td><td style="text-align:left"></td></tr></tbody></table><p>简写属性：font:font-style|font-weight|font-size|font-family<br>必须按照次顺序书写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css"><span class="hljs-comment">/*font-size: 20px;*/</span></span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">80%</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.hello</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">62.5%</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css"><span class="hljs-comment">/*font-size: 30px;</span></span><br><span class="hljs-comment"><span class="language-css">font-weight: bold;</span></span><br><span class="hljs-comment"><span class="language-css">font-family: 华文行楷,宋体,黑体;</span></span><br><span class="hljs-comment"><span class="language-css">font-style: italic;*/</span></span><br><span class="language-css"><span class="hljs-attribute">font</span>: italic bold <span class="hljs-number">30px</span> 微软雅黑;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>CSS从入门到入土<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>我的DIV<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>CSS从入门到精通<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>嘿嘿<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-2-文本属性">4.2 文本属性</h3><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">含义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">color</td><td style="text-align:left">颜色</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">line-height</td><td style="text-align:left">行高</td><td style="text-align:left">行之间的高度</td></tr><tr><td style="text-align:left">text-align</td><td style="text-align:left">水平对齐方式</td><td style="text-align:left">取值：left、center、right</td></tr><tr><td style="text-align:left">vertical-align</td><td style="text-align:left">垂直对齐方式</td><td style="text-align:left">取值：top、middle、bottom</td></tr><tr><td style="text-align:left">text-indent</td><td style="text-align:left">首行缩进</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">text-decoration</td><td style="text-align:left">文本修饰</td><td style="text-align:left">取值：underline、overline、line-through</td></tr><tr><td style="text-align:left">text-transform</td><td style="text-align:left">字母大小写转换</td><td style="text-align:left">取值：lowercase、uppercase、capitalize(首字母大写)</td></tr><tr><td style="text-align:left">letter-spacing</td><td style="text-align:left">字符间距</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">word-spacing</td><td style="text-align:left">单词间距</td><td style="text-align:left">只对英文有效</td></tr><tr><td style="text-align:left">white-space</td><td style="text-align:left">空白的处理方法</td><td style="text-align:left">文本超出后是否换行，取值：nowrap(截断)</td></tr></tbody></table><h3 id="4-3-背景属性">4.3 背景属性</h3><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">含义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">background-color</td><td style="text-align:left">背景颜色</td><td style="text-align:left">取值：transparent(透明)</td></tr><tr><td style="text-align:left">background-image</td><td style="text-align:left">背景图片</td><td style="text-align:left">必须用url()方式指定图片的路径</td></tr><tr><td style="text-align:left">background-repeat</td><td style="text-align:left">背景图片的重复方式</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">background-position</td><td style="text-align:left">背景图片的显示位置</td><td style="text-align:left">取值：top、bottom、left、right、center、坐标(左上角(0,0)为坐标，向右为x正方向，向下为y正方向)</td></tr><tr><td style="text-align:left">background-attachment</td><td style="text-align:left">背景图片是否跟随滚动</td><td style="text-align:left">取值：scroll(默认)、fixed</td></tr><tr><td style="text-align:left">background</td><td style="text-align:left">简写</td><td style="text-align:left"></td></tr></tbody></table><p>简写属性：background:background-color|background-image|background-repeat|background-position</p><p>以空格隔开，书写顺序没有要求</p><h3 id="4-4-列表属性">4.4 列表属性</h3><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">含义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">list-style-type</td><td style="text-align:left">设置列表前的标记</td><td style="text-align:left">取值:none、disc、circle、square、decimal</td></tr><tr><td style="text-align:left">list-style-image</td><td style="text-align:left">将图片作为列表前的标记</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">list-style-position</td><td style="text-align:left">设置标记的位置</td><td style="text-align:left">取值：outside(默认)、inside</td></tr><tr><td style="text-align:left">list-style</td><td style="text-align:left">简写</td><td style="text-align:left"></td></tr></tbody></table><p>简写属性：list-style:list-style-type|list-style-image|list-style-position</p><p>书写顺序没有要求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/* li&#123;</span></span><br><span class="hljs-comment"><span class="language-css">list-style-type:decimal;</span></span><br><span class="hljs-comment"><span class="language-css">&#125; */</span></span><br><span class="language-css"><span class="hljs-selector-class">.first</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style-type</span>:circle;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.second</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">../images/male.gif</span>);</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.third</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style-type</span>:circle;</span><br><span class="language-css"><span class="hljs-attribute">list-style-position</span>:inside;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.fourth</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style</span>:circle <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/female.gif</span>)inside;</span><br><span class="language-css"><span class="hljs-comment">/* list-style:none; */</span></span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.nav</span>&#123;</span><br><span class="language-css"><span class="hljs-comment">/* list-style:none;</span></span><br><span class="hljs-comment"><span class="language-css">float:left; */</span></span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style</span>:none;</span><br><span class="language-css"><span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;</span><br><span class="language-css"><span class="hljs-attribute">width</span>:<span class="hljs-number">70px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;first&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;second&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;third&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fourth&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>新闻<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>小说<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>艾瑞蒂<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>政治<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学习<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-5-表格属性">4.5 表格属性</h3><p>border-collapse:表格中相邻的边框是否合并(折叠)为单一边框</p><p>取值：separated(默认) collapse</p><h2 id="5-盒子模型">5 盒子模型</h2><h3 id="5-1-简介">5.1 简介</h3><p>盒子模型是网页布局的基础，将页面中所有元素都看作是一个盒子，盒子都包含以下几个属性：</p><ul><li>width 宽度</li><li>height 高度</li><li>border 边框</li><li>padding 内边距</li><li>margin 外边距</li></ul><h3 id="5-2-盒子模型">5.2 盒子模型</h3><h4 id="5-2-1-border">5.2.1 border</h4><p>表示盒子的边框</p><p>分为四个方向：<br>* 上top、右right、下bottom、左left<br>* border-top、border-right、border-bottom、border-left</p><p>每个边框包含三种样式</p><pre><code class="hljs">* border-top-color,border-top-width,border-top-style* border-right-color,border-right-width,border-right-style* border-left-color,border-left-width,border-left-style* border-bottom-color,border-bottom-width,border-bottom-style</code></pre><p>style的取值：<br>* solid 实线<br>* dashed 虚线<br>* dotted 点线<br>* double 双线<br>* inset 内嵌的3D线<br>* outset 外嵌的3D线</p><p>简写，三种方式</p><pre><code class="hljs">* 按方向简写：    - border-top    - border-right    - border-bottom    - border-left    - 书写顺序：border-顺序:width style coloe* 按样式简写    - border-color    - border-width    - border-style    - 书写顺序：border-样式:top right bottom left    - 必须按顺时针方向书写* 终极简写：    如果四个边框样式完全相同，border:width style color</code></pre><h4 id="5-2-2-padding">5.2.2 padding</h4><p>表示盒子的内边距，即内容与边框之间的距离</p><p>同样也分为四个方向，也可以简写(按顺时针方向，默认上下一样，左右一样)</p><p>注意：如果上下冲突，则以上为准，左右冲突则以左为准</p><h4 id="5-2-3-margin">5.2.3 margin</h4><p>表示盒子的外边距，即盒子与盒子之间的距离</p><p>同样也分为四个方向，也可以简写(按顺时针方向，默认上下一样，左右一样)</p><h3 id="5-3-其他">5.3 其他</h3><h4 id="5-3-1-元素所占空间">5.3.1 元素所占空间</h4><p>页面中的元素实际所占的空间<br>* 宽度＝width+左右padding＋左右border+左右margin<br>* 高度＝height+上下padding＋上下border+上下margin</p><h4 id="5-3-2-盒子属性默认值">5.3.2 盒子属性默认值</h4><p>不同标签的盒子属性默认值可能不同，需要自己设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">body,ul,ol,dl,li&#123;<br>    margin:0;<br>    padding:0;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-3-3-外边距的合并">5.3.3 外边距的合并</h4><p>也称为外边距的折叠，指的是两个块级元素垂直外边距相遇时它们将合并为一个外边距</p><p>两种情况：<br>* 当一个元素出现在另一个元素上面时，第一个元素的下边距与第二个元素的上边距会发生合并<br>* 当一个元素包含在另一个元素中时，并且没有内边距或边框把外边距分隔开时，两个元素的上外边距会发生合并</p><p><em>好处：更加美观</em></p><h2 id="6-定位方法">6 定位方法</h2><h3 id="6-1-简介">6.1 简介</h3><p>通过position属性实现对元素的定位，有四种定位方法</p><p>常用取值：</p><table><thead><tr><th style="text-align:left">取值</th><th style="text-align:left">含义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">static</td><td style="text-align:left">默认值</td><td style="text-align:left">按照常规文档流进行显示</td></tr><tr><td style="text-align:left">relative</td><td style="text-align:left">相对定位</td><td style="text-align:left">相对于标签原来的位置进行的定位</td></tr><tr><td style="text-align:left">absolute</td><td style="text-align:left">绝对定位</td><td style="text-align:left">相对于第一个非static定位的父标签的定位</td></tr><tr><td style="text-align:left">fixed</td><td style="text-align:left">固定定位</td><td style="text-align:left">相对于浏览器窗口进行定位</td></tr></tbody></table><p>说到这里，你可能没听懂。所以我尝试用更通俗的语言再说一遍：</p><ul><li>static<ul><li>这是元素默认的状态。元素会按照从上到下、从左到右的顺序排列在页面中。</li><li>不能使用top、right、bottom、left这些属性来移动元素的位置。</li></ul></li><li>relative<ul><li>元素仍然会占据原本的位置，但你可以通过top、right、bottom、left这些属性让它在自己的位置上“移动”一点。</li><li>元素原本的位置依然保留，占据空间不变，只是视觉上会稍微移动。</li></ul></li><li>fixed<ul><li>元素会固定在浏览器窗口的某个位置，不管你怎么滚动页面，它都不会动。</li><li>用来制作那些始终显示在某个位置的元素，比如导航栏或广告。</li></ul></li><li>absolute<ul><li>元素会相对于它的父元素进行定位，而这个父元素必须是用相对定位（relative）或绝对定位（absolute）来设置的。如果没有这样的父元素，它就会相对于整个页面定位。</li><li>元素会脱离正常的排列顺序，你可以完全控制它在页面中的位置。</li></ul></li></ul><p><em>举个例子</em><br>想象你在桌子上拜访物品<br>* static：所有物品都按固定的顺序摆放，不能随意移动。<br>* relative：你可以在桌子上的原位稍微移动某个物品，但它还是在桌子上那个位置。<br>* fixed：你把物体用绳子从天花板吊着，不管你移动桌子上的其他物品或桌子，它都不会动。<br>* absolute：你可以把物品放在桌子上的任何位置，不考虑它原本的摆放顺序，就像你可以在桌子上任意摆放东西。</p><p>设置定位方式后，还要设置定位属性：top,bottom,left,right</p><h3 id="6-2-z-index">6.2 z-index</h3><p>设置元素定位方式后，元素会浮在页面上方，此时可以通过z-index属性设置优先级，控制元素的堆叠排序</p><p>取值为数字，值越大优先级越高，默认为auto(大多数浏览器默认为0)</p><p>注意：只能给非static定位的元素设置z-index属性</p><h2 id="7-其他css属性">7 其他css属性</h2><h3 id="7-1-浮动和清除">7.1 浮动和清除</h3><h4 id="7-1-1-浮动属性">7.1.1 浮动属性</h4><p>通过float属性来实现元素的浮动，可以让块级元素脱离常规的文档流，向左或向右移动，在同一行显示</p><p>如果一行显示不下，则会换行</p><p>常用取值：<br>* left<br>* right<br>* none</p><h4 id="7-1-2-清除属性">7.1.2 清除属性</h4><p>通过clear属性来实现清除，设置元素的哪一侧不允许有浮动元素</p><p>常用取值：<br>* left<br>* right<br>* both<br>* none(默认取值)</p><h3 id="7-2-元素的显示和隐藏">7.2 元素的显示和隐藏</h3><h4 id="7-2-1-display">7.2.1 display</h4><p>通过display属性设置元素是否显示，以及是否独占一行</p><p>常用取值：</p><table><thead><tr><th style="text-align:left">取值</th><th style="text-align:left">含义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">none</td><td style="text-align:left">不显示</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">inline</td><td style="text-align:left">显示为内联元素，行级元素的默认值</td><td style="text-align:left">将块级元素变为行级元素，不在独占一行</td></tr><tr><td style="text-align:left">block</td><td style="text-align:left">显示为块级元素，块级元素的默认值</td><td style="text-align:left">将行级元素变为块级元素，独占一行</td></tr><tr><td style="text-align:left">inline-block</td><td style="text-align:left">显示为内联元素，但是可以设置宽和高</td><td style="text-align:left">在inline基础上允许设置宽度和高度</td></tr></tbody></table><h4 id="7-2-2-visibility">7.2.2 visibility</h4><p>常用属性</p><table><thead><tr><th style="text-align:left">取值</th><th style="text-align:left">含义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">visibility</td><td style="text-align:left">显示</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">hidden</td><td style="text-align:left">隐藏</td><td style="text-align:left"></td></tr></tbody></table><h4 id="7-2-3-区别">7.2.3 区别</h4><pre><code class="hljs">* display隐藏时不再占据页面中的空间，后面的元素会占据其位置* visibility隐藏时会占据页面中的空间，位置还保留在页面中，知识不显示</code></pre><h3 id="7-3-轮廓">7.3 轮廓</h3><h4 id="7-3-1-简介">7.3.1 简介</h4><p>轮廓outline，用于在元素周围绘制一个轮廓，位于border外围，可以突出显示元素</p><h4 id="7-3-2-基本用法">7.3.2 基本用法</h4><p>常用属性：<br>* outline-width：轮廓宽度<br>* outline-color：轮廓颜色<br>* outline-style：轮廓样式<br>* outline 简写</p><p>在浏览器中，当鼠标单击或者使用<kbd>TAB<kbd>键获得焦点时，该元素会有一个轮廓outline</p><ul><li>优点：可以提高使用表单的用户体验</li><li>缺点：有时影响美观</li></ul><h2 id="8-页面布局">8 页面布局</h2><h3 id="8-1-简介">8.1 简介</h3><p>常见布局页面：<br><br>* 表格布局<br><br>* div布局</p><h3 id="8-2-表格布局">8.2 表格布局</h3><h4 id="8-2-1-简介">8.2.1 简介</h4><p>不适用于复杂布局，仅用于简单、有规则的结构</p><p>定位相对准确，与浏览器基本无关，适用于简单分割</p><h4 id="8-2-2-用法">8.2.2 用法</h4><p>table常用样式的属性</p><pre><code class="hljs">* border在表格外围设置边框* border-spacing设置单元格之间的距离(相当于table标签中的cellspacing属性，即间距)* border-collapse表格中相邻边框是否合并，取值：separate，collapse</code></pre><h3 id="8-3-div布局">8.3 div布局</h3><p>定位绝对准确，使用灵活，适用于复杂的布局方式</p><h4 id="8-3-1-简单布局">8.3.1 简单布局</h4><p>两种形式：</p><pre><code class="hljs">* 1-1-1布局</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style1.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>header<br><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>main<br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>footer<br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">* 1-2 / 3-1布局</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style2.css&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>herder<br><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>main<br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span><br>right aside<br><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>footer<br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="8-3-2-圣杯布局">8.3.2 圣杯布局</h4><p>页面结构，两边的边栏宽度固定，中间主体在一定范围内可自适应，并且主体优先被加载</p><p>一般防止页面缩放影响浏览，都会为页面设置一个最小宽度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style4.css&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span> <br>            header <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>main<br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span> <br>left<br><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span> <br>right<br><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span> <br>            footer <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="8-3-3-双飞翼布局">8.3.3 双飞翼布局</h4><p>源自淘宝的UED(用户体验设计)团队</p><p>双飞翼布局和圣杯布局要实现的效果是相同的，只是思路不同</p><p>圣杯布局和双飞翼布局的区别</p><p>双飞翼布局比圣杯布局多创建一个div</p><p>双飞翼布局不用设置内边距和相对定位，也不用设置偏移量</p><p>双飞翼布局使用的margin,圣杯布局使用的是padding</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style5.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>            header <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main-wrapper&quot;</span>&gt;</span><br>                    main <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>                left aside<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>                right aside <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>            footer <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web前端</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bootstrap</title>
    <link href="/2024/05/26/Bootstrap/"/>
    <url>/2024/05/26/Bootstrap/</url>
    
    <content type="html"><![CDATA[<img src="/images/Bootstrap.webp" alt="Bootstrap"><p>I found that many tutorials on Bootstrap are incomplete,and the transformation is not well,thus I visited w3school and to make sure the accuracy of this text,I decided to write it in English.</p><h2 id="1-Introduction">1 Introduction</h2><h3 id="1-1-What-is-Bootstrap">1.1 What is Bootstrap?</h3><ul><li>Bootstrap is a free front-end framework for faster and easier web development</li><li>Bootstrap includes HTML and CSS based design templates for typography, forms, buttons, tables, navigation, modals, image carousels and many other, as well as optional JavaScript plugins</li><li>Bootstrap also gives you the ability to easily create responsive designs</li></ul><p>What is Responsive Web Design?<br><em>Responsive web design is about creating web sites which automatically adjust themselves to look good on all devices, from small phones to large desktops.</em></p><h3 id="1-2-First-Web">1.2 First Web</h3><h4 id="1-2-1-Add-tthe-HTML5-doctype">1.2.1 Add tthe HTML5 doctype</h4><p>Bootstrap 5 uses HTML elements and CSS properties that require the HTML5 doctype.</p><p>Always include the HTML5 doctype at the beginning of the page, along with the lang attribute and the correct title and character set:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap 5 Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-2-2-Bootstrap-5-is-mobile-first">1.2.2 Bootstrap 5 is mobile-first</h4><p>Bootstrap 5 is designed to be responsive to mobile devices. Mobile-first styles are part of the core framework.</p><p>To ensure proper rendering and touch zooming, add the following <code>&lt;meta&gt;</code> tag inside the <code>head</code> element:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>function:</p><ul><li><code>width=device-width</code>:sets the width of the page to follow the screen-width of the device (which will vary depending on the device).</li><li><code>initial-scale=1</code>: sets the initial zoom level when the page is first loaded by the browser.</li></ul><h2 id="2-Containers">2 Containers</h2><p>There are two main containers:</p><ul><li><code>.container</code> class: provides a responsive fixed with container</li><li><code>.container-fluid</code> class:proveides a full width container,spanning the entire width of the viewport</li></ul><h3 id="2-1-Fixed-container">2.1 Fixed container</h3><p>Use the <code>.container</code> class to create a responsive,fixed-width container.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My First Bootstrap Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is some text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-Fluid-container">2.2 Fluid container</h3><p>Use the <code>.container-fluid</code> class to create a full width container,that will always span the entire width of the screen(width is always 100%)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My First Bootstrap Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is some text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-Container-padding">2.3 Container padding</h3><p>By default, containers have left and right padding, with no top or bottom padding. Therefore, we often use spacing utilities, such as extra padding and margins to make them look even better. For example, <code>.pt-5</code> means “add a large top padding”:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container pt5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-Container-border-and-color">2.4 Container border and color</h3><h3 id="2-5-Responsive-containers">2.5 Responsive containers</h3><p>You can also use the <code>.container-sm|md|lg|xl</code> classes to determine when the container should be responsive.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-sm&quot;</span>&gt;</span>.container-sm<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-md&quot;</span>&gt;</span>.container-md<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-lg&quot;</span>&gt;</span>.container-lg<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-xl&quot;</span>&gt;</span>.container-xl<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-xxl&quot;</span>&gt;</span>.container-xxl<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-Grid-system">3 Grid system</h2><p>The Bootstrap 5 grid system has six classes:</p><ul><li>.col-(extra small devices - screen width &lt; 576px)</li><li>.col-sm-(small devices - screen width equal &gt;= than 576px)</li><li>.col-md-(medium devices - screen width &gt;= 768px)</li><li>.col-lg-(large devices - screen width &gt;= 992px)</li><li>.col-xl-(xlarge devices - screen width &gt;= 1200px)</li><li>.col-xxl-(xxlarge devices - screen width &gt;= 1400px)</li></ul><p>The classes above can be combined to create more dynamic and flexible layouts.</p><p><em>Each class scales up, so if you want to set the same widths for <code>sm</code> and <code>md</code>,you only need to specify <code>sm</code></em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Grid Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Link Bootstrap CSS --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span>//col-sm-4 specifies that on a small screen, this column will take up a quarter of the width of one of the 12 columns. On a large screen, it will remain the same width if no other class name is specified to override the style.<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-primary text-white p-3&quot;</span>&gt;</span>Column 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>//bg-primary:It is usually the most prominent colour in the page theme and is used to highlight important elements. In Bootstrap, the default primary colour is blue (#007bff).<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-secondary text-white p-3&quot;</span>&gt;</span>Column 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>//bg-secondary:Usually used to complement the primary colour and provide an extra element of colour to the page. The default secondary colour is grey (#6c757d).<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-success text-white p-3&quot;</span>&gt;</span>Column 3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>//bg-success:The colour used when indicating a successful or positive action. The default success colour is green (#28a745).<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Link Bootstrap JS (Optional) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-Text-Typography">4 Text/Typography</h2><h3 id="4-1-h1-to-h6">4.1 <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code></h3><ul><li><p>Bootstrap 5 styles HTML headings (<code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code>)  with a bolder font-weight and a responsive font-size.</p></li><li><p>You can also use .h1 to .h6 classes on other elements to make them behave as headings if you want:</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>h1 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h2&quot;</span>&gt;</span>h2 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h3&quot;</span>&gt;</span>h3 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h4&quot;</span>&gt;</span>h4 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h5&quot;</span>&gt;</span>h5 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h6&quot;</span>&gt;</span>h6 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-2-Display-Headings">4.2 Display Headings</h3><p>Display headings are used to stand out more than normal headings (larger font-size and lighter font-weight), and there are six classes to choose from: <code>.display-1</code> to <code>.display-6</code></p><h3 id="4-3-small">4.3 <small></h3><p>In Bootstrap 5 the HTML <code>&lt;small&gt;</code> element (and the <code>.small</code> class) is used to create a smaller, secondary text in any heading:</p><h3 id="4-4-mark">4.4 <mark></h3><p>Bootstrap 5 will style <code>&lt;mark&gt;</code> and <code>.mark</code> with a yellow background color and some padding</p><h3 id="4-5-abbr">4.5 <abbr></h3><p>Bootstrap 5 will style the HTML <code>&lt;abbr&gt;</code> element with a dotted border bottom and a cursor with question mark on hover</p><h3 id="4-6-blockquote">4.6 <blockquote></h3><p>Add the <code>.blockquote</code> class to a <code>&lt;blockquote&gt;</code> when quoting blocks of content from another source. And when naming a source, like “from WWF’s website”, use the .blockquote-footer class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container mt-3&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Blockquotes<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The blockquote element is used to present content from another source:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blockquote&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>For 50 years, WWF has been protecting the future of nature. The world&#x27;s leading conservation organization, WWF works in 100 countries and is supported by 1.2 million members in the United States and close to 5 million globally.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blockquote-footer&quot;</span>&gt;</span>From WWF&#x27;s website<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-6-dl">4.6 <dl></h3><p><code>&lt;dl&gt;</code>:describtion list</p><h3 id="4-7-code">4.7 <code></h3><p>Inline snippets of code should be embedded in the code element</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">p&gt;The following HTML elements: <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>section<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>, and <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> defines a section in a document.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-8-kbd">4.8 <kbd></h3><p>To indicate input that is typically entered via the keyboard, use the kbd element</p><h3 id="4-9-pre">4.9 <pre></h3><p>Text in a pre elementis displayed in a fixed-width font,and it preserves both spaces and line breaks.</p><h3 id="4-10-more">4.10 more</h3><img src="/images/TypographyClass.png" alt="More Typography Classes"><ul><li>initialism<ul><li>Display the text inside an <code>&lt;abbr&gt;</code> element</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>  &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;<br>  &lt;link href=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>  &lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;container mt-3&quot;</span>&gt;<br>  &lt;h2&gt;Typography&lt;/h2&gt;<br>  &lt;p&gt;The &lt;abbr title=<span class="hljs-string">&quot;World Health Organization&quot;</span>&gt;WHO&lt;/abbr&gt; was founded in <span class="hljs-number">1948.</span> (normal abbr)&lt;/p&gt;      <br>  &lt;p&gt;The &lt;abbr title=<span class="hljs-string">&quot;World Health Organization&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;initialism&quot;</span>&gt;WHO&lt;/abbr&gt; was founded in <span class="hljs-number">1948.</span> (slightly smaller abbr)&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><ul><li><p>list-unstyled</p><ul><li>Removes the default list-style and left margin on list items (works on both <code>&lt;ul&gt;</code> and <code>&lt;ol&gt;</code>). This class only applies to immediate children list items (to remove the default list-style from any nested lists, apply this class to any nested lists as well)</li></ul></li><li><p>list-inline</p><ul><li>Places all list items on a single line(used together with <code>.list-inline-item</code> on each <code>&lt;li&gt;</code> elements)</li></ul></li></ul><h2 id="5-Tables">5 Tables</h2><h3 id="5-1-Basic-Table">5.1 Basic Table</h3><p>The <code>.table</code> class adds basic styling to a table:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>  &lt;title&gt;Bootstrap Example&lt;/title&gt;<br>  &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>  &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;<br>  &lt;link href=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>  &lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;container mt-3&quot;</span>&gt;<br>  &lt;h2&gt;Basic Table&lt;/h2&gt;<br>  &lt;p&gt;The .table <span class="hljs-keyword">class</span> adds basic <span class="hljs-built_in">styling</span> (light padding <span class="hljs-keyword">and</span> horizontal dividers) to a table:&lt;/p&gt;            <br>  &lt;table <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;<br>    &lt;thead&gt;<br>      &lt;tr&gt;<br>        &lt;th&gt;Firstname&lt;/th&gt;<br>        &lt;th&gt;Lastname&lt;/th&gt;<br>        &lt;th&gt;Email&lt;/th&gt;<br>      &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;John&lt;/td&gt;<br>        &lt;td&gt;Doe&lt;/td&gt;<br>        &lt;td&gt;john@example.com&lt;/td&gt;<br>      &lt;/tr&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;Mary&lt;/td&gt;<br>        &lt;td&gt;Moe&lt;/td&gt;<br>        &lt;td&gt;mary@example.com&lt;/td&gt;<br>      &lt;/tr&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;July&lt;/td&gt;<br>        &lt;td&gt;Dooley&lt;/td&gt;<br>        &lt;td&gt;july@example.com&lt;/td&gt;<br>      &lt;/tr&gt;<br>    &lt;/tbody&gt;<br>  &lt;/table&gt;<br>&lt;/div&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="Other-classes">Other classes</h3><img src="/images/Bootstrap_table.png">]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bootstrap</tag>
      
      <tag>web前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery入门</title>
    <link href="/2024/05/25/jQuery/"/>
    <url>/2024/05/25/jQuery/</url>
    
    <content type="html"><![CDATA[<head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="ie=edge">    <title>Document</title>    <script src="https://cdn.jsdelivr.net/npm/mermaid@10.6.1/dist/mermaid.min.js"></script>    <script>    window.onload=mermaid.initialize({"theme": "forest"});    </script></head><p>本文主要从jQuery简介、核心函数、核心对象三方面介绍jQuery</p><p>文章可能有点长，但要相信干货满满</p><p><s>而不是某Dumpling太啰嗦了</s></p><h2 id="0-前言">0.前言</h2><p>可能对于刚学web前端的同学(比如我)来说，学了很多东西，但是对于他们的内在联系不太清晰。所以在jQuery入门之前我想先梳理一下他们的关系</p><p>话不多说，先上图</p><div class="mermaid">        graph TD;    HTML[HTML<br>网页结构] --> CSS[CSS<br>网页样式];    HTML --> JS[JavaScript<br>动态交互];    JS --> jQuery[jQuery<br>简化JS操作];    JS --> Bootstrap[Bootstrap<br>响应式设计];    CSS --> Bootstrap;    jQuery --> Bootstrap;    classDef someclass fill:#f9f,stroke:#333,stroke-width:2px;    class HTML,CSS,JS,jQuery,Bootstrap someclass;</div><ul><li><p><code>HTML(HyperText Markup Language)</code>:</p><ul><li>是用来构建网站的基础，定义网页的结构和内容。</li><li>你可以把它想象成建筑的骨架</li></ul></li><li><p><code>CSS(Cascading Style Sheets)</code>:</p><ul><li>用于设置网页布局和样式，比如字体(font)、颜色(color)和间距(padding)等。</li><li>CSS像是给网页穿上衣服，让结构更美观</li></ul></li><li><p><code>JavaScript</code>:</p><ul><li>是一种程序语言，用于添加网页的动态功能，如响应用户的点击、数据更新等。</li><li>他让网页有了动起来的能力。</li></ul></li><li><p><code>jQuery</code>：</p><ul><li>是一个<code>JavaScript</code>的库，简化<code>JavaScript</code>的编程。</li><li>比如，他让文档操作、事件处理、动画等更容易实现</li><li><code>jQuery</code>就像一个工具包，帮你更好使用<code>JavaScript</code>。</li></ul></li><li><p><code>BootStrap</code>:</p><ul><li>一个前端框架，包含了<code>HTML</code>、<code>CSS</code>和<code>JavaScript</code>的组件。</li><li>提供了一套预设的样式和功能，可以快速帮你开发响应式和移动优先的网页</li><li><code>BootStrap</code>就像一个建筑工具包，里面有各种模块和工具，让建筑(网页)更快速的搭建起来</li></ul></li></ul><h2 id="1-jQuery简介">1 jQuery简介</h2><h3 id="1-1-jQuery简介">1.1 jQuery简介</h3><p><s>虽然感觉不会有人喜欢看定义但还是感觉要写</s></p><ul><li><p>jQuery 是一个 JavaScript 函数库。</p></li><li><p>jQuery 是一个轻量级的&quot;写的少，做的多&quot;的 JavaScript 库。</p></li><li><p>jQuery 库包含以下功能：</p><ul><li>HTML 元素选取</li><li>HTML 元素操作</li><li>CSS 操作</li><li>HTML 事件函数</li><li>JavaScript 特效和动画</li><li>HTML DOM 遍历和修改</li><li>AJAX</li><li>Utilities<br>提示： 除此之外，jQuery 还提供了大量的插件。</li></ul></li></ul><h3 id="1-2-jQuery上手">1.2 jQuery上手</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/1.9.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 请将jQuery代码书写在这里 ...</span></span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello,World!&#x27;</span>);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="1-3-jQuery的双枪">1.3 jQuery的双枪</h3><p><code>jQuery</code>的双枪分别是：</p><pre><code class="hljs">* jQuery的核心函数： 即：`$()`或`jQuery()`。jQuery定义了这个全局函数供我们使用，他既可以作为一般函数调用，且传递的参数类型不同/格式不同，功能就完全不同，也可以作为对象调用其定义好的方法* jQuery的核心对象： 即执行`jQuery`核心函数所返回的对象，`jQuery`对象内部包含的`dom`元素对象的伪数组(可能只有一个元素)，`jQuery`对象有很多属性和方法，让程序员能够方便的操纵`dom`,调用jQuery对象的任何方法后返回的还是当前jQuery对象</code></pre><p>以上这段话你可能没看明白，但是没关系，先看完后面的内容再回过头来看</p><h2 id="2-jQuery的核心函数">2 jQuery的核心函数</h2><h3 id="2-1-选择器">2.1 选择器</h3><h3 id="2-1-1-基本选择器">2.1.1 基本选择器</h3><p>写在前头：其实选择器的大部分的格式都是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;example&#x27;).css(&#x27;example1&#x27;);<br></code></pre></td></tr></table></figure><p>带着这个公式去读以下内容，你会很容易发现套路</p><h4 id="2-1-1-1-标签选择器">2.1.1.1 标签选择器</h4><p>需求：选择页面中所有的div标签，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;div&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="2-1-1-2-id选择器">2.1.1.2 id选择器</h4><p>需求：选择页面中所有id为btn的按钮，将其改为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;#btn&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="2-1-1-3-class选择器">2.1.1.3 class选择器</h4><p>需求：选择页面中所有class为red的段落，将其背景设置成红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>我会变红<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我不红了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>我又红了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;.red&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="2-1-1-4-通配符选择器">2.1.1.4 通配符选择器</h4><p>需求：将页面中class为content的div下所有元素的背景设置成红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;.content *&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="2-1-1-5-并集选择器">2.1.1.5 并集选择器</h4><p>需求：选择页面中所有段落与按钮，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是段落，我是红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>我是按钮，也是红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我不是红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;p, button&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="2-1-1-6-交集选择器">2.1.1.6 交集选择器</h4><p>需求：选择页面中所有class为红色的段落，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>我是红的<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我不是红的<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>我也不是红的<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;p.red&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h3 id="2-1-2-层级选择器">2.1.2 层级选择器</h3><h4 id="2-1-2-1-子代选择器">2.1.2.1 子代选择器</h4><p>需求：选择ul下所有span子元素，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span1,我是红的<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我不是红的，因为我是li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我也不是<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;ul&gt;span&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="2-1-2-2-后代选择器">2.1.2.2 后代选择器</h4><p>需求：选择ul下所有span元素，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span1,我是红的<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我不是红的，因为我是li <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>但我还是红的<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我也不是<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;ul span&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p><s>DUmpling的唠叨</s><br>子代选择器和后代选择器的区别：<br>- 我觉得这很像西欧封建领主和中国封建领主的差别，西欧领主认为：我的附庸的附庸不是我的附庸(子代选择器)，但在中国，普天之下莫非王土，率土之滨莫非王臣，管你是谁，耶稣来了也不行，皇- 帝说的(后代选择器)。<br>- 子代选择器只能管一个人，所以要带<code>&gt;</code>。<br>- 但是后代选择器却是空格。这是为什么呢？因为这不是空格，而是朕的天下</p><h4 id="2-1-2-3-兄弟选择器">2.1.2.3 兄弟选择器</h4><p>需求：选中id为box的下一个兄弟li，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是li1 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li1的span1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li2 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li2的span2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <span class="hljs-comment">&lt;!--这一行是红色的--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li3 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li3的span3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;#box+li&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p>需求：选中id为box之后所有的li，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是li1 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li1的span1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li2 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li2的span2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li3 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li3的span3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;#box~li&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h3 id="2-1-3-过滤选择器">2.1.3 过滤选择器</h3><h4 id="2-1-3-1-基本筛选器">2.1.3.1 基本筛选器</h4><p>需求：隔行变色，让表格奇数行背景为红色，:even代表选取下标为偶数的行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0px&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;10px&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>//我是红的<br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>//我也是红的<br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;tr:even&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p><s>Dumpling又来唠叨了</s><br>为什么第1，3行是红色的？<br>因为行数下标是从0开始取的，所以你可以理解为是第0行、第2行是红色的</p><ul><li><p>要使表格偶数行背景为红色，把:even改成:odd就行了(行的下标从0开始)</p></li><li><p>要使表格第一行背景为红色，把:even改成:first</p></li><li><p>要使表格最后一行背景为红色，把:even改成:last</p></li><li><p>要使表格第0行到第n行的下标为红色，把:even改成:lt(n)就行了(行的下标从0开始)</p></li><li><p>要使表格从第n行开始全部变成红色，把:even改成:gt(n)就行了(行的下标从0开始)</p></li><li><p>要使表格第n行的背景为红色，把:even改成:eq(n)就行了(行的下标从0开始)</p></li><li><p>要使表格除了第n行，其他行的背景为红色，把:even改成:not(eq(n))就行了(行的下标从0开始)</p></li></ul><p><s>Dumpling又双叒叕来了</s><br>聪明如你，肯定发现了lt是less than的缩写，gt是greater than的缩写，eq是equal的缩写，所以这些还是很好记的</p><h4 id="2-1-3-2-内容筛选器">2.1.3.2 内容筛选器</h4><p>需求：实现让内容为&quot;男&quot;的单元格的背景变为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0px&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;10px&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;td:contains(&quot;男&quot;)&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p>需求：实现让内容为span标签的单元格的背景变为红色</p><p>把:contains(“男”)改成:has(span)就行了</p><p>需求：实现让内容为空的单元格的背景变为红色</p><p>把:contains(“男”)改成:empty就行了</p><p>需求：实现让内容不为空的单元格的背景变为红色</p><p>把:contains(“男”)改成:parent就行了</p><h4 id="2-1-3-3-属性筛选器">2.1.3.3 属性筛选器</h4><p>需求描述：查找herflang属性的标签元素，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">hreflang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>en<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">hreflang</span>=<span class="hljs-string">&quot;en-UK&quot;</span>&gt;</span>en-UK<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">hreflang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span>zh-CN<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;a[hreflang]&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p>需求：查找hreflang属性值是en的所有超链接，设置其背景为红色</p><p>把[hreflang]改成[hreflang=“en”]就行了</p><p>需求：查找hreflang属性值不是en的所有超链接，设置其背景为红色</p><p>把[hreflang]改成[hreflang!=“en”]就行了</p><h2 id="2-2-工具">2.2 工具</h2><h3 id="2-2-1-each方法">2.2.1 $.each方法</h3><p>方法描述：一个通用的迭代函数，它可以用来无缝迭代对象和数组。数组和类似数组的对象通过一个长度属性（如一个函数的参数对象）来迭代数字索引，从0到length - 1，其他对象通过其属性名进行迭代。</p><p>需求：给定一个数组，使用$.each方法进行遍历输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var arr = [10, 90, 20, 80, 30, 70, 40, 60, 50];<br>$.each(arr, function (index, element) &#123;<br>    console.log(index, element);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2-2-2-trim方法">2.2.2 $.trim方法</h3><p>方法描述：去掉字符串起始和结尾的空格。(trim的中文意思是修剪)</p><p>需求：给定一个字符串，去掉该字符串的前后空格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var str = &#x27;    hello    &#x27;;<br>console.log($.trim(str));//hello<br></code></pre></td></tr></table></figure><h3 id="2-2-3-type方法">2.2.3 $.type方法</h3><p>方法描述：确定JavaScript 对象的类型。</p><p>需求：给定一个对象，输出该对象的类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var str = &#x27;    hello    &#x27;;<br>console.log($.type(str));//string<br></code></pre></td></tr></table></figure><h3 id="2-2-4-isArray方法">2.2.4 $.isArray方法</h3><p>方法描述：用来测试指定对象是否为一个数组。</p><p>需求：给定一个对象，输出该对象是不是数组类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var arr = [10, 90, 20, 80, 30, 70, 40, 60, 50];<br>console.log($.isArray(arr));//true<br></code></pre></td></tr></table></figure><h3 id="2-2-5-isFunction方法">2.2.5 $.isFunction方法</h3><p>方法描述：用来测试指定对象是否为一个函数。</p><p>需求：给定一个对象，输出该对象是不是函数类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var fun = function () &#123;<br>    console.log(&quot;hello&quot;);<br>&#125;;<br>console.log($.isFunction(fun));//true<br></code></pre></td></tr></table></figure><h2 id="3-jQuery的核心对象">3 jQuery的核心对象</h2><h3 id="3-1-属性">3.1 属性</h3><h4 id="3-1-1-属性">3.1.1 属性</h4><h4 id="3-1-1-1-attr">3.1.1.1 attr()</h4><p>方法描述：专门操作属性值为非布尔值的属性，该方法读写一体。</p><p>需求：设置p标签的title属性为&quot;我是attr修改后的段落标题&quot;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;我是段落标题&quot;</span>&gt;</span>我是段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;#content&#x27;).attr(&#x27;title&#x27;, &#x27;我是attr修改后的段落标题&#x27;);<br></code></pre></td></tr></table></figure><h4 id="3-1-1-2-prop">3.1.1.2 prop()</h4><p>方法描述：专门操作属性值为布尔值的属性，该方法读写一体。</p><p>需求：设置复选框的状态为选中状态</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>复选框<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;:checkbox&#x27;).prop(&#x27;checked&#x27;, &#x27;true&#x27;);<br></code></pre></td></tr></table></figure><h4 id="3-1-1-3-val">3.1.1.3 val()</h4><p>方法描述：该方法主要用于获取表单元素的值和设置表单元素的值，该方法读写一体。</p><p>需求：设置文本框的值为&quot;123456&quot;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;:text&#x27;).val(&#x27;123456&#x27;)<br></code></pre></td></tr></table></figure><h3 id="3-1-2-样式">3.1.2 样式</h3><h4 id="3-1-2-1-css">3.1.2.1 css()</h4><p>方法描述：获取匹配元素集合中的第一个元素的样式属性的计算值或设置每个匹配元素的一个或多个CSS属性。</p><p>需求描述：设置div的背景颜色为红色，字体颜色为白色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;div&#x27;).css(&#123;<br>    &#x27;background&#x27;: &#x27;red&#x27;,<br>    &#x27;color&#x27;: &#x27;white&#x27;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="3-1-2-2-addClass">3.1.2.2 addClass()</h4><p>方法描述：为每个匹配的元素添加指定的样式类名。</p><p>需求描述：为所有的li添加样式”beauty“</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML">.beauty &#123;<br>    font-weight: bold;<br>    font-size: 18px;<br>    color: coral;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;li&#x27;).addClass(&#x27;beauty&#x27;);<br></code></pre></td></tr></table></figure><h4 id="3-1-2-3-removeClass">3.1.2.3 removeClass()</h4><p>方法描述：移除集合中每个匹配元素上一个，多个或全部样式。</p><p>需求：为所有的li移除样式”beauty“</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML">.beauty &#123;<br>    font-weight: bold;<br>    font-size: 18px;<br>    color: coral;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;beauty&quot;</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;beauty&quot;</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;beauty&quot;</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;beauty&quot;</span>&gt;</span>列表项4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;li&#x27;).removeClass(&#x27;beauty&#x27;);<br></code></pre></td></tr></table></figure><h4 id="3-1-2-4-toggleClass">3.1.2.4 toggleClass()</h4><p>方法描述：为匹配的元素集合中的每个元素上添加或删除一个或多个样式类，取决于这个样式类是否存在。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML">.hide &#123;<br>    width: 100px;<br>    height: 100px;<br>    display: none;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;button&#x27;).click(function () &#123;<br>    $(&#x27;div&#x27;).toggleClass(&#x27;hide&#x27;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="3-1-3-尺寸">3.1.3 尺寸</h3><h4 id="3-1-3-1-width">3.1.3.1 width()</h4><p>方法描述：获取内容元素width的值。</p><h4 id="3-1-3-2-height">3.1.3.2 height()</h4><p>方法描述：获取内容元素height的值。</p><h4 id="3-1-3-3-innerWidth">3.1.3.3 innerWidth()</h4><p>方法描述：获取内容元素width+padding的值。</p><h4 id="3-1-3-4-innerHeight">3.1.3.4 innerHeight()</h4><p>方法描述：获取内容元素height+padding的值。</p><h4 id="3-1-3-5-outerWidth">3.1.3.5 outerWidth()</h4><p>方法描述：outerWidth(false/true)，获取内容元素width+padding+border的值，如果是true再加上margin的值。</p><h4 id="3-1-3-6-outerHeight">3.1.3.6 outerHeight()</h4><p>方法描述：outerHeight(false/true)，获取内容元素height+padding+border的值，如果是true再加上margin的值。</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web前端</tag>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ STL学习</title>
    <link href="/2024/05/23/CPPSTL/"/>
    <url>/2024/05/23/CPPSTL/</url>
    
    <content type="html"><![CDATA[<p>本文用来记录C++中STL的用法，没有感情，全是技巧</p><h2 id="1-vector">1.vector</h2><h3 id="1-1-介绍">1.1 介绍</h3><p><code>vector</code>为可变长数组(我比较喜欢叫他动态数组),可以随时添加数值和删除元素</p><h3 id="1-2-初始化">1.2 初始化</h3><p><code>vector</code>分为一维初始化和二维初始化</p><h4 id="一维初始化">一维初始化</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; t1; <span class="hljs-comment">//一维数组</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">t2</span><span class="hljs-params">(n)</span></span>; <span class="hljs-comment">//定义一个长度为n的数组</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">t3</span><span class="hljs-params">(n, <span class="hljs-number">1</span>)</span></span>; <span class="hljs-comment">//定义一个长度为n的数组，t3[0]~t3[n - 1]均初始化为1</span><br>vector&lt;<span class="hljs-type">int</span>&gt; t4&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;; <span class="hljs-comment">//数组中有五个元素，数组长度就为5</span><br>vector&lt;<span class="hljs-type">int</span>&gt; t5 = t4; <span class="hljs-comment">//拷贝初始化</span><br></code></pre></td></tr></table></figure><h4 id="二维初始化">二维初始化</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; t2;<span class="hljs-comment">//二维数组</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v[<span class="hljs-number">5</span>];<span class="hljs-comment">//定义可变长二维数组</span><br><span class="hljs-comment">//注意：行不可变（只有5行）, 而列可变,可以在指定行添加元素</span><br><span class="hljs-comment">//第一维固定长度为5，第二维长度可以改变</span><br><span class="hljs-comment">//注意：[]是二维数组，()是一维数组！ ！ ！</span><br><span class="hljs-comment">//（有个大聪明因为这个debug了半个小时）</span><br></code></pre></td></tr></table></figure><h3 id="1-3-方法函数">1.3 方法函数</h3><p>话不多说，直接上</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; c;<br></code></pre></td></tr></table></figure><table><thead><tr><th>代码</th><th>含义</th><th>时间复杂度</th></tr></thead><tbody><tr><td>c.front()</td><td>返回第一个数据</td><td>O(1)</td></tr><tr><td>c.back()</td><td>返回最后一个数据</td><td>O(1)</td></tr><tr><td>c.pop_back()</td><td>删除最后一个数据</td><td>O(1)</td></tr><tr><td>c.push_back(element)</td><td>在尾部加一个数据</td><td>O(1)</td></tr><tr><td>c.emplace_back(ele)</td><td>类似c.push_back(),但有时更快</td><td>O(1)</td></tr><tr><td>c.size()</td><td>返回数据个数</td><td>O(1)</td></tr><tr><td>c.clear()</td><td>清除元素个数</td><td>O(N)</td></tr><tr><td>c.resize(n, v)</td><td>改变数组大小为n并赋值为v，如果没有则默认赋值0</td><td></td></tr><tr><td>c.insert(it, x)</td><td>向迭代器it插入元素x</td><td>O(N)</td></tr><tr><td>c.erase(first,last)</td><td>删除<code>[first, last)</code>所有元素</td><td>O(N)</td></tr><tr><td>c.begin()</td><td>返回首元素迭代器(可以通俗的理解为地址)</td><td>O(1)</td></tr><tr><td>c.end()</td><td>返回最后一个元素后一个位置的迭代器</td><td>O(1)</td></tr><tr><td>c.empty()</td><td>判断是否为空，空为真</td><td>O(1)</td></tr><tr><td><a href="http://c.at">c.at</a>(idx)</td><td>返回c[idx]的值（但还是建议用[]）</td><td></td></tr><tr><td>c.reserve(sz)</td><td>改变<code>capacity</code>的大小</td><td></td></tr><tr><td>c.assign(n, val)</td><td>讲<code>n</code>个<code>val</code>值拷贝到<code>c</code>数组中</td><td></td></tr><tr><td>c.assign(beg, end)</td><td>讲另一个容器的<code>[x.begin(), x.end()]</code>里的内容拷贝到c</td><td></td></tr></tbody></table><h3 id="1-4-访问">1.4 访问</h3><p>总共三种方法：<code>下标法</code>、<code>迭代器法</code>、<code>auto</code></p><h4 id="1-4-1-下标访问">1.4.1 下标访问</h4><p>和普通数组的区别是没有区别</p><h4 id="1-4-2-迭代器访问">1.4.2 迭代器访问</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; vi&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-comment">//迭代器访问</span><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator it;   <br><span class="hljs-comment">// 相当于声明了一个迭代器类型的变量it</span><br><span class="hljs-comment">// 通俗来说就是声明了一个指针变量</span><br></code></pre></td></tr></table></figure><ul><li>方法一</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = vi.<span class="hljs-built_in">begin</span>(); <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>cout &lt;&lt; *(it + i) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>方法二</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt;::iterator it; <span class="hljs-keyword">for</span>(it = vi.<span class="hljs-built_in">begin</span>(); it != vi.<span class="hljs-built_in">end</span>();it ++) cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>; <br><span class="hljs-comment">//vi.end()指向尾元素地址的下一个地址 </span><br><span class="hljs-comment">// 或者 </span><br><span class="hljs-keyword">auto</span> it = vi.<span class="hljs-built_in">begin</span>();<br><span class="hljs-keyword">while</span>(it != vi.<span class="hljs-built_in">end</span>())<br>&#123;<br>    cout &lt;&lt; *it &lt;&lt; endl;<br>    it++;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="1-4-3-智能指针">1.4.3 智能指针</h4><p>只能遍历完整个数组，如果要遍历指定内容，参考方法一、二</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 1. 输入 </span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>; <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;x: a) <br>&#123;<br>     cin &gt;&gt; x; <span class="hljs-comment">// 可以进行输入，注意加引用 </span><br>&#125; <br><br><span class="hljs-comment">// 2. 输出 </span><br>vector&lt;<span class="hljs-type">int</span>&gt; v; <br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">12</span>); <br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">241</span>); <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> val : v) <br>&#123;<br>     cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>; <span class="hljs-comment">// 12 241 </span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-string">9 string</h2><h3 id="9-1-介绍">9.1 介绍</h3><p><code>string</code>是一个字符串类，和<code>char</code>型字符串类似</p><p>可以把<code>string</code>理解为一个字符串类型，像int一样定义</p><h3 id="9-2-初始化">9.2 初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br>string str1;<span class="hljs-comment">//空字符串</span><br><br><span class="hljs-function">string <span class="hljs-title">str2</span><span class="hljs-params">(<span class="hljs-string">&quot;123456&quot;</span>)</span></span>;<br><br><span class="hljs-function">string <span class="hljs-title">str3</span><span class="hljs-params">(<span class="hljs-string">&quot;12345&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>)</span></span>;<span class="hljs-comment">//结果为&quot;123&quot;</span><br><span class="hljs-comment">//从0索引开始，长度为3</span><br><br><span class="hljs-function">string <span class="hljs-title">str4</span><span class="hljs-params">(<span class="hljs-string">&quot;12345&quot;</span>, <span class="hljs-number">3</span>)</span></span>;<span class="hljs-comment">//结果为&quot;123&quot;</span><br><br><span class="hljs-function">string <span class="hljs-title">str5</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;2&#x27;</span>)</span></span>;<span class="hljs-comment">//结果为&quot;22222&quot;</span><br><br><span class="hljs-function">string <span class="hljs-title">str6</span><span class="hljs-params">(str2, <span class="hljs-number">2</span>)</span></span>;<span class="hljs-comment">//结果为&quot;345&quot;；</span><br><span class="hljs-comment">//截取第二个索引及其之后的元素</span><br></code></pre></td></tr></table></figure><h3 id="9-3-简单使用及其特性">9.3 简单使用及其特性</h3><h4 id="访问单个字符">访问单个字符</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     string str=<span class="hljs-string">&quot;12345&quot;</span>;<br><br>     cout &lt;&lt; str[<span class="hljs-number">2</span>] &lt;&lt; endl;<br><br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果为3。</p><p>从这个案例中就可以很直观的感受到string可以作为数组使用</p><h4 id="string特性">string特性</h4><ul><li>支持比较运算符<ul><li><code>string</code>字符串支持常见的比较运算符:<code>&gt;, &gt;=, &lt;, &lt;=, ==, !=</code>。</li><li>本质上是按字符顺序依次比较ASCII码</li><li>常用ASCII码：<code>A：65</code>；<code>a：97</code>；<code>1： 49</code></li><li>故而，在比较时，数字&lt;大写字母&lt;小写字母</li></ul></li><li>支持<code>+</code>运算符，代表拼接</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     string str1 = <span class="hljs-string">&quot;123&quot;</span>;<br>     string str2 = <span class="hljs-string">&quot;456&quot;</span>;<br>     string str3 = str1 + str2;<br>     cout &lt;&lt; str3 &lt;&lt; endl;<span class="hljs-comment">//输出结果为123456</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="string读入">string读入</h4><p>读入字符串，遇空格，回车结束</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s;<br>cin &gt;&gt; s;<br></code></pre></td></tr></table></figure><p>读入一行字符串(包括空格)，遇回车结束</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s;<br><span class="hljs-built_in">getline</span>(cin, s);<br></code></pre></td></tr></table></figure><p><em>注意：<code>getline(cin, s)</code>会获取前一个输入的换行符，需要在前面添加读取换行符的语句，如<code>getchar()</code>或<code>cin.get()</code></em></p><p>错误示例(源自某大聪明调试了一小时的bug)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n;<br>string s;<br><br>cin &gt;&gt; n;<br>cin &gt;&gt; s;<br></code></pre></td></tr></table></figure><p>正确示例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n;<br>string s;<br><br>cin &gt;&gt; n;<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-built_in">getline</span>(cin, s);<br></code></pre></td></tr></table></figure><p><em>当时偶然看见一个大佬的解释，恍然大悟：</em><br><em><code>cin</code>输入完后，回车，<code>cin</code>遇到回车键结束，但回车还在输入流中，<code>cin</code>不会清除，导致<code>getline</code>读取回车，结束。所以后面的字符串并没有被正确输入</em></p><h3 id="9-4-函数方法">9.4 函数方法</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">string s <span class="hljs-operator">=</span> <span class="hljs-number">123</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><em>注意：</em><br><em>it为迭代器</em></p><ul><li>插入</li></ul><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>s.push_back('element')</code></td><td style="text-align:left">在末尾插入</td></tr><tr><td style="text-align:left"><code>s.insert(pos,'element')</code></td><td style="text-align:left">在pos位置插入element</td></tr><tr><td style="text-align:left">eg:s.insert(s.begin() + 2, 6)</td><td style="text-align:left">在第二个位置插入6，结果是1263</td></tr><tr><td style="text-align:left"><code>s.append(&quot;str&quot;)</code></td><td style="text-align:left">在s字符串末尾添加str字符串</td></tr></tbody></table><ul><li>删除</li></ul><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>erase(iterator p)</code></td><td style="text-align:left">删除字符串中p所指字符</td></tr><tr><td style="text-align:left"><code>erase(iterator first, iterator last)</code></td><td style="text-align:left">删除字符串中迭代器区间[first,last)上的所有值</td></tr><tr><td style="text-align:left"><code>erase(pos, len)</code></td><td style="text-align:left">删除字符串中索引从pos开始的len个字符</td></tr><tr><td style="text-align:left"><code>clear()</code></td><td style="text-align:left">清空字符串</td></tr></tbody></table><ul><li>字符替换</li></ul><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>s.replace(pos, n, str)</code></td><td style="text-align:left">把当前字符串从索引pos开始的n个字符替换成str</td></tr><tr><td style="text-align:left"><code>s.replace(pos, n, n1, c)</code></td><td style="text-align:left">把当前字符串从pos开始n个字符替换为n1个字符c</td></tr><tr><td style="text-align:left"><code>s.replace(it1, it2, str)</code></td><td style="text-align:left">把当前字符串<code>[it1, it2)</code>区间替换为str</td></tr></tbody></table><ul><li>大小写转换</li></ul><p>单个字符的转换：</p><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>tolower(s[i])</code></td><td style="text-align:left">转换为小写</td></tr><tr><td style="text-align:left"><code>toupper(s[i])</code></td><td style="text-align:left">转换为大写</td></tr></tbody></table><p>多个字符的转换：</p><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>transform(s.begin(), s.end(), s.begin(), ::tolower)</code></td><td style="text-align:left">转换小写。前两个参数指定容器转换起止范围，第三个参数是结果存放容器的开始位置</td></tr><tr><td style="text-align:left"><code>transform(s.begin(), s.end(), s.begin(), ::toupper)</code></td><td style="text-align:left">转换大写</td></tr></tbody></table><ul><li>获取字符串长度</li></ul><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>s.size()</code>和<code>s.length()</code></td><td style="text-align:left">返回string字符串个数。两者一个意思</td></tr><tr><td style="text-align:left"><code>s.max_size()</code></td><td style="text-align:left">返回string对象最多包含的字符数</td></tr><tr><td style="text-align:left"><code>s.capcity()</code></td><td style="text-align:left">重新分配内存之前，string对象能包含的最大字符数</td></tr></tbody></table><ul><li>分割</li></ul><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">s.substr(pos, n)</td><td style="text-align:left">截取从pos索引开始的n个字符</td></tr></tbody></table><ul><li>查找</li></ul><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">s.find(str, pos)</td><td style="text-align:left">默认从索引0开始。从索引pos开始查找子串str,返回找到位置的索引。找不到返回-1</td></tr><tr><td style="text-align:left">s.find(c, pos)</td><td style="text-align:left">从pos索引开始查找字符c</td></tr><tr><td style="text-align:left">s.rfind(str, pos)</td><td style="text-align:left">从当前字符串pos索引开始，反向查找子串s</td></tr><tr><td style="text-align:left">s.rfind(c, pos)</td><td style="text-align:left">从当前字符串pos索引开始，反向查找字符c</td></tr></tbody></table><ul><li>排序</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//按照ASCII码排序</span><br></code></pre></td></tr></table></figure><h2 id="list">list</h2><h3 id="介绍">介绍</h3><ul><li><code>list</code>是一个双向链表</li><li>适合频繁的插入或者删除元素</li><li>不能通过位置直接访问元素(链表通病)</li></ul><p>(<code>list</code>的底层代码很美，感兴趣的可以去看看)</p><h3 id="list使用">list使用</h3><h4 id="list的构造">list的构造</h4>]]></content>
    
    
    <categories>
      
      <category>C++学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>web前端复习笔记</title>
    <link href="/2024/06/16/webExamination/"/>
    <url>/2024/06/16/webExamination/</url>
    
    <content type="html"><![CDATA[<p>因为老师给的笔记分散在多个文件夹，用百度翻译出来的结果经常不准，所以我在一怒之下<s>怒了一下</s>决定将所有的笔记归类到一篇文章中，并且将其中的一些难以理解的术语用大白话说出来</p><p>先上思维导图(你们应该能理解我有多肝了)</p><p><img src="/images/web%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.png" alt="思维导图"></p><h2 id="0-写在开头">0. 写在开头</h2><p>开始之前，我想先说一下html,css,Bootstrap,Javascript,Query之间的关系</p><ol><li>HTML(HyperText Markup Language)是网页的基础，它定义了网页的结构和内容。你可以把它想象成建筑的骨架，决定了建筑的基本形状和内部空间的布局。</li><li>CSS(Cascading Style Sheet)是用来设置网页的样式的，包括布局、颜色、字体等。它的作用类似于建筑的装修，通过它可以使基本的建筑看起来更美观、更符合使用需求。</li><li>Bootstrap是基于 HTML 和 CSS 的一个框架，它提供了预制的样式和组件，使网页设计变得更快、更容易。想象一下，如果有一个预装好家具和装饰的房间，你只需要进行一些小的调整就能入住，这就是 Bootstrap 的作用。</li><li>JavaScript是一种脚本语言，用于添加网页的交互功能，比如响应按钮点击、数据更新等。如果把网页比作一部电影，那么 JavaScript 就是让静态画面动起来的电影导演。</li><li>jQuery是一个 JavaScript 库，它简化了 JavaScript 的编程，使 DOM 的操作、事件处理和动画效果的实现更加容易。使用 jQuery 就像是为电影导演提供了一套高效的工具，使拍摄过程更加顺畅。</li></ol><p>想象你在建造一个现代住宅（网页）。首先，你需要一个结构图（HTML），它定义了房子的基本布局和每个房间的位置。接着，你需要进行内部装修（CSS），决定墙壁的颜色、地板的材质和房间的灯光等。然后，为了让装修更快更方便，你选择了一套现成的装修套餐（Bootstrap），这套套餐已经包括了一些流行的设计和家具。</p><p>现在房子看起来很好，但如果要住得舒适，你还需要添加一些高科技设备，比如自动窗帘、温度调节器等（JavaScript），使房子可以根据居住者的行为自动调整环境。最后，为了简化这些高科技设备的安装和使用，你引入了一个智能家居系统（jQuery），它可以帮你更容易地控制这些设备，让你的智能家居体验更加无缝和愉快。</p><h2 id="1-HTML-Cheatsheet-HTML工作表">1. HTML Cheatsheet(HTML工作表)</h2><h3 id="1-1-Basic-Tags">1.1 Basic Tags</h3><ol><li><code>&lt;html&gt;&lt;/html&gt;</code>:Creates an HTML document<br>创建HTML文档</li><li><code>&lt;head&gt;&lt;/head&gt;</code>:Sets off the title &amp; other info that isn’s displayed<br>用来标记网页标题和其他不会直接显示的内容(<em>这里的<code>set off</code>可以理解为标记或设定</em>)</li><li><code>&lt;body&gt;&lt;/body&gt;</code>:Sets off the visible portion of the document<br>用来标记文档可见部分</li><li><code>&lt;title&gt;&lt;/title&gt;</code>:Puts name of the document in the title bar;when bookmarking pages,this is what bookmarked<br>文档的标题会显示在浏览器的标题栏或标签页上，当用户为页面添加书签时，这个标题也是被保存的内容。(<code>bookmark</code>:书签)</li></ol><h3 id="1-2-Body-attributes-Only-used-in-email-newsletters-仅用于电子邮件通讯">1.2 Body attributes[Only used in email newsletters(仅用于电子邮件通讯)]</h3><ol><li><code>&lt;body bgcolor=?&gt;</code>:Sets background color,using name or hex value<br>设置背景颜色，使用名称或十六进制值</li><li><code>&lt;body text=?&gt;</code>:Sets text color,using name or hex value<br>设置文本颜色，使用名称或十六进制值</li><li><code>&lt;body link=?&gt;</code>:Sets color of links,using name or hex value<br>设置链接颜色，使用名称或十六进制值</li><li><code>&lt;body vlink=?&gt;</code>:Sets color of visited links,using name or hex calue<br>设置已访问链接的颜色，使用名称或十六进制值</li><li><code>&lt;body alink=?&gt;</code>:Sets color of active links (while mouse-clicking)<br>设置活动链接的颜色（鼠标点击时）</li></ol><blockquote><p><strong>小贴士（不赶时间可以看看）：</strong><br>使用名称或十六进制值是指在指定颜色时，可以使用颜色的名称或其对应的十六进制值<br>使用名称，比如<code>red</code>,<code>blue</code>,<code>green</code>等等<br>使用十六进制时，每种颜色都可以用一个六位的十六进制代码来表示，代码前加上<code>#</code>,比如<code>#FF0000</code>(红色)，<code>#0000FF</code>(蓝色)，<code>#00FF00</code>(绿色)，<code>#000000</code>(黑色)，<code>#FFFFFF</code>(白色)<br>十六进制值由三个部分组成，分别表示红色、绿色和蓝色（RGB），每部分用两位十六进制数表示。比如，#FF0000 代表红色，因为 FF 表示最大值 255，对应于红色，而绿色和蓝色的值为 0。</p></blockquote><h3 id="1-3-Text-Tags-文本标签">1.3 Text Tags(文本标签)</h3><ol><li><code>&lt;pre&gt;&lt;/pre&gt;</code>:Creates preformatted text<br>创建预格式化文本<br>大白话：使用<code>&lt;pre&gt;</code>标签可以确保文本的格式不会被浏览器自动调整，非常适合需要保持原始格式的内容</li><li><code>&lt;h1&gt;&lt;/h1&gt;--&gt;&lt;h6&gt;&lt;/h6&gt;</code>:Creates headlines – H1=largest, H6=smallest<br>创建标题，h1最大，h6最小</li><li><code>&lt;b&gt;&lt;/b&gt;</code>:Creates bold text (should use <code>&lt;strong&gt;</code> instead)<br>创建粗体文本(创建粗体文本（应该使用 <code>&lt;strong&gt;</code> 代替）)</li><li><code>&lt;i&gt;&lt;/i&gt;</code>:Creates italicized text (should use <code>&lt;em&gt;</code> instead)<br>创建斜体文本（应该使用 <code>&lt;em&gt;</code> 代替）</li><li><code>&lt;tt&gt;&lt;/tt&gt;</code>:Creates typewriter-style text<br>创建打字机风格的文本</li><li><code>&lt;code&gt;&lt;/code&gt;</code>:Used to define source code, usually monospace<br>用于定义源代码，通常为等宽字体</li><li><code>&lt;cite&gt;&lt;/cite&gt;</code>:Creates a citation, usually processed in italics<br>创建引用，通常为斜体</li><li><code>&lt;address&gt;&lt;/address&gt;</code>:Creates address section, usually processed in italics<br>创建地址部分，通常为斜体</li><li><code>&lt;em&gt;&lt;/em&gt;</code>:Emphasizes a word (usually processed in italics)<br>强调一个词（通常为斜体）</li><li><code>&lt;strong&gt;&lt;/strong&gt;</code>:Emphasizes a word (usually processed in bold)<br>强调一个词（通常为粗体）</li><li><code>&lt;font size=?&gt;&lt;/font&gt;</code>:Sets size of font - 1 to 7 (should use CSS instead)<br>设置字体大小 - 1 到 7（应该使用 CSS 代替）</li><li><code>&lt;font color=?&gt;&lt;/font&gt;</code>:Sets font color (should use CSS instead)<br>设置字体颜色（应该使用 CSS 代替）</li><li><code>&lt;font face=?&gt;&lt;/font&gt;</code>:Defines the font used(should use the CSS instead)<br>定义所使用的字体（应该使用 CSS 代替）</li></ol><h3 id="1-4-Links">1.4 Links</h3><ol><li><code>&lt;a href=&quot;URL&quot;&gt;clickable text&lt;/a&gt;</code>:Creates a hyperlink to a Uniform Resource Locator<br>创建一个指向统一资源定位符（URL）的超链接</li><li><code>&lt;a href=&quot;mailto:EMAIL_ADDRESS&quot;&gt;clickable text&lt;/a&gt;</code>:Creates a hyperlink to an email address<br>创建一个指向电子邮件地址的超链接</li><li><code>&lt;a name=&quot;NAME&quot;&gt;</code>:Creates a target location within a document<br>在文档内创建一个目标位置</li><li><code>&lt;a href=&quot;#NAME&quot;&gt;clickable text&lt;/a&gt;</code>:Creates a link to that target location<br>创建一个指向该目标位置的链接<br>大白话：创建一个指向该目标位置的链接。点击此链接时，页面会滚动到相应的锚点目标位置</li></ol><blockquote><p><strong>小贴士：</strong><br>超链接（Hyperlink）是指在网页或文档中，能够从一个页面或位置跳转到另一个页面或位置的链接。通过点击超链接，用户可以快速导航到指定的目标，例如另一个网页、同一页面中的特定位置、电子邮件地址或文件。<br>超链接通常以不同的颜色或下划线显示，提示用户可以点击它们。超链接使用 HTML 中的 <code>&lt;a&gt;</code>（anchor）标签来创建。<br>href是&quot;Hypertext Reference&quot;的缩写。在 HTML 中，href 属性用于指定超链接的目标地址。通过为 <code>&lt;a&gt;</code> 标签设置 href 属性，可以定义用户点击链接时应该跳转到的目标位置。<br>URL是&quot;Uniform Resource Locator&quot;的缩写，中文常译为“统一资源定位符”。URL 是一种用于指定互联网上某一资源位置的地址，类似于我们在现实生活中使用的地址来找到特定位置。URL可以是网址(比如<a href="https://crazythursdayv50tome.cn">https://crazythursdayv50tome.cn</a>)也可以是路径(比如&quot;/path/to/resource&quot;)等</p></blockquote><h3 id="1-5-Formatting-格式化">1.5 Formatting(格式化)</h3><ol><li><code>&lt;p&gt;&lt;/p&gt;</code>:Creates a new paragraph<br>创建一个新段落</li><li><code>&lt;br&gt;</code>：Inserts a line break(carriage return)<br>插入一个换行符(回车)</li><li><code>&lt;blockquote&gt;&lt;/blockquote&gt;</code>:Puts content in a quote-indents text from both sides<br>将内容放在引号中-将文本从两边缩进<br>大白话：<code>&lt;blockquote&gt;</code> 标签用于表示引用的内容，浏览器通常会对其进行缩进处理以突出显示引用的部分。这种标记常用于显示他人的言论或引用的文本，以便与正文区分开来。通常，浏览器会在左右两侧添加一些空白来使引用部分与周围内容有所区别。</li><li><code>&lt;div&gt;&lt;/div&gt;</code>:Used to format block content with CSS<br>用于使用 CSS 格式化块级内容</li><li><code>&lt;span&gt;&lt;/span&gt;</code>:Used to format inline content with CSS<br>用于使用 CSS 格式化内联内容<br><code>&lt;span&gt;</code> 标签用于对文本中的一部分进行行内样式控制，通常用于对文本进行格式化或添加样式而不影响其它文本。它类似于 <code>&lt;div&gt;</code>，但 <code>&lt;span&gt; </code>是行内元素，而 <code>&lt;div&gt;</code>是块级元素，所以 <code>&lt;span&gt;</code> 通常用于对文本的一部分进行样式设置，例如改变颜色、字体、大小等。<br>打个比方，<code>&lt;span&gt;</code> 标签就像是一个装饰盒，你可以把它放在文字中任何你想要装饰的地方。比如，你可以用 <code>&lt;span&gt;</code> 来给文字涂上不同的颜色、改变字体大小或者添加特殊效果，而不会影响到其他文字。就像给一小块文字打扮一样，不会影响到整个段落的装扮。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一段 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red;&quot;</span>&gt;</span>红色<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 的文字。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/span.png" alt="效果图"></p><h3 id="1-6-Lists-列表">1.6 Lists(列表)</h3><ol><li><code>&lt;ul&gt;&lt;/ul&gt;</code>:Creates an unordered list<br>创建一个无序列表</li><li><code>&lt;ol start=?&gt;&lt;/ol&gt;</code>:Creates an ordered list (start=xx,<br>where xx is a counting number)<br>创建一个有序列表（start=xx，其中 xx 是一个计数数字）<br>xx 可以是任意整数，表示列表从这个编号开始。默认情况下，有序列表从 1 开始编号，但通过设置 start 属性，可以更改起始编号。</li><li><code>&lt;li&gt;&lt;/li&gt;</code>:Encompasses each list item<br>包围每个列表项</li><li><code>&lt;dl&gt;&lt;/dl&gt;</code>:Creates a definition list<br>创建一个定义列表</li><li><code>&lt;dt&gt;&lt;/dt&gt;</code>:Precedes each definition term<br>在每个定义术语之前</li><li><code>&lt;dd&gt;&lt;/dd&gt;</code>:Precedes each definition<br>在每个定义之前</li></ol><p><strong>没听懂？没关系，举个例子你就明白了</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项二<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项三<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><span class="hljs-comment">&lt;!--&lt;dl&gt;:定义列表的容器(definition list)--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><span class="hljs-comment">&lt;!--&lt;dt&gt;:定义列表中的术语--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>超文本标记语言，用于创建网页。<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><span class="hljs-comment">&lt;!--定义列表中的定义--&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>层叠样式表，用于控制网页的外观和布局。<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>一种编程语言，用于为网页添加互动功能。<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/list.png" alt="效果图"></p><h3 id="1-7-Graphical-elements-图形元素">1.7 Graphical elements(图形元素)</h3><ol><li><code>&lt;hr&gt;</code>:Inserts a horizontal rule<br>插入一个水平线</li><li><code>&lt;hr size=?&gt;</code>:Sets size (height) of horizontal rule<br>设置水平线的高度</li><li><code>&lt;hr width=?&gt;</code>:Sets width of rule(as a % or absolute pixel length)<br>设置水平线的宽度（可以是百分比或绝对像素长度）</li><li><code>&lt;hr noshade&gt;</code>:Creates a horizoontal rule without a shadow<br>创建一个没有阴影的水平线</li><li><code>&lt;img src=&quot;URL&quot; /&gt;</code>:Adds image; it is a separate file located at the URL<br>添加图像；它是一个位于指定 URL 的单独文件<br><code>&lt;img src=&quot;URL&quot; /&gt;</code> 标签中的 / 是自闭合标签的写法。这种写法主要源于 XHTML 规范，在 XHTML 中，所有标签都必须正确关闭，即使是那些在 HTML 中不需要关闭的空元素（例如 <code>&lt;img&gt;</code>、<code>&lt;br&gt;</code>、<code>&lt;hr&gt;</code> 等）。</li><li><code>&lt;img src=&quot;URL&quot; align=?&gt;</code>:Aligns image left/right/center/bottom/top/middle (use CSS)<br>将图像左对齐/右对齐/居中对齐/底部对齐/顶部对齐/中间对齐（建议使用 CSS）</li><li><code>&lt;img src=&quot;URL&quot; border=?&gt;</code>:Sets size of border surrounding image (use CSS)<br>设置图像周围边框的大小（建议使用 CSS）</li><li><code>&lt;img src=&quot;URL&quot; height=?&gt;</code>:Sets height of image, in pixels<br>设置图像的高度（单位为像素）</li><li><code>&lt;img src=&quot;URL&quot; width=?&gt;</code>:Sets width of image, in pixels<br>设置图像的宽度（单位为像素）</li><li><code>&lt;img src=&quot;URL&quot; alt=?&gt;</code>:Sets the alternate text for browsers that can’t process images (required by the ADA)<br>为无法处理图像的浏览器设置替代文本（ADA 要求）</li></ol><h3 id="1-8-Forms-表单">1.8 Forms(表单)</h3><ol><li><code>&lt;form&gt;&lt;/form&gt;</code>:Defines a form<br>定义一个表单</li><li><code>&lt;select multiple name=? size=?&gt;&lt;/select&gt;</code>:Creates a scrolling menu. Size sets the number of menu items visible before user needs to scroll.<br>创建一个滚动菜单。size设置用于需要滚动前可见的菜单项数量</li><li><code>&lt;select name=?&gt;&lt;/select&gt;</code>:Creates a pulldown menu<br>创建一个下拉菜单</li><li><code>&lt;option&gt;</code>:Sets off each menu item<br>设置每个菜单项</li><li><code>&lt;textarea name=? col=&quot;x&quot; rows=&quot;y&quot;&gt;&lt;/textarea&gt;</code>:Creates a text box area. Columns set the width; rows set the height.<br>创建一个文本区域。cols 设置宽度；rows 设置高度。</li><li><code>&lt;input type=&quot;checkbox&quot; name=? value=?&gt;</code>:Creates a checkbox.<br>创建一个复选框。</li><li><code>&lt;input type=&quot;checkbox&quot; name=? value=? checked&gt;</code>:Creates a checkbox which is pre-checked<br>创建一个预选中的复选框。</li><li><code>&lt;input type=&quot;radio&quot; name=? value=?&gt;</code>:Creates a radio button.<br>创建一个单选按钮</li><li><code>&lt;input type=&quot;radio&quot; name=? value=? checked&gt;</code>:Creates a radio button which is pre-checked.<br>创建一个预选中的单选按钮。</li><li><code>&lt;input type=&quot;text&quot; name=? size=?&gt;</code>:Creates a one-line text area. Size sets length, in characters.<br>创建一个单行文本区域。size 设置长度，以字符为单位。</li><li><code>&lt;input type=&quot;submit&quot; value=?&gt;</code>:Creates a submit button. Value sets the text in the submit button.<br>创建一个提交按钮。value 设置提交按钮上的文本。</li><li><code>&lt;input type=&quot;image&quot; name=? src=? border=? alt=?&gt;</code>:Creates a submit button using an image.<br>使用图像创建一个提交按钮。</li><li><code>&lt;input type=&quot;reset&quot;&gt;</code>:Creates a reset button<br>创建一个重置按钮</li></ol><h3 id="1-9-HTML5-input-tag-attributes-HTML5-输入标签属性（不是所有浏览器都支持；请访问-http-caniuse-com-获取详细信息）">1.9 HTML5 input tag attributes[HTML5 输入标签属性（不是所有浏览器都支持；请访问 <a href="http://caniuse.com">http://caniuse.com</a> 获取详细信息）]</h3><ol><li><code>&lt;input type=&quot;email&quot; name=?&gt;</code>:Sets a single-line textbox for email addresses<br>设置一个用于电子邮件地址的单行文本框</li><li><code>&lt;input type=&quot;URL&quot; name=?&gt;</code>:Sets a single-line textbox for URLs<br>设置一个用于 URL 的单行文本框</li><li><code>&lt;input type=&quot;number&quot; name=?&gt;</code>:Sets a single-line textbox for a number<br>设置一个用于数字的单行文本框</li><li><code>&lt;input type=&quot;range&quot; name=?&gt;</code>:Sets a single-line text box for a range of numbers<br>设置一个用于范围数字的单行文本框</li><li><code>&lt;input type=&quot;date/month/week/time&quot; name=?&gt;</code>:Sets a single-line text box with a calendar showing the date/month/week/time<br>设置一个带有日历的单行文本框，显示日期/月份/周/时间</li><li><code>&lt;input type=&quot;search&quot; name=?&gt;</code>:Sets a single-line text box for searching<br>设置一个用于搜索的单行文本框</li><li><code>&lt;input type=&quot;color&quot; name=?&gt;</code>:Sets a single-line text box for picking a color<br>设置一个用于选择颜色的单行文本框</li></ol><h3 id="1-10-Tables-use-only-for-data-layout-use-CSS-for-page-layout-表格（仅用于数据布局-使用-CSS-进行页面布局）">1.10 Tables(use only for data layout -use CSS for page layout)[表格（仅用于数据布局 - 使用 CSS 进行页面布局）]</h3><ol><li><code>&lt;table&gt;&lt;/table&gt;</code>:Creates a table<br>创建一个表格</li><li><code>&lt;tr&gt;&lt;/tr&gt;</code>:Sets off each row in a table<br>设置表格中的每一行</li><li><code>&lt;td&gt;&lt;/td&gt;</code>:Sets off each cell in a row<br>设置每行中的每个单元格<br>td:table data</li><li><code>&lt;th&gt;&lt;/th&gt;</code>:Sets off the table header(a normal cell with bold,centeered text)<br>设置表头（一个普通单元格，其中的文本加粗且居中显示）</li></ol><h3 id="1-11-Table-attributes-only-use-for-email-newsletters-表格属性-仅用于电子邮件新闻简报">1.11 Table attributes(only use for email newsletters)[表格属性(仅用于电子邮件新闻简报)]</h3><ol><li><code>&lt;table border=?&gt;</code>:Sets the width of the border around table cells<br>设置单元格周围边框的宽度</li><li><code>&lt;table cellspacing=?&gt;</code>:Sets amount of space between table cells<br>设置表格单元格之间的间距</li><li><code>&lt;table cellpadding=?&gt;</code>:Sets amount of space between a cell’s border and its contents<br>设置单元格边框和内容之间的间距</li><li><code>&lt;table width=?&gt;</code>:Sets width of the table in pixels or as a percentage<br>设置表格的宽度，单位可以是像素或百分比</li><li><code>&lt;tr align=?&gt;</code>:Sets alignment for cells within the roe(left/center/right)<br>设置行内单元格的对齐方式（左对齐/居中/右对齐）</li><li><code>&lt;td align=?&gt;</code>:Sets alignment for cells within the row<br>(left/center/right)<br>设置单元格的对齐方式（左对齐/居中/右对齐）</li><li><code>&lt;tr valign=?&gt;</code>:Sets vertical alignment for cells within the row (top/middle/bottom)<br>设置行内单元格的垂直对齐方式（顶部对齐/居中/底部对齐）</li><li><code>&lt;td valign=?&gt;</code>:Sets vertical alignment for cell (top/middle/bottom)<br>设置单元格的垂直对齐方式（顶部对齐/居中/底部对齐）</li><li><code>&lt;td rowspan=?&gt;</code>:Sets number of rows a cell should span (default=1)<br>设置单元格应跨越的行数（默认为1）</li><li><code>&lt;td colspan=?&gt;</code>:Sets number of columns a cell should span<br>设置单元格应跨越的列数</li><li><code>&lt;td nowrap&gt;</code>:Prevents lines within a cell from being broken to fit<br>防止单元格内部的文本换行以适应</li></ol><h2 id="2-Cascading-Style-Sheets-Cheatsheet-层叠样式表速查表">2. Cascading Style Sheets Cheatsheet(层叠样式表速查表)</h2><h3 id="2-1-Font-Properties-字体属性">2.1 Font Properties(字体属性)</h3><ol><li>Font Family:Changes the font family of certain words, sentences,paragraphs, etc. <br>更改特定单词、句子、段落等的字体系列。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;New Century Schoolbook&quot;</span>, Times, serif; &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>Font Style:Changes text: normal, oblique, and italics.<br>更改文本的样式：正常、斜体、和斜体字。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">font-style</span>: oblique; &#125;<br><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">font-style</span>: normal; &#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>Font-Variant:Used to display font in normal or small-caps.<br>用于显示正常字体或小型大写字体。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">span</span>&#123;<span class="hljs-attribute">font-variant</span>: small-caps&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>Font-Weight:Used to specify the weight of the font.<br>用于指定字体的粗细</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">font-weight</span>: <span class="hljs-number">800</span>;&#125;<br><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">font-weight</span>:normal;&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>Font-Size:Used to modify the size of the displayed font.<br>用于修改显示字体的大小。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">font-size</span>: large; &#125;<br><span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12pt</span>; &#125;<br><span class="hljs-selector-tag">li</span> &#123; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">90%</span>; &#125;<br><span class="hljs-selector-tag">strong</span> &#123; <span class="hljs-attribute">font-size</span>: larger; &#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>Font:Used to combine all properties of fonts<br>用于组合所有字体属性</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">font</span>: italic bold <span class="hljs-number">12pt</span>/<span class="hljs-number">14pt</span> Times, serif; &#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-Color-and-Background-Properties-颜色和背景属性">2.2 Color and Background Properties(颜色和背景属性)</h3><ol><li>Color：Changes the color of text<br>更改文本的颜色。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">color</span>: blue&#125;;<br><span class="hljs-selector-tag">h2</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>Background-Color:Sets the background color of an element.<br>设置元素的背景颜色。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">background-color</span>: white; &#125;<br><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000080</span>; &#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>Background-Image: Sets the background image of an element<br>设置元素的背景图片。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">/images/foo.gif</span>); &#125;<br><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">http://www.htmlhelp.com/bg.png</span>); &#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>Background-Repeat:Determines how a specified background image is repeated.<br>The repeat-x value will repeat the image horizontally while the<br>repeat-y value will repeat the image vertically.<br>确定指定的背景图像如何重复。repeat-x 值将图像水平重复，而 repeat-y 值将图像垂直重复。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">background</span>: white <span class="hljs-built_in">url</span>(<span class="hljs-string">candybar.gif</span>); <span class="hljs-attribute">background-repeat</span>: repeat-x; &#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>Background-Attachment:Determines if a specified background image will scroll with the<br>content or be fixed with regard to the canvas.<br>确定指定的背景图像是随着内容滚动还是相对于画布固定。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">background</span>: white <span class="hljs-built_in">url</span>(<span class="hljs-string">candybar.gif</span>); <span class="hljs-attribute">background-attachment</span>: fixed; &#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>Background:Used to combine all properties of background<br>用于组合所有背景属性。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">background</span>: white <span class="hljs-built_in">url</span>(<span class="hljs-string">http://www.htmlhelp.com/foo.gif</span>); &#125;<br><span class="hljs-selector-tag">BLOCKQUOTE</span> &#123; <span class="hljs-attribute">background</span>: <span class="hljs-number">#7fffd4</span>; &#125;<br><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../backgrounds/pawn.png</span>) <span class="hljs-number">#f0f8ff</span> fixed; &#125;<br><span class="hljs-selector-tag">TABLE</span> &#123; <span class="hljs-attribute">background</span>: red <span class="hljs-built_in">url</span>(<span class="hljs-string">leaves.jpg</span>) no-repeat bottom right; &#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-Text-Properties-文本属性">2.3 Text Properties(文本属性)</h3><ol><li>Word-Spacing:Defines an additional amount of space between words.<br>定义单词之间的额外间距。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> <span class="hljs-selector-tag">EM</span> &#123; <span class="hljs-attribute">word-spacing</span>: <span class="hljs-number">0.4em</span>; &#125;&lt;!--表示所有嵌套在 &lt;<span class="hljs-selector-tag">p</span>&gt; 标签内的 &lt;<span class="hljs-selector-tag">em</span>&gt; 标签，即 &lt;<span class="hljs-selector-tag">p</span>&gt; 元素中的 &lt;<span class="hljs-selector-tag">em</span>&gt; 元素。<br>--&gt;<br><span class="hljs-selector-tag">P</span><span class="hljs-selector-class">.note</span> &#123; <span class="hljs-attribute">word-spacing</span>: -<span class="hljs-number">0.2em</span>; &#125;&lt;!--表示所有带有 class=&quot;note&quot; 的 &lt;<span class="hljs-selector-tag">p</span>&gt; 标签。--&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>Letter-Spacing:Defines an additional amount of space between characters.<br>定义字符之间的额外间距。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">0.1em</span>; &#125;<br><span class="hljs-selector-tag">P</span><span class="hljs-selector-class">.note</span> &#123; <span class="hljs-attribute">letter-spacing</span>: -<span class="hljs-number">0.1em</span>; &#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>Text-Decoration:Allows text to be decorated through one of five properties:underline, overline, line-through, blink, none.<br>允许通过以下五个属性之一装饰文本：下划线（underline）、上划线（overline）、删除线（line-through）、闪烁（blink）、无（none）。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:link</span>, <span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:visited</span>, <span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:active</span> &#123; <span class="hljs-attribute">text-decoration</span>: none; &#125;<br>&lt;!--<br><span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:link</span>：表示未访问过的链接（普通状态）。<br><span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:visited</span>：表示用户已经访问过的链接。<br><span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:active</span>：表示用户正在点击的链接（激活状态）<br>&#123; <span class="hljs-attribute">text-decoration</span>: none; &#125;：表示移除这些链接的默认文本装饰（通常是下划线）。<br> 对于所有未访问过的链接（<span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:link</span>），已经访问过的链接（<span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:visited</span>），和正在点击的链接（<span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:active</span>），都不显示文本装饰（例如下划线）。<br> 换句话说，这行代码将移除所有状态下的超链接的默认下划线效果，使其看起来像普通文本<br> --&gt;<br></code></pre></td></tr></table></figure><ol start="4"><li>Vertical-Align:Used to alter the vertical positioning of an inline element,relative to its parent element or to the element’s line.<br>用于相对于父元素或元素的行，改变内联元素的垂直位置</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">IMG</span><span class="hljs-selector-class">.middle</span> &#123; <span class="hljs-attribute">vertical-align</span>: middle; &#125;<br><span class="hljs-selector-tag">IMG</span> &#123; <span class="hljs-attribute">vertical-align</span>: <span class="hljs-number">50%</span>; &#125;<br><span class="hljs-selector-class">.exponent</span> &#123; <span class="hljs-attribute">vertical-align</span>: super; &#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>Text-Transform:Allows for capitalizing the first letter of each word (capitalize),capitalizing all letters of a word (uppercase), using all small letters in each word(lowercase), and the inital value(none).<br>允许将每个单词的首字母大写（capitalize），将所有字母大写（uppercase），将每个单词的所有字母小写（lowercase），以及初始值（none）。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">text-transform</span>: uppercase &#125;<br><span class="hljs-selector-tag">H2</span> &#123; <span class="hljs-attribute">text-transform</span>: capitalize &#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>Text-Align:Used to justify text left, center, right, and justify.<br>用于将文本左对齐、居中对齐、右对齐和两端对齐。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">text-align</span>: center; &#125;<br><span class="hljs-selector-tag">P</span><span class="hljs-selector-class">.newspaper</span> &#123; <span class="hljs-attribute">text-align</span>: justify; &#125;<br></code></pre></td></tr></table></figure><ol start="7"><li>Text-Indent:Used to specify the amount of indentation prior to the first line of text.<br>用于指定文本第一行的缩进量。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">5em</span>; &#125;<br></code></pre></td></tr></table></figure><ol start="8"><li>Line-Height:Used to control the spacing between baselines of text.<br>用于控制文本基线之间的间距。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200%</span>; &#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-Classification-Properties-分类属性">2.4 Classification Properties(分类属性)</h3><ol><li>List-Style-Type:Specifies the type of list-item marker,and is used if list-style-image is none or if image loading is turned off.<br>指定列表项标记的类型，如果 list-style-image 为 none 或者图像加载被关闭时使用。<br>大白话：list-style-type 属性用来指定列表项的标记类型。这个属性决定了显示在列表项前的标记的形状，比如实心圆、方块或是数字等。这个属性非常有用，因为它允许你改变列表标记的样式，使之更符合网页的设计需求。如果你没有指定 list-style-image，或者指定的图像无法显示，那么就会使用 list-style-type 的设置。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">LI</span><span class="hljs-selector-class">.square</span> &#123; <span class="hljs-attribute">list-style-type</span>: square; &#125;<br><span class="hljs-selector-tag">UL</span><span class="hljs-selector-class">.plain</span> &#123; <span class="hljs-attribute">list-style-type</span>: none; &#125;<br><span class="hljs-selector-tag">OL</span> &#123; <span class="hljs-attribute">list-style-type</span>: upper-alpha; &#125; <span class="hljs-comment">/* A B C D E 等 */</span><br><span class="hljs-selector-tag">OL</span> <span class="hljs-selector-tag">OL</span> &#123; <span class="hljs-attribute">list-style-type</span>: decimal; &#125; <span class="hljs-comment">/* 1 2 3 4 5 等 */</span><br><span class="hljs-selector-tag">OL</span> <span class="hljs-selector-tag">OL</span> <span class="hljs-selector-tag">OL</span> &#123; <span class="hljs-attribute">list-style-type</span>: lower-roman; &#125; <span class="hljs-comment">/* i ii iii iv v 等 */</span><br></code></pre></td></tr></table></figure><ol start="2"><li>List-Style-Image:Specifies the image that will be used as list-item marker when image loading is turned on, replacing the marker specified in the list-style-type property.<br>指定在图像加载开启时，将用作列表项标记的图像，替换 list-style-type 属性中指定的标记。<br>list-style-image 属性允许你将图像用作列表项的标记。这意味着你可以用自定义图像替换传统的列表标记，如圆点或数字。这在创建更具视觉吸引力的列表时非常有用。当图像加载被关闭时，会回退到 list-style-type 指定的标记。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">UL</span><span class="hljs-selector-class">.check</span> &#123; <span class="hljs-attribute">list-style-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">/LI-markers/checkmark.gif</span>); &#125;<br><span class="hljs-selector-tag">UL</span> <span class="hljs-selector-tag">LI</span><span class="hljs-selector-class">.x</span> &#123; <span class="hljs-attribute">list-style-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">x.png</span>); &#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>List-Style-Position:Determines where the marker is placed in regard to the list item. If the value inside is used, the lines will wrap under the marker instead of being indented. outside is default.<br>确定标记在列表项中的位置。如果值为 inside，则行会在标记下方换行，而不是缩进。默认值为 outside。<br>大白话：list-style-position 属性定义列表标记的位置相对于列表内容的放置位置。它有两个可能的值：inside 和 outside。默认值是 outside，标记在内容的外部，并且列表项的文本与页面左侧对齐。如果设为 inside，标记则位于内容的内部，列表文本将环绕标记对齐，这通常会导致文本的首行缩进不同于其他行</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">UL</span> &#123; <span class="hljs-attribute">list-style-position</span>: inside; &#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-Box-Properties-盒子属性">2.5 Box Properties(盒子属性)</h3><p><img src="/images/Box_Model.png" alt="盒子模型"></p><blockquote><p><strong>小贴士：</strong><br>Margin(外边距) - 清除边框外的区域，外边距是透明的Margin(外边距) - 清除边框外的区域，外边距是透明的<br>Border(边框) - 围绕在内边距和内容外的边框<br>Padding(内边距) - 清除内容周围的区域，内边距是透明的<br>Content(内容) - 盒子的内容，显示文本和图像</p></blockquote><ol><li>Margin-Top：Sets the top margin of an element by<br>specifying a length or a percentage.<br>通过指定长度或百分比设置元素的上边距。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5pt</span>; &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>Margin-Right:Sets the right margin of an element by specifying a length or a percentage.<br>通过指定长度或百分比设置元素的右边距</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span><span class="hljs-selector-class">.narrow</span> &#123; <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">50%</span>; &#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>Margin-Bottom:sets the bottom margin of an element by specifying a length or a percentage.<br>通过指定长度或百分比设置元素的下边</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">DT</span> &#123; <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">3em</span>; &#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>Margin-Left:Sets the left margin of an element by specifying a length or a percentage.<br>通过指定长度或百分比设置元素的左边距</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">ADDRESS</span> &#123; <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">50%</span>; &#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>Margin:Sets the margins of an element by specifying top, bottom, left and right margins – all either specifying length or percentage<br>通过指定上、下、左、右边距来设置元素的边距 - 都是指定长度或百分比</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">margin</span>: <span class="hljs-number">5em</span>; &#125; <span class="hljs-comment">/* 所有边距 5em */</span><br><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">margin</span>: <span class="hljs-number">2em</span> <span class="hljs-number">4em</span>; &#125; <span class="hljs-comment">/* 上下边距 2em，左右边距 4em */</span><br><span class="hljs-selector-tag">DIV</span> &#123; <span class="hljs-attribute">margin</span>: <span class="hljs-number">1em</span> <span class="hljs-number">2em</span> <span class="hljs-number">3em</span> <span class="hljs-number">4em</span>; &#125; <br><span class="hljs-comment">/* 上边距 1em，右边距 2em，下边距 3em，左边距 4em */</span><br></code></pre></td></tr></table></figure><ol start="6"><li>Padding-Top:Describes the amount of space between the top border and the content of the selector.<br>描述选择器的顶部边框和内容之间的空间。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">20%</span>; &#125;<br></code></pre></td></tr></table></figure><ol start="7"><li>Padding-Right:Describes the amount of space between the right border and the content of the selector.<br>描述选择器的右边框和内容之间的空间。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">20px</span>; &#125;<br></code></pre></td></tr></table></figure><ol start="8"><li>Padding-Bottom:Describes the amount of space between the bottom border and the content of the selector.<br>描述选择器的底部边框和内容之间的空间。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">5em</span>; &#125;<br></code></pre></td></tr></table></figure><ol start="9"><li>Padding-Left:Describes the amount of space between the left border and the content of the selector.<br>描述选择器的左边框和内容之间的空间。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">15pt</span>; &#125;<br></code></pre></td></tr></table></figure><ol start="10"><li>Padding:Shorthand for the padding-top, padding-right, padding-bottom,and padding-left properties.<br><br>内边距的简写属性，依次是上、右、下、左。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BLOCKQUOTE</span> &#123; <span class="hljs-attribute">padding</span>: <span class="hljs-number">2em</span> <span class="hljs-number">4em</span> <span class="hljs-number">5em</span> <span class="hljs-number">4em</span>; &#125;<br></code></pre></td></tr></table></figure><ol start="11"><li>Border-Top-Width:Used to specify the width of an element’s top border.<br>用于指定元素顶部边框的宽度。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123;<span class="hljs-attribute">border-top</span>:<span class="hljs-number">20%</span>&#125;<br></code></pre></td></tr></table></figure><ol start="12"><li>Border-Right-Width:Used to specify the width of an element’s right border<br>用于指定元素右侧边框的宽度。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-right</span>: <span class="hljs-number">20%</span>; &#125;<br></code></pre></td></tr></table></figure><ol start="13"><li>Border-Bottom-Width:Used to specify the width of an element’s bottom border<br>用于指定元素底部边框的宽度</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">20%</span>; &#125;<br></code></pre></td></tr></table></figure><ol start="14"><li>Border-Left-Width:Used to specify the width of an element’s left border.<br>用于指定元素左侧边框的宽度。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-left</span>: <span class="hljs-number">20%</span>; &#125;<br></code></pre></td></tr></table></figure><ol start="15"><li>Border-Width:Used to set the width of an element’s border (either all borders, or specifying top border, right border, bottom border,left border).<br>用于设置元素的边框宽度（所有边框，或分别指定上、右、下、左边框）。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-width</span>: <span class="hljs-number">20%</span>; &#125;<br><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-width</span>: <span class="hljs-number">10px</span> <span class="hljs-number">5px</span> <span class="hljs-number">10px</span> <span class="hljs-number">5px</span>; &#125;<br></code></pre></td></tr></table></figure><ol start="16"><li>Border-Color:Used to set the color of an element’s border.<br>用于设置元素边框的颜色</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#000000</span>; &#125;<br></code></pre></td></tr></table></figure><ol start="17"><li><p>Border-Style:Sets style of a border - none, dotted, dashed, solid, double.<br>设置边框样式 - 无、点状、虚线、实线、双线。</p></li><li><p>Border-Top:Sets the width, style, and color of an element’s top border<br>设置元素顶部边框的宽度、样式和颜色</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-top</span>: <span class="hljs-number">10px</span> red double; &#125;<br></code></pre></td></tr></table></figure><ol start="19"><li>Border-Right:Sets the width, style, and color of an element’s right border.<br>设置元素右侧边框的宽度、样式和颜色。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-right</span>: <span class="hljs-number">10px</span> red double; &#125;<br></code></pre></td></tr></table></figure><ol start="20"><li>Border-Bottom:Sets the width, style, and color of an element’s bottom border<br>设置元素底部边框的宽度、样式和颜色</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">10px</span> red double; &#125;<br></code></pre></td></tr></table></figure><ol start="21"><li>Border-Left:Sets the width, style, and color of an element’s left border<br>设置元素左侧边框的宽度、样式和颜色</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-left</span>: <span class="hljs-number">10px</span> red double; &#125;<br></code></pre></td></tr></table></figure><ol start="22"><li>Border:Sets the width, style, and color of an element’s border<br>设置元素边框的宽度、样式和颜色</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> red double; &#125;<br></code></pre></td></tr></table></figure><ol start="23"><li>Width:Each block-level or replaced element can be given a width, specified as a length, a percentage, or as auto.<br>每个块级或替换元素都可以指定一个宽度，长度、百分比或自动。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">15px</span>; &#125;<br><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">35%</span>; &#125;<br><span class="hljs-selector-class">.foo</span> &#123; <span class="hljs-attribute">width</span>: auto; &#125;<br></code></pre></td></tr></table></figure><ol start="24"><li>Height:Each block-level or replaced element can be given a height,specified as a length or as auto.<br>每个块级或替换元素都可以指定一个高度，长度或自动。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">height</span>: <span class="hljs-number">15px</span>; &#125;<br><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">height</span>: <span class="hljs-number">35%</span>; &#125;<br><span class="hljs-selector-class">.foo</span> &#123; <span class="hljs-attribute">height</span>: auto; &#125;<br></code></pre></td></tr></table></figure><ol start="25"><li>Float:Allows text to wrap around an element (left, right, none).<br>允许文本环绕元素（左、右、无）</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">float</span>: left; &#125;<br><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">float</span>: right; &#125;<br><span class="hljs-selector-class">.foo</span> &#123; <span class="hljs-attribute">float</span>: none; &#125;<br></code></pre></td></tr></table></figure><ol start="26"><li>Clear:Specifies whether an element allows floating elements to its sides (left, right, none).<br>指定一个元素是否允许浮动元素在其侧边（左、右、无）</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">clear</span>: left; &#125;<br><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">clear</span>: right; &#125;<br><span class="hljs-selector-class">.foo</span> &#123; <span class="hljs-attribute">clear</span>: none; &#125;<br></code></pre></td></tr></table></figure><p>一个具体的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Box Model Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-comment">/*全局样式*/</span></span><br><span class="language-css">            <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;  <span class="hljs-comment">/* 设置盒子的宽度 */</span></span><br><span class="language-css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>; <span class="hljs-comment">/* 设置盒子的高度 */</span></span><br><span class="language-css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;  <span class="hljs-comment">/* 设置盒子外边距 */</span></span><br><span class="language-css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>; <span class="hljs-comment">/* 设置盒子内边距 */</span></span><br><span class="language-css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> solid black; <span class="hljs-comment">/* 设置盒子边框样式 */</span></span><br><span class="language-css">                <span class="hljs-attribute">float</span>: left; <span class="hljs-comment">/* 设置浮动，使盒子并排显示 */</span></span><br><span class="language-css">                <span class="hljs-attribute">box-sizing</span>: border-box; <span class="hljs-comment">/* 包括边框和内边距在内的总宽高计算 */</span></span><br><span class="language-css">            &#125;</span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-comment">/*针对第一个盒子的特定样式*/</span></span><br><span class="language-css">            <span class="hljs-selector-class">.box1</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">background-color</span>:lightblue;</span><br><span class="language-css">            &#125;</span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-comment">/*针对第二个盒子的特定样式*/</span></span><br><span class="language-css">            <span class="hljs-selector-class">.box2</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">background-color</span>:lightgreen;</span><br><span class="language-css">                <span class="hljs-attribute">clear</span>:both;<span class="hljs-comment">/* 清除浮动，使此盒子不并排在第一个盒子旁边 */</span></span><br><span class="language-css">            &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span>Box 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span>box 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/boxExample.png" alt="效果图"></p><p>说明：</p><ul><li>HTML 部分：<ul><li>设定了一个基本的HTML结构，包含了标题和两个盒子元素。</li></ul></li><li>CSS 部分：<ul><li>在<code>style</code>标签内定义了样式，包含：<ul><li>全局样式：为所有 div 设置了宽度、高度、外边距、内边距、边框和浮动属性。</li><li>.box1 和 .box2 的特定样式，分别设置了背景颜色和清除浮动。</li></ul></li></ul></li></ul><h2 id="3-JavaScript">3. JavaScript</h2><h3 id="3-1-Syntax-and-Structure">3.1 Syntax and Structure</h3><ul><li>Comments<ul><li>// Single line comment</li><li>/*Multi-line<br>comment */</li></ul></li><li>Statements<ul><li>Statements are the building blocks of a JavaScript program.</li><li>End with a semicolon;(optional but recommended)</li></ul></li></ul><h3 id="3-1-语法和结构">3.1 语法和结构</h3><ul><li>注释<ul><li>//单行注释</li><li>/<em>多行<br>注释</em>/</li></ul></li><li>语句<ul><li>语句是JavaScript程序的构建块</li><li>以分号结尾;(可选但建议使用)</li></ul></li></ul><h3 id="3-2-Variables">3.2 Variables</h3><ul><li>Declaration<br>var name;//Function-scoped, can be re-declared<br>let age;//Block-scoped, cannot be re-declared within the same scope<br>const PI = 3.14;// Block-scoped, constant value</li><li>Initialization<ul><li>var name = “John”;</li><li>let age = 25;</li><li>const PI = 3.14;</li></ul></li></ul><h3 id="3-2-变量">3.2 变量</h3><ul><li>声明<ul><li>var name;//函数作用域，可以重新声明</li><li>let age;//块作用域，同一作用域不能重新声明</li><li>const PI = 3.14;//块作用域，常数值</li></ul></li><li>初始化<ul><li>var name = “John”;</li><li>let age = 25;</li><li>const PI = 3.14;</li></ul></li></ul><h3 id="3-3-Data-Types">3.3 Data Types</h3><ul><li>Primitive Types<ul><li>Number: Represents both integer and floating-point numbers. Example: 42, 3.14</li><li>String: Represents a sequence of characters. Example: “Hello”, ‘World’</li><li>Boolean: Represents logical values. Example: true, false</li><li>Null: Represents the intentional absence of any object value. Example: null</li><li>Undefined: Represents an uninitialized variable. Example: undefined</li><li>Symbol: Represents a unique and immutable primitive value. Example: Symbol(‘description’)</li><li>BigInt: Represents integers with arbitrary precision. Example: 123n</li></ul></li></ul><h3 id="3-3-数据类型">3.3 数据类型</h3><ul><li>原始类型<ul><li>Number：表示整数和浮点数。例如：42, 3.14</li><li>String：表示字符序列。例如：“Hello”, ‘World’</li><li>Boolean：表示逻辑值。例如：true, false</li><li>Null：表示有意的没有任何对象值。例如：null</li></ul></li><li>Undefined：表示未初始化的变量。例如：undefined<ul><li>undefined 在 JavaScript 中代表未定义的值。当声明的变量未被初始化时，变量的默认值就是 undefined。也就是说，这个变量已经被声明了，但还没有被赋予任何值。</li><li>undefined 也可以作为函数没有返回值的标志。例如，当一个函数没有明确的返回语句时，它默认返回 undefined。</li></ul></li><li>Symbol：表示唯一且不可变的原始值。例如：Symbol(‘description’)<br>* Symbol 是 ES6 引入的一种新的原始数据类型，主要用于创建唯一的标识符。Symbols 是不可变的且是唯一的，即使创建两个相同描述的 Symbol，它们也是不相等的。这使得 Symbol 成为添加属性到对象时不会出现属性名冲突的理想选择。</li><li>BigInt：表示任意精度的整数。例如：123n</li></ul><h3 id="3-4-Operators">3.4 Operators</h3><ul><li>Arithmetic Operators:+ (Addition), - (Subtraction), * (Multiplication), / (Division), % (Modulus), ++ (Increment), – (Decrement)</li><li>Assignment Operators:= (Assignment), += (Addition assignment), -= (Subtraction assignment), *= (Multiplication assignment), /= (Division assignment), %= (Modulus assignment)</li><li>Comparison Operators:== (Equal to), === (Strict equal to), != (Not equal to), !== (Strict not equal to), &gt; (Greater than), &lt; (Less than), &gt;= (Greater than or equal to), &lt;= (Less than or equal to)</li><li>Logical Operators:&amp;&amp; (AND), || (OR), ! (NOT)</li></ul><h3 id="3-4-运算符">3.4 运算符</h3><ul><li>算术运算符：+(加法), - (减法), * (乘法), / (除法), % (取模), ++ (自增), – (自减)</li><li>赋值运算符：= (赋值), += (加法赋值), -= (减法赋值), *= (乘法赋值), /= (除法赋值), %= (取模赋值)</li><li>比较运算符：== (等于), === (严格等于), != (不等于), !== (严格不等于), &gt; (大于), &lt; (小于), &gt;= (大于或等于), &lt;= (小于或等于)</li><li>逻辑运算符：&amp;&amp;(与)， ||(或), !(非)</li></ul><h3 id="3-5-Functions">3.5 Functions</h3><ul><li>Function Declaration<ul><li>Named functions that can be called anywhere in the scope</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Function Expression<ul><li>Functions assigned to variables.Can be anonymous.</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> greet = <span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-5-函数">3.5 函数</h3><ul><li>函数声明<ul><li>可在作用域内任何位置调用的命名函数</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>函数表达式<ul><li>分配给变量的函数。可以是匿名的</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> greet = <span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-6-代码示例">3.6 代码示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JavaScript Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;John&quot;</span>;<span class="hljs-comment">//旧式变量声明</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> num1 = <span class="hljs-number">10</span>;<span class="hljs-comment">//块级作用域变量</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> num2 = <span class="hljs-number">5</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> greetingText = <span class="hljs-string">&quot;Hello&quot;</span>;<span class="hljs-comment">//常量声明</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">//函数声明</span></span><br><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> greetingText + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-string">&quot;!&quot;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">//函数表达式</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> calculate = <span class="hljs-keyword">function</span>(<span class="hljs-params">operation</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (operation === <span class="hljs-string">&#x27;add&#x27;</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> num1 + num2;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (operation === <span class="hljs-string">&#x27;subtract&#x27;</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> num1 - num2;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (operation === <span class="hljs-string">&#x27;multiply&#x27;</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> num1 * num2;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (operation === <span class="hljs-string">&#x27;divide&#x27;</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> num1 / num2;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">greet</span>(name));<span class="hljs-comment">//输出问候语</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Addition: &quot;</span> + <span class="hljs-title function_">calculate</span>(<span class="hljs-string">&#x27;add&#x27;</span>));        <span class="hljs-comment">// 加法</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Subtraction: &quot;</span> + <span class="hljs-title function_">calculate</span>(<span class="hljs-string">&#x27;subtract&#x27;</span>)); <span class="hljs-comment">// 减法</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Multiplication: &quot;</span> + <span class="hljs-title function_">calculate</span>(<span class="hljs-string">&#x27;multiply&#x27;</span>)); <span class="hljs-comment">// 乘法</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Division: &quot;</span> + <span class="hljs-title function_">calculate</span>(<span class="hljs-string">&#x27;divide&#x27;</span>));     <span class="hljs-comment">// 除法</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">//演示null和undefined</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> undefinedVariable;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;An undefined variable: &quot;</span>, undefinedVariable);<span class="hljs-comment">// 显示 undefined</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;A null operation result: &quot;</span>, <span class="hljs-title function_">calculate</span>(<span class="hljs-string">&#x27;unknown&#x27;</span>)); <span class="hljs-comment">// 显示 null</span></span><br><span class="language-javascript">            </span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><em>代码解释</em>：<br><em>变量声明：使用了 var, let, 和 const 来声明和初始化变量。</em><br><em>函数声明和函数表达式：greet 是一个函数声明，用于生成问候语。calculate 是一个函数表达式，根据传入的操作类型执行数学运算。</em><br><em>算术和赋值运算符：在 calculate 函数中使用了加法 (+), 减法 (-), 乘法 (</em>), 和除法 (/) 运算符。*<br><em>输出结果：使用 console.log 输出问候语和各种数学运算的结果。</em><br><em>处理未定义和空值：演示了如何处理 undefined 和 null。</em></p><blockquote><p><strong>小贴士：let和var的区别</strong></p><ol><li>作用域(scope)：var声明的变量具有函数作用域，这意味着在函数内部定义的变量在整个函数中都是可见的，即使是在声明之前。如果在函数外部使用 var 声明变量，该变量成为全局变量。而let声明的变量具有块级作用域，这意味着变量只在包含它的代码块（例如：循环、条件语句等）内有效。</li><li>变量提升(hoisting):var变量会提升，这表示变量可以在声明之前被访问，此时变量的值是 undefined。而let变量同样被提升到块的顶部，但在声明之前访问这些变量会导致一个暂时性死区（Temporal Dead Zone, TDZ），即在声明之前访问变量会报错。</li><li>重复声明(Re-dedclaration):var允许在同一作用域内多次声明同一个变量，而let在相同的作用域或块级作用域内不能重复声明同一个变量，尝试这样做将抛出一个错误。</li></ol></blockquote><blockquote><p>例子：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">var</span> varVariable = <span class="hljs-string">&quot;I am var&quot;</span>;<br>    <span class="hljs-keyword">let</span> letVariable = <span class="hljs-string">&quot;I am let&quot;</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(varVariable); <span class="hljs-comment">// 输出: &quot;I am var&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(letVariable); <span class="hljs-comment">// 报错: letVariable is not defined</span><br><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> x = <span class="hljs-number">20</span>; <span class="hljs-comment">// 有效</span><br><span class="hljs-keyword">let</span> y = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">let</span> y = <span class="hljs-number">20</span>; <span class="hljs-comment">// 报错: Identifier &#x27;y&#x27; has already been declared</span><br></code></pre></td></tr></table></figure><h2 id="4-jQuery">4. jQuery</h2><h3 id="4-1-Introuduction-介绍">4.1 Introuduction(介绍)</h3><ul><li>jQuery is a fast, small, and feature-rich JavaScript library.</li><li>jQuery 是一个快速、小巧且功能丰富的 JavaScript 库。</li><li>Simplifies HTML document traversal and manipulation, event handling, animation, and Ajax.</li><li>简化了 HTML 文档遍历和操作、事件处理、动画和 Ajax 的使用。</li></ul><h3 id="4-2-Including-jQuery">4.2 Including jQuery</h3><ol><li>CDN</li></ol><p>html<br>Copy code</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jQuery.com/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>Local(本地)</li></ol><p>html<br>Copy code</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;path/to/your/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-3-Basic-Syntax-基本语法">4.3 Basic Syntax(基本语法)</h3><ul><li>The basic syntax is:$(selector).action()</li><li>基本语法为：<code>$(selector).action()</code></li><li>$ is a shorthand for jQuery</li><li><code>$</code> 是 jQuery 的简写。</li><li>Selector:Finds HTML elements</li><li>选择器（Selector）：查找 HTML 元素。</li><li>Action:Performs an action on the elements</li><li>操作（Action）：对元素执行操作。</li></ul><h3 id="4-4-Document-Ready-Event-文档就绪事件">4.4 Document Ready Event(文档就绪事件)</h3><ul><li>Ensures the DOM is fully loaded before running scripts.</li><li>确保 DOM 完全加载后再运行脚本。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Code to execute when the DOM is ready// 当 DOM 准备好后执行的代码</span><br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>Shorthand:</li><li>简写形式：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Code to execute when the DOM is ready// 当 DOM 准备好后执行的代码</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="4-5-Selectors-选择器">4.5 Selectors(选择器)</h3><ul><li>Element Selector(元素选择器)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>); <span class="hljs-comment">// Selects all &lt;p&gt; elements//选择所有 &lt;p&gt; 元素</span><br></code></pre></td></tr></table></figure><ul><li>ID Selector(ID选择器)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myId&quot;</span>); <span class="hljs-comment">// Selects the element with id=&quot;myId&quot;//选择 id=&quot;myId&quot; 的元素</span><br></code></pre></td></tr></table></figure><ul><li>Class Selector(类选择器)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;.myClass&quot;</span>); <span class="hljs-comment">// Selects all elements with class=&quot;myClass&quot;//选择所有 class=&quot;myClass&quot; 的元素</span><br></code></pre></td></tr></table></figure><h3 id="4-6-Event-Handling">4.6 Event Handling</h3><ul><li>Common Events<ul><li>click</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myButton&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-params"><span class="hljs-keyword">function</span></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Button clicked!&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>Mouse Events</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">mouseenter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>);<br>&#125;);<br>$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">mouseleave</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>Keyboard Events</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">keypress</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Key pressed!&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="4-6-事件处理">4.6 事件处理</h3><ul><li>常见事件<ul><li>点击事件</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myButton&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-params"><span class="hljs-keyword">function</span></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Button clicked!&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>解释</em></p><ul><li><p><code>$(&quot;#myButton&quot;)</code> 选择具有 <code>ID myButton</code> 的元素，通常是一个按钮。</p></li><li><p><code>.click(function() &#123;...&#125;)</code> 为这个按钮添加一个点击事件监听器。当用户点击这个按钮时，会执行函数内的代码。</p></li><li><p><code>alert(&quot;Button clicked!&quot;);</code> 在用户点击按钮后显示一个警告对话框，内容为 “Button clicked!”。</p><ul><li>鼠标事件</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">mouseenter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>);<br>&#125;);<br>$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">mouseleave</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><em>解释</em></p><ul><li><code>$(&quot;p&quot;)</code> 选择所有 <code>&lt;p&gt;</code> 元素。</li><li>.mouseenter(function() {…}) 为这些 <code>&lt;p&gt;</code> 元素添加鼠标进入（鼠标悬停）事件监听器。当鼠标指针移入这些元素时，会执行函数内的代码。<ul><li>键盘事件</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">keypress</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Key pressed!&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><em>解释</em></p><ul><li><code>$(&quot;input&quot;)</code> 选择所有 <code>&lt;input&gt;</code> 元素。</li><li><code>.keypress(function() &#123;...&#125;)</code> 为这些 <code>&lt;input&gt;</code> 元素添加键盘按键事件监听器。当用户在这些元素中按下任意键时，函数内的代码会被执行。</li><li><code>console.log(&quot;Key pressed!&quot;);</code> 在浏览器的控制台输出 “Key pressed!”，这用于调试或向开发者提供反馈，用户看不到这个输出。</li></ul><h3 id="4-7-Manipulating-HTML-and-CSS-操作HTML和CSS">4.7 Manipulating HTML and CSS(操作HTML和CSS)</h3><ul><li>HTML Content(HTML内容)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&lt;p&gt;New content&lt;/p&gt;&quot;</span>); <span class="hljs-comment">// Sets HTML content//设置HTML内容</span><br><span class="hljs-keyword">var</span> content = $(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">html</span>(); <span class="hljs-comment">// Gets HTML content//获取HTML内容</span><br></code></pre></td></tr></table></figure><ul><li>Text Content(文本内容)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;New text content&quot;</span>); <span class="hljs-comment">// Sets text content//设置文本内容</span><br><span class="hljs-keyword">var</span> text = $(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">text</span>(); <span class="hljs-comment">// Gets text content//获取文本内容</span><br></code></pre></td></tr></table></figure><ul><li>CSS</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>); <span class="hljs-comment">// Sets the color to blue//设置颜色为蓝色</span><br><span class="hljs-keyword">var</span> color = $(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>); <span class="hljs-comment">// Gets the color value//获取颜色值</span><br></code></pre></td></tr></table></figure><h3 id="4-8-Effects-and-Animations-效果和动画">4.8 Effects and Animations(效果和动画)</h3><ul><li>Show/Hide(显示/隐藏)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">show</span>(); <span class="hljs-comment">// Shows the element//显示元素</span><br>$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">hide</span>(); <span class="hljs-comment">// Hides the element//隐藏元素</span><br></code></pre></td></tr></table></figure><ul><li>Fade(淡入/淡出)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">fadeIn</span>(); <span class="hljs-comment">// Fades in the element//元素淡入</span><br>$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">fadeOut</span>(); <span class="hljs-comment">// Fades out the element//元素淡出</span><br></code></pre></td></tr></table></figure><ul><li>Slide(滑动)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">slideDown</span>(); <span class="hljs-comment">// Slides down the element//元素向下滑动</span><br>$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">slideUp</span>(); <span class="hljs-comment">// Slides up the element//元素向上滑动</span><br></code></pre></td></tr></table></figure><ul><li>Animate(动画)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">animate</span>(&#123;<br>  <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;250px&#x27;</span>,<br>  <span class="hljs-attr">opacity</span>: <span class="hljs-string">&#x27;0.5&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="4-9-Chaininig">4.9 Chaininig</h3><ul><li>jQuery allows you to chain multiple methods.</li><li>jQuery 允许你链式调用多个方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>).<span class="hljs-title function_">slideUp</span>().<span class="hljs-title function_">slideDown</span>();<br></code></pre></td></tr></table></figure><h2 id="5-Bootstrap">5 Bootstrap</h2><h3 id="5-1-Bootstrap-Basics-Review-Notes">5.1 Bootstrap Basics Review Notes</h3><h4 id="5-1-1-Introduction-介绍">5.1.1 Introduction(介绍)</h4><ul><li>Bootstrap is a popular front-end framework for developing responsive and mobile-first websites.</li><li>Bootstrap是一个流行的前端框架，用于开发响应式和移动优先的网站</li><li>It includes HTML, CSS, and JavaScript components.</li><li>它包括HTML，CSS和JavaScript组件</li></ul><blockquote><p><strong>小贴士：</strong></p><ul><li>响应式网站设计(Responsive Web Design):响应式网站设计（RWD）是一种网页设计方法论，其目的是使网站能够对不同的屏幕尺寸和解析度做出响应并相应地调整其布局。这意味着网站可以在桌面显示器、笔记本电脑、平板电脑以及手机上提供一致的查看体验，无需为每种设备制作不同的版本</li><li>移动优先设计(Mobile First Design)：移动优先设计是一种策略，优先考虑移动设备的布局和设计，在此基础上扩展至桌面版视图。这种设计策略的主要原因是移动互联网使用已超过桌面互联网使用，许多设计师和开发者选择优先为小屏幕优化其网站。</li></ul></blockquote><h4 id="5-1-2-Including-Bootstrap">5.1.2 Including Bootstrap</h4><ul><li>CDN<ul><li>CSS</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;link href=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.6.0/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>JS</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;</span>&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.6.0/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>Local<ul><li>Download from <a href="http://getbootstrap.com">getbootstrap.com</a> and include the files in your project.</li></ul></li></ul><h4 id="5-1-3-Basic-Structure">5.1.3 Basic Structure</h4><ul><li>HTML Template(HTML模板)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>  &lt;meta charset=&quot;UTF-8&quot;&gt;<br>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>  &lt;title&gt;Bootstrap Example&lt;/title&gt;<br>  &lt;link href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.6.0/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>  &lt;h1&gt;Hello, world!&lt;/h1&gt;<br><br>  &lt;script src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;<br>  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js&quot;&gt;&lt;/script&gt;<br>  &lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.6.0/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="5-1-4-Grid-System-网格系统">5.1.4 Grid System(网格系统)</h4><ul><li>Bootstrap’s grid system uses a series of containers, rows, and columns to layout and align content.</li><li>Bootstrap 的网格系统使用一系列容器、行和列来布局和对齐内容。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm&quot;</span>&gt;</span><br>      Column 1<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm&quot;</span>&gt;</span><br>      Column 2<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm&quot;</span>&gt;</span><br>      Column 3<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>Containers(容器)<ul><li><code>.container</code> for a responsive fixed-width container.</li><li><code>.container</code>用于响应式固定宽度容器</li><li><code>.container-fluid</code> for a full-width container, spanning the entire width of the viewport.</li><li><code>.container-fluid</code>用于全宽容器，覆盖视口的整个宽度</li></ul></li><li>Columns(列)<ul><li><code>.col-*</code>用于响应式列(例如，<code>.col-6</code>为50%宽度)</li><li><code>.col-sm-*</code>,<code>.col-md-*</code>,<code>.col-lg-*</code>,<code>.col-xl-*</code>用于不同的断点</li></ul></li></ul><blockquote><p><strong>小贴士：理解断点(Breakpoints)</strong><br>在Bootstrap中，断点是媒体查询的预设尺寸，定义了在不同的屏幕宽度下布局应该如何变化。这些断点主要对应不同种类的设备屏幕尺寸，如手机、平板电脑、桌面显示器等。</p></blockquote><h4 id="5-1-5-Typography-排版">5.1.5 Typography(排版)</h4><ul><li>Headings(标题)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h1. Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>h2. Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-comment">&lt;!-- and so on --&gt;</span><br></code></pre></td></tr></table></figure><ul><li>Lead(引导段落)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lead&quot;</span>&gt;</span>This is a lead paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>Text Utilities(文本工具)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted&quot;</span>&gt;</span>Muted text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-primary&quot;</span>&gt;</span>Primary text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-success&quot;</span>&gt;</span>Success text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-info&quot;</span>&gt;</span>Info text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-warning&quot;</span>&gt;</span>Warning text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-danger&quot;</span>&gt;</span>Danger text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-1-6-Components-组件">5.1.6 Components(组件)</h4><ul><li>Buttons(按钮)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Primary<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-secondary&quot;</span>&gt;</span>Secondary<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span>&gt;</span>Success<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-1-7-Forms-表单">5.1.7 Forms(表单)</h4><ul><li>Basic Form(基本表单)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;</span>Email address<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span> <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">&quot;emailHelp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emailHelp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span>We&#x27;ll never share your email with anyone else.<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-input&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleCheck1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-label&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleCheck1&quot;</span>&gt;</span>Check me out<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-1-8-Utilities-实用工具类">5.1.8 Utilities(实用工具类)</h4><ul><li>Spacing(间距)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span>&gt;</span>Margin bottom<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-3&quot;</span>&gt;</span>Padding<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>Text Alignment(文本对齐)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-left&quot;</span>&gt;</span>Left aligned text<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>Center aligned text<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-right&quot;</span>&gt;</span>Right aligned text<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>Display Property</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-none&quot;</span>&gt;</span>Hidden<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-block&quot;</span>&gt;</span>Block<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-inline&quot;</span>&gt;</span>Inline<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-Bootstrap4-Cheatsheet">5.2 Bootstrap4 Cheatsheet</h3><h4 id="5-2-1-Breakpoints-断点">5.2.1 Breakpoints(断点)</h4><ul><li>Extra small ＜ 544px</li><li>Small ≥ 544px</li><li>Medium ≥ 768px</li><li>Large ≥ 992px</li><li>Extra Large ≥ 1200px</li></ul><h4 id="5-2-2-Colors-颜色">5.2.2 Colors(颜色)</h4><ul><li><code>.text-primary</code></li><li><code>.text-secondary</code></li><li><code>.text-success</code></li><li><code>.text-danger</code></li><li><code>.text-warning</code></li><li><code>.text-info</code></li><li><code>.text-light</code></li><li><code>.text-dark</code></li><li><code>.bg-primary</code></li><li><code>.bg-secondary</code></li><li><code>.bg-success</code></li><li><code>.bg-danger</code></li><li><code>.bg-warning</code></li><li><code>.bg-info</code></li><li><code>.bg-light</code></li><li><code>.bg-dark</code></li><li><code>.bg-white</code></li></ul><blockquote><p><strong>小贴士</strong><br>文本颜色类 (text-<em>):<br><code>.text-primary</code>, <code>.text-secondary</code>, <code>.text-success</code>, <code>.text-danger</code>, <code>.text-warning</code>, <code>.text-info</code>, <code>.text-light</code>, 和 <code>.text-dark</code> 分别将段落的文本颜色设置为主题的基本颜色、次要颜色、成功颜色（通常是绿色）、危险颜色（通常是红色）、警告颜色（通常是黄色）、信息颜色（通常是浅蓝色）、浅色（用于深色背景）、和深色（用于浅色背景）。<br>背景颜色类 (bg-</em>):<br><code>.bg-primary</code>, <code>.bg-secondary</code>, <code>.bg-success</code>, <code>.bg-danger</code>, <code>.bg-warning</code>, <code>.bg-info</code>, <code>.bg-light</code>, <code>.bg-dark</code>, 和 <code>.bg-white</code> 用于设置背景颜色，通常与 <code>text-white</code> 或 <code>text-dark</code> 搭配使用以保证足够的对比，从而确保文本可读性。</p></blockquote><p>一个具体的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Color Classes Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container mt-5&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-primary&quot;</span>&gt;</span>This is a primary text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-secondary&quot;</span>&gt;</span>This is a secondary text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-success&quot;</span>&gt;</span>This is a success text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-danger&quot;</span>&gt;</span>This is a danger text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-warning&quot;</span>&gt;</span>This is a warning text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-info&quot;</span>&gt;</span>This is an info text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-light bg-dark&quot;</span>&gt;</span>This is a light text on dark background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-dark bg-light&quot;</span>&gt;</span>This is a dark text on light background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-primary text-white p-2&quot;</span>&gt;</span>This is a text with primary background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-secondary text-white p-2&quot;</span>&gt;</span>This is a text with secondary background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-success text-white p-2&quot;</span>&gt;</span>This is a text with success background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-danger text-white p-2&quot;</span>&gt;</span>This is a text with danger background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-warning text-white p-2&quot;</span>&gt;</span>This is a text with warning background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-info text-white p-2&quot;</span>&gt;</span>This is a text with info background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-light text-dark p-2&quot;</span>&gt;</span>This is a text with light background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-dark text-white p-2&quot;</span>&gt;</span>This is a text with dark background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-white text-dark p-2&quot;</span>&gt;</span>This is a text with white background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/bscolors1.png" alt="效果图1"><br><img src="/images/bscolors2.png" alt="效果图2"></p><h4 id="5-2-3-Typography-排版">5.2.3 Typography(排版)</h4><ul><li><code>.text-left</code>: Left aligned text(左对齐文本)</li><li><code>.text-center</code>: Center aligned text(居中对齐文本)</li><li><code>.text-right</code>: Right aligned text(右对齐文本)</li><li><code>.text-justify</code>： Justified text(两端对齐文本)</li><li><code>.text-nowrap</code>： No wrap text(禁止文本换行)</li><li><code>.text-lowercause</code>： Lowercase text(将文本转换为小写)</li><li><code>.text-uppercase</code>： Uppercase text(将文本转换为大写)</li><li><code>.text-capitalize</code>： Capitalized text(将文本中每个单词首字母大写)</li><li><code>.lead</code>： Good for first paragraph of articl(适合用作文章的第一段)<ul><li>通常文本会大一些，用于引导读者进入文章内容</li></ul></li></ul><h4 id="5-2-4-Lists-列表">5.2.4 Lists(列表)</h4><ul><li><code>list-unstyled</code>:Removes default list margin(移除默认的列表外边距)<ul><li>通常用于移除 <code>&lt;ul&gt;</code> 或 <code>&lt;ol&gt;</code> 的默认列表样式，如前面的项目符号或数字。</li></ul></li><li><code>.dl-horizontal</code>:Makes list items two columns(将定义列表<code>&lt;dl&gt;</code>的项显示为两列)<ul><li>通常用于使术语和描述并排显示，而不是上下排列。</li></ul></li><li><code>.list-inline</code>:Makes list items inline(使列表项<code>&lt;li&gt;</code>呈行内（inline）显示)<ul><li>可以将所有列表项放在一行显示，而不是默认的垂直堆叠。</li></ul></li><li><code>.list-inline-item</code>:Added to each li(应添加到每个行内列表项<code>&lt;li&gt;</code>上)<ul><li>当使用 <code>.list-inline</code> 时，此类确保列表项正确地显示在同一行内。</li></ul></li></ul><p>Example</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;social-icons list-inline&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline-item&quot;</span>&gt;</span>item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一个具体的例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>List Styles Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container mt-5&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 无样式列表 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-unstyled&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Apple<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Banana<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Cherry<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 横向定义列表 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dt</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>Black hot drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dt</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>White cold drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 行内列表 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline-item&quot;</span>&gt;</span>Red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline-item&quot;</span>&gt;</span>Green<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline-item&quot;</span>&gt;</span>Blue<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/bslist.png" alt="效果图"></p><p><strong>说明：</strong></p><ol><li>无样式列表 (<code>list-unstyled</code>): 这个无序列表 <code>&lt;ul&gt;</code> 使用 <code>.list-unstyled</code> 类来移除默认的内边距和列表项目符号，使得列表项纯粹呈现内容。</li><li>横向定义列表 (<code>dl-horizontal</code>): 在Bootstrap 4中，dl-horizontal 类已被移除，取而代之的是使用带 .row 类的 <code>&lt;dl&gt;</code> 和 .col-sm-* 类的 <code>&lt;dt&gt;</code> 和 <code>&lt;dd&gt;</code>。这种方式使定义列表的术语 <code>&lt;dt&gt;</code> 和描述 <code>&lt;dd&gt;</code> 并排显示，形成两列布局。</li></ol><h4 id="5-2-5-Blockquote">5.2.5 Blockquote</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blockquote&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;m-b-0&quot;</span>&gt;</span>Lorem ipsum dolor sit <br>amet, consectetur adipiscing elit. Integer <br>posuere erat a ante.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-6-Headings">5.2.6 Headings</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h1. Bootstrap heading <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>Secondary <br>text<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>Paragraph that looks like <br>heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-7-Images">5.2.7 Images</h4><ul><li><code>.img-fluid</code>:Make an image responsive(使图像响应式)</li><li><code>.rounded</code>:Adds rounded corners to image(为图像添加圆角)</li><li><code>.rounded-circle</code>:Crops image to be circle(将图像裁剪为圆形)</li><li><code>.img-thumbnail</code>:Adds rounded corner + border(为图像添加圆角和边框)</li></ul><h4 id="5-2-8-Floats-浮动">5.2.8 Floats(浮动)</h4><ul><li><code>.float-left</code>:Floats items left(将元素浮动到左侧)</li><li><code>.float-right</code>:Floats items right(将元素浮动到右侧)</li><li><code>.float-none</code>:Removes float(移除元素的浮动属性)<ul><li>这个类用于取消元素的任何浮动效果，使元素回归到正常的文档流中。</li></ul></li><li><code>.float-*-*</code>:Add breakpoints if needed( 在断点处添加浮动)<ul><li>这种模式的类用于响应式设计，允许在特定的屏幕尺寸断点上应用浮动属性</li><li>例如，<code>.float-md-left</code> 表示在中等尺寸的屏幕上将元素浮动到左侧。</li></ul></li></ul><h4 id="5-2-9-Starter-Template-启动模板">5.2.9 Starter Template(启动模板)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- Required meta tags --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- Bootstrap CSS --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/</span></span><br><span class="hljs-string"><span class="hljs-tag">bootstrap.min.css&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Main CSS --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/main.css&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span>Left Column<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span>Right Column<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- jQuery first, then Tether, then Bootstrap JS. --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.2.1.slim.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.</span></span><br><span class="hljs-string"><span class="hljs-tag">js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.</span></span><br><span class="hljs-string"><span class="hljs-tag">js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- Main JS --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-10-One-Column-Centered-Grid-一列居中网格">5.2.10 One Column Centered Grid(一列居中网格)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row justify-content-center&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-11-Two-Column-Grid-两列网格">5.2.11 Two Column Grid(两列网格)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-12-Three-Column-Grid-三列网格">5.2.12 Three Column Grid(三列网格)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-13-Four-Column-Grid-四列网格">5.2.13 Four Column Grid(四列网格)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-14-Forms-表格">5.2.14 Forms(表格)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;</span>Email address<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span> <span class="hljs-attr">aria</span><span class="hljs-attr">describedby</span>=<span class="hljs-string">&quot;emailHelp&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter email&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emailHelp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span>We&#x27;ll never share your email with <br>anyone else.<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> Check me out<br> <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-15-Buttons-按钮">5.2.15 Buttons(按钮)</h4><ul><li><code>.btn</code>:Needs to be added to all buttons because it adds padding and margin(需要添加到所有按钮上，因为它增加了内边距和外边距)</li><li><code>.btn-*</code>: primary, secondary, success, danger, warning, info, light, dark, link(表示按钮的不同样式，其中 * 可以是 primary、secondary、success、danger、warning、info、light、dark、link。)</li><li><code>.btn-outline-*</code>:primary, secondary, success, danger, warning, info, light, dark, link(边框样式按钮,其中 * 可以是 primary、secondary、success、danger、warning、info、light、dark、link)</li><li><code>.btn-lg</code>:Large buttom(大号按钮)</li><li><code>.btn-sm</code>:Smaller than default button(小号按钮)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-secondary&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-16-Tables-表">5.2.16 Tables(表)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">thead</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;thead-default&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>thead-default<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Nina<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">thead</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;thead-inverse&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>thead-inverse<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Nina<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6-代码解析">6.代码解析</h2><h3 id="6-1-webpage1">6.1 webpage1</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>webpage 1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> Photography<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;pic1.jpg&quot;</span>   <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;IMAGE NO AVAILABLE&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sound1.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">video</span>  <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;350&quot;</span>   <span class="hljs-attr">controls</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;Video1.mp4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.beautifulworld.com/wp-content/uploads/2017/07/lake-dal-shikava-boat.jpg.webp&quot;</span>&gt;</span>   Click Here to Download   <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;webpage2.html&quot;</span>&gt;</span> Page 2 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/webpage1.png" alt="效果图"></p><h3 id="6-2-webpage2">6.2 webpage2</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.center</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>Red and center-aligned heading<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>Red and center-aligned paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/webpage2.png" alt="效果图"></p><h3 id="6-3-webpage3">6.3 webpage3</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">         <span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-color</span>: linen;&#125;</span><br><span class="language-css">         <span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">color</span>:red;<span class="hljs-attribute">margin-left</span>:<span class="hljs-number">40px</span>;&#125;</span><br><span class="language-css">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>This is a heading<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/webpage3.png" alt="效果图"></p><h3 id="6-4-inLINECSS">6.4 inLINECSS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>InLine CSS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red; text-align: center;&quot;</span>&gt;</span> Welcome to the Hainan University<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: green; font-size: 100px; text-align: center;&quot;</span>&gt;</span> Welcome to Haikou<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue; font-style: italic;&quot;</span>&gt;</span> Department of Computer Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue; font-style: italic;&quot;</span>&gt;</span> Department of Chemical Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue; font-style: italic;&quot;</span>&gt;</span> Department of Bio Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue; font-style: italic;&quot;</span>&gt;</span> Department of Material Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-5-External-CSS">6.5 External CSS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> External CSS <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;cssfile1.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> &gt;</span> Welcome to the Hainan University<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> Welcome to Haikou<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span> Department of Computer Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span> Department of Chemical Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;b&quot;</span> &gt;</span> Department of Bio Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span> Department of Material Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span> Department of Chemical Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span> Department of Bio Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span> Department of Material Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/enternalCSS.png" alt="效果图"></p><h3 id="6-6-InternalCSS">6.6 InternalCSS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>InLine CSS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">               <span class="hljs-selector-tag">h1</span>&#123; <span class="hljs-attribute">text-align</span>: center; <span class="hljs-attribute">color</span>:red; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30</span>; <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Franklin Gothic Medium&#x27;</span>, <span class="hljs-string">&#x27;Arial Narrow&#x27;</span>, Arial, sans-serif;&#125;</span><br><span class="language-css">               <span class="hljs-selector-tag">h2</span>&#123; <span class="hljs-attribute">color</span>: green; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>; <span class="hljs-attribute">text-align</span>: center;&#125;</span><br><span class="language-css">               <span class="hljs-selector-tag">h3</span>&#123;<span class="hljs-attribute">color</span>: blue; <span class="hljs-attribute">font-style</span>: italic;&#125;</span><br><span class="language-css">               <span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">background-color</span>:bisque&#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> &gt;</span> Welcome to the Hainan University<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> &gt;</span> Welcome to Haikou<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Computer Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Chemical Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Bio Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Material Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Chemical Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Bio Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Material Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/internal.png" alt="效果图"></p><h3 id="6-7-CssFontProperties">6.7 CssFontProperties</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">          <span class="hljs-selector-tag">h1</span></span><br><span class="language-css">          &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>:<span class="hljs-string">&#x27;Times New Roman&#x27;</span>, Times, serif;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-weight</span>:<span class="hljs-number">100</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-style</span>:normal;</span><br><span class="language-css">           <span class="hljs-comment">/*/ font-variant:small-caps;  */</span></span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>:center;</span><br><span class="language-css">            <span class="hljs-attribute">letter-spacing</span>: .<span class="hljs-number">25em</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: underline;</span><br><span class="language-css">            <span class="hljs-attribute">word-spacing</span>: .<span class="hljs-number">50em</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-transform</span>: lowercase;</span><br><span class="language-css">            <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">35%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>:antiquewhite;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">Kmr.jpg</span>);</span><br><span class="language-css">            <span class="hljs-attribute">background-position</span>: left;</span><br><span class="language-css">            <span class="hljs-attribute">background-size</span>:cover;</span><br><span class="language-css">          &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Distinctio ipsum, recusandae repellendus rem laboriosam ad porro nobis ratione incidunt consequatur aliquam rerum. Aliquam quisquam animi aspernatur tempore at, ut deleniti!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/CssFontProperties.png" alt="效果图"></p><h3 id="6-8-CssSelectors">6.8 CssSelectors</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;<span class="hljs-attribute">color</span>:blueviolet&#125;   <span class="hljs-comment">/* Universal selector */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.c1</span> &#123;<span class="hljs-attribute">color</span>:blueviolet&#125; <span class="hljs-comment">/* Class Selector  */</span></span><br><span class="language-css">        <span class="hljs-selector-id">#a1</span> &#123;<span class="hljs-attribute">color</span>:blueviolet&#125; <span class="hljs-comment">/* Id Selector */</span></span><br><span class="language-css">       <span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">color</span>:blueviolet&#125;   <span class="hljs-comment">/* Tag Selector*/</span></span><br><span class="language-css">       <span class="hljs-selector-tag">h1</span>,<span class="hljs-selector-tag">h2</span>&#123;<span class="hljs-attribute">color</span>:blueviolet&#125; <span class="hljs-comment">/* Group Selector*/</span> </span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a1&quot;</span> &gt;</span>Hello World! <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a1&quot;</span> &gt;</span>Hello World! <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      <br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span> Web Front-end Class<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Eum quod, provident quam ipsum ratione laudantium et reiciendis. Repudiandae laborum delectus vel consequatur sequi dignissimos unde beatae cupiditate, autem sit nulla.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/CssSelectors.png" alt="效果图"></p><h3 id="6-9-Cssproperties">6.9 Cssproperties</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">h1</span>&#123;</span><br><span class="language-css">     <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">font-family</span>:<span class="hljs-string">&#x27;Trebuchet MS&#x27;</span>, <span class="hljs-string">&#x27;Lucida Sans Unicode&#x27;</span>, <span class="hljs-string">&#x27;Lucida Grande&#x27;</span>, <span class="hljs-string">&#x27;Lucida Sans&#x27;</span>, Arial, sans-serif;</span><br><span class="language-css">     <span class="hljs-attribute">font-weight</span>:lighter;</span><br><span class="language-css">     <span class="hljs-attribute">font-style</span>: oblique;</span><br><span class="language-css">     <span class="hljs-attribute">font-variant</span>:small-caps;</span><br><span class="language-css">     </span><br><span class="language-css">     <span class="hljs-attribute">text-align</span>: right;</span><br><span class="language-css">     <span class="hljs-attribute">text-decoration</span>:underline;</span><br><span class="language-css">     <span class="hljs-attribute">letter-spacing</span>: .<span class="hljs-number">20em</span>;</span><br><span class="language-css">     <span class="hljs-attribute">word-spacing</span>: .<span class="hljs-number">50em</span>;</span><br><span class="language-css">     <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200%</span>;</span><br><span class="language-css">     </span><br><span class="language-css">     <span class="hljs-comment">/*background-image: url(pic1.jpg);*/</span></span><br><span class="language-css">     <span class="hljs-attribute">background-color</span>:antiquewhite;</span><br><span class="language-css">     <span class="hljs-attribute">background-position</span>: right;</span><br><span class="language-css"></span><br><span class="language-css">     <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">     <span class="hljs-attribute">border-style</span>: dashed;</span><br><span class="language-css">     <span class="hljs-attribute">border-width</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">border-color</span>: red; </span><br><span class="language-css">     <span class="hljs-attribute">border-top-color</span>: blueviolet;</span><br><span class="language-css">     <span class="hljs-attribute">border-top-width</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">border-left-style</span>: dotted;</span><br><span class="language-css">     <span class="hljs-attribute">border-left-color</span>: green;</span><br><span class="language-css">     <span class="hljs-attribute">border-left-width</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eius, temporibus! Reiciendis deserunt facilis accusantium quasi sapiente similique velit, facere nulla explicabo, vel iste quas? Autem recusandae mollitia incidunt iusto maiores!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![效果图] (/images/Cssproperties.png)</p><h3 id="6-10-DIV">6.10 DIV</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#d1</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: antiquewhite;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Franklin Gothic Medium&#x27;</span>, <span class="hljs-string">&#x27;Arial Narrow&#x27;</span>, Arial, sans-serif;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">     <span class="hljs-selector-id">#d2</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Gill Sans&#x27;</span>, <span class="hljs-string">&#x27;Gill Sans MT&#x27;</span>, Calibri, <span class="hljs-string">&#x27;Trebuchet MS&#x27;</span>, sans-serif;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span> <br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">H1</span>&gt;</span>Section 1<span class="hljs-tag">&lt;/<span class="hljs-name">H1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Hello This is example of div tag<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ipsam animi vitae alias doloribus reprehenderit debitis maiores aut optio velit officiis, asperiores totam, sequi necessitatibus magni numquam corporis nesciunt quisquam voluptatem.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">H1</span>&gt;</span>Section 2<span class="hljs-tag">&lt;/<span class="hljs-name">H1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Hello This is example of div tag<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ipsam animi vitae alias doloribus reprehenderit debitis maiores aut optio velit officiis, asperiores totam, sequi necessitatibus magni numquam corporis nesciunt quisquam voluptatem.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/DIV.png" alt="效果图"></p>]]></content>
    
    
    
    <tags>
      
      <tag>web前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用模板</title>
    <link href="/2024/06/11/dataStructureTemplate/"/>
    <url>/2024/06/11/dataStructureTemplate/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.png" alt="数据结构知识框架"></p><h2 id="1-基础算法">1. 基础算法</h2><p><img src="/images/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6.jpg" alt="基础算法知识框架"></p><h3 id="1-1-快速排序">1.1 快速排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l &gt;= r) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = q[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span>(i &lt; j)<br>    &#123;<br>        <span class="hljs-keyword">do</span> i ++; <span class="hljs-keyword">while</span>(q[i] &lt; x);<br>        <span class="hljs-keyword">do</span> j --; <span class="hljs-keyword">while</span>(q[j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(q[i], q[j]);<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(q, l, j), <span class="hljs-built_in">quick_sort</span>(q, j + <span class="hljs-number">1</span>, r);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-归并排序">1.2 归并排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt; r) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">merge_sort</span>(q, l, mid);<br>    <span class="hljs-built_in">merge_sort</span>(q, mid + <span class="hljs-number">1</span>, r);<br><br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, i = l, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class="hljs-keyword">if</span> (q[i] &lt;= q[j]) tmp[k++] = q[i++];<br>        <span class="hljs-keyword">else</span> tmp[k++] = q[j++];<br><br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k++] = q[i++];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) tmp[k++] = q[j++];<br><br>    <span class="hljs-keyword">for</span>(i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i++, j++) q[i] = tmp[j];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-整数二分">1.3 整数二分</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<span class="hljs-comment">/*...*/</span>&#125;<br><br><span class="hljs-comment">//当区间[l, r]被划分为[l, mid]和[mid + 1, r]时使用</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bsearch_1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><br><span class="hljs-comment">//当区间[l, r]被划分为[l, mid - 1]和[mid, r]时使用</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bsearch_2</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r) <br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid  - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-浮点数二分算法">1.4 浮点数二分算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> </span>&#123;<span class="hljs-comment">/*...*/</span>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">bsearch_3</span><span class="hljs-params">(<span class="hljs-type">double</span> l, <span class="hljs-type">double</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-6</span>;<br>    <span class="hljs-keyword">while</span> (r - l &gt; eps)<br>    &#123;<br>        <span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-高精度加法">1.5 高精度加法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (A.<span class="hljs-built_in">size</span>() &lt; B.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> <span class="hljs-built_in">add</span>(B, A);<br><br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.size; i++)<br>    &#123;<br>        t += A[i];<br>        <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t += B[i];<br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (t) C.<span class="hljs-built_in">push</span>(t);<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-高精度减法">1.6 高精度减法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        t = A[i] - t;<br>        <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t -= B[i];<br>        C.<span class="hljs-built_in">push_back</span>((t + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (t &lt; <span class="hljs-number">0</span>) t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">check</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-7-高精度乘低精度">1.7 高精度乘低精度</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// C = A * b, A &gt;= 0, b &gt;= 0</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.size || t; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; A.<span class="hljs-built_in">size</span>()) t += A[i] * b;<br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (C.size &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br><br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-8-高精度除以低精度">1.8 高精度除以低精度</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// A / b = C ... r, A &gt;= 0, b &gt; 0</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">div</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> &amp;r)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        r = r * <span class="hljs-number">10</span> + A[i];<br>        C.<span class="hljs-built_in">push_back</span>(r / b);<br>        r %= b;<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(C.<span class="hljs-built_in">begin</span>(), C.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.back == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-9-一维前缀和">1.9 一维前缀和</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TXT">S[i] = a[1] + a[2] + ... + a[i]<br>a[l] + ... + a[r] = S[r] - S[l - 1]<br></code></pre></td></tr></table></figure><h3 id="1-10-二维前缀和">1.10 二维前缀和</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TXT">S[i, j] = 第i行j列格子左上部分所有元素的和<br>以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：<br>S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]<br></code></pre></td></tr></table></figure><h3 id="1-11-一维差分">1.11 一维差分</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs TXT">给区间[l, r]中的每个数加上c：B[l] += c, B[r + 1] -= c<br></code></pre></td></tr></table></figure><h3 id="1-12-二维差分">1.12 二维差分</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TXT">给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：<br>S[x1, y1] += c, S[x2 + 1, y1] -= c, S[x1, y2 + 1] -= c, S[x2 + 1, y2 + 1] += c<br></code></pre></td></tr></table></figure><h3 id="1-13-位运算">1.13 位运算</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TXT">求n的第k位数字: n &gt;&gt; k &amp; 1<br>返回n的最后一位1：lowbit(n) = n &amp; -n<br></code></pre></td></tr></table></figure><h3 id="1-14-双指针算法">1.14 双指针算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (j &lt; i &amp;&amp; <span class="hljs-built_in">check</span>(i, j)) j ++ ;<br><br>    <span class="hljs-comment">// 具体问题的逻辑</span><br>&#125;<br><span class="hljs-comment">/*常见问题分类：</span><br><span class="hljs-comment">    (1) 对于一个序列，用两个指针维护一段区间</span><br><span class="hljs-comment">    (2) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作*/</span><br></code></pre></td></tr></table></figure><h3 id="1-15-离散化">1.15 离散化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs CPP">vector&lt;<span class="hljs-type">int</span>&gt; alls; <span class="hljs-comment">// 存储所有待离散化的值</span><br><span class="hljs-built_in">sort</span>(alls.<span class="hljs-built_in">begin</span>(), alls.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 将所有值排序</span><br>alls.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(alls.<span class="hljs-built_in">begin</span>(), alls.<span class="hljs-built_in">end</span>()), alls.<span class="hljs-built_in">end</span>());   <span class="hljs-comment">// 去掉重复元素</span><br><br><span class="hljs-comment">// 二分求出x对应的离散化的值</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 找到第一个大于等于x的位置</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = alls.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (alls[mid] &gt;= x) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span>; <span class="hljs-comment">// 映射到1, 2, ...n</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-16-区间合并">1.16 区间合并</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// 将所有存在交集的区间合并</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;PII&gt; &amp;segs)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;PII&gt; res;<br><br>    <span class="hljs-built_in">sort</span>(segs.<span class="hljs-built_in">begin</span>(), segs.<span class="hljs-built_in">end</span>());<br><br>    <span class="hljs-type">int</span> st = <span class="hljs-number">-2e9</span>, ed = <span class="hljs-number">-2e9</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> seg : segs)<br>        <span class="hljs-keyword">if</span> (ed &lt; seg.first)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, ed&#125;);<br>            st = seg.first, ed = seg.second;<br>        &#125;<br>        <span class="hljs-keyword">else</span> ed = <span class="hljs-built_in">max</span>(ed, seg.second);<br><br>    <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, ed&#125;);<br><br>    segs = res;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-数据结构">2. 数据结构</h2><p><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6.jpg" alt="数据结构知识框架"></p><h3 id="2-1-单链表">2.1 单链表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点</span><br><span class="hljs-type">int</span> head, e[N], ne[N], idx;<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    head = <span class="hljs-number">-1</span>;<br>    idx = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 在链表头插入一个数a</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = a, ne[idx] = head, head = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 将头结点删除，需要保证头结点存在</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    head = ne[head];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-双链表">2.2 双链表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点</span><br><span class="hljs-type">int</span> e[N], l[N], r[N], idx;<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//0是左端点，1是右端点</span><br>    r[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, l[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    idx = <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment">// 在节点a的右边插入一个数x</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = x;<br>    l[idx] = a, r[idx] = r[a];<br>    l[r[a]] = idx, r[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 删除节点a</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    l[r[a]] = l[a];<br>    r[l[a]] = r[a];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-栈">2.3 栈</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// tt表示栈顶</span><br><span class="hljs-type">int</span> stk[N], tt = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 向栈顶插入一个数</span><br>stk[ ++ tt] = x;<br><br><span class="hljs-comment">// 从栈顶弹出一个数</span><br>tt -- ;<br><br><span class="hljs-comment">// 栈顶的值</span><br>stk[tt];<br><br><span class="hljs-comment">// 判断栈是否为空，如果 tt &gt; 0，则表示不为空</span><br><span class="hljs-keyword">if</span> (tt &gt; <span class="hljs-number">0</span>)<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-队列">2.4 队列</h3><h4 id="2-4-1-普通队列">2.4.1 普通队列</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// hh 表示队头，tt表示队尾</span><br><span class="hljs-type">int</span> q[N], hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br><br><span class="hljs-comment">// 向队尾插入一个数</span><br>q[ ++ tt] = x;<br><br><span class="hljs-comment">// 从队头弹出一个数</span><br>hh ++ ;<br><br><span class="hljs-comment">// 队头的值</span><br>q[hh];<br><br><span class="hljs-comment">// 判断队列是否为空，如果 hh &lt;= tt，则表示不为空</span><br><span class="hljs-keyword">if</span> (hh &lt;= tt)<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-2-循环队列">2.4.2 循环队列</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// hh 表示队头，tt表示队尾的后一个位置</span><br><span class="hljs-type">int</span> q[N], hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 向队尾插入一个数</span><br>q[tt ++ ] = x;<br><span class="hljs-keyword">if</span> (tt == N) tt = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 从队头弹出一个数</span><br>hh ++ ;<br><span class="hljs-keyword">if</span> (hh == N) hh = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 队头的值</span><br>q[hh];<br><br><span class="hljs-comment">// 判断队列是否为空，如果hh != tt，则表示不为空</span><br><span class="hljs-keyword">if</span> (hh != tt)<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-单调栈">2.5 单调栈</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//常见模型：找出每个数左边离它最近的比它大/小的数</span><br><span class="hljs-type">int</span> tt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (tt &amp;&amp; <span class="hljs-built_in">check</span>(stk[tt], i)) tt -- ;<br>    stk[ ++ tt] = i;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-单调队列">2.6 单调队列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//常见模型：找出滑动窗口中的最大值/最小值</span><br><span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="hljs-built_in">check_out</span>(q[hh])) hh ++ ;  <span class="hljs-comment">// 判断队头是否滑出窗口</span><br>    <span class="hljs-keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="hljs-built_in">check</span>(q[tt], i)) tt -- ;<br>    q[ ++ tt] = i;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-7-KMP">2.7 KMP</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// s[]是长文本，p[]是模式串，n是s的长度，m是p的长度</span><br>求模式串的Next数组：<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= m; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br>    <span class="hljs-keyword">if</span> (p[i] == p[j + <span class="hljs-number">1</span>]) j ++ ;<br>    ne[i] = j;<br>&#125;<br><br><span class="hljs-comment">// 匹配</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br>    <span class="hljs-keyword">if</span> (s[i] == p[j + <span class="hljs-number">1</span>]) j ++ ;<br>    <span class="hljs-keyword">if</span> (j == m)<br>    &#123;<br>        j = ne[j];<br>        <span class="hljs-comment">// 匹配成功后的逻辑</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-8-Trie树">2.8 Trie树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> son[N][<span class="hljs-number">26</span>], cnt[N], idx;<br><span class="hljs-comment">// 0号点既是根节点，又是空节点</span><br><span class="hljs-comment">// son[][]存储树中每个节点的子节点</span><br><span class="hljs-comment">// cnt[]存储以每个节点结尾的单词数量</span><br><br><span class="hljs-comment">// 插入一个字符串</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i]; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!son[p][u]) son[p][u] = ++ idx;<br>        p = son[p][u];<br>    &#125;<br>    cnt[p] ++ ;<br>&#125;<br><br><span class="hljs-comment">// 查询字符串出现的次数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i]; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!son[p][u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        p = son[p][u];<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt[p];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-9-并查集">2.9 并查集</h3><h4 id="2-9-1-朴素并查集">2.9.1 朴素并查集</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> p[N]; <span class="hljs-comment">//存储每个点的祖宗节点</span><br><br><span class="hljs-comment">// 返回x的祖宗节点</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 初始化，假定节点编号是1~n</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) p[i] = i;<br><br><span class="hljs-comment">// 合并a和b所在的两个集合：</span><br>p[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b);<br></code></pre></td></tr></table></figure><h4 id="2-9-2-维护size的并查集">2.9.2 维护size的并查集</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> p[N], size[N];<br><span class="hljs-comment">//p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量</span><br><br><span class="hljs-comment">// 返回x的祖宗节点</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 初始化，假定节点编号是1~n</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    p[i] = i;<br>    size[i] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 合并a和b所在的两个集合：</span><br>size[<span class="hljs-built_in">find</span>(b)] += size[<span class="hljs-built_in">find</span>(a)];<br>p[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b);<br></code></pre></td></tr></table></figure><h4 id="2-9-3-维护到祖宗节点的并查集">2.9.3 维护到祖宗节点的并查集</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> p[N], d[N];<br><span class="hljs-comment">//p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离</span><br><br><span class="hljs-comment">// 返回x的祖宗节点</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x)<br>    &#123;<br>        <span class="hljs-type">int</span> u = <span class="hljs-built_in">find</span>(p[x]);<br>        d[x] += d[p[x]];<br>        p[x] = u;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 初始化，假定节点编号是1~n</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    p[i] = i;<br>    d[i] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 合并a和b所在的两个集合：</span><br>p[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b);<br>d[<span class="hljs-built_in">find</span>(a)] = distance; <span class="hljs-comment">// 根据具体问题，初始化find(a)的偏移量</span><br></code></pre></td></tr></table></figure><h3 id="2-10-堆">2.10 堆</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1</span><br><span class="hljs-comment">// ph[k]存储第k个插入的点在堆中的位置</span><br><span class="hljs-comment">// hp[k]存储堆中下标是k的点是第几个插入的</span><br><span class="hljs-type">int</span> h[N], ph[N], hp[N], size;<br><br><span class="hljs-comment">// 交换两个点，及其映射关系</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heap_swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">swap</span>(ph[hp[a]],ph[hp[b]]);<br>    <span class="hljs-built_in">swap</span>(hp[a], hp[b]);<br>    <span class="hljs-built_in">swap</span>(h[a], h[b]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = u;<br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> &lt;= size &amp;&amp; h[u * <span class="hljs-number">2</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= size &amp;&amp; h[u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (u != t)<br>    &#123;<br>        <span class="hljs-built_in">heap_swap</span>(u, t);<br>        <span class="hljs-built_in">down</span>(t);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (u / <span class="hljs-number">2</span> &amp;&amp; h[u] &lt; h[u / <span class="hljs-number">2</span>])<br>    &#123;<br>        <span class="hljs-built_in">heap_swap</span>(u, u / <span class="hljs-number">2</span>);<br>        u &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// O(n)建堆</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n / <span class="hljs-number">2</span>; i; i -- ) <span class="hljs-built_in">down</span>(i);<br></code></pre></td></tr></table></figure><h3 id="2-11-一般哈希">2.11 一般哈希</h3><h4 id="2-11-1-拉链法">2.11.1 拉链法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><br><span class="hljs-comment">// 向哈希表中插入一个数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k = (x % N + N) % N;<br>    e[idx] = x;<br>    ne[idx] = h[k];<br>    h[k] = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 在哈希表中查询某个数是否存在</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k = (x % N + N) % N;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[k]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        <span class="hljs-keyword">if</span> (e[i] == x)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-11-2-开放寻址法">2.11.2 开放寻址法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> h[N];<br><br><span class="hljs-comment">// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = (x % N + N) % N;<br>    <span class="hljs-keyword">while</span> (h[t] != null &amp;&amp; h[t] != x)<br>    &#123;<br>        t ++ ;<br>        <span class="hljs-keyword">if</span> (t == N) t = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-12-字符串哈希">2.12 字符串哈希</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//核心思想：将字符串看成P进制数，P的经验值是131或13331，取这两个值的冲突概率低</span><br><span class="hljs-comment">//小技巧：取模的数用2^64，这样直接用unsigned long long存储，溢出的结果就是取模的结果</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ULL;<br>ULL h[N], p[N]; <span class="hljs-comment">// h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64</span><br><br><span class="hljs-comment">// 初始化</span><br>p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    h[i] = h[i - <span class="hljs-number">1</span>] * P + str[i];<br>    p[i] = p[i - <span class="hljs-number">1</span>] * P;<br>&#125;<br><br><span class="hljs-comment">// 计算子串 str[l ~ r] 的哈希值</span><br><span class="hljs-function">ULL <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> h[r] - h[l - <span class="hljs-number">1</span>] * p[r - l + <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-搜索与图论">3. 搜索与图论</h2><p><img src="/images/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6.jpg" alt="搜索与图论知识框架"></p><h3 id="3-1-树与图的存储">3.1 树与图的存储</h3><ul><li>树是一种特殊的图，与图的存储方式相同</li><li>对于无向图中的边ab，存储两条有向边a-&gt;b,b-&gt;a</li><li>因此我们可以只考虑有向图的存储</li></ul><h4 id="3-1-1-邻接矩阵">3.1.1 邻接矩阵</h4><p>g[a][b] 存储边a-&gt;b</p><h4 id="3-1-2-邻接表">3.1.2 邻接表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点</span><br><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><br><span class="hljs-comment">//添加一条边a-&gt;b</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-comment">//初始化</span><br>idx = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br></code></pre></td></tr></table></figure><h3 id="3-2-树与图的遍历">3.2 树与图的遍历</h3><p>时间复杂度O(n + m), n表示点数， m表示边数</p><h4 id="3-2-1-深度优先遍历">3.2.1 深度优先遍历</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    st[u] = <span class="hljs-literal">true</span>;<span class="hljs-comment">//st[u]表示点u已经被遍历过</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span>(!st[j]) <span class="hljs-built_in">dfs</span>(j);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-2-宽度优先遍历">3.2.2 宽度优先遍历</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs CPP">queue&lt;<span class="hljs-type">int</span>&gt; q;<br>st[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>&#123;<br>    <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>    q.<span class="hljs-built_in">pop</span>();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!st[j])<br>        &#123;<br>            st[j] = <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(j);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-拓扑排序">3.3 拓扑排序</h3><p>时间复杂度O(n + m), n表示点数， m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">topsort</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-comment">//d[i] 存储点i的入度</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!d[i])<br>            q[++tt] = i;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (hh &lt;= tt)<br>    &#123;<br>        <span class="hljs-type">int</span> t = q[hh++];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span>(--d[j] ==<span class="hljs-number">0</span>)<br>                q[++tt] = j;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//如果所有点都入队了，说明存在拓扑排序，否则不存在拓扑排序</span><br>    <span class="hljs-keyword">return</span> tt = n - <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-朴素dijkstra算法">3.4 朴素dijkstra算法</h3><p>时间复杂度O(n<sup>2</sup> + m), n表示点数， m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> g[N][N];  <span class="hljs-comment">// 存储每条边</span><br><span class="hljs-type">int</span> dist[N];  <span class="hljs-comment">// 存储1号点到每个点的最短距离</span><br><span class="hljs-type">bool</span> st[N];   <span class="hljs-comment">// 存储每个点的最短路是否已经确定</span><br><br><span class="hljs-comment">// 求1号点到n号点的最短路，如果不存在则返回-1</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;     <span class="hljs-comment">// 在还未确定最短路的点中，寻找距离最小的点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))<br>                t = j;<br><br>        <span class="hljs-comment">// 用t更新其他点的距离</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            dist[j] = <span class="hljs-built_in">min</span>(dist[j], dist[t] + g[t][j]);<br><br>        st[t] = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-堆优化版dijkstra">3.5 堆优化版dijkstra</h3><p>时间复杂度O(mlogm), n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">int</span> n;      <span class="hljs-comment">// 点的数量</span><br><span class="hljs-type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="hljs-comment">// 邻接表存储所有边</span><br><span class="hljs-type">int</span> dist[N];        <span class="hljs-comment">// 存储所有点到1号点的距离</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个点的最短距离是否已确定</span><br><br><span class="hljs-comment">// 求1号点到n号点的最短距离，如果不存在，则返回-1</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br>    heap.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;);      <span class="hljs-comment">// first存储距离，second存储节点编号</span><br><br>    <span class="hljs-keyword">while</span> (heap.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = heap.<span class="hljs-built_in">top</span>();<br>        heap.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-type">int</span> ver = t.second, distance = t.first;<br><br>        <span class="hljs-keyword">if</span> (st[ver]) <span class="hljs-keyword">continue</span>;<br>        st[ver] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[ver]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; distance + w[i])<br>            &#123;<br>                dist[j] = distance + w[i];<br>                heap.<span class="hljs-built_in">push</span>(&#123;dist[j], j&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-Bellman-Ford算法">3.6 Bellman-Ford算法</h3><p>时间复杂度O(mn), n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n, m;       <span class="hljs-comment">// n表示点数，m表示边数</span><br><span class="hljs-type">int</span> dist[N];        <span class="hljs-comment">// dist[x]存储1到x的最短路距离</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>     <span class="hljs-comment">// 边，a表示出点，b表示入点，w表示边的权重</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b, w;<br>&#125;edges[M];<br><br><span class="hljs-comment">// 求1到n的最短路距离，如果无法从1走到n，则返回-1。</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bellman_ford</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++ )<br>        &#123;<br>            <span class="hljs-type">int</span> a = edges[j].a, b = edges[j].b, w = edges[j].w;<br>            <span class="hljs-keyword">if</span> (dist[b] &gt; dist[a] + w)<br>                dist[b] = dist[a] + w;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] &gt; <span class="hljs-number">0x3f3f3f3f</span> / <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-7-spfa算法">3.7 spfa算法</h3><p>时间复杂度 平均情况下O(m),最坏情况下O(nm), n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n;      <span class="hljs-comment">// 总点数</span><br><span class="hljs-type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="hljs-comment">// 邻接表存储所有边</span><br><span class="hljs-type">int</span> dist[N];        <span class="hljs-comment">// 存储每个点到1号点的最短距离</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个点是否在队列中</span><br><br><span class="hljs-comment">// 求1号点到n号点的最短路距离，如果从1号点无法走到n号点则返回-1</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>    st[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        st[t] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i])<br>            &#123;<br>                dist[j] = dist[t] + w[i];<br>                <span class="hljs-keyword">if</span> (!st[j])     <span class="hljs-comment">// 如果队列中已存在j，则不需要将j重复插入</span><br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-8-spfa判断图中是否存在负环">3.8 spfa判断图中是否存在负环</h3><p>时间复杂度是 O(nm)， n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n;      <span class="hljs-comment">// 总点数</span><br><span class="hljs-type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="hljs-comment">// 邻接表存储所有边</span><br><span class="hljs-type">int</span> dist[N], cnt[N];        <span class="hljs-comment">// dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个点是否在队列中</span><br><br><span class="hljs-comment">// 如果存在负环，则返回true，否则返回false。</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 不需要初始化dist数组</span><br>    <span class="hljs-comment">// 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环。</span><br><br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        q.<span class="hljs-built_in">push</span>(i);<br>        st[i] = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        st[t] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i])<br>            &#123;<br>                dist[j] = dist[t] + w[i];<br>                cnt[j] = cnt[t] + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (cnt[j] &gt;= n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;       <span class="hljs-comment">// 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环</span><br>                <span class="hljs-keyword">if</span> (!st[j])<br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-9-Floyd算法">3.9 Floyd算法</h3><p>时间复杂度是O(n<sup>3</sup>), n表示点数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//初始化</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        <span class="hljs-keyword">if</span> (i == j) d[i][j] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> d[i][j] = INF;<br><br><span class="hljs-comment">//算法结束后，d[a][b]表示a到b的距离</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">floyd</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>                d[i][j] = <span class="hljs-built_in">min</span>(d[i][j], d[i][k] + d[k][j]);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-10-朴素版prim算法">3.10 朴素版prim算法</h3><p>时间复杂度是O(n<sup>2</sup>+m), n表示点数， m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n;      <span class="hljs-comment">// n表示点数</span><br><span class="hljs-type">int</span> g[N][N];        <span class="hljs-comment">// 邻接矩阵，存储所有边</span><br><span class="hljs-type">int</span> dist[N];        <span class="hljs-comment">// 存储其他点到当前最小生成树的距离</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个点是否已经在生成树中</span><br><br><br><span class="hljs-comment">// 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))<br>                t = j;<br><br>        <span class="hljs-keyword">if</span> (i &amp;&amp; dist[t] == INF) <span class="hljs-keyword">return</span> INF;<br><br>        <span class="hljs-keyword">if</span> (i) res += dist[t];<br>        st[t] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ ) dist[j] = <span class="hljs-built_in">min</span>(dist[j], g[t][j]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-11-Kriskal算法">3.11 Kriskal算法</h3><p>时间复杂度O(mlogm), n表示点数， m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n, m;       <span class="hljs-comment">// n是点数，m是边数</span><br><span class="hljs-type">int</span> p[N];       <span class="hljs-comment">// 并查集的父节点数组</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>     <span class="hljs-comment">// 存储边</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b, w;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt; (<span class="hljs-type">const</span> Edge &amp;W)<span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &lt; W.w;<br>    &#125;<br>&#125;edges[M];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>     <span class="hljs-comment">// 并查集核心操作</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sort</span>(edges, edges + m);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) p[i] = i;    <span class="hljs-comment">// 初始化并查集</span><br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>, cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;<br><br>        a = <span class="hljs-built_in">find</span>(a), b = <span class="hljs-built_in">find</span>(b);<br>        <span class="hljs-keyword">if</span> (a != b)     <span class="hljs-comment">// 如果两个连通块不连通，则将这两个连通块合并</span><br>        &#123;<br>            p[a] = b;<br>            res += w;<br>            cnt ++ ;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (cnt &lt; n - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> INF;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-12-染色法判别二分图">3.12 染色法判别二分图</h3><p>时间复杂度是O(n + m), n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n;      <span class="hljs-comment">// n表示点数</span><br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;     <span class="hljs-comment">// 邻接表存储图</span><br><span class="hljs-type">int</span> color[N];       <span class="hljs-comment">// 表示每个点的颜色，-1表示未染色，0表示白色，1表示黑色</span><br><br><span class="hljs-comment">// 参数：u表示当前节点，c表示当前点的颜色</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    color[u] = c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (color[j] == <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">dfs</span>(j, !c)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color[j] == c) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(color, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> color);<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">if</span> (color[i] == <span class="hljs-number">-1</span>)<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">dfs</span>(i, <span class="hljs-number">0</span>))<br>            &#123;<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-13-匈牙利算法">3.13 匈牙利算法</h3><p>时间复杂度是O(nm), n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n1, n2;     <span class="hljs-comment">// n1表示第一个集合中的点数，n2表示第二个集合中的点数</span><br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;     <span class="hljs-comment">// 邻接表存储所有边，匈牙利算法中只会用到从第一个集合指向第二个集合的边，所以这里只用存一个方向的边</span><br><span class="hljs-type">int</span> match[N];       <span class="hljs-comment">// 存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 表示第二个集合中的每个点是否已经被遍历过</span><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[x]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!st[j])<br>        &#123;<br>            st[j] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (match[j] == <span class="hljs-number">0</span> || <span class="hljs-built_in">find</span>(match[j]))<br>            &#123;<br>                match[j] = x;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点</span><br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; i ++ )<br>&#123;<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> st);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(i)) res ++ ;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-数学知识">4. 数学知识</h2><p><img src="/images/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6.jpg" alt="数学知识知识框架"></p><h3 id="4-1-试除法判定质数">4.1 试除法判定质数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i++)<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-试除法分解质因数">4.2 试除法分解质因数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>) x /= i, s ++ ;<br>            cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; s &lt;&lt; endl;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; endl;<br>    cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-朴素筛法求素数">4.3 朴素筛法求素数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-type">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (st[i]) <span class="hljs-keyword">continue</span>;<br>        primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + i; j &lt;= n; j += i)<br>            st[j] = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-线性筛法求素数">4.4 线性筛法求素数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-type">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5-试除法求所有约数">4.5 试除法求所有约数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">get_divisors</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            res.<span class="hljs-built_in">push_back</span>(i);<br>            <span class="hljs-keyword">if</span> (i != x / i) res.<span class="hljs-built_in">push_back</span>(x / i);<br>        &#125;<br>    <span class="hljs-built_in">sort</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-6-约数个数和约数之和">4.6 约数个数和约数之和</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TXT">如果 N = p1^c1 * p2^c2 * ... *pk^ck<br>约数个数： (c1 + 1) * (c2 + 1) * ... * (ck + 1)<br>约数之和： (p1^0 + p1^1 + ... + p1^c1) * ... * (pk^0 + pk^1 + ... + pk^ck)<br></code></pre></td></tr></table></figure><h3 id="4-7-欧几里得算法">4.7 欧几里得算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> b ? <span class="hljs-built_in">gcd</span>(b, a % b) : a;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-8-求欧拉函数">4.8 求欧拉函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">phi</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            res = res / i * (i - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>) x /= i;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) res = res / x * (x - <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-9-筛法求欧拉函数">4.9 筛法求欧拉函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-type">int</span> euler[N];           <span class="hljs-comment">// 存储每个数的欧拉函数</span><br><span class="hljs-type">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_eulers</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    euler[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i])<br>        &#123;<br>            primes[cnt ++ ] = i;<br>            euler[i] = i - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            <span class="hljs-type">int</span> t = primes[j] * i;<br>            st[t] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                euler[t] = euler[i] * primes[j];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            euler[t] = euler[i] * (primes[j] - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-10-快速幂">4.10 快速幂</h3><p>求m<sup>k</sup> mod p,时间复杂度O(logk)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span> % p, t = m;<br>    <span class="hljs-keyword">while</span> (k)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k&amp;<span class="hljs-number">1</span>) res = res * t % p;<br>        t = t * t % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-11-扩展欧几里得算法">4.11 扩展欧几里得算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// 求x, y，使得ax + by = gcd(a, b)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> &amp;x, <span class="hljs-type">int</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!b)<br>    &#123;<br>        x = <span class="hljs-number">1</span>; y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-type">int</span> d = <span class="hljs-built_in">exgcd</span>(b, a % b, y, x);<br>    y -= (a/b) * x;<br>    <span class="hljs-keyword">return</span> d;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-12-高斯消元">4.12 高斯消元</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// a[N][N]是增广矩阵</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gauss</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> c, r;<br>    <span class="hljs-keyword">for</span> (c = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>; c &lt; n; c ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> t = r;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; i &lt; n; i ++ )   <span class="hljs-comment">// 找到绝对值最大的行</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][c]) &gt; <span class="hljs-built_in">fabs</span>(a[t][c]))<br>                t = i;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[t][c]) &lt; eps) <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = c; i &lt;= n; i ++ ) <span class="hljs-built_in">swap</span>(a[t][i], a[r][i]);      <span class="hljs-comment">// 将绝对值最大的行换到最顶端</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= c; i -- ) a[r][i] /= a[r][c];      <span class="hljs-comment">// 将当前行的首位变成1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r + <span class="hljs-number">1</span>; i &lt; n; i ++ )       <span class="hljs-comment">// 用当前行将下面所有的列消成0</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][c]) &gt; eps)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n; j &gt;= c; j -- )<br>                    a[i][j] -= a[r][j] * a[i][c];<br><br>        r ++ ;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (r &lt; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; i &lt; n; i ++ )<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][n]) &gt; eps)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>; <span class="hljs-comment">// 无解</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 有无穷多组解</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j ++ )<br>            a[i][n] -= a[i][j] * a[j][n];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 有唯一解</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-13-递推法求组合数">4.13 递推法求组合数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// c[a][b] 表示从a个苹果中选b个的方案数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i ++ )<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j ++ )<br>        <span class="hljs-keyword">if</span> (!j) c[i][j] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> c[i][j] = (c[i - <span class="hljs-number">1</span>][j] + c[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) % mod;<br></code></pre></td></tr></table></figure><h3 id="4-14-通过预处理逆元的方式求组合数">4.14 通过预处理逆元的方式求组合数</h3><ul><li>首先预处理出所有阶乘取模的余数fact[N]，以及所有阶乘取模的逆元infact[N]</li><li>如果取模的数是质数，可以用费马小定理求逆元</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> p)</span>    <span class="hljs-comment">// 快速幂模板</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (k)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) res = (LL)res * a % p;<br>        a = (LL)a * a % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">// 预处理阶乘的余数和阶乘逆元的余数</span><br>fact[<span class="hljs-number">0</span>] = infact[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i ++ )<br>&#123;<br>    fact[i] = (LL)fact[i - <span class="hljs-number">1</span>] * i % mod;<br>    infact[i] = (LL)infact[i - <span class="hljs-number">1</span>] * <span class="hljs-built_in">qmi</span>(i, mod - <span class="hljs-number">2</span>, mod) % mod;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-15-Lucas定理">4.15 Lucas定理</h3><p>若p是质数，则对于任意整数 1 &lt;= m &lt;= n，有：<br>C(n, m) = C(n % p, m % p) * C(n / p, m / p) (mod p)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> p)</span>  <span class="hljs-comment">// 快速幂模板</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span> % p;<br>    <span class="hljs-keyword">while</span> (k)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) res = (LL)res * a % p;<br>        a = (LL)a * a % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> p)</span>  <span class="hljs-comment">// 通过定理求组合数C(a, b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a &lt; b) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    LL x = <span class="hljs-number">1</span>, y = <span class="hljs-number">1</span>;  <span class="hljs-comment">// x是分子，y是分母</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a, j = <span class="hljs-number">1</span>; j &lt;= b; i --, j ++ )<br>    &#123;<br>        x = (LL)x * i % p;<br>        y = (LL) y * j % p;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> x * (LL)<span class="hljs-built_in">qmi</span>(y, p - <span class="hljs-number">2</span>, p) % p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lucas</span><span class="hljs-params">(LL a, LL b, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a &lt; p &amp;&amp; b &lt; p) <span class="hljs-keyword">return</span> <span class="hljs-built_in">C</span>(a, b, p);<br>    <span class="hljs-keyword">return</span> (LL)<span class="hljs-built_in">C</span>(a % p, b % p, p) * <span class="hljs-built_in">lucas</span>(a / p, b / p, p) % p;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-16-分解质因数求组合数">4.16 分解质因数求组合数</h3><p>当我们需要求出组合数的真实值，而非对某个数的余数时，分解质因数的方式比较好用：<br>1. 筛法求出范围内的所有质数<br>2. 通过 C(a, b) = a! / b! / (a - b)! 这个公式求出每个质因子的次数。 n! 中p的次数是 n / p + n / p^2 + n / p^3 + …<br>3. 用高精度乘法将所有质因子相乘</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> primes[N], cnt;     <span class="hljs-comment">// 存储所有质数</span><br><span class="hljs-type">int</span> sum[N];     <span class="hljs-comment">// 存储每个质数的次数</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个数是否已被筛掉</span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>      <span class="hljs-comment">// 线性筛法求素数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> p)</span>       <span class="hljs-comment">// 求n！中的次数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        res += n / p;<br>        n /= p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; a, <span class="hljs-type">int</span> b)</span>       <span class="hljs-comment">// 高精度乘低精度模板</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; c;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        t += a[i] * b;<br>        c.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (t)<br>    &#123;<br>        c.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-built_in">get_primes</span>(a);  <span class="hljs-comment">// 预处理范围内的所有质数</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i ++ )     <span class="hljs-comment">// 求每个质因数的次数</span><br>&#123;<br>    <span class="hljs-type">int</span> p = primes[i];<br>    sum[i] = <span class="hljs-built_in">get</span>(a, p) - <span class="hljs-built_in">get</span>(b, p) - <span class="hljs-built_in">get</span>(a - b, p);<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; res;<br>res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i ++ )     <span class="hljs-comment">// 用高精度乘法将所有质因子相乘</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; sum[i]; j ++ )<br>        res = <span class="hljs-built_in">mul</span>(res, primes[i]);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于洛谷113号题单对线性表的总结</title>
    <link href="/2024/06/03/113/"/>
    <url>/2024/06/03/113/</url>
    
    <content type="html"><![CDATA[<h2 id="1-P3156-询问学号">1 P3156 询问学号</h2><p><a href="https://www.luogu.com.cn/problem/P3156">传送门</a></p><p>没啥好说的，跳</p><h2 id="2-P3613-寄包柜">2 P3613 寄包柜</h2><p><a href="https://www.luogu.com.cn/problem/P3613">传送门</a></p><p><s>二维数组秒了</s></p><p>虽然这题的题目是寄包柜，但他真的是考察寄包柜吗？<s>是的</s></p><p>根据问题找答案，显然对于每个问题有三个元素:第i个寄包柜，第j个格子里的物品。如果用二维数组，显然10<sup>5</sup> * 10<sup>9</sup>会MLE，即使是动态数组也不太妥。</p><p>所以呢？最简单的方法当然是STL大法！</p><p>但有个问题，一个map元素只有两个值，比如map&lt;int,int&gt; b;但我们有三个元素。</p><p><s>aabandon</s></p><h3 id="2-1-方法1">2.1 方法1</h3><p>把第一个int改成long long，将第一个元素改成10<sup>5</sup>*i + j</p><h3 id="2-2-方法2">2.2 方法2</h3><p>map&lt;int,int&gt; b[MAX];<br>b[i][j] = k;</p><h2 id="3-P1449-后缀表达式">3 P1449 后缀表达式</h2><p><a href="https://www.luogu.com.cn/problem/P1449">传送门</a></p><p>很显然，这题需要用到栈。当输入不是数字时，将这个数字压入栈。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>(i &lt; postfix.<span class="hljs-built_in">length</span>() &amp;&amp; <span class="hljs-built_in">isdigit</span>(postfix[i]))<br>&#123;<br>   val = val * <span class="hljs-number">10</span> + (postfix[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<span class="hljs-comment">//这里注意，由于是从char型字符转化为int型字符，所以需要postfix[i] - &#x27;0&#x27;</span><br>   i++;<br>&#125;<br></code></pre></td></tr></table></figure><p>当输入不是数字时，就从栈中弹出两个数字进行运算，注意顺序：第一个弹出来的是val2，第二个弹出来的是val1，这对于减法和除法很重要</p><p>AC代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>string postfix;<br>stack&lt;<span class="hljs-type">int</span>&gt; s;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; postfix;<br>    <br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(i &lt; postfix.<span class="hljs-built_in">length</span>())<br>    &#123;<br>        <span class="hljs-keyword">if</span>(postfix[i] == <span class="hljs-string">&#x27;@&#x27;</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(postfix[i]))<br>        &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(postfix[i]))<br>            &#123;<br>                t = t * <span class="hljs-number">10</span> + (postfix[i++] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>            &#125;<br>            i++;<br>            s.<span class="hljs-built_in">push</span>(t);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> val2 = s.<span class="hljs-built_in">top</span>(); s.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-type">int</span> val1 = s.<span class="hljs-built_in">top</span>(); s.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-type">char</span> c = postfix[i];<br>            <span class="hljs-keyword">switch</span>(c)<br>            &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span> : s.<span class="hljs-built_in">push</span>(val1 + val2); <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span> : s.<span class="hljs-built_in">push</span>(val1 - val2); <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span> : s.<span class="hljs-built_in">push</span>(val1 * val2); <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span> : s.<span class="hljs-built_in">push</span>(val1 / val2); <span class="hljs-keyword">break</span>;<br>            &#125;<br>            i++;<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; s.<span class="hljs-built_in">top</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>------------------------手动分割线--------------------</p><p>单纯做这题其实并不难，但是我想到了一个问题：前缀表达式和前序遍历、中缀表达式和中序遍历、后续表达式和后序遍历之间是否有关系？</p><p>根据我自己的探索，发现其实前、中、后缀表达式可以说是前、中、后序遍历的一种特殊形式</p><p>举个例子，对于<code>3*(5-2)+7</code>这个表达式，可以转化为树。</p><p>很显然，我们最先算<code>3*(5-2)</code>与<code>7</code>的和，其次算<code>3</code>和<code>(5-2)</code>的乘积，要算<code>5-2</code>我们要先做<code>5</code>和<code>2</code>的减法，因此<code>*</code>的子节点是<code>3</code>和<code>-</code>。显然<code>-</code>的子节点是<code>5</code>和<code>2</code>。最后计算的是</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">    +</span><br>   / \<br><span class="hljs-bullet">  *</span>   7<br> / \<br>3   -<br>   / \<br>  5   2<br></code></pre></td></tr></table></figure><p>前缀表达式(前序遍历)：<br>+*3-5.2.7</p><p>中缀表达式(中序遍历)<br>3*5-2+7</p><p>后缀表达式(后序遍历):<br>3.5.2.-*7+</p><h2 id="4-P1996">4 P1996</h2><p><a href="https://www.luogu.com.cn/problem/P1996">传送门</a></p><p>这题有两个方法：模拟法和递推法。模拟法更加直观，而递推法更加优雅</p><h3 id="4-1-模拟法">4.1 模拟法</h3><p>模拟法很直观，直接模拟整个出圈的过程，可以使用队列来解决。</p><p>将所有小朋友排好编号排成一列，在出列时报数。如果报数不是m的倍数则入列；否则直接出列，同时输出小朋友的编号</p><h4 id="4-1-1-AC代码">4.1.1 AC代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">joes</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        q.<span class="hljs-built_in">push</span>(i);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        t++;<br>        <span class="hljs-keyword">if</span>(t % m != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            q.<span class="hljs-built_in">push</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout &lt;&lt; q.<span class="hljs-built_in">front</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            q.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-built_in">joes</span>(n, m);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-数学法-约瑟夫环递推公式">4.2 数学法(约瑟夫环递推公式)</h3><p>约瑟夫环问题有一个著名的递推公式解法。设f(n,m)为n个人报数，每次数到m出列的最终胜利者，则有递推关系：</p><p>f(n,m) = (f(n - 1), m) mod n</p><p>从只有一个人开始推，直到n个人。基于此我们可以反向推导出每一步出圈的人的编号。</p><p>现在让我们进行递推公式</p><p>设f(n, m)为n个人报数，每次数到m的情况下，最后那个人的位置。</p><p>当只有一个人的时候，(即n=1)，很显然此人(编号’0’)是最后的存活者</p><p>基于前一个数量的结果，但是因为我们现在有 <code>n</code> 个人，所以我们要在这个位置基础上加上 <code>m</code>（因为每次都是数到 <code>m</code> 的人出列），然后对当前人数 <code>n</code> 取模，以确保我们得到的索引是有效的（即不会超出当前的人数范围）</p><p>举个例子</p><p>假设现在有<code>3</code>个人，每次数到<code>2</code>时出列，我们要找到最后存活的位置</p><ol><li>f(1,2) = 0;</li><li>f(2,2) = (f(1,2) + 2) % 2 = 0;</li><li>f(3,2) = (f(2,2) + 2) % 3 = 2;</li></ol><h4 id="4-2-2-AC代码">4.2.2 AC代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">josephus</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">people</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        people[i] = i + <span class="hljs-number">1</span>;<br>        <br>    vector&lt;<span class="hljs-type">int</span>&gt; result;<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(!people.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        index = (index + m - <span class="hljs-number">1</span>) % people.<span class="hljs-built_in">size</span>();<br>        result.<span class="hljs-built_in">push_back</span>(people[index]);<br>        people.<span class="hljs-built_in">erase</span>(people.<span class="hljs-built_in">begin</span>() + index);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; order = <span class="hljs-built_in">josephus</span>(n, m);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> person : order)<br>        cout &lt;&lt; person &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <br>    cout &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-P1160-队列安排">5 P1160 队列安排</h2><p><a href="https://www.luogu.com.cn/problem/P1160">传送门</a></p><p>此题有两个难点：</p><ol><li>如何插入同学？</li><li>如何删除同学？</li></ol><h3 id="5-1-如何插入同学？">5.1 如何插入同学？</h3><p>对于此类需要频繁插入的问题，数组显然不行，第一反应当然是链表。</p><p>我们可以把每个同学想象成互相握住肩膀，比如a同学的右边是b同学，a同学握着b同学的肩膀，b同学握住a同学的肩膀。如果想要在a同学的右边插入c同学，首先要让c同学握住a同学，之后c同学握住a同学握着的b同学，接着a同学右边的b同学握住a同学的手转为握住c同学，a同学握住b同学的手转为握住c同学。</p><p>这题可以使用结构体，但结构体比数组慢，所以我们可以用数组来模拟结构体。</p><p>但是要注意避免数据溢出，即第一个同学左边的同学是谁？所以对于同学的编号我们应该从1开始而不是从0开始</p><h3 id="5-2-如何删除同学？">5.2 如何删除同学？</h3><p>当时第一反应是通过一个双重循环，即每输入一个需要删除的i号同学就搜索一遍链表，将i号同学改为0。输出时进行检查，如果是0则不输出。但显然时间复杂度则为O(N<sup>2</sup>)了。</p><p>正难则反，以退为进。我们不妨先用一个布尔数组标记所有要删除的学号，接着依次输出链表，当遇到要输出的学号被标记时则不输出，时间复杂度O(N)。</p><h3 id="5-3-AC代码">5.3 AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> l[N], r[N], res[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <br>    r[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, l[n + <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    r[<span class="hljs-number">1</span>] = n + <span class="hljs-number">1</span>, l[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> k, p;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;k, &amp;p);<br>        <br>        <span class="hljs-keyword">if</span>(p == <span class="hljs-number">0</span>)<br>        &#123;<br>            r[i] = k;<br>            l[i] = l[k];<br>            r[l[k]] = i;<br>            l[k] = i;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p == <span class="hljs-number">1</span>)<br>        &#123;<br>            l[i] = k;<br>            r[i] = r[k];<br>            l[r[k]] = i;<br>            r[k] = i;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> idx = <span class="hljs-number">1</span>, temp = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(r[temp] != n + <span class="hljs-number">1</span>)<br>    &#123;<br>        res[idx++] = r[temp];<br>        temp = r[temp];<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-type">bool</span> isDeleted[N] = &#123;<span class="hljs-literal">false</span>&#125;;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        isDeleted[x] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!isDeleted[res[i]])<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, res[i]);<br>    &#125;<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-P1540-机器翻译">6 P1540 机器翻译</h2><p><a href="https://www.luogu.com.cn/problem/P1540">传送门</a></p><p>解题思路：</p><ol><li><p>初始化</p><ul><li>使用一个固定大小的队列或列表来模拟内存</li><li>使用一个计算器来记录查词典的次数</li></ul></li><li><p>对于文章中的每个单词</p><ul><li>对于文章中每个单词首先要判断他是否在内存（这里用队列来模拟）中<ul><li>如果在，不需要做任何操作</li><li>如果不在<ul><li>如果内存未满，直接将单词添加到内存中</li><li>如果队列已满，移除最先进入内存的单词(直接pop())，然后将新单词添加到内存中</li><li>每次将单词加入内存时，增加查词典的计数</li></ul></li></ul></li></ul></li><li><p>输出结果</p><ul><li>文章处理完成后，输出查词典的总次数</li></ul></li></ol><p>AC代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;deque&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>deque&lt;<span class="hljs-type">int</span>&gt; words;<br><span class="hljs-type">int</span> m, n;<span class="hljs-comment">//m为内存容量，n为文章长度</span><br><span class="hljs-type">int</span> res;<br><span class="hljs-type">bool</span> isFound;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; m &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">while</span>(n -- )<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <br>        cin &gt;&gt; x;<br>        <br>        isFound = <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it = words.<span class="hljs-built_in">begin</span>(); it != words.<span class="hljs-built_in">end</span>(); it ++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span>(x == *it) <br>            &#123;<br>                isFound = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(!isFound)<br>        &#123;<br>            res ++ ;<br>            <br>            <span class="hljs-keyword">if</span>(words.<span class="hljs-built_in">size</span>() &gt;= m)<br>            &#123;<br>                words.<span class="hljs-built_in">pop_front</span>();<br>                words.<span class="hljs-built_in">push_back</span>(x);<br>            &#125;<span class="hljs-keyword">else</span> words.<span class="hljs-built_in">push_back</span>(x);<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上是本蒟蒻的代码，时间复杂度O(N<sup>2</sup>)。翻看题解，看到一位大佬的代码，居然将时间复杂度做到O(N)</p><p>用内存换时间，这是很划算的做法。</p><ul><li>开辟两个数组a[MAX]、b[MAX]</li><li>用b[MAX]表示依次存入的单词,比如b[1] = 3, b[2] = 5,表示第一个存入的单词是3，第二个存入的单词是5</li><li>a[MAX]表示查询单词是否在区域中，如果在则为1，不在为0</li><li>用左、右指针计算内存的长度</li></ul><p>大佬的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,x,ans,l,r,a[<span class="hljs-number">1005</span>],b[<span class="hljs-number">1005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;m&gt;&gt;n;<br>    l=<span class="hljs-number">0</span>;r=<span class="hljs-number">0</span>;<span class="hljs-comment">//初始化两个指针</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>         <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<span class="hljs-comment">//边读入边做</span><br>         <span class="hljs-keyword">if</span> (a[x]==<span class="hljs-number">0</span>) <br>         &#123;<br>             ans++;<br>            r++;b[r]=x;a[x]=<span class="hljs-number">1</span>;<span class="hljs-comment">//因为每次遇到新单词都要做这些操作，不如搬到判断语句外做，这样程序更简洁</span><br>            <span class="hljs-keyword">if</span> (r&gt;m) &#123;l++;a[b[l]]=<span class="hljs-number">0</span>;&#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//千万不能忘记打这句，不然在比赛中会出错</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构， C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图(C++干货版)</title>
    <link href="/2024/05/28/graph/"/>
    <url>/2024/05/28/graph/</url>
    
    <content type="html"><![CDATA[<p>本章除了1:图的定义之外，其他内容很少讲概念，主要通过例题来感悟。因为我<s>懒</s>认为通过例题是一种更直观，也更实用的方法。</p><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="ie=edge">    <title>Document</title>    <script src="https://cdn.jsdelivr.net/npm/mermaid@10.6.1/dist/mermaid.min.js"></script>    <script>    window.onload=mermaid.initialize({"theme": "forest"});    </script></head><h2 id="1-图的定义">1 图的定义</h2><p>图(graph)是由顶点的有穷非空集合V(G)和顶点之间边的集合E(G)组成，通常表示为:G=(V, E),其中G表示图，V是图G中顶点的个数，E是图G中边的集合</p><h2 id="2-图的基本概念和术语">2 图的基本概念和术语</h2><h3 id="2-1-有向图">2.1 有向图</h3><p>若E是有向边的有限集合时，则图G为有向图。弧是顶点的有序对，记为&lt;v,w&gt;。其中v，w是顶点，v为弧头，w是弧尾，&lt;v,w&gt;称为从v到w的弧，也称v邻接到w，或w邻接自v。</p><div class="mermaid">        graph LR;            1-->2;            2-->1;            2-->3;</div><p>图中有向图可表示为<br>G<sub>1</sub>=(V<sub>1</sub>,E<sub>1</sub>);<br>V<sub>1</sub>={1,2,3}<br>E<sub>1</sub>={&lt;1,2&gt;,&lt;2,1&gt;,&lt;2,3&gt;}</p><h3 id="2-2-无向图">2.2 无向图</h3><p>若E是无向边(简称边)的有限集合时，则图G为无向图。边是顶点的无序对，记为(v,w)或(w,v)。其中v,w是顶点。可以说顶点v和顶点w互为邻接点。边(v,w)依附于顶点w和v，或者说边(v,w)和顶点v,w相关联</p><div class="mermaid">        graph LR;            1 --- 2;            1 --- 3;            2 --- 3;</div><p>图中所示无向图可表示为<br>G<sub>2</sub>=(V<sub>2</sub>,E<sub>2</sub>);<br>V<sub>2</sub>={1, 2, 3};<br>E<sub>2</sub>={(1,2),(1,3),(2,3)};</p><h3 id="2-3-简单图">2.3 简单图</h3><p>一个图G若满足：<br>1. 不存在重复边<br>2. 不存在顶点到自身的边<br>则其被称为简单图。</p><p><em>数据结构仅讨论简单图</em></p><h3 id="2-4-多重图">2.4 多重图</h3><p>若图G中某两个结点之间的边数多于一条，又运行顶点通过一条边与自己关联，则G为多重图。多重图的定义和简单图是相对的。</p><h3 id="2-5-完全图-也称简单完全图">2.5 完全图(也称简单完全图)</h3><p>完全图是一个简单图，其中每对不同的顶点都恰好由一条边相连。这意味着在完全图中，任意两个不同的顶点之间都有直接的相连，没有任何的顶点是孤立的。</p><p>完全图的性质：<br>* 顶点的数量：用(V)表示<br>* 边的数量：V*(V-1)/2<br>* 度数：完全图中每个结点的度数都是(V-1)</p><h2 id="3-图的存储结构">3 图的存储结构</h2><h3 id="3-1-邻接矩阵">3.1 邻接矩阵</h3><p>相关概念不赘述，因为<s>懒</s>觉得没必要，直接上例子：</p><p>假设我们有三个顶点A、B、C，顶点之间的关系：</p><div class="mermaid">    graph LR;        A --> B;        B --> C;        C --> A;</div><p>为了用邻接矩阵表示这个图，首先定义一个二维数组，其中行和列的索引分别代表起点和终点。如果结点i有一条边指向j，则martix[i][j]被设置为1(无向图)或边的权重(如果是有权图)。如果没有直接连接，则设置为0。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> V = <span class="hljs-number">3</span>;<span class="hljs-comment">//顶点数</span><br><span class="hljs-type">int</span> adjMartix[V][V];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    adjMartix[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    adjMartix[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    adjMartix[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;邻接矩阵为：&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; V; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; V; j++)<br>            cout &lt;&lt; adjMartix[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-邻接表">3.2 邻接表</h3><p>邻接表是另一种常用的图的表示方法，适用于稀疏图，即边的数量远少于顶点的数量</p><p>假设我们有四个顶点:A,B,C,D。顶点之间的关系如下：</p><div class="mermaid">    graph LR;        A --- B;        A --- C;        B --- D;        C --- D;</div><p>为了使用邻接表表示这个图，我们可以使用一个数组。其中每个元素是一个列表，列表中包含与该顶点相连的其他顶点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> V = <span class="hljs-number">4</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">adjList</span>(V);<span class="hljs-comment">//创建一个大小为V的向量</span><br><br>    adjList[<span class="hljs-number">0</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//A与B相连</span><br>    adjList[<span class="hljs-number">1</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//B与A相连</span><br>    adjlist[<span class="hljs-number">0</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>    adjList[<span class="hljs-number">2</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>    adjList[<span class="hljs-number">1</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>    adjList[<span class="hljs-number">3</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    adjList[<span class="hljs-number">2</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>    adjList[<span class="hljs-number">3</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;邻接表为：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; V; i++)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;顶点&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;: &quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j : adjList[i])<br>        &#123;<br>            cout &lt;&lt; j &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-十字链表">3.3 十字链表</h3><p>十字链表适用于表示有向图的数据结构，特别适用于稀疏图。在十字链表中，每个顶点和每条边都用一个结点表示，这种结构特别适用于访问任何顶点的入边和出边</p><p>基本结构：<br>* 顶点结点：<br>- 包含顶点的信息<br>- 两个指针，一个指向该顶点的第一条出边，另一个指向该顶点的第一条入边<br>* 边结点：<br>- 包含边的信息<br>- 有四个指针，两个用于在顶点的出边或入边中前后链表，另外两个用于链接同一个顶点的下一条出边或入边</p><p><em>听不懂？没关系，看完例子再回过头来看</em></p><p>假设有一个有向图，包含A,B,C,D</p><p>考虑以下有向图：</p><div class="mermaid">    graph LR;        1 --> 2;        1 --> 3;        3 --> 4;        2 --> 4;</div><p>使用十字链表构建有向图：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span><br>&#123;<br>    <span class="hljs-type">int</span> tail, head;<span class="hljs-comment">//边的尾和头</span><br>    ArcNode *tailLink, *headLink;<span class="hljs-comment">//指向下一个相同尾、头的边</span><br>    <span class="hljs-built_in">ArcNode</span>(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> h): <span class="hljs-built_in">tail</span>(t), <span class="hljs-built_in">head</span>(h), <span class="hljs-built_in">tailLink</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">headLink</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">VertexNode</span><br>&#123;<br>    <span class="hljs-type">int</span> vertex;<span class="hljs-comment">//顶点信息</span><br>    ArcNode *firstIn, *firstOut;<span class="hljs-comment">//指向该顶点的第一个入边和出边</span><br>    <span class="hljs-built_in">VertexNode</span>(<span class="hljs-type">int</span> v): <span class="hljs-built_in">vertex</span>(v), <span class="hljs-built_in">firstIn</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">firstOut</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><br>vector&lt;VertexNode*&gt; vertices;<br><br><span class="hljs-comment">// 添加顶点</span><br><span class="hljs-function">VertexNode* <span class="hljs-title">addVertex</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>    VertexNode* vertex = <span class="hljs-keyword">new</span> <span class="hljs-built_in">VertexNode</span>(id);<br>    vertices.<span class="hljs-built_in">push_back</span>(vertex);<br>    <span class="hljs-keyword">return</span> vertex;<br>&#125;<br><br><span class="hljs-comment">// 查找顶点</span><br><span class="hljs-function">VertexNode* <span class="hljs-title">findVertex</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : vertices) &#123;<br>        <span class="hljs-keyword">if</span> (v-&gt;id == id) <span class="hljs-keyword">return</span> v;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-comment">// 添加边</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> tail, <span class="hljs-type">int</span> head)</span> </span>&#123;<br>    VertexNode* tailVertex = <span class="hljs-built_in">findVertex</span>(tail);<br>    VertexNode* headVertex = <span class="hljs-built_in">findVertex</span>(head);<br>    <span class="hljs-keyword">if</span> (!tailVertex) tailVertex = <span class="hljs-built_in">addVertex</span>(tail);<br>    <span class="hljs-keyword">if</span> (!headVertex) headVertex = <span class="hljs-built_in">addVertex</span>(head);<br><br>    ArcNode* arc = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArcNode</span>(tail, head);<br>    arc-&gt;tailNext = tailVertex-&gt;firstOut;<br>    tailVertex-&gt;firstOut = arc;<br>    arc-&gt;headNext = headVertex-&gt;firstIn;<br>    headVertex-&gt;firstIn = arc;<br>&#125;<br><br><span class="hljs-comment">// 显示图的信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : vertices) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Vertex &quot;</span> &lt;&lt; v-&gt;id &lt;&lt; <span class="hljs-string">&quot;:\n&quot;</span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;  Outgoing: &quot;</span>;<br>        <span class="hljs-keyword">for</span> (ArcNode* arc = v-&gt;firstOut; arc; arc = arc-&gt;tailNext)<br>            std::cout &lt;&lt; arc-&gt;head &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;\n  Incoming: &quot;</span>;<br>        <span class="hljs-keyword">for</span> (ArcNode* arc = v-&gt;firstIn; arc; arc = arc-&gt;headNext)<br>            std::cout &lt;&lt; arc-&gt;tail &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 清理内存</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cleanup</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : vertices) &#123;<br>        <span class="hljs-keyword">while</span> (v-&gt;firstOut) &#123;<br>            ArcNode* tmp = v-&gt;firstOut;<br>            v-&gt;firstOut = tmp-&gt;tailNext;<br>            <span class="hljs-keyword">delete</span> tmp;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (v-&gt;firstIn) &#123;<br>            ArcNode* tmp = v-&gt;firstIn;<br>            v-&gt;firstIn = tmp-&gt;headNext;<br>            <span class="hljs-keyword">delete</span> tmp;<br>        &#125;<br>        <span class="hljs-keyword">delete</span> v;<br>    &#125;<br>    vertices.<span class="hljs-built_in">clear</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">addEdge</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">addEdge</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">addEdge</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">addEdge</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><br>    <span class="hljs-built_in">display</span>();<br><br>    <span class="hljs-built_in">cleanup</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>代码解释：</em></p><ul><li>我们定义了结构体<code>ArcNode</code>和<code>VertexNode</code>来表示图中的边和顶点</li><li>使用全局的<code>vertices</code>向量来存储图中的所有顶点</li></ul><p>例题</p><h3 id="题目描述">题目描述</h3><p>假设你是一家航空公司的数据分析师，你需要管理和分析航班与机场之间的关系。使用十字链表来存储航班信息。每个机场都可以有多个航班起飞和降落。设计一个系统，能够快速回答关于航班起降的查询。</p><h4 id="输入格式">输入格式</h4><ul><li>首先输入一个整数n，表示机场的数量</li><li>接着输入一个整数m，表示航班的数量</li><li>然后输入m行航班信息，每行包括起始机场和目的地机场编号</li></ul><h4 id="功能要求">功能要求</h4><ul><li>给定一个机场编号，查询从该机场起飞的所有航班的目的地机场。</li><li>给定一个机场编号，查询降落到该机场的所有航班的起始机场。</li><li>查询每个机场的出发航班数和到达航班数。</li></ul><h4 id="示例输入">示例输入</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">4</span>  <span class="hljs-comment">// 机场数量</span><br><span class="hljs-number">5</span>  <span class="hljs-comment">// 航班数量</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-number">4</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="示例输出">示例输出</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp">From airport <span class="hljs-number">1</span>:<br>  Departures to: <span class="hljs-number">2</span>, <span class="hljs-number">3</span><br>  Arrivals from: <span class="hljs-number">4</span><br>Departure count: <span class="hljs-number">2</span>, Arrival count: <span class="hljs-number">1</span><br><br>From airport <span class="hljs-number">2</span>:<br>  Departures to: <span class="hljs-number">3</span><br>  Arrivals from: <span class="hljs-number">1</span><br>Departure count: <span class="hljs-number">1</span>, Arrival count: <span class="hljs-number">1</span><br><br>From airport <span class="hljs-number">3</span>:<br>  Departures to: <span class="hljs-number">4</span><br>  Arrivals from: <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br>Departure count: <span class="hljs-number">1</span>, Arrival count: <span class="hljs-number">2</span><br><br>From airport <span class="hljs-number">4</span>:<br>  Departures to: <span class="hljs-number">1</span><br>  Arrivals from: <span class="hljs-number">3</span><br>Departure count: <span class="hljs-number">1</span>, Arrival count: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="代码示例">代码示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span><br>&#123;<br>    <span class="hljs-type">int</span> tail, head;<br>    ArcNode *tailnext, *headnext;<br>    <span class="hljs-built_in">ArcNode</span>(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> h) : <span class="hljs-built_in">tail</span>(t), <span class="hljs-built_in">head</span>(h), <span class="hljs-built_in">tailNext</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">headNext</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">VertexNode</span><br>&#123;<br>    <span class="hljs-type">int</span> id;<br>    ArcNode *firstOut, *firstIn;<br>    <span class="hljs-built_in">VertexNode</span>(<span class="hljs-type">int</span> v) : <span class="hljs-built_in">id</span>(v), <span class="hljs-built_in">firstOut</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">firstIn</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><br>map&lt;<span class="hljs-type">int</span>, VertexNode*&gt; airports;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addFlight</span><span class="hljs-params">(<span class="hljs-type">int</span> tail, <span class="hljs-type">int</span> head)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(airports.<span class="hljs-built_in">find</span>(tail) == airports.<span class="hljs-built_in">end</span>())<br>    &#123;<br>        airports[tail] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">VertexNode</span>(tail);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(airports.<span class="hljs-built_in">find</span>(head) == airports.<span class="hljs-built_in">end</span>())<br>    &#123;<br>        airports[head] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">VertexNode</span>(head);<br>    &#125;<br><br>    ArcNode* newArc = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArcNode</span>(tail, head);<br>    newArc-&gt;tailNext = airports[tail]-&gt;firstOut;<br>    airports[tail]-&gt;firstOut = newArc;<br>    newArc-&gt;headNext = airports[head]-&gt;firstIn;<br>    airports[head]-&gt;firstIn = newArc;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;v : airports)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;From airport&quot;</span> &lt;&lt; v.first &lt;&lt; <span class="hljs-string">&quot;:\n Departures to: &quot;</span>;<br>        <span class="hljs-keyword">for</span>(ArcNode* arc = v.second-&gt;firstOut; arc != <span class="hljs-literal">nullptr</span>; arc = arc-&gt;tailNext)<br>            cout &lt;&lt; arc-&gt;head &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;  Arrivals from: &quot;</span>;<br>        <span class="hljs-keyword">for</span>(ArcNode* arc = v.second-&gt;firstIn; arc != <span class="hljs-literal">nullptr</span>; arc = arc-&gt;headNext)<br>            cout &lt;&lt; arc-&gt;tail &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-type">int</span>  outCount = <span class="hljs-number">0</span>, inCount = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(ArcNode* arc = v.second-&gt;firstOut; arc; arc = arc-&gt;tailNext) outCount++;<br>        <span class="hljs-keyword">for</span>(ArcNode* arc = v.second-&gt;firstIn; arc; arc = arc-&gt;headNext) inCount++;<br>        cout &lt;&lt; <span class="hljs-string">&quot;\nDeparture count:&quot;</span> &lt;&lt; outCount &lt;&lt; <span class="hljs-string">&quot;, Arrival count: &quot;</span> &lt;&lt; inCount &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, u, v;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        cin &gt;&gt; u &gt;&gt; v;<br>        <span class="hljs-built_in">addFlight</span>(u, v);<br>    &#125;<br><br>    <span class="hljs-built_in">display</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS(够用版)</title>
    <link href="/2024/05/27/css/"/>
    <url>/2024/05/27/css/</url>
    
    <content type="html"><![CDATA[<h2 id="1-CSS简介">1 CSS简介</h2><h3 id="1-1-什么是CSS？">1.1 什么是CSS？</h3><p><code>CSS</code>: Cascading Style Sheet</p><p><em>为什么被命名为CSS？</em><br><em>级联（Cascading）：CSS的“级联”特性意味着当多个样式应用于同一个HTML元素时，这些样式会根据它们的来源（例如用户样式表、作者样式表或浏览器默认样式）和优先级（例如内联样式、ID选择器、类选择器等）来决定如何组合或覆盖。这种机制允许开发者在多个地方定义样式，而浏览器会根据一定的规则来确定最终应用于元素的样式。</em><br><em>样式表（Style Sheets）：CSS使用“样式表”的方式来组织样式信息。一个样式表包含了一组规则，每个规则都由一个或多个选择器和一条或多条声明组成。选择器用于指定哪些HTML元素应用该规则，而声明则指定了这些元素应该如何被渲染（例如颜色、字体、布局等）。</em></p><h3 id="1-2-CSS的作用">1.2 CSS的作用</h3><p>页面外观美化</p><p>布局和定位</p><h2 id="2-基本用法">2 基本用法</h2><h3 id="2-1-CSS语法">2.1 CSS语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        选择器&#123;</span><br><span class="language-css">            属性名:属性值;</span><br><span class="language-css">            属性名:属性值;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>选择器：要修饰的对象</li><li>属性名：修饰对象的属性</li><li>属性值：样式的取值</li></ul><p><em>没听懂？没关系，接着往后看就行</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>:<span class="hljs-number">#cccccc</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">h2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>:blue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>CSS从入门到入土<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-CSS应用方式">2.2 CSS应用方式</h3><ul><li>内部样式(internal styles)</li><li>行内样式(inline styles)</li><li>外部样式(external styles)</li></ul><h4 id="2-2-1-内部样式">2.2.1 内部样式</h4><p>也称为内嵌样式，在页面头部通过style标签定义</p><p>对当前页面所有符合样式选择器的标签都起作用</p><h4 id="2-2-2-行内样式">2.2.2 行内样式</h4><p>也称为嵌入样式，使用HTML标签的style属性定义</p><p>只对设置style属性的标签起作用</p><h3 id="2-2-3-外部样式">2.2.3 外部样式</h3><p>使用单独的<code>.css</code>文件定义，然后在页面中使用<code>link标签</code>或<code>@import指令</code>引入</p><ul><li>使用<code>link标签</code>链接外部样式文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;path/to/your/example.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><em>小提示：type可省略</em></p><ul><li><code>@import</code>指令导入外部样式文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;path/to/your/example.css&quot;</span>;</span><br><span class="language-css">    <span class="hljs-keyword">@import</span> url(path/to/your/example.css);</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-选择器">3 选择器</h2><h3 id="3-1-基础选择器">3.1 基础选择器</h3><h4 id="3-1-1-标签选择器">3.1.1 标签选择器</h4><p>也称为元素选择器，使用HTML标签作为选择器的名称</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">p &#123;  <br>    color: red;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-2-类选择器">3.1.2 类选择器</h4><p>使用自定义的名称，以<code>.</code>号作为前缀，然后通过HTML标签的class属性调用类选择器</p><p><em>注意</em><br></p><ul><li>调用时不能添加<code>.</code>号；</li><li>同时调用多个类选择器时，用<code>空格</code>分割</li><li>类选择器名称不能以<code>数字</code>开头</li></ul><h4 id="3-1-3-ID选择器">3.1.3 ID选择器</h4><p>使用自定义的名称，以<code>#</code>作为前缀，然后通过HTML标签的id属性进行名称匹配</p><p>ID属性是一对一的关系</p><h3 id="3-2-复杂选择器">3.2 复杂选择器</h3><h4 id="3-2-1-复合选择器">3.2.1 复合选择器</h4><p>标签选择器和类选择器、标签选择器和ID选择器一起使用</p><p>必须同时满足两个条件才能应用样式</p><ul><li><p>交集选择器</p><ul><li>语法：E.F</li><li>例子：<code>p.intro</code>将选择所有既是<code>&lt;p&gt;</code>元素又拥有<code>intro</code>类的元素</li></ul></li><li><p>并集选择器</p><ul><li>语法：E,f</li><li>例子：<code>h1,h2&#123;color:blue;&#125;</code>将选择所有的<code>&lt;h1&gt;</code>和<code>&lt;h2&gt;</code>元素，并将他们的颜色设为蓝色</li></ul></li></ul><h4 id="3-2-2-组合选择器">3.2.2 组合选择器</h4><p>组合选择器描述了元素之间的关系，如父子关系、兄弟关系等，允许开发者更精准的选择元素</p><ul><li><p>后代选择器</p><ul><li>符号：空格</li><li>例子: <code>div p</code>将选择所有<code>&lt;div&gt;</code>元素内部的<code>&lt;p&gt;</code>元素</li></ul></li><li><p>子元素选择器</p><ul><li>符号： &gt;</li><li>例子： <code>ul&gt;li</code>将选择所有<code>ul</code>元素内部的直接子元素<code>li</code></li></ul></li><li><p>相邻兄弟选择器</p><ul><li>符号：<code>+</code></li><li>例子：<code>h2+p</code>将选择紧接在<code>&lt;h2&gt;</code>元素后面的<code>&lt;p&gt;</code>元素</li></ul></li><li><p>通用兄弟选择器</p><ul><li>符号：<code>~</code></li><li>例子：<code>h2~p</code>将选择所有与<code>&lt;h2&gt;</code>元素在同一层级的<code>&lt;p&gt;</code>元素</li></ul></li></ul><h4 id="3-2-3-嵌套组合器">3.2.3 嵌套组合器</h4><p>嵌套组合器允许在一个选择器的内部定义另一个选择器，以形成嵌套的样式规则</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/* 1.标签选择器和类选择器合起来使用----复合选择器 */</span></span><br><span class="language-css"><span class="hljs-selector-tag">h1</span><span class="hljs-selector-class">.aaa</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 1.标签选择器和ID选择器合起来使用----复合选择器 */</span></span><br><span class="language-css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-id">#bbb</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:blue;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 2.组合选择器 */</span></span><br><span class="language-css"><span class="hljs-selector-tag">h1</span>,<span class="hljs-selector-tag">p</span>,<span class="hljs-selector-tag">div</span>,<span class="hljs-selector-tag">span</span>,<span class="hljs-selector-class">.ccc</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>:<span class="hljs-number">30px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">background</span>:violet;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.ccc</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-weight</span>:bold;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.first</span> + <span class="hljs-selector-class">.second</span> &#123;  </span><br><span class="language-css">    <span class="hljs-attribute">color</span>: red;  </span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.first</span> ~ <span class="hljs-selector-tag">p</span> &#123;  </span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: lightblue;  </span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 3.嵌套选择器 */</span></span><br><span class="language-css"><span class="hljs-comment">/* div p&#123;</span></span><br><span class="hljs-comment"><span class="language-css">color:green;</span></span><br><span class="hljs-comment"><span class="language-css">text-decoration:underline;</span></span><br><span class="hljs-comment"><span class="language-css">&#125; */</span></span><br><span class="language-css"><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:green;</span><br><span class="language-css"><span class="hljs-attribute">text-decoration</span>:underline;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">h3</span><span class="hljs-selector-class">.ddd</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需求：只想修饰class属性为aaa的h1标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aaa&quot;</span>&gt;</span>welcome<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aaa&quot;</span>&gt;</span>css<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 我要修饰ID属性为bbb的p标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bbb&quot;</span>&gt;</span>world&lt;/p &gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>html<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bbb&quot;</span>&gt;</span>主讲：叽叽<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 给h1、p、div、span标签中的内容设置字号为30px --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>WEB开发<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ccc&quot;</span>&gt;</span>JAVA开发<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需求：修饰div内部的p标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>div内部的p标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>div内部的h3标签<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>div内部的h3内部的p标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需求：修饰div内部的class为ddd的标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>div内部的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ddd&quot;</span>&gt;</span>div内部的h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ddd&quot;</span>&gt;</span>PPPP<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ddd&quot;</span>&gt;</span>h3h3h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需求：修饰div内部class为first的标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;first&quot;</span>&gt;</span>我是第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;second&quot;</span>&gt;</span>我是相邻的段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;third&quot;</span>&gt;</span>我不是相邻的段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="伪类选择器">伪类选择器</h4><p>根据不同的状态显示不同的样式，一般用于标签</p><p>四种状态：<br>* <code>:link</code>：未访问的链接<br>* <code>:visited</code>：已访问的链接<br>* <code>:hover</code>：鼠标悬浮在链接上，即移动在链接上<br>* <code>:active</code>：选定的链接，被激活</p><p><em>注意：默认超链接为：蓝色，不划线</em></p><h3 id="3-3-选择器优先级">3.3 选择器优先级</h3><h4 id="3-3-1-优先级">3.3.1 优先级</h4><p>行内样式 &gt; ID选择器 &gt; class选择器 &gt; 标签选择器</p><p><em>原因：首先加载标签选择器，再加载类选择器 ，然后加载ID选择器，最后加载行内样式</em><br><em>后加载会覆盖先加载的同名样式</em></p><h4 id="3-3-2-内外部样式加载顺序">3.3.2 内外部样式加载顺序</h4><p>就近原则<s>英语的DNA动了</s></p><p><em>原因和上诉一样，在同优先级的前提下，后加载的会覆盖先加载的同名样式，所以离得越近越优先</em></p><h4 id="3-3-3-important">3.3.3 !important</h4><p>可以使用<code>!important</code>使某个样式有最高的优先级</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red !important;&quot;</span>&gt;</span>这段文字是红色的，因为使用了 !important。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-常见CSS属性">4 常见CSS属性</h2><h3 id="4-1-字体属性">4.1 字体属性</h3><p>设置字体相关的样式</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">含义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">font-size</td><td style="text-align:left">大小、尺寸</td><td style="text-align:left">可以使用多种单位</td></tr><tr><td style="text-align:left">font-weight</td><td style="text-align:left">粗细</td><td style="text-align:left">取值:normal,bold,自定义</td></tr><tr><td style="text-align:left">font-family</td><td style="text-align:left">字体</td><td style="text-align:left">系统中要安装指定的字体</td></tr><tr><td style="text-align:left">font-style</td><td style="text-align:left">样式</td><td style="text-align:left">取值：normal,italic</td></tr><tr><td style="text-align:left">font</td><td style="text-align:left">简写</td><td style="text-align:left"></td></tr></tbody></table><p>简写属性：font:font-style|font-weight|font-size|font-family<br>必须按照次顺序书写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css"><span class="hljs-comment">/*font-size: 20px;*/</span></span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">80%</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.hello</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">62.5%</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css"><span class="hljs-comment">/*font-size: 30px;</span></span><br><span class="hljs-comment"><span class="language-css">font-weight: bold;</span></span><br><span class="hljs-comment"><span class="language-css">font-family: 华文行楷,宋体,黑体;</span></span><br><span class="hljs-comment"><span class="language-css">font-style: italic;*/</span></span><br><span class="language-css"><span class="hljs-attribute">font</span>: italic bold <span class="hljs-number">30px</span> 微软雅黑;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>CSS从入门到入土<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>我的DIV<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>CSS从入门到精通<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>嘿嘿<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-2-文本属性">4.2 文本属性</h3><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">含义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">color</td><td style="text-align:left">颜色</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">line-height</td><td style="text-align:left">行高</td><td style="text-align:left">行之间的高度</td></tr><tr><td style="text-align:left">text-align</td><td style="text-align:left">水平对齐方式</td><td style="text-align:left">取值：left、center、right</td></tr><tr><td style="text-align:left">vertical-align</td><td style="text-align:left">垂直对齐方式</td><td style="text-align:left">取值：top、middle、bottom</td></tr><tr><td style="text-align:left">text-indent</td><td style="text-align:left">首行缩进</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">text-decoration</td><td style="text-align:left">文本修饰</td><td style="text-align:left">取值：underline、overline、line-through</td></tr><tr><td style="text-align:left">text-transform</td><td style="text-align:left">字母大小写转换</td><td style="text-align:left">取值：lowercase、uppercase、capitalize(首字母大写)</td></tr><tr><td style="text-align:left">letter-spacing</td><td style="text-align:left">字符间距</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">word-spacing</td><td style="text-align:left">单词间距</td><td style="text-align:left">只对英文有效</td></tr><tr><td style="text-align:left">white-space</td><td style="text-align:left">空白的处理方法</td><td style="text-align:left">文本超出后是否换行，取值：nowrap(截断)</td></tr></tbody></table><h3 id="4-3-背景属性">4.3 背景属性</h3><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">含义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">background-color</td><td style="text-align:left">背景颜色</td><td style="text-align:left">取值：transparent(透明)</td></tr><tr><td style="text-align:left">background-image</td><td style="text-align:left">背景图片</td><td style="text-align:left">必须用url()方式指定图片的路径</td></tr><tr><td style="text-align:left">background-repeat</td><td style="text-align:left">背景图片的重复方式</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">background-position</td><td style="text-align:left">背景图片的显示位置</td><td style="text-align:left">取值：top、bottom、left、right、center、坐标(左上角(0,0)为坐标，向右为x正方向，向下为y正方向)</td></tr><tr><td style="text-align:left">background-attachment</td><td style="text-align:left">背景图片是否跟随滚动</td><td style="text-align:left">取值：scroll(默认)、fixed</td></tr><tr><td style="text-align:left">background</td><td style="text-align:left">简写</td><td style="text-align:left"></td></tr></tbody></table><p>简写属性：background:background-color|background-image|background-repeat|background-position</p><p>以空格隔开，书写顺序没有要求</p><h3 id="4-4-列表属性">4.4 列表属性</h3><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">含义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">list-style-type</td><td style="text-align:left">设置列表前的标记</td><td style="text-align:left">取值:none、disc、circle、square、decimal</td></tr><tr><td style="text-align:left">list-style-image</td><td style="text-align:left">将图片作为列表前的标记</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">list-style-position</td><td style="text-align:left">设置标记的位置</td><td style="text-align:left">取值：outside(默认)、inside</td></tr><tr><td style="text-align:left">list-style</td><td style="text-align:left">简写</td><td style="text-align:left"></td></tr></tbody></table><p>简写属性：list-style:list-style-type|list-style-image|list-style-position</p><p>书写顺序没有要求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/* li&#123;</span></span><br><span class="hljs-comment"><span class="language-css">list-style-type:decimal;</span></span><br><span class="hljs-comment"><span class="language-css">&#125; */</span></span><br><span class="language-css"><span class="hljs-selector-class">.first</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style-type</span>:circle;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.second</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">../images/male.gif</span>);</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.third</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style-type</span>:circle;</span><br><span class="language-css"><span class="hljs-attribute">list-style-position</span>:inside;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.fourth</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style</span>:circle <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/female.gif</span>)inside;</span><br><span class="language-css"><span class="hljs-comment">/* list-style:none; */</span></span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.nav</span>&#123;</span><br><span class="language-css"><span class="hljs-comment">/* list-style:none;</span></span><br><span class="hljs-comment"><span class="language-css">float:left; */</span></span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style</span>:none;</span><br><span class="language-css"><span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;</span><br><span class="language-css"><span class="hljs-attribute">width</span>:<span class="hljs-number">70px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;first&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;second&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;third&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fourth&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>新闻<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>小说<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>艾瑞蒂<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>政治<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学习<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-5-表格属性">4.5 表格属性</h3><p>border-collapse:表格中相邻的边框是否合并(折叠)为单一边框</p><p>取值：separated(默认) collapse</p><h2 id="5-盒子模型">5 盒子模型</h2><h3 id="5-1-简介">5.1 简介</h3><p>盒子模型是网页布局的基础，将页面中所有元素都看作是一个盒子，盒子都包含以下几个属性：</p><ul><li>width 宽度</li><li>height 高度</li><li>border 边框</li><li>padding 内边距</li><li>margin 外边距</li></ul><h3 id="5-2-盒子模型">5.2 盒子模型</h3><h4 id="5-2-1-border">5.2.1 border</h4><p>表示盒子的边框</p><p>分为四个方向：<br>* 上top、右right、下bottom、左left<br>* border-top、border-right、border-bottom、border-left</p><p>每个边框包含三种样式</p><pre><code class="hljs">* border-top-color,border-top-width,border-top-style* border-right-color,border-right-width,border-right-style* border-left-color,border-left-width,border-left-style* border-bottom-color,border-bottom-width,border-bottom-style</code></pre><p>style的取值：<br>* solid 实线<br>* dashed 虚线<br>* dotted 点线<br>* double 双线<br>* inset 内嵌的3D线<br>* outset 外嵌的3D线</p><p>简写，三种方式</p><pre><code class="hljs">* 按方向简写：    - border-top    - border-right    - border-bottom    - border-left    - 书写顺序：border-顺序:width style coloe* 按样式简写    - border-color    - border-width    - border-style    - 书写顺序：border-样式:top right bottom left    - 必须按顺时针方向书写* 终极简写：    如果四个边框样式完全相同，border:width style color</code></pre><h4 id="5-2-2-padding">5.2.2 padding</h4><p>表示盒子的内边距，即内容与边框之间的距离</p><p>同样也分为四个方向，也可以简写(按顺时针方向，默认上下一样，左右一样)</p><p>注意：如果上下冲突，则以上为准，左右冲突则以左为准</p><h4 id="5-2-3-margin">5.2.3 margin</h4><p>表示盒子的外边距，即盒子与盒子之间的距离</p><p>同样也分为四个方向，也可以简写(按顺时针方向，默认上下一样，左右一样)</p><h3 id="5-3-其他">5.3 其他</h3><h4 id="5-3-1-元素所占空间">5.3.1 元素所占空间</h4><p>页面中的元素实际所占的空间<br>* 宽度＝width+左右padding＋左右border+左右margin<br>* 高度＝height+上下padding＋上下border+上下margin</p><h4 id="5-3-2-盒子属性默认值">5.3.2 盒子属性默认值</h4><p>不同标签的盒子属性默认值可能不同，需要自己设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">body,ul,ol,dl,li&#123;<br>    margin:0;<br>    padding:0;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-3-3-外边距的合并">5.3.3 外边距的合并</h4><p>也称为外边距的折叠，指的是两个块级元素垂直外边距相遇时它们将合并为一个外边距</p><p>两种情况：<br>* 当一个元素出现在另一个元素上面时，第一个元素的下边距与第二个元素的上边距会发生合并<br>* 当一个元素包含在另一个元素中时，并且没有内边距或边框把外边距分隔开时，两个元素的上外边距会发生合并</p><p><em>好处：更加美观</em></p><h2 id="6-定位方法">6 定位方法</h2><h3 id="6-1-简介">6.1 简介</h3><p>通过position属性实现对元素的定位，有四种定位方法</p><p>常用取值：</p><table><thead><tr><th style="text-align:left">取值</th><th style="text-align:left">含义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">static</td><td style="text-align:left">默认值</td><td style="text-align:left">按照常规文档流进行显示</td></tr><tr><td style="text-align:left">relative</td><td style="text-align:left">相对定位</td><td style="text-align:left">相对于标签原来的位置进行的定位</td></tr><tr><td style="text-align:left">absolute</td><td style="text-align:left">绝对定位</td><td style="text-align:left">相对于第一个非static定位的父标签的定位</td></tr><tr><td style="text-align:left">fixed</td><td style="text-align:left">固定定位</td><td style="text-align:left">相对于浏览器窗口进行定位</td></tr></tbody></table><p>说到这里，你可能没听懂。所以我尝试用更通俗的语言再说一遍：</p><ul><li>static<ul><li>这是元素默认的状态。元素会按照从上到下、从左到右的顺序排列在页面中。</li><li>不能使用top、right、bottom、left这些属性来移动元素的位置。</li></ul></li><li>relative<ul><li>元素仍然会占据原本的位置，但你可以通过top、right、bottom、left这些属性让它在自己的位置上“移动”一点。</li><li>元素原本的位置依然保留，占据空间不变，只是视觉上会稍微移动。</li></ul></li><li>fixed<ul><li>元素会固定在浏览器窗口的某个位置，不管你怎么滚动页面，它都不会动。</li><li>用来制作那些始终显示在某个位置的元素，比如导航栏或广告。</li></ul></li><li>absolute<ul><li>元素会相对于它的父元素进行定位，而这个父元素必须是用相对定位（relative）或绝对定位（absolute）来设置的。如果没有这样的父元素，它就会相对于整个页面定位。</li><li>元素会脱离正常的排列顺序，你可以完全控制它在页面中的位置。</li></ul></li></ul><p><em>举个例子</em><br>想象你在桌子上拜访物品<br>* static：所有物品都按固定的顺序摆放，不能随意移动。<br>* relative：你可以在桌子上的原位稍微移动某个物品，但它还是在桌子上那个位置。<br>* fixed：你把物体用绳子从天花板吊着，不管你移动桌子上的其他物品或桌子，它都不会动。<br>* absolute：你可以把物品放在桌子上的任何位置，不考虑它原本的摆放顺序，就像你可以在桌子上任意摆放东西。</p><p>设置定位方式后，还要设置定位属性：top,bottom,left,right</p><h3 id="6-2-z-index">6.2 z-index</h3><p>设置元素定位方式后，元素会浮在页面上方，此时可以通过z-index属性设置优先级，控制元素的堆叠排序</p><p>取值为数字，值越大优先级越高，默认为auto(大多数浏览器默认为0)</p><p>注意：只能给非static定位的元素设置z-index属性</p><h2 id="7-其他css属性">7 其他css属性</h2><h3 id="7-1-浮动和清除">7.1 浮动和清除</h3><h4 id="7-1-1-浮动属性">7.1.1 浮动属性</h4><p>通过float属性来实现元素的浮动，可以让块级元素脱离常规的文档流，向左或向右移动，在同一行显示</p><p>如果一行显示不下，则会换行</p><p>常用取值：<br>* left<br>* right<br>* none</p><h4 id="7-1-2-清除属性">7.1.2 清除属性</h4><p>通过clear属性来实现清除，设置元素的哪一侧不允许有浮动元素</p><p>常用取值：<br>* left<br>* right<br>* both<br>* none(默认取值)</p><h3 id="7-2-元素的显示和隐藏">7.2 元素的显示和隐藏</h3><h4 id="7-2-1-display">7.2.1 display</h4><p>通过display属性设置元素是否显示，以及是否独占一行</p><p>常用取值：</p><table><thead><tr><th style="text-align:left">取值</th><th style="text-align:left">含义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">none</td><td style="text-align:left">不显示</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">inline</td><td style="text-align:left">显示为内联元素，行级元素的默认值</td><td style="text-align:left">将块级元素变为行级元素，不在独占一行</td></tr><tr><td style="text-align:left">block</td><td style="text-align:left">显示为块级元素，块级元素的默认值</td><td style="text-align:left">将行级元素变为块级元素，独占一行</td></tr><tr><td style="text-align:left">inline-block</td><td style="text-align:left">显示为内联元素，但是可以设置宽和高</td><td style="text-align:left">在inline基础上允许设置宽度和高度</td></tr></tbody></table><h4 id="7-2-2-visibility">7.2.2 visibility</h4><p>常用属性</p><table><thead><tr><th style="text-align:left">取值</th><th style="text-align:left">含义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">visibility</td><td style="text-align:left">显示</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">hidden</td><td style="text-align:left">隐藏</td><td style="text-align:left"></td></tr></tbody></table><h4 id="7-2-3-区别">7.2.3 区别</h4><pre><code class="hljs">* display隐藏时不再占据页面中的空间，后面的元素会占据其位置* visibility隐藏时会占据页面中的空间，位置还保留在页面中，知识不显示</code></pre><h3 id="7-3-轮廓">7.3 轮廓</h3><h4 id="7-3-1-简介">7.3.1 简介</h4><p>轮廓outline，用于在元素周围绘制一个轮廓，位于border外围，可以突出显示元素</p><h4 id="7-3-2-基本用法">7.3.2 基本用法</h4><p>常用属性：<br>* outline-width：轮廓宽度<br>* outline-color：轮廓颜色<br>* outline-style：轮廓样式<br>* outline 简写</p><p>在浏览器中，当鼠标单击或者使用<kbd>TAB<kbd>键获得焦点时，该元素会有一个轮廓outline</p><ul><li>优点：可以提高使用表单的用户体验</li><li>缺点：有时影响美观</li></ul><h2 id="8-页面布局">8 页面布局</h2><h3 id="8-1-简介">8.1 简介</h3><p>常见布局页面：<br><br>* 表格布局<br><br>* div布局</p><h3 id="8-2-表格布局">8.2 表格布局</h3><h4 id="8-2-1-简介">8.2.1 简介</h4><p>不适用于复杂布局，仅用于简单、有规则的结构</p><p>定位相对准确，与浏览器基本无关，适用于简单分割</p><h4 id="8-2-2-用法">8.2.2 用法</h4><p>table常用样式的属性</p><pre><code class="hljs">* border在表格外围设置边框* border-spacing设置单元格之间的距离(相当于table标签中的cellspacing属性，即间距)* border-collapse表格中相邻边框是否合并，取值：separate，collapse</code></pre><h3 id="8-3-div布局">8.3 div布局</h3><p>定位绝对准确，使用灵活，适用于复杂的布局方式</p><h4 id="8-3-1-简单布局">8.3.1 简单布局</h4><p>两种形式：</p><pre><code class="hljs">* 1-1-1布局</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style1.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>header<br><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>main<br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>footer<br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">* 1-2 / 3-1布局</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style2.css&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>herder<br><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>main<br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span><br>right aside<br><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>footer<br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="8-3-2-圣杯布局">8.3.2 圣杯布局</h4><p>页面结构，两边的边栏宽度固定，中间主体在一定范围内可自适应，并且主体优先被加载</p><p>一般防止页面缩放影响浏览，都会为页面设置一个最小宽度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style4.css&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span> <br>            header <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>main<br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span> <br>left<br><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span> <br>right<br><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span> <br>            footer <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="8-3-3-双飞翼布局">8.3.3 双飞翼布局</h4><p>源自淘宝的UED(用户体验设计)团队</p><p>双飞翼布局和圣杯布局要实现的效果是相同的，只是思路不同</p><p>圣杯布局和双飞翼布局的区别</p><p>双飞翼布局比圣杯布局多创建一个div</p><p>双飞翼布局不用设置内边距和相对定位，也不用设置偏移量</p><p>双飞翼布局使用的margin,圣杯布局使用的是padding</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style5.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>            header <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main-wrapper&quot;</span>&gt;</span><br>                    main <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>                left aside<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>                right aside <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>            footer <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web前端</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bootstrap</title>
    <link href="/2024/05/26/Bootstrap/"/>
    <url>/2024/05/26/Bootstrap/</url>
    
    <content type="html"><![CDATA[<img src="/images/Bootstrap.webp" alt="Bootstrap"><p>I found that many tutorials on Bootstrap are incomplete,and the transformation is not well,thus I visited w3school and to make sure the accuracy of this text,I decided to write it in English.</p><h2 id="1-Introduction">1 Introduction</h2><h3 id="1-1-What-is-Bootstrap">1.1 What is Bootstrap?</h3><ul><li>Bootstrap is a free front-end framework for faster and easier web development</li><li>Bootstrap includes HTML and CSS based design templates for typography, forms, buttons, tables, navigation, modals, image carousels and many other, as well as optional JavaScript plugins</li><li>Bootstrap also gives you the ability to easily create responsive designs</li></ul><p>What is Responsive Web Design?<br><em>Responsive web design is about creating web sites which automatically adjust themselves to look good on all devices, from small phones to large desktops.</em></p><h3 id="1-2-First-Web">1.2 First Web</h3><h4 id="1-2-1-Add-tthe-HTML5-doctype">1.2.1 Add tthe HTML5 doctype</h4><p>Bootstrap 5 uses HTML elements and CSS properties that require the HTML5 doctype.</p><p>Always include the HTML5 doctype at the beginning of the page, along with the lang attribute and the correct title and character set:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap 5 Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-2-2-Bootstrap-5-is-mobile-first">1.2.2 Bootstrap 5 is mobile-first</h4><p>Bootstrap 5 is designed to be responsive to mobile devices. Mobile-first styles are part of the core framework.</p><p>To ensure proper rendering and touch zooming, add the following <code>&lt;meta&gt;</code> tag inside the <code>head</code> element:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>function:</p><ul><li><code>width=device-width</code>:sets the width of the page to follow the screen-width of the device (which will vary depending on the device).</li><li><code>initial-scale=1</code>: sets the initial zoom level when the page is first loaded by the browser.</li></ul><h2 id="2-Containers">2 Containers</h2><p>There are two main containers:</p><ul><li><code>.container</code> class: provides a responsive fixed with container</li><li><code>.container-fluid</code> class:proveides a full width container,spanning the entire width of the viewport</li></ul><h3 id="2-1-Fixed-container">2.1 Fixed container</h3><p>Use the <code>.container</code> class to create a responsive,fixed-width container.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My First Bootstrap Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is some text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-Fluid-container">2.2 Fluid container</h3><p>Use the <code>.container-fluid</code> class to create a full width container,that will always span the entire width of the screen(width is always 100%)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My First Bootstrap Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is some text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-Container-padding">2.3 Container padding</h3><p>By default, containers have left and right padding, with no top or bottom padding. Therefore, we often use spacing utilities, such as extra padding and margins to make them look even better. For example, <code>.pt-5</code> means “add a large top padding”:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container pt5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-Container-border-and-color">2.4 Container border and color</h3><h3 id="2-5-Responsive-containers">2.5 Responsive containers</h3><p>You can also use the <code>.container-sm|md|lg|xl</code> classes to determine when the container should be responsive.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-sm&quot;</span>&gt;</span>.container-sm<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-md&quot;</span>&gt;</span>.container-md<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-lg&quot;</span>&gt;</span>.container-lg<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-xl&quot;</span>&gt;</span>.container-xl<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-xxl&quot;</span>&gt;</span>.container-xxl<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-Grid-system">3 Grid system</h2><p>The Bootstrap 5 grid system has six classes:</p><ul><li>.col-(extra small devices - screen width &lt; 576px)</li><li>.col-sm-(small devices - screen width equal &gt;= than 576px)</li><li>.col-md-(medium devices - screen width &gt;= 768px)</li><li>.col-lg-(large devices - screen width &gt;= 992px)</li><li>.col-xl-(xlarge devices - screen width &gt;= 1200px)</li><li>.col-xxl-(xxlarge devices - screen width &gt;= 1400px)</li></ul><p>The classes above can be combined to create more dynamic and flexible layouts.</p><p><em>Each class scales up, so if you want to set the same widths for <code>sm</code> and <code>md</code>,you only need to specify <code>sm</code></em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Grid Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Link Bootstrap CSS --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span>//col-sm-4 specifies that on a small screen, this column will take up a quarter of the width of one of the 12 columns. On a large screen, it will remain the same width if no other class name is specified to override the style.<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-primary text-white p-3&quot;</span>&gt;</span>Column 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>//bg-primary:It is usually the most prominent colour in the page theme and is used to highlight important elements. In Bootstrap, the default primary colour is blue (#007bff).<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-secondary text-white p-3&quot;</span>&gt;</span>Column 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>//bg-secondary:Usually used to complement the primary colour and provide an extra element of colour to the page. The default secondary colour is grey (#6c757d).<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-success text-white p-3&quot;</span>&gt;</span>Column 3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>//bg-success:The colour used when indicating a successful or positive action. The default success colour is green (#28a745).<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Link Bootstrap JS (Optional) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-Text-Typography">4 Text/Typography</h2><h3 id="4-1-h1-to-h6">4.1 <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code></h3><ul><li><p>Bootstrap 5 styles HTML headings (<code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code>)  with a bolder font-weight and a responsive font-size.</p></li><li><p>You can also use .h1 to .h6 classes on other elements to make them behave as headings if you want:</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>h1 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h2&quot;</span>&gt;</span>h2 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h3&quot;</span>&gt;</span>h3 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h4&quot;</span>&gt;</span>h4 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h5&quot;</span>&gt;</span>h5 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h6&quot;</span>&gt;</span>h6 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-2-Display-Headings">4.2 Display Headings</h3><p>Display headings are used to stand out more than normal headings (larger font-size and lighter font-weight), and there are six classes to choose from: <code>.display-1</code> to <code>.display-6</code></p><h3 id="4-3-small">4.3 <small></h3><p>In Bootstrap 5 the HTML <code>&lt;small&gt;</code> element (and the <code>.small</code> class) is used to create a smaller, secondary text in any heading:</p><h3 id="4-4-mark">4.4 <mark></h3><p>Bootstrap 5 will style <code>&lt;mark&gt;</code> and <code>.mark</code> with a yellow background color and some padding</p><h3 id="4-5-abbr">4.5 <abbr></h3><p>Bootstrap 5 will style the HTML <code>&lt;abbr&gt;</code> element with a dotted border bottom and a cursor with question mark on hover</p><h3 id="4-6-blockquote">4.6 <blockquote></h3><p>Add the <code>.blockquote</code> class to a <code>&lt;blockquote&gt;</code> when quoting blocks of content from another source. And when naming a source, like “from WWF’s website”, use the .blockquote-footer class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container mt-3&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Blockquotes<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The blockquote element is used to present content from another source:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blockquote&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>For 50 years, WWF has been protecting the future of nature. The world&#x27;s leading conservation organization, WWF works in 100 countries and is supported by 1.2 million members in the United States and close to 5 million globally.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blockquote-footer&quot;</span>&gt;</span>From WWF&#x27;s website<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-6-dl">4.6 <dl></h3><p><code>&lt;dl&gt;</code>:describtion list</p><h3 id="4-7-code">4.7 <code></h3><p>Inline snippets of code should be embedded in the code element</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">p&gt;The following HTML elements: <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>section<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>, and <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> defines a section in a document.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-8-kbd">4.8 <kbd></h3><p>To indicate input that is typically entered via the keyboard, use the kbd element</p><h3 id="4-9-pre">4.9 <pre></h3><p>Text in a pre elementis displayed in a fixed-width font,and it preserves both spaces and line breaks.</p><h3 id="4-10-more">4.10 more</h3><img src="/images/TypographyClass.png" alt="More Typography Classes"><ul><li>initialism<ul><li>Display the text inside an <code>&lt;abbr&gt;</code> element</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>  &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;<br>  &lt;link href=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>  &lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;container mt-3&quot;</span>&gt;<br>  &lt;h2&gt;Typography&lt;/h2&gt;<br>  &lt;p&gt;The &lt;abbr title=<span class="hljs-string">&quot;World Health Organization&quot;</span>&gt;WHO&lt;/abbr&gt; was founded in <span class="hljs-number">1948.</span> (normal abbr)&lt;/p&gt;      <br>  &lt;p&gt;The &lt;abbr title=<span class="hljs-string">&quot;World Health Organization&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;initialism&quot;</span>&gt;WHO&lt;/abbr&gt; was founded in <span class="hljs-number">1948.</span> (slightly smaller abbr)&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><ul><li><p>list-unstyled</p><ul><li>Removes the default list-style and left margin on list items (works on both <code>&lt;ul&gt;</code> and <code>&lt;ol&gt;</code>). This class only applies to immediate children list items (to remove the default list-style from any nested lists, apply this class to any nested lists as well)</li></ul></li><li><p>list-inline</p><ul><li>Places all list items on a single line(used together with <code>.list-inline-item</code> on each <code>&lt;li&gt;</code> elements)</li></ul></li></ul><h2 id="5-Tables">5 Tables</h2><h3 id="5-1-Basic-Table">5.1 Basic Table</h3><p>The <code>.table</code> class adds basic styling to a table:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>  &lt;title&gt;Bootstrap Example&lt;/title&gt;<br>  &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>  &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;<br>  &lt;link href=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>  &lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;container mt-3&quot;</span>&gt;<br>  &lt;h2&gt;Basic Table&lt;/h2&gt;<br>  &lt;p&gt;The .table <span class="hljs-keyword">class</span> adds basic <span class="hljs-built_in">styling</span> (light padding <span class="hljs-keyword">and</span> horizontal dividers) to a table:&lt;/p&gt;            <br>  &lt;table <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;<br>    &lt;thead&gt;<br>      &lt;tr&gt;<br>        &lt;th&gt;Firstname&lt;/th&gt;<br>        &lt;th&gt;Lastname&lt;/th&gt;<br>        &lt;th&gt;Email&lt;/th&gt;<br>      &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;John&lt;/td&gt;<br>        &lt;td&gt;Doe&lt;/td&gt;<br>        &lt;td&gt;john@example.com&lt;/td&gt;<br>      &lt;/tr&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;Mary&lt;/td&gt;<br>        &lt;td&gt;Moe&lt;/td&gt;<br>        &lt;td&gt;mary@example.com&lt;/td&gt;<br>      &lt;/tr&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;July&lt;/td&gt;<br>        &lt;td&gt;Dooley&lt;/td&gt;<br>        &lt;td&gt;july@example.com&lt;/td&gt;<br>      &lt;/tr&gt;<br>    &lt;/tbody&gt;<br>  &lt;/table&gt;<br>&lt;/div&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="Other-classes">Other classes</h3><img src="/images/Bootstrap_table.png"><h2 id="6-Forms">6 Forms</h2><h3 id="6-1-Bootstrap-Form-layouts">6.1 Bootstrap Form layouts</h3><p>Bootstrap provides three types of form layouts:</p><ul><li>Vertival form(this is default)</li><li>Horizontal form</li><li>Inline form</li></ul><p>Standard rules for all three form layouts:</p><ul><li>Wrap labels and form controls in <code>&lt;div class=&quot;form-group&quot;&gt;</code></li><li>Add class <code>.form-control</code> to all textual <code>&lt;input&gt;</code>,<code>&lt;textarea&gt;</code>,and <code>&lt;select&gt;</code> elements</li></ul><h3 id="6-2-vertical-form">6.2 vertical form</h3><p>Here’s an example</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Vertical (basic) form<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/action_page.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span>Email:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span>Password:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember&quot;</span>&gt;</span> Remember me<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![vertical form](\Bootstrap\vertical form.png)</p><h3 id="6-3-inline-form">6.3 inline form</h3><p>In an inline form, all of the elements are inline,left-aligned,and the labels are alongside.</p><p>Additional rule:</p><ul><li>Add class <code>.form-inline</code> to the <code>&lt;form&gt;</code> element</li></ul><p>Here’s an example</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span>, <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Inline form<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Make the viewport larger than 768px wide to see that all of the form elements are inline, left aligned, and the labels are alongside.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-inline&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/action_page.php&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span>Email:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember&quot;</span>&gt;</span>Remember me<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/Bootstrap/inline%20form.png" alt="inline form"></p><h3 id="6-4-Horizontal-Form">6.4 Horizontal Form</h3><p>A horizontal form means that the labels are aligned next to the input field (horizontal) on large and medium screens. On small screens (767px and below), it will transform to a vertical form (labels are placed on top of each input).</p><p>Additional rules for a horizontal form:</p><ul><li>Add class <code>.form-horizontal</code> to the <code>&lt;form&gt;</code> element</li><li>Add class <code>.control-label</code> to all <code>&lt;label&gt;</code> elements</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Horizontal form<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-horizontal&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/action_page.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;control-label col-sm-2&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span>Email:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;control-label col-sm-2&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span>Password:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span>          <br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember&quot;</span>&gt;</span> Remember me<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bootstrap</tag>
      
      <tag>web前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery入门</title>
    <link href="/2024/05/25/jQuery/"/>
    <url>/2024/05/25/jQuery/</url>
    
    <content type="html"><![CDATA[<head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="ie=edge">    <title>Document</title>    <script src="https://cdn.jsdelivr.net/npm/mermaid@10.6.1/dist/mermaid.min.js"></script>    <script>    window.onload=mermaid.initialize({"theme": "forest"});    </script></head><p>本文主要从jQuery简介、核心函数、核心对象三方面介绍jQuery</p><p>文章可能有点长，但要相信干货满满</p><p><s>而不是某Dumpling太啰嗦了</s></p><h2 id="0-前言">0.前言</h2><p>可能对于刚学web前端的同学(比如我)来说，学了很多东西，但是对于他们的内在联系不太清晰。所以在jQuery入门之前我想先梳理一下他们的关系</p><p>话不多说，先上图</p><div class="mermaid">        graph TD;    HTML[HTML<br>网页结构] --> CSS[CSS<br>网页样式];    HTML --> JS[JavaScript<br>动态交互];    JS --> jQuery[jQuery<br>简化JS操作];    JS --> Bootstrap[Bootstrap<br>响应式设计];    CSS --> Bootstrap;    jQuery --> Bootstrap;    classDef someclass fill:#f9f,stroke:#333,stroke-width:2px;    class HTML,CSS,JS,jQuery,Bootstrap someclass;</div><ul><li><p><code>HTML(HyperText Markup Language)</code>:</p><ul><li>是用来构建网站的基础，定义网页的结构和内容。</li><li>你可以把它想象成建筑的骨架</li></ul></li><li><p><code>CSS(Cascading Style Sheets)</code>:</p><ul><li>用于设置网页布局和样式，比如字体(font)、颜色(color)和间距(padding)等。</li><li>CSS像是给网页穿上衣服，让结构更美观</li></ul></li><li><p><code>JavaScript</code>:</p><ul><li>是一种程序语言，用于添加网页的动态功能，如响应用户的点击、数据更新等。</li><li>他让网页有了动起来的能力。</li></ul></li><li><p><code>jQuery</code>：</p><ul><li>是一个<code>JavaScript</code>的库，简化<code>JavaScript</code>的编程。</li><li>比如，他让文档操作、事件处理、动画等更容易实现</li><li><code>jQuery</code>就像一个工具包，帮你更好使用<code>JavaScript</code>。</li></ul></li><li><p><code>BootStrap</code>:</p><ul><li>一个前端框架，包含了<code>HTML</code>、<code>CSS</code>和<code>JavaScript</code>的组件。</li><li>提供了一套预设的样式和功能，可以快速帮你开发响应式和移动优先的网页</li><li><code>BootStrap</code>就像一个建筑工具包，里面有各种模块和工具，让建筑(网页)更快速的搭建起来</li></ul></li></ul><h2 id="1-jQuery简介">1 jQuery简介</h2><h3 id="1-1-jQuery简介">1.1 jQuery简介</h3><p><s>虽然感觉不会有人喜欢看定义但还是感觉要写</s></p><ul><li><p>jQuery 是一个 JavaScript 函数库。</p></li><li><p>jQuery 是一个轻量级的&quot;写的少，做的多&quot;的 JavaScript 库。</p></li><li><p>jQuery 库包含以下功能：</p><ul><li>HTML 元素选取</li><li>HTML 元素操作</li><li>CSS 操作</li><li>HTML 事件函数</li><li>JavaScript 特效和动画</li><li>HTML DOM 遍历和修改</li><li>AJAX</li><li>Utilities<br>提示： 除此之外，jQuery 还提供了大量的插件。</li></ul></li></ul><h3 id="1-2-jQuery上手">1.2 jQuery上手</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/1.9.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 请将jQuery代码书写在这里 ...</span></span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello,World!&#x27;</span>);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="1-3-jQuery的双枪">1.3 jQuery的双枪</h3><p><code>jQuery</code>的双枪分别是：</p><pre><code class="hljs">* jQuery的核心函数： 即：`$()`或`jQuery()`。jQuery定义了这个全局函数供我们使用，他既可以作为一般函数调用，且传递的参数类型不同/格式不同，功能就完全不同，也可以作为对象调用其定义好的方法* jQuery的核心对象： 即执行`jQuery`核心函数所返回的对象，`jQuery`对象内部包含的`dom`元素对象的伪数组(可能只有一个元素)，`jQuery`对象有很多属性和方法，让程序员能够方便的操纵`dom`,调用jQuery对象的任何方法后返回的还是当前jQuery对象</code></pre><p>以上这段话你可能没看明白，但是没关系，先看完后面的内容再回过头来看</p><h2 id="2-jQuery的核心函数">2 jQuery的核心函数</h2><h3 id="2-1-选择器">2.1 选择器</h3><h3 id="2-1-1-基本选择器">2.1.1 基本选择器</h3><p>写在前头：其实选择器的大部分的格式都是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;example&#x27;).css(&#x27;example1&#x27;);<br></code></pre></td></tr></table></figure><p>带着这个公式去读以下内容，你会很容易发现套路</p><h4 id="2-1-1-1-标签选择器">2.1.1.1 标签选择器</h4><p>需求：选择页面中所有的div标签，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;div&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="2-1-1-2-id选择器">2.1.1.2 id选择器</h4><p>需求：选择页面中所有id为btn的按钮，将其改为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;#btn&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="2-1-1-3-class选择器">2.1.1.3 class选择器</h4><p>需求：选择页面中所有class为red的段落，将其背景设置成红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>我会变红<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我不红了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>我又红了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;.red&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="2-1-1-4-通配符选择器">2.1.1.4 通配符选择器</h4><p>需求：将页面中class为content的div下所有元素的背景设置成红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;.content *&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="2-1-1-5-并集选择器">2.1.1.5 并集选择器</h4><p>需求：选择页面中所有段落与按钮，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是段落，我是红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>我是按钮，也是红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我不是红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;p, button&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="2-1-1-6-交集选择器">2.1.1.6 交集选择器</h4><p>需求：选择页面中所有class为红色的段落，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>我是红的<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我不是红的<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>我也不是红的<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;p.red&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h3 id="2-1-2-层级选择器">2.1.2 层级选择器</h3><h4 id="2-1-2-1-子代选择器">2.1.2.1 子代选择器</h4><p>需求：选择ul下所有span子元素，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span1,我是红的<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我不是红的，因为我是li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我也不是<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;ul&gt;span&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="2-1-2-2-后代选择器">2.1.2.2 后代选择器</h4><p>需求：选择ul下所有span元素，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span1,我是红的<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我不是红的，因为我是li <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>但我还是红的<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我也不是<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;ul span&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p><s>DUmpling的唠叨</s><br>子代选择器和后代选择器的区别：<br>- 我觉得这很像西欧封建领主和中国封建领主的差别，西欧领主认为：我的附庸的附庸不是我的附庸(子代选择器)，但在中国，普天之下莫非王土，率土之滨莫非王臣，管你是谁，耶稣来了也不行，皇- 帝说的(后代选择器)。<br>- 子代选择器只能管一个人，所以要带<code>&gt;</code>。<br>- 但是后代选择器却是空格。这是为什么呢？因为这不是空格，而是朕的天下</p><h4 id="2-1-2-3-兄弟选择器">2.1.2.3 兄弟选择器</h4><p>需求：选中id为box的下一个兄弟li，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是li1 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li1的span1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li2 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li2的span2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <span class="hljs-comment">&lt;!--这一行是红色的--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li3 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li3的span3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;#box+li&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p>需求：选中id为box之后所有的li，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是li1 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li1的span1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li2 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li2的span2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li3 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li3的span3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;#box~li&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h3 id="2-1-3-过滤选择器">2.1.3 过滤选择器</h3><h4 id="2-1-3-1-基本筛选器">2.1.3.1 基本筛选器</h4><p>需求：隔行变色，让表格奇数行背景为红色，:even代表选取下标为偶数的行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0px&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;10px&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>//我是红的<br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>//我也是红的<br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;tr:even&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p><s>Dumpling又来唠叨了</s><br>为什么第1，3行是红色的？<br>因为行数下标是从0开始取的，所以你可以理解为是第0行、第2行是红色的</p><ul><li><p>要使表格偶数行背景为红色，把:even改成:odd就行了(行的下标从0开始)</p></li><li><p>要使表格第一行背景为红色，把:even改成:first</p></li><li><p>要使表格最后一行背景为红色，把:even改成:last</p></li><li><p>要使表格第0行到第n行的下标为红色，把:even改成:lt(n)就行了(行的下标从0开始)</p></li><li><p>要使表格从第n行开始全部变成红色，把:even改成:gt(n)就行了(行的下标从0开始)</p></li><li><p>要使表格第n行的背景为红色，把:even改成:eq(n)就行了(行的下标从0开始)</p></li><li><p>要使表格除了第n行，其他行的背景为红色，把:even改成:not(eq(n))就行了(行的下标从0开始)</p></li></ul><p><s>Dumpling又双叒叕来了</s><br>聪明如你，肯定发现了lt是less than的缩写，gt是greater than的缩写，eq是equal的缩写，所以这些还是很好记的</p><h4 id="2-1-3-2-内容筛选器">2.1.3.2 内容筛选器</h4><p>需求：实现让内容为&quot;男&quot;的单元格的背景变为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0px&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;10px&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;td:contains(&quot;男&quot;)&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p>需求：实现让内容为span标签的单元格的背景变为红色</p><p>把:contains(“男”)改成:has(span)就行了</p><p>需求：实现让内容为空的单元格的背景变为红色</p><p>把:contains(“男”)改成:empty就行了</p><p>需求：实现让内容不为空的单元格的背景变为红色</p><p>把:contains(“男”)改成:parent就行了</p><h4 id="2-1-3-3-属性筛选器">2.1.3.3 属性筛选器</h4><p>需求描述：查找herflang属性的标签元素，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">hreflang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>en<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">hreflang</span>=<span class="hljs-string">&quot;en-UK&quot;</span>&gt;</span>en-UK<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">hreflang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span>zh-CN<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;a[hreflang]&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p>需求：查找hreflang属性值是en的所有超链接，设置其背景为红色</p><p>把[hreflang]改成[hreflang=“en”]就行了</p><p>需求：查找hreflang属性值不是en的所有超链接，设置其背景为红色</p><p>把[hreflang]改成[hreflang!=“en”]就行了</p><h2 id="2-2-工具">2.2 工具</h2><h3 id="2-2-1-each方法">2.2.1 $.each方法</h3><p>方法描述：一个通用的迭代函数，它可以用来无缝迭代对象和数组。数组和类似数组的对象通过一个长度属性（如一个函数的参数对象）来迭代数字索引，从0到length - 1，其他对象通过其属性名进行迭代。</p><p>需求：给定一个数组，使用$.each方法进行遍历输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var arr = [10, 90, 20, 80, 30, 70, 40, 60, 50];<br>$.each(arr, function (index, element) &#123;<br>    console.log(index, element);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2-2-2-trim方法">2.2.2 $.trim方法</h3><p>方法描述：去掉字符串起始和结尾的空格。(trim的中文意思是修剪)</p><p>需求：给定一个字符串，去掉该字符串的前后空格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var str = &#x27;    hello    &#x27;;<br>console.log($.trim(str));//hello<br></code></pre></td></tr></table></figure><h3 id="2-2-3-type方法">2.2.3 $.type方法</h3><p>方法描述：确定JavaScript 对象的类型。</p><p>需求：给定一个对象，输出该对象的类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var str = &#x27;    hello    &#x27;;<br>console.log($.type(str));//string<br></code></pre></td></tr></table></figure><h3 id="2-2-4-isArray方法">2.2.4 $.isArray方法</h3><p>方法描述：用来测试指定对象是否为一个数组。</p><p>需求：给定一个对象，输出该对象是不是数组类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var arr = [10, 90, 20, 80, 30, 70, 40, 60, 50];<br>console.log($.isArray(arr));//true<br></code></pre></td></tr></table></figure><h3 id="2-2-5-isFunction方法">2.2.5 $.isFunction方法</h3><p>方法描述：用来测试指定对象是否为一个函数。</p><p>需求：给定一个对象，输出该对象是不是函数类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var fun = function () &#123;<br>    console.log(&quot;hello&quot;);<br>&#125;;<br>console.log($.isFunction(fun));//true<br></code></pre></td></tr></table></figure><h2 id="3-jQuery的核心对象">3 jQuery的核心对象</h2><h3 id="3-1-属性">3.1 属性</h3><h4 id="3-1-1-属性">3.1.1 属性</h4><h4 id="3-1-1-1-attr">3.1.1.1 attr()</h4><p>方法描述：专门操作属性值为非布尔值的属性，该方法读写一体。</p><p>需求：设置p标签的title属性为&quot;我是attr修改后的段落标题&quot;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;我是段落标题&quot;</span>&gt;</span>我是段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;#content&#x27;).attr(&#x27;title&#x27;, &#x27;我是attr修改后的段落标题&#x27;);<br></code></pre></td></tr></table></figure><h4 id="3-1-1-2-prop">3.1.1.2 prop()</h4><p>方法描述：专门操作属性值为布尔值的属性，该方法读写一体。</p><p>需求：设置复选框的状态为选中状态</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>复选框<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;:checkbox&#x27;).prop(&#x27;checked&#x27;, &#x27;true&#x27;);<br></code></pre></td></tr></table></figure><h4 id="3-1-1-3-val">3.1.1.3 val()</h4><p>方法描述：该方法主要用于获取表单元素的值和设置表单元素的值，该方法读写一体。</p><p>需求：设置文本框的值为&quot;123456&quot;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;:text&#x27;).val(&#x27;123456&#x27;)<br></code></pre></td></tr></table></figure><h3 id="3-1-2-样式">3.1.2 样式</h3><h4 id="3-1-2-1-css">3.1.2.1 css()</h4><p>方法描述：获取匹配元素集合中的第一个元素的样式属性的计算值或设置每个匹配元素的一个或多个CSS属性。</p><p>需求描述：设置div的背景颜色为红色，字体颜色为白色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;div&#x27;).css(&#123;<br>    &#x27;background&#x27;: &#x27;red&#x27;,<br>    &#x27;color&#x27;: &#x27;white&#x27;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="3-1-2-2-addClass">3.1.2.2 addClass()</h4><p>方法描述：为每个匹配的元素添加指定的样式类名。</p><p>需求描述：为所有的li添加样式”beauty“</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML">.beauty &#123;<br>    font-weight: bold;<br>    font-size: 18px;<br>    color: coral;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;li&#x27;).addClass(&#x27;beauty&#x27;);<br></code></pre></td></tr></table></figure><h4 id="3-1-2-3-removeClass">3.1.2.3 removeClass()</h4><p>方法描述：移除集合中每个匹配元素上一个，多个或全部样式。</p><p>需求：为所有的li移除样式”beauty“</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML">.beauty &#123;<br>    font-weight: bold;<br>    font-size: 18px;<br>    color: coral;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;beauty&quot;</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;beauty&quot;</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;beauty&quot;</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;beauty&quot;</span>&gt;</span>列表项4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;li&#x27;).removeClass(&#x27;beauty&#x27;);<br></code></pre></td></tr></table></figure><h4 id="3-1-2-4-toggleClass">3.1.2.4 toggleClass()</h4><p>方法描述：为匹配的元素集合中的每个元素上添加或删除一个或多个样式类，取决于这个样式类是否存在。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML">.hide &#123;<br>    width: 100px;<br>    height: 100px;<br>    display: none;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;button&#x27;).click(function () &#123;<br>    $(&#x27;div&#x27;).toggleClass(&#x27;hide&#x27;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="3-1-3-尺寸">3.1.3 尺寸</h3><h4 id="3-1-3-1-width">3.1.3.1 width()</h4><p>方法描述：获取内容元素width的值。</p><h4 id="3-1-3-2-height">3.1.3.2 height()</h4><p>方法描述：获取内容元素height的值。</p><h4 id="3-1-3-3-innerWidth">3.1.3.3 innerWidth()</h4><p>方法描述：获取内容元素width+padding的值。</p><h4 id="3-1-3-4-innerHeight">3.1.3.4 innerHeight()</h4><p>方法描述：获取内容元素height+padding的值。</p><h4 id="3-1-3-5-outerWidth">3.1.3.5 outerWidth()</h4><p>方法描述：outerWidth(false/true)，获取内容元素width+padding+border的值，如果是true再加上margin的值。</p><h4 id="3-1-3-6-outerHeight">3.1.3.6 outerHeight()</h4><p>方法描述：outerHeight(false/true)，获取内容元素height+padding+border的值，如果是true再加上margin的值。</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web前端</tag>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ STL学习</title>
    <link href="/2024/05/23/CPPSTL/"/>
    <url>/2024/05/23/CPPSTL/</url>
    
    <content type="html"><![CDATA[<h2 id="知识框架">知识框架</h2><img src="/images/C++STL.png"><h2 id="1-vector">1.vector</h2><h3 id="1-1-介绍">1.1 介绍</h3><p><code>vector</code>为可变长数组(我比较喜欢叫他动态数组),可以随时添加数值和删除元素</p><h3 id="1-2-初始化">1.2 初始化</h3><p><code>vector</code>分为一维初始化和二维初始化</p><h4 id="一维初始化">一维初始化</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; t1; <span class="hljs-comment">//一维数组</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">t2</span><span class="hljs-params">(n)</span></span>; <span class="hljs-comment">//定义一个长度为n的数组</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">t3</span><span class="hljs-params">(n, <span class="hljs-number">1</span>)</span></span>; <span class="hljs-comment">//定义一个长度为n的数组，t3[0]~t3[n - 1]均初始化为1</span><br>vector&lt;<span class="hljs-type">int</span>&gt; t4&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;; <span class="hljs-comment">//数组中有五个元素，数组长度就为5</span><br>vector&lt;<span class="hljs-type">int</span>&gt; t5 = t4; <span class="hljs-comment">//拷贝初始化</span><br></code></pre></td></tr></table></figure><h4 id="二维初始化">二维初始化</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; t2;<span class="hljs-comment">//二维数组</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v[<span class="hljs-number">5</span>];<span class="hljs-comment">//定义可变长二维数组</span><br><span class="hljs-comment">//注意：行不可变（只有5行）, 而列可变,可以在指定行添加元素</span><br><span class="hljs-comment">//第一维固定长度为5，第二维长度可以改变</span><br><span class="hljs-comment">//注意：[]是二维数组，()是一维数组！ ！ ！</span><br><span class="hljs-comment">//（有个大聪明因为这个debug了半个小时）</span><br></code></pre></td></tr></table></figure><h3 id="1-3-方法函数">1.3 方法函数</h3><p>话不多说，直接上</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; c;<br></code></pre></td></tr></table></figure><table><thead><tr><th>代码</th><th>含义</th><th>时间复杂度</th></tr></thead><tbody><tr><td>c.front()</td><td>返回第一个数据</td><td>O(1)</td></tr><tr><td>c.back()</td><td>返回最后一个数据</td><td>O(1)</td></tr><tr><td>c.pop_back()</td><td>删除最后一个数据</td><td>O(1)</td></tr><tr><td>c.push_back(element)</td><td>在尾部加一个数据</td><td>O(1)</td></tr><tr><td>c.emplace_back(ele)</td><td>类似c.push_back(),但有时更快</td><td>O(1)</td></tr><tr><td>c.size()</td><td>返回数据个数</td><td>O(1)</td></tr><tr><td>c.clear()</td><td>清除元素个数</td><td>O(N)</td></tr><tr><td>c.resize(n, v)</td><td>改变数组大小为n并赋值为v，如果没有则默认赋值0</td><td></td></tr><tr><td>c.insert(it, x)</td><td>向迭代器it插入元素x</td><td>O(N)</td></tr><tr><td>c.erase(first,last)</td><td>删除<code>[first, last)</code>所有元素</td><td>O(N)</td></tr><tr><td>c.begin()</td><td>返回首元素迭代器(可以通俗的理解为地址)</td><td>O(1)</td></tr><tr><td>c.end()</td><td>返回最后一个元素后一个位置的迭代器</td><td>O(1)</td></tr><tr><td>c.empty()</td><td>判断是否为空，空为真</td><td>O(1)</td></tr><tr><td><a href="http://c.at">c.at</a>(idx)</td><td>返回c[idx]的值（但还是建议用[]）</td><td></td></tr><tr><td>c.reserve(sz)</td><td>改变<code>capacity</code>的大小</td><td></td></tr><tr><td>c.assign(n, val)</td><td>讲<code>n</code>个<code>val</code>值拷贝到<code>c</code>数组中</td><td></td></tr><tr><td>c.assign(beg, end)</td><td>讲另一个容器的<code>[x.begin(), x.end()]</code>里的内容拷贝到c</td><td></td></tr></tbody></table><h3 id="1-4-访问">1.4 访问</h3><p>总共三种方法：<code>下标法</code>、<code>迭代器法</code>、<code>auto</code></p><h4 id="1-4-1-下标访问">1.4.1 下标访问</h4><p>和普通数组的区别是没有区别</p><h4 id="1-4-2-迭代器访问">1.4.2 迭代器访问</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; vi&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-comment">//迭代器访问</span><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator it;   <br><span class="hljs-comment">// 相当于声明了一个迭代器类型的变量it</span><br><span class="hljs-comment">// 通俗来说就是声明了一个指针变量</span><br></code></pre></td></tr></table></figure><ul><li>方法一</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = vi.<span class="hljs-built_in">begin</span>(); <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>cout &lt;&lt; *(it + i) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>方法二</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt;::iterator it; <span class="hljs-keyword">for</span>(it = vi.<span class="hljs-built_in">begin</span>(); it != vi.<span class="hljs-built_in">end</span>();it ++) cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>; <br><span class="hljs-comment">//vi.end()指向尾元素地址的下一个地址 </span><br><span class="hljs-comment">// 或者 </span><br><span class="hljs-keyword">auto</span> it = vi.<span class="hljs-built_in">begin</span>();<br><span class="hljs-keyword">while</span>(it != vi.<span class="hljs-built_in">end</span>())<br>&#123;<br>    cout &lt;&lt; *it &lt;&lt; endl;<br>    it++;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="1-4-3-智能指针">1.4.3 智能指针</h4><p>只能遍历完整个数组，如果要遍历指定内容，参考方法一、二</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 1. 输入 </span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>; <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;x: a) <br>&#123;<br>     cin &gt;&gt; x; <span class="hljs-comment">// 可以进行输入，注意加引用 </span><br>&#125; <br><br><span class="hljs-comment">// 2. 输出 </span><br>vector&lt;<span class="hljs-type">int</span>&gt; v; <br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">12</span>); <br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">241</span>); <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> val : v) <br>&#123;<br>     cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>; <span class="hljs-comment">// 12 241 </span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-stack">2 stack</h2><h3 id="2-1-介绍">2.1 介绍</h3><p>栈为数据结构的一种，实现先进后出(FILO)的容器</p><h3 id="2-2-初始化">2.2 初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><br>stack&lt;<span class="hljs-type">int</span>&gt; s1;<br>stack&lt;string&gt; s2;<br>stack&lt;node&gt; s3;<span class="hljs-comment">//node为结构体类型</span><br></code></pre></td></tr></table></figure><h3 id="2-3-方法函数">2.3 方法函数</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>s.push(ele)</td><td>元素<code>ele</code>入栈，增加元素</td></tr><tr><td>s.pop()</td><td>移除栈顶元素</td></tr><tr><td>s.top()</td><td>取得栈顶元素（但不删除）</td></tr><tr><td>s.empty()</td><td>检查栈内是否为空</td></tr><tr><td>s.size()</td><td>返回栈内元素的个数</td></tr></tbody></table><h3 id="2-4-栈遍历">2.4 栈遍历</h3><p>栈只能对栈顶元素进行操作，如果想要操作，只能将栈中元素一个个取出来存在数组中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CPP">stack&lt;<span class="hljs-type">int</span>&gt; st;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) st.<span class="hljs-built_in">push</span>(i);<br><br><span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())<br>&#123;<br>     <span class="hljs-type">int</span> tp = st.<span class="hljs-built_in">top</span>();<br>     st.<span class="hljs-built_in">pop</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-数组模拟栈进行遍历">2.5 数组模拟栈进行遍历</h3><p>优点：比<code>STL</code>的<code>stack</code>速度更快，遍历元素更方便</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> s[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> tt = <span class="hljs-number">-1</span>;<span class="hljs-comment">//tt代表栈顶指针，初始栈内无元素，tt为-1</span><br><br><span class="hljs-comment">//入栈</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">5</span>; i++)<br>&#123;<br>     s[++tt] = i;<br>&#125;<br><br><span class="hljs-comment">//出栈</span><br><span class="hljs-type">int</span> top_element = s[tt--];<br><br><span class="hljs-comment">//入栈示意图</span><br><span class="hljs-comment">//0 1 2 3 4 5</span><br><span class="hljs-comment">//          tt</span><br><span class="hljs-comment">//出栈后示意图</span><br><span class="hljs-comment">//0 1 2 3 4</span><br><span class="hljs-comment">//        tt</span><br></code></pre></td></tr></table></figure><h2 id="3-queue">3 queue</h2><h3 id="3-1-介绍">3.1 介绍</h3><p>队列是一种先进先出的数据结构(FIFO)</p><h3 id="3-2-初始化">3.2 初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span><span class="hljs-comment">//别忘了头文件</span></span><br><br>queue&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="3-3-方法函数">3.3 方法函数</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>q.front()</td><td>返回队首元素O(1)</td></tr><tr><td>q.back()</td><td>返回队尾元素O(1)</td></tr><tr><td>q.push(element)</td><td>尾部添加一个元素<code>element</code> 入队</td></tr><tr><td>q.pop()</td><td>删除第一个元素，出队O(1)</td></tr><tr><td>q.size()</td><td>返回队列中元素个数，返回值类型<code>unsigned int</code></td></tr><tr><td>q.empty()</td><td>判断是否为空</td></tr></tbody></table><h3 id="3-4-数组模拟">3.4 数组模拟</h3><p>使用<code>q[]</code>数组模拟队列</p><p><code>hh</code>表示队首元素的下标，初始为0</p><p><code>tt</code>表示队尾元素的下标，初始为-1，表示刚开始时队列为空</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br>     <span class="hljs-comment">//入队</span><br>     q[++tt] = <span class="hljs-number">1</span>;<br>     q[++tt] = <span class="hljs-number">2</span>;<br>     <span class="hljs-comment">//出队</span><br>     <span class="hljs-keyword">while</span>(hh &lt;= tt)<br>     &#123;<br>          <span class="hljs-type">int</span> t = q[hh++];<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, t);<br>     &#125;<br><br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-map">6 map</h2><h3 id="6-1-介绍">6.1 介绍</h3><p>映射类似于函数的对应关系，每一个<code>x</code>对应一个<code>y</code>，而<code>map</code>是每个键对应一个值</p><h3 id="6-2-初始化">6.2 初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><br>map&lt;string, string&gt; mp1;<br>map&lt;string, <span class="hljs-type">int</span>&gt; mp2;<br>map&lt;<span class="hljs-type">int</span>, node&gt; mp3;<span class="hljs-comment">//node为结构体</span><br></code></pre></td></tr></table></figure><h3 id="6-3-函数方法">6.3 函数方法</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td><code>mp.find(key)</code></td><td>返回键围殴key的映射迭代器</td></tr><tr><td><code>mp.erase(it)</code></td><td>删除迭代器对应的键和值</td></tr><tr><td><code>mp.erase(key)</code></td><td>根据映射的键删除键和值</td></tr><tr><td><code>mp.insert(first,last)</code></td><td>删除左闭右开区间迭代器对应的键和值</td></tr><tr><td><code>mp.insert()</code></td><td>插入元素，插入时要构造键值对</td></tr><tr><td><code>mp.size()</code></td><td>返回映射的对数</td></tr><tr><td><code>mp.clear()</code></td><td>清空map中所有元素</td></tr><tr><td><code>mp.empty()</code></td><td>如果map为空，返回true，否则返回false</td></tr><tr><td><code>mp.mp.begin()</code></td><td>返回指向map第一个元素的迭代器（地址）</td></tr><tr><td><code>mp.end()</code></td><td>返回指向map尾部的迭代器（最后一个元素的下一个地址）</td></tr><tr><td><code>mp.rbegin()</code></td><td>返回指向map最后一个元素的迭代器（地址）</td></tr><tr><td><code>mp.rend()</code></td><td>返回指向map第一个元素前面(上一个）的逆向迭代器（地址）</td></tr><tr><td><code>mp.count(key)</code></td><td>查看元素是否存在，因为map中键是唯一的，所以存在返回1，不存在返回0</td></tr><tr><td><code>mp.lower_bound()</code></td><td>返回一个迭代器，指向键值&gt;= key的第一个元素</td></tr><tr><td><code>mp.upper_bound()</code></td><td>返回一个迭代器，指向键值&gt; key的第一个元素</td></tr></tbody></table><h2 id="7-set">7 set</h2><h3 id="7-1-介绍">7.1 介绍</h3><p><code>set</code>容器中的元素不会重复，当插入集合中已有的元素时不会插入进去，而且<code>set</code>容器里的元素自动从小到大排序</p><p>即：不重复，且有序</p><h3 id="7-2-初始化">7.2 初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><br>set&lt;<span class="hljs-type">int</span>&gt; s;<br></code></pre></td></tr></table></figure><h3 id="7-3-函数方法">7.3 函数方法</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td><code>s.begin()</code></td><td>返回set容器的第一个元素的地址</td></tr><tr><td><code>s.end()</code></td><td>返回set容器的最后一个元素的下一个地址</td></tr><tr><td><code>s.rbegin()</code></td><td>返回逆序迭代器，指向容器元素最后一个位置</td></tr><tr><td><code>s.rend()</code></td><td>返回逆序迭代器，指向容器第一个元素前面的位置</td></tr><tr><td><code>s.clear()</code></td><td>删除set容器中的所有的元素，返回unsigned int类型</td></tr><tr><td><code>s.empty()</code></td><td>判断set容器是否为空</td></tr><tr><td><code>s.insert()</code></td><td>插入一个元素</td></tr><tr><td><code>s.size()</code></td><td>返回当前set容器中的元素个数</td></tr><tr><td><code>erase(iterator)</code></td><td>删除定位器iterator指向的值</td></tr><tr><td><code>erase(first, second)</code></td><td>删除定位器first和second之间的值</td></tr><tr><td><code>erase(key_value)</code></td><td>删除键值为key_value的值</td></tr><tr><td>查找</td><td></td></tr><tr><td><code>s.find(element)</code></td><td>查找set中的某一元素，有则返回该元素对应的迭代器，无则返回结束迭代器</td></tr><tr><td><code>s.count(element)</code></td><td>查找set中的元素出现的个数，由于set中元素唯一，此函数相当于查询element是否出现</td></tr><tr><td><code>s.lower_bound(k)</code></td><td>返回大于等于k的第一个元素的迭代器</td></tr><tr><td><code>s.upper_bound(k)</code></td><td>返回大于k的第一个元素的迭代器</td></tr></tbody></table><h3 id="7-4-访问">7.4 访问</h3><ul><li>迭代器访问</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">for</span>(set&lt;<span class="hljs-type">int</span>&gt;::iterator it = s.<span class="hljs-built_in">begin</span>(); it != s.<span class="hljs-built_in">end</span>(); it++)<br>     cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>智能指针</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i : s)<br>     cout &lt;&lt; i &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="9-string">9 string</h2><h3 id="9-1-介绍">9.1 介绍</h3><p><code>string</code>是一个字符串类，和<code>char</code>型字符串类似</p><p>可以把<code>string</code>理解为一个字符串类型，像int一样定义</p><h3 id="9-2-初始化">9.2 初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br>string str1;<span class="hljs-comment">//空字符串</span><br><br><span class="hljs-function">string <span class="hljs-title">str2</span><span class="hljs-params">(<span class="hljs-string">&quot;123456&quot;</span>)</span></span>;<br><br><span class="hljs-function">string <span class="hljs-title">str3</span><span class="hljs-params">(<span class="hljs-string">&quot;12345&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>)</span></span>;<span class="hljs-comment">//结果为&quot;123&quot;</span><br><span class="hljs-comment">//从0索引开始，长度为3</span><br><br><span class="hljs-function">string <span class="hljs-title">str4</span><span class="hljs-params">(<span class="hljs-string">&quot;12345&quot;</span>, <span class="hljs-number">3</span>)</span></span>;<span class="hljs-comment">//结果为&quot;123&quot;</span><br><br><span class="hljs-function">string <span class="hljs-title">str5</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;2&#x27;</span>)</span></span>;<span class="hljs-comment">//结果为&quot;22222&quot;</span><br><br><span class="hljs-function">string <span class="hljs-title">str6</span><span class="hljs-params">(str2, <span class="hljs-number">2</span>)</span></span>;<span class="hljs-comment">//结果为&quot;345&quot;；</span><br><span class="hljs-comment">//截取第二个索引及其之后的元素</span><br></code></pre></td></tr></table></figure><h3 id="9-3-简单使用及其特性">9.3 简单使用及其特性</h3><h4 id="访问单个字符">访问单个字符</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     string str=<span class="hljs-string">&quot;12345&quot;</span>;<br><br>     cout &lt;&lt; str[<span class="hljs-number">2</span>] &lt;&lt; endl;<br><br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果为3。</p><p>从这个案例中就可以很直观的感受到string可以作为数组使用</p><h4 id="string特性">string特性</h4><ul><li>支持比较运算符<ul><li><code>string</code>字符串支持常见的比较运算符:<code>&gt;, &gt;=, &lt;, &lt;=, ==, !=</code>。</li><li>本质上是按字符顺序依次比较ASCII码</li><li>常用ASCII码：<code>A：65</code>；<code>a：97</code>；<code>1： 49</code></li><li>故而，在比较时，数字&lt;大写字母&lt;小写字母</li></ul></li><li>支持<code>+</code>运算符，代表拼接</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     string str1 = <span class="hljs-string">&quot;123&quot;</span>;<br>     string str2 = <span class="hljs-string">&quot;456&quot;</span>;<br>     string str3 = str1 + str2;<br>     cout &lt;&lt; str3 &lt;&lt; endl;<span class="hljs-comment">//输出结果为123456</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="string读入">string读入</h4><p>读入字符串，遇空格，回车结束</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s;<br>cin &gt;&gt; s;<br></code></pre></td></tr></table></figure><p>读入一行字符串(包括空格)，遇回车结束</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s;<br><span class="hljs-built_in">getline</span>(cin, s);<br></code></pre></td></tr></table></figure><p><em>注意：<code>getline(cin, s)</code>会获取前一个输入的换行符，需要在前面添加读取换行符的语句，如<code>getchar()</code>或<code>cin.get()</code></em></p><p>错误示例(源自某大聪明调试了一小时的bug)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n;<br>string s;<br><br>cin &gt;&gt; n;<br>cin &gt;&gt; s;<br></code></pre></td></tr></table></figure><p>正确示例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n;<br>string s;<br><br>cin &gt;&gt; n;<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-built_in">getline</span>(cin, s);<br></code></pre></td></tr></table></figure><p><em>当时偶然看见一个大佬的解释，恍然大悟：</em><br><em><code>cin</code>输入完后，回车，<code>cin</code>遇到回车键结束，但回车还在输入流中，<code>cin</code>不会清除，导致<code>getline</code>读取回车，结束。所以后面的字符串并没有被正确输入</em></p><h3 id="9-4-函数方法">9.4 函数方法</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">string s <span class="hljs-operator">=</span> <span class="hljs-number">123</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><em>注意：</em><br><em>it为迭代器</em></p><ul><li>插入</li></ul><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>s.push_back('element')</code></td><td style="text-align:left">在末尾插入</td></tr><tr><td style="text-align:left"><code>s.insert(pos,'element')</code></td><td style="text-align:left">在pos位置插入element</td></tr><tr><td style="text-align:left">eg:s.insert(s.begin() + 2, 6)</td><td style="text-align:left">在第二个位置插入6，结果是1263</td></tr><tr><td style="text-align:left"><code>s.append(&quot;str&quot;)</code></td><td style="text-align:left">在s字符串末尾添加str字符串</td></tr></tbody></table><ul><li>删除</li></ul><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>erase(iterator p)</code></td><td style="text-align:left">删除字符串中p所指字符</td></tr><tr><td style="text-align:left"><code>erase(iterator first, iterator last)</code></td><td style="text-align:left">删除字符串中迭代器区间[first,last)上的所有值</td></tr><tr><td style="text-align:left"><code>erase(pos, len)</code></td><td style="text-align:left">删除字符串中索引从pos开始的len个字符</td></tr><tr><td style="text-align:left"><code>clear()</code></td><td style="text-align:left">清空字符串</td></tr></tbody></table><ul><li>字符替换</li></ul><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>s.replace(pos, n, str)</code></td><td style="text-align:left">把当前字符串从索引pos开始的n个字符替换成str</td></tr><tr><td style="text-align:left"><code>s.replace(pos, n, n1, c)</code></td><td style="text-align:left">把当前字符串从pos开始n个字符替换为n1个字符c</td></tr><tr><td style="text-align:left"><code>s.replace(it1, it2, str)</code></td><td style="text-align:left">把当前字符串<code>[it1, it2)</code>区间替换为str</td></tr></tbody></table><ul><li>大小写转换</li></ul><p>单个字符的转换：</p><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>tolower(s[i])</code></td><td style="text-align:left">转换为小写</td></tr><tr><td style="text-align:left"><code>toupper(s[i])</code></td><td style="text-align:left">转换为大写</td></tr></tbody></table><p>多个字符的转换：</p><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>transform(s.begin(), s.end(), s.begin(), ::tolower)</code></td><td style="text-align:left">转换小写。前两个参数指定容器转换起止范围，第三个参数是结果存放容器的开始位置</td></tr><tr><td style="text-align:left"><code>transform(s.begin(), s.end(), s.begin(), ::toupper)</code></td><td style="text-align:left">转换大写</td></tr></tbody></table><ul><li>获取字符串长度</li></ul><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>s.size()</code>和<code>s.length()</code></td><td style="text-align:left">返回string字符串个数。两者一个意思</td></tr><tr><td style="text-align:left"><code>s.max_size()</code></td><td style="text-align:left">返回string对象最多包含的字符数</td></tr><tr><td style="text-align:left"><code>s.capcity()</code></td><td style="text-align:left">重新分配内存之前，string对象能包含的最大字符数</td></tr></tbody></table><ul><li>分割</li></ul><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">s.substr(pos, n)</td><td style="text-align:left">截取从pos索引开始的n个字符</td></tr></tbody></table><ul><li>查找</li></ul><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">s.find(str, pos)</td><td style="text-align:left">默认从索引0开始。从索引pos开始查找子串str,返回找到位置的索引。找不到返回-1</td></tr><tr><td style="text-align:left">s.find(c, pos)</td><td style="text-align:left">从pos索引开始查找字符c</td></tr><tr><td style="text-align:left">s.rfind(str, pos)</td><td style="text-align:left">从当前字符串pos索引开始，反向查找子串s</td></tr><tr><td style="text-align:left">s.rfind(c, pos)</td><td style="text-align:left">从当前字符串pos索引开始，反向查找字符c</td></tr></tbody></table><ul><li>排序</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//按照ASCII码排序</span><br></code></pre></td></tr></table></figure><h2 id="list">list</h2><h3 id="介绍">介绍</h3><ul><li><code>list</code>是一个双向链表</li><li>适合频繁的插入或者删除元素</li><li>不能通过位置直接访问元素(链表通病)</li></ul><p>(<code>list</code>的底层代码很美，感兴趣的可以去看看)</p><h3 id="list使用">list使用</h3><h4 id="list的构造">list的构造</h4>]]></content>
    
    
    <categories>
      
      <category>C++学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AI大语言模型</title>
    <link href="/2024/07/24/aiLargeModel/"/>
    <url>/2024/07/24/aiLargeModel/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是aigc">1. 什么是AIGC</h2><ul><li><strong>AIGC</strong>：AI Generated Content，AI生成内容</li><li><strong>generative ai</strong>：生成式ai</li><li>生成式ai所生成内容就是AIGC</li><li><code>AI</code>、<code>机器学习</code>、<code>监督学习</code>、<code>深度学习</code>、<code>生成式AI</code>、<code>大语言模型</code>、<code>无监督模型</code>、<code>强化学习</code>之间的关系</li></ul><figure><img src="/images/关系图.jpg" alt="关系图" /><figcaption aria-hidden="true">关系图</figcaption></figure><ul><li><p><strong>AI</strong>(ArtificialIntelligence):人工智能，旨在让计算机系统去模拟人类的智能，从而解决问题和完成任务</p></li><li><p><strong>机器学习</strong>(MachineLearning):AI的一个子集，不需要人类去做<u>显式编程</u>，而是通过算法去自行识别和改进，去识别模式、做出预测和抉择</p><ul><li><strong>显式编程</strong>：如果我们通过代码告诉电脑，图片里面有红色说明是玫瑰，有黄色说明是向日葵</li><li><strong>机器学习</strong>：给电脑大量玫瑰和向日葵图片，让电脑自行识别模式，总结规律，从而对没见过的图片进行判断。这就是机器学习</li><li><strong>机器学习</strong>领域下有若干分支，包括<code>监督学习</code>、<code>无监督学习</code>、<code>强化学习</code>。</li></ul></li><li><p><strong>监督学习</strong>：机器学习算法会接受有<u>标签</u>的训练数据。每个训练数据点都既包括输入特征，也包括期望的输出值。</p><ul><li><strong>标签</strong>：期望的输出值</li><li><strong>算法的目标</strong>：学习输入和输出之间的映射关系，从而在给出新的输入特征后能够准确预测出相应的输出值</li><li><strong>举例</strong>：经典的监督学习任务包括分类、回归<ul><li><strong>分类</strong>：把数据划分为不同的类别。比如，拿一堆猫猫狗狗的照片，和照片对应的"猫"“狗"标签进行训练，让模型根据没见过的照片预测是猫还是狗</li><li><strong>回归</strong>：对数值进行预测。比如，拿一些房子特征的数据，比如面积、卧室数、是否带阳台等，和相应的房价作为标签进行训练然后让模型根据没见过房子的特征预测房价</li></ul></li></ul></li><li><p><strong>无监督学习</strong>：学习的内容是没有标签的，算法的任务是自主发现数据里的模式和规律。经典的无监督学习任务包括<u>聚类</u>。比如，拿一堆新闻文章，让模型根据主题或内容的特征，自主把相似文章进行组织</p><ul><li><strong>聚类</strong>：把数据进行分组。</li></ul></li><li><p><strong>强化学习</strong>：让模型在环境里采取行动，获得结果反馈，从反馈里学习，从而能在给定情况下采取最佳行动，来最大化奖励或最小化损失。跟训小狗类似，刚开始时小狗随心所欲做出很多动作，但随着与训犬师的互动，小狗发现某些动作会获得零食，某些动作会获得惩罚。通过观察动作和奖惩之间的联系，小狗的行为会逐渐接近训犬师的期望。</p></li><li><p><strong>深度学习</strong>：不属于<code>监督学习</code>、<code>无监督学习</code>或<code>强化学习</code>，他是机器学习的一个方法，核心在于使用人工神经网络，模仿人脑处理信息的方式，通过层次化的方法，提取和表示数据的特征。神经网络由许多基本的计算和存储单元组成，这些单元被称为神经元，这些神经元通过层层连接来处理数据，并且深度学习往往有很多层，因此称为”深度“。比如要识别一张小猫的照片，数据首先传入到输入层(就像人类的眼睛看到图片)，之后数据通过多个隐藏层，每一层都会对数据进行一些复杂的数学运算，来帮助计算机理解图片中的特征，例如小猫的耳朵、眼睛等等。最后，计算机会给出一个答案，表示这是否是一张小猫的图片</p><ul><li><strong>神经网络</strong>可以用于<code>监督学习</code>、<code>无监督学习</code>、<code>强化学习</code>，所以深度学习不属于他们的子集。</li><li><strong>生成式AI</strong>是深度学习的一个应用，它利用神经网络来识别现有内容的模式和结构，学习生成新的内容。内容形式可以是文本、图片、音频等等</li><li><strong>大语言模型</strong>(Large Language Model，LLM)也是深度学习的一种应用，专门用于进行自然语言处理任务。包括模型输入、训练数据、模型输出</li><li>不是所有的生成式AI都是大语言模型，例如<u>扩散模型</u><ul><li><strong>扩散模型</strong>：扩散模型首先定义了一个由数据分布逐步转化为高斯噪声分布的过程（正向扩散），这一过程可以视为一系列逐渐添加噪声的步骤。随后，模型学习如何执行这一过程的逆操作，即从纯粹的噪声开始，通过一系列逆步骤逐步“去噪”，最终生成接近原始数据分布的样本（反向扩散）。</li></ul></li><li>而是否所有的大语言模型都是生成式AI，这也存在些许争议。因为有些大语言模型因为其架构特点，不适合文本生成。</li></ul><h2 id="什么是大语言模型">2. 什么是大语言模型</h2><p><strong>大语言模型</strong>(Large Language Model,LLM)是用于做自然语言相关任务的深度学习模型，给模型一些文本输入，他能进行相应的文本输出大语言模型首先需要通过大量文本进行无监督学习。借助海量的训练文本数据，模型能更多了解单词与上下文之间的关系，从而能更好的了解文本的含义，并生成更准确的预测</p><p>大语言模型的大，不止是指训练数据量大，而是<strong>参数</strong>数量巨大。</p><p><strong>参数</strong>：模型内部的变量，可以理解为是模型在训练过程中学到的知识。参数决定了模型如何对输入数据作出反应，从而决定模型的行为。(GPT(GenerativePre-trainedTransformer，Transformer是其中的关键)-1参数有1.17亿个，GPT-2参数有15亿个，而GPT-3的参数又增长到1750亿个)。</p><p>在Transformer被提出之前，语言模型的主要架构是<strong>循环神经网络</strong>(RecurrentNeuralNetwork)。RNN逐字处理，每一步取决于先前的隐藏状态和当前的输入，因此无法并行运算，训练效率低。而且RNN不适合长文本训练。词之间距离越远，前面对后面的影响越弱，所以它难以得到长距离的语义关系</p><p><strong>Transformer</strong>有能力学习输入序列里所有词的相关性和上下文，不会受到短时记忆的影响，因为Transformer有<u>注意力机制</u>。简单来说，Transformer在处理每个词的时候，不仅会注意这个词本身，以及它附件的词，还会去注意输入序列里所有其他的词，然后给予每个词不一样的注意力权重。权重是模型在训练过程中通过大量文本习得的。因此Transformer有能力知道当前这个词和其他词之间的相关性有多强，然后去专注于输入里真正重要的部分，即使两个词的距离很远，Transformer依然能捕获到它们之间的依赖关系。</p><p><strong>Transformer</strong>在把每个词输入给神经网络前，除了会对词进行嵌入，转换成向量，也就是把词各用一串数字表示，还会把每个词在句子中的位置，也各用一串数字表示，添加到输入序列的表示中，然后把这个结果给神经网络，这样模型既能理解每个词的实际意义，又能捕获词在句子中的位置，从而理解不同词之间的顺序关系。借助位置编码，词可以不按顺序输入给Transformer，模型可以同时处理输入序列里的所有位置，而不需要像RNN那样依次处理。在计算时，每个输出都可以独立地计算，不需要等待其他位置的计算结果，这大大提升了训练速度。</p><h2 id="transformer">3. Transformer</h2><p><a href="/images/Transformer.png">Transformer</a></p><p><strong>Transformer</strong>由两个核心部分组成：<strong>编码器</strong>(Enconder)和<strong>解码器</strong>(Decoder)</p><p><strong>工作原理</strong>：</p><ul><li><p><strong>编码器部分</strong>：</p></li><li><ol type="1"><li>假如我们想要将一个英文橘子转化为法语，比如输入:<code>She is in a restaurant</code>,输入的文本首先会被<code>token化</code>，也就是先把输入拆分成各个token：<code>she</code>is<code>in</code> a<code>restaurant</code>。取决于不同的token化方法，短单词可能每个词是一个token，长单词可能被拆成多个token。每个token会被一个整数数字表示，这个数字被叫做<code>token ID</code>。这样做是因为计算机内部无法储存文字，任何字符和字符最终都得用数字来表示。有了数字表示的输入文本后，再把它传入嵌入层。</li><li>通过编码器获得词向量之后，下一步是对向量进行位置编码，然后把得到的结果传给编码器。模型既可以理解每个词的意义，又可以捕捉词在句子中的位置，从而理解不同词之间的顺序关系</li><li>接着进入编码器的核心部分，把输入表示成一种更抽象的表示形式，这个表示形式也是向量，即一串数字。里面既保留了输入文本的词汇信息和顺序关系，也捕捉了语法语义上的关键特征。捕捉关键特征的核心是编码器的<u>自注意力机制</u>。模型在处理每个词的时候，不仅会关注这个词本身和它附件的词，还会关注输入序列中的其他所有词。同时Transformer使用多头注意力机制，也就是编码器不只有一个自注意力模块，而是有多个，每个头有不同的自注意力权重，用来关注文本里不同特征或方面。比如有的关注动词，有的关注修饰词，有的关注情感，有的关注命名实体等等，而且可以做并行运算，也就是计算进展上互不影响。</li><li>多头自注意力后面，还有一个前馈神经网络。他会对自注意力模块的输出进行进一步的处理，增强模型的表达能力</li><li>编码器在Transformer里不止有一个，实际上是有多个堆叠在一起。每个编码器内部结构一样，但不共享权重，这让模型能更深入的理解数据处理更复杂的文本语言内容</li></ol><ul><li><p>token可以理解为是文本的一个基本单位。短的英文单词，可能一个词是一个token，而长的词可能被分为多个token。而中文的话，所占的token数量会相对更多，有些字要用一个甚至更多token表示</p></li><li><p>嵌入层的作用：把每个token都用向量表示。向量，即一串数字，他能表达的含义远远大于一个数字，能包含更多语法语义信息。词向量不仅可以帮模型理解词的语义，也可以捕捉词与词之间的复杂关系(提出Transformer的文章里，向量长度是512，GPT-3是12288)</p></li><li><p>位置编码：把表示各个词在文本里顺序的向量和上一步得到的词向量相加</p></li><li><p>自注意力机制，通过计算每对词之间的相关性来决定注意力权重。两个词之间的相关性越强，它们之间的注意力权重就会越高。自注意力机制涉及很多计算步骤，更多细节请参考论文原文<ahref="https://arxiv.org/pdf/1706.03762">Attention Is All YouNeed</a></p></li></ul></li><li><p><strong>解码器部分</strong>：</p><ul><li>他是大语言模型生成一个个词的关键。</li></ul><ol type="1"><li>通过前面的编码器。我们有了输入序列里各个token的抽象表示，可以把它传给解码器。解码器还会先接收一个特殊值，这个值表示输出序列的开头。这样做的原因是，解码器不仅会把来自编码器的输入序列的抽象表示作为输入，还会把之前已经生成的文本也作为输入，来保持输出的连贯性和上下文相关性。刚开始生成的这轮，还没有任何已生成的文本，所以把表示开头的特殊值先作为输入，具体的生成过程仍然是要经过多个步骤</li><li>首先跟编码器一样，文本要经过我们已经了解过的嵌入层和位置编码，然后被输入进多头自注意力层。但他和编码器里的自注意力层有点不一样，当编码器在处理各个词的时候，它会关注输入序列里所有其他词，但解码器中，自注意力只会关注这个词和它前面的其他词，后面的词要被遮住，不去关注。这样做是为了确认解码器在生成文本时遵循正确的时间顺序，不能给他偷看到后面。在预测下一个词时，只使用前面的词作为上下文。这种类型的多头自注意力，被叫做带掩码的多头自注意力。带掩码的多头自注意力，是针对已生成的输出序列的</li><li>而后面解码器还有个多头自注意力层，这里就是前面编码器所输出的，输入序列的抽象表示所派上用场的地方。注意力会捕捉编码器的输出和解码器即将生成的输出之间的对应关系，从而将原始输入序列的信息融合到输出序列的生成过程中。</li><li>解码器里的前馈神经网络和编码器里的类似，也是通过额外的计算来增强模型的表达能力。</li><li>和编码器一样，解码器同样是多个堆叠到一起的，这可以增强模型的性能，有助于处理复杂的输入输出关系</li><li>解码器的最后阶段，包含一个线性层和一个Softmax层，它们俩加一块的作用是，把解码器输出的表示转化为词汇表的概率分布</li></ol><ul><li>词汇表的概率分布，代表下一个被生成token的概率，有些token的概率比其他值高，在大多数情况下模型会选择概率最高的token作为下一个输出</li><li>解码器本质上在猜下一个最可能的输出，至于输出是否符合客观事实，模型无从得知，所以我们也能看到模型一本正经的胡说八道，这种现象叫做<strong>幻觉</strong></li><li>解码器的一整个流程会重复多次，新的token会持续生成，直到生成的是一个用来表示输出序列结束的特殊token</li></ul></li><li><p><strong>小结</strong>：</p><ul><li>编码器用来理解和表示输入序列，解码器用来生成输出序列</li><li>实际上，在原始架构的基础上，后续出现了一些变种，主要有三个类别：<strong>仅编码器</strong>，<strong>仅解码器</strong>，以及<strong>编码器-解码器</strong></li><li><strong>仅编码器模型</strong>，也叫自编码器模型，只保留了原始架构里的编码器，如BERT。此类模型适用于理解语言的任务，比如掩码语言建模，也就是让模型猜文本里被遮住的词是什么；情感分析，让模型判断文本情感是积极还是消极，等等</li><li><strong>仅解码器模型</strong>，也叫自回归型模型，只保留了原始架构里的解码器，GPT系列都是这种模型的例子，这类模型非常擅长通过预测下一个词来实现文本生成，我们已经在ChatGPT上见识过了</li><li><strong>编码器-解码器模型</strong>，也叫序列到序列模型，同时保留了原始架构里的编码器和解码器，例如T5，BART。此类模型适用于把一个系列转换成另一个序列的任务，比如翻译、总结等等</li></ul></li></ul><h2 id="炼成chatgpt">4. 炼成ChatGPT</h2><p>炼成ChatGPT拢共分三步：</p><ol type="1"><li><strong>无监督学习</strong>：通过大量文本进行无监督学习预训练，得到一个能进行文本生成的基座模型<ol type="1"><li>首先需要海量文本作为原料，让模型从中学习。比如GPT-3这个基座模型的训练数据，有多个互联网文本语料库，覆盖书籍、新闻文章、科学论文、维基百科等等，训练数据的整体规模是3000亿token</li><li>有了大量可用于训练的文本后，要采用无监督学习的方式训练模型</li><li>预训练不是一个容易的过程，是这四个步骤里最耗时、费钱的。</li><li>预训练得到一个基座模型。基座模型不等同于ChatGPT背后的对话模型，因为此时模型有预测下一个token的能力，会根据上文补充文本，但并不擅长对话。比如你问他一个问题，他可能模仿你的问题生成更多的问题。为了解决这个问题，我们需要进行第二步，对基座模型进行微调</li></ol></li><li><strong>监督微调</strong>：通过一些人类撰写的高质量对话数据，对基座模型进行监督微调，得到一个微调后的基座模型。此时的模型除了具备续写文本之外。也会获得更好的对话能力<ol type="1"><li><strong>微调</strong>就是在已有模型上做进一步的训练，会改变模型的内部参数，让模型更加适应特定任务。换句话说，为了训练更适合对话的ai助手，需要给基座模型看更多的对话数据</li><li>微调的成本相比于预训练的成本低很多，因为需要的训练数据的规模更小，训练时长更短。在这一阶段里，模型不需要从海量文本中学习，而是从一些人类写的专业且高质量的回答里学习。这相当于给了模型问题，也给了模型我们中意的回答，属于监督学习，所以这一过程被叫做监督微调(SupercisedFine-Tuning, SFT)</li><li>完成后会得到一个SFT模型，他相比较步骤一得到的模型，更加擅长对问题做出回答。但为了对模型的实力继续提升，还能进行第三步，让SFT模型进行强化学习</li></ol></li><li><strong>训练奖励模型+强化学习训练</strong>：用问题和多个对应回答的数据，让人类标注员对回答进行质量排序，然后基于这些数据，训练出一个能对回答进行评分预测的奖励模型。接下来，让第二步得到的模型对问题生成回答，用奖励模型给回答进行评分，利用评分进行反馈，进行强化学习训练<ol type="1"><li>对SFT模型进行强化学习。我们可以让ChatGPT对问题做出回答，然后让人类评估员去给回答打分</li><li>打分主要基于3H原则：Helpful(有用性)， Honest(真实性)，Harmless(无害性)。如果打分高的话模型知道要再接再厉，打分低的话模型就学习到要予以改进。但是，让人类给模型一个个打分，成本极高，效率极低。所以要训练出一个模型，让模型给模型打分。所以在这一个步骤里，需要训练一个奖励模型</li><li>奖励模型，是从回答以及回答对应的评分里学习的。得到评分数据的方式是，让微调后的GPT模型，也就是第二步里得到的SFT模型，对每个问题生成多个回答，然后让人类标注员对回答质量进行比较排序。虽然还是免不了人类标注员的劳动，但一旦有了足够的排序数据，就可以把数据用在训练奖励模型上，让奖励模型学习预测回答的评分</li><li>奖励模型训练出来后，就可以用在强化学习上了。强化学习里，ChatGPT模型的最初参数来自之前得到的SFT模型但会随着训练而更新。奖励模型的参数则不会被更新，它的任务就是对模型生成的内容打分</li><li>经过一轮又一轮的迭代之后，模型会不断优化策略，回答的质量会进一步提升，强大的ChatGPT就炼成了</li></ol></li></ol><h2 id="调教chatgpt">5. 调教ChatGPT</h2><p><strong>提示工程</strong>(PromptEngineering)：研究如何提高和AI的沟通质量及效率，核心关注提示的开发和优化</p><ul><li>提示就是我们给AI聊天助手输入的问题或指令，AI会根据提示内容给予回应</li></ul><p>ChatGPT等聊天助手存在的局限性：他们背后的大语言模型是用海量文本训练出来的，因此擅长模仿人类语言表达，也从那些内容里学到了不少知识，他们的回应都是根据提示以及前面已生成的内容，通过持续预测下一个token的概率来实现的。但同时，对于他们不了解的领域，他们并不知道自己缺乏那方面的知识，加上生成过程中并没有反思能力，所以会经常看到胡说八道的同时还充满着自信。</p><p>如何调教AI给出想要的回答？</p><ol type="1"><li><strong>小样本提示</strong>：我们很多时候都是直接丢问题或指令给ai，这属于零样本提示，就是没有给AI示范，不一定和我们想要的效果相符合。但如果我们在ai回答前，给他几个对话作为示例，用样本对他进行引导，AI模型就会利用上下文学习能力，一方面作为记忆那些内容作为知识，另一方面，像示范那样模仿着进行回应。有了小样本提示后，再给出AI类似的问题，他就能给出和提示示范相似的回答了</li><li><strong>思维链</strong>：AI不擅长做数学题，因为它不会因为某个词需要涉及更多的思考，而花费更多时间生成那个token，即使前面有正确的示范答案也没什么帮助。这种时候可以借助思维链。思维链的使用方法是，我们给AI的小样本提示里，不仅包含正确的结果，也展示中间的推理步骤，AI在生成回答时，也会模仿着去生成一些中间步骤，把过程进行分解。</li><li>在思维链的相关论文里，作者还提到，即使我们不用小样本提示，只是在问题后面加一句：Let'sthink step by step.让我们来分步骤思考，也能提升AI得到正确答案的概率</li></ol><h2 id="武装chatgpt">6. 武装ChatGPT</h2><p>ChatGPT的短板：编造事实、计算不准确、数据过时等等。为了应对这些问题，可以借组一些外部工具或数据，把AI武装起来。实现这一思路的框架包括<code>RAG</code>、<code>PAL</code>、<code>ReAct</code></p><ul><li><strong>RAG</strong>(Retrieval Augmented Generation, 检索增强生成)：<ul><li>对于一些小众领域，我们无法指望ChatGPT帮我们回答相关问题。一个应对方法是，我们可以提供外部文档，让模型访问外部知识库，获得实时且正确的数据，生成更可靠和准确的回答，这种架构就是检索增强生成。</li><li>具体来说，外部知识文档要先被切分成一个个段落，因为大语言模型一次性能接收的文本长度有限，然后每个段落会被转成一系列向量。向量可以被看作是一串固定长度的数字，然后储存进向量数据库里。当我们提出问题的时候，这个提示也会被转换为向量，然后查找向量数据库里，和用户的查询向量最为接近的段落向量。找到以后，段落信息回合原本的用户查询问题组合到一起，一块传给AI。这样，AI就能把外部文档的段落作为上下文，基于里面的信息给出更严谨的回答。因此，你可以对外部文档里任何内容进行提问，即使AI模型没有受到过那些内容的训练</li><li>RAG有利于搭建企业知识库和个人知识库，CHatGPT的一些插件就是基于RAG架构的，官方也推出了上传PDF之后，对PDF进行提问的功能。如果你会使用ChatGPT的API，还可以用代码实现自己的索引增强生成</li></ul></li><li><strong>PAL</strong>(Program-Aided Language Models,程序辅助语言模型)：<ul><li>大语言模型还有一个问题，我们没法把它当作计算器，当我们问他一个数学计算后，他没有真正帮忙做计算，只是在猜下一个最可能的token来生成回答。但如果我们不让他做计算，而是把计算后的结果告诉他呢？PAL可以帮助我们解决此类问题。</li><li>PAL的核心在于，我们不让AI直接生成计算结果，而是借助其他善于做计算的工具，比如Python解释器。那我们对AI的需求，就变成了生成得到计算结果所需的代码。具体来说，首先，为了让AI遵循我们的需求，可以借助思维链。我们现在小样本提示里，通过样本示例，给模型示范如何分步骤思考，写出解决问题所需的变量赋值、数学运算等代码，让模型照猫画虎。在用户提问后，把用户的问题和我们已有的提示模板进行拼接，一并给到AI，让AI生成代码。接下来，把AI返回的回答给到Python解释器，让Python解释器执行并返回计算的结果，这个回答再给回到AI，让AI带着计算答案对用户的回答进行妥善回复</li><li>现在我们用了大语言模型接收问题的耳朵、思考的脑子、说话的嘴，以及代码解释器做运算的手</li></ul></li><li><strong>ReAct</strong>(Reason Action, 推理行动结合)：<ul><li>ChatGPT所了解的知识，天然受到训练数据日期的影响。比如说，模型是去年训练完成的，训练数据里必然不包含今年的新闻，模型也无从得知训练完成后发生的事情，这被称为<strong>知识截断</strong>。当我们问模型最近发生的事实时，模型要么回复已过时的信息，要么会胡编乱造一通。但重新训练模型的成本是相当高的，也无法彻底解决数据过时的问题</li><li>ReAct的核心在于，让模型进行动态推理，并采取行动与外界环境互动。它同样能与思维链结合。我们会用小样本示例，展示给模型一个推理与行动结合的框架，也就是针对问题，把步骤进行拆分。每个步骤要经过推理、行动、观察，推理是针对问题或上一步观察的思考，行动是基于推理，与外部环境的一些交互，比如用搜索引擎对关键词进行一些搜索，观察是对行动得到的结果进行查看</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>ai</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ai</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杂记</title>
    <link href="/2024/07/20/notes/"/>
    <url>/2024/07/20/notes/</url>
    
    <content type="html"><![CDATA[<h2 id="手机电脑知识">手机/电脑知识</h2><h3 id="电脑硬件基础知识">电脑硬件基础知识</h3><h4 id="cpu">1. CPU</h4><p>CPU就是笔记本的大脑，负责处理计算机系统的指令，决定电脑的反映速度</p><h5 id="主要要数">主要要数</h5><p>英特尔酷睿版和AMD锐龙版</p><h5 id="多核胜过单核">多核胜过单核</h5><h5 id="主频">主频</h5><p>运算速度，主频越高性能越强</p><h5 id="核心">核心</h5><p>最大工作频率，主频相同时睿频越大越好</p><h5 id="intel处理器">intel处理器</h5><p>Intel的CPU通常以品牌名（如Core, Pentium,Celeron）开始，随后是一系列数字和字母，表示不同的系列和性能级别。</p><ol type="1"><li>品牌和系列：<br></li></ol><ul><li><code>Core：</code>主流至高端市场。例如，Core i3, Core i5, Core i7,Core i9。</li><li><code>Pentium</code> 和<code>Celeron</code>：入门级市场，适用于基本计算。</li></ul><ol start="2" type="1"><li>代号：<br></li></ol><ul><li>数字的第一位表示代（generation）。例如，i7-9700K中的“9”表示第9代。</li></ul><ol start="3" type="1"><li>SKU数字：</li></ol><ul><li>接下来的数字表示性能级别和SKU。数字越大，性能通常越强。</li></ul><ol start="4" type="1"><li>后缀：</li></ol><ul><li>K:可超频</li><li>F；没有集成显卡</li><li>U：低功耗，通常用于笔记本</li><li>H：高性能，常见于游戏本</li></ul><ol start="5" type="1"><li>以 Intel Core i7-12700H 为例：<ol type="1"><li>i7：这部分表示处理器的系列。Intel的核心系列从i3、i5、i7到i9，数字越大，性能通常越强，功能也越多。</li><li>12：这两位数字表示处理器的代数，也就是说12700H属于Intel的第12代处理器。</li><li>700：这通常是用来进一步区分同一代内不同性能级别的型号。数字越大，通常性能越强。</li><li>H：这个字母代表处理器的用途或特性。对于Intel来说，H常见于笔记本处理器中，代表高性能版，通常意味着更高的功率和性能。</li></ol></li></ol><h5 id="amd处理器">AMD处理器</h5><ol type="1"><li>品牌和系列<ul><li>Ryzen：与Intel的Core系列相对应。包括Ryzen 3, Ryzen 5, Ryzen 7, Ryzen9等。</li><li>Threadripper：面向高端桌面市场，适合专业内容创造者和极端多任务处理。</li></ul></li><li>代号和性能级别：<ul><li>与Intel类似，数字的第一位通常表示代。例如，Ryzen3700X中的“3”表示是第3代Ryzen。</li></ul></li><li>SKU数字：<ul><li>数字越大，指示的性能和核心数通常越高。</li></ul></li><li>后缀：<br><ul><li>X：表示性能加强版。</li><li>G：含有集成显卡。</li><li>H：高性能，用于笔记本。</li><li>U：低功耗，同样用于笔记本。</li></ul></li><li>以 AMD Ryzen 7 5800X 为例：<br></li></ol><ul><li>Ryzen 7：这部分表示处理器的系列。AMD的系列包括Ryzen 3、Ryzen5、Ryzen 7和Ryzen 9。和Intel一样，系列数字越大，表示性能越高。</li><li>5800：对于AMD，前一位数字（5）通常表示处理器的代数，这里指的是第5代Ryzen处理器。后三位（800）则用来区分性能级别，数字越大，性能越高。</li><li>X：AMD处理器中的这个字母表示该处理器的特性。例如，X表示高性能版，而U则表示能效优先。</li></ul><h4 id="显卡gpu">2. 显卡/GPU</h4><p>显卡又称GPU，负责渲染画面。分为独立显卡和集成显卡(核显)<br></p><p><strong>核显：</strong>是集成在CPU内部的显卡，功耗低，性能也低</p><p><strong>独显：</strong>独立显卡是高性能显卡，独立存在，功耗也高</p><p><strong>NVIDIA命名规则</strong></p><p>NVIDIA的显卡通常以“GeForce”为品牌名，后面跟着系列名称如“RTX”或“GTX”，然后是一串数字和可能的后缀。</p><p><em>品牌名称：</em></p><ul><li>GeForce GTX：主要针对主流市场的游戏显卡。</li><li>GeForce RTX：高端市场，支持光线追踪和AI增强图形。</li></ul><p><em>系列和代数：</em></p><p>数字的前两位通常表示系列，如RTX 3080中的“30”代表3000系列。系列的更新通常意味着显卡在性能、能效和技术上的大幅提升。</p><p><em>性能级别：</em></p><p>数字的后两位表示性能级别。数字越高，性能越强。例如，RTX 3090比RTX3080性能更强。</p><p><em>后缀：</em></p><ul><li>Ti 或 Super：这些后缀表示比标准型号更高的性能。</li><li>M：用于笔记本电脑的移动版显卡。</li></ul><p><strong>AMD命名规则</strong></p><p>AMD的显卡品牌为“Radeon”，同样后面跟随系列和数字，指示性能和代数。</p><p><em>品牌名称：</em></p><ul><li>Radeon RX：普及到高端的游戏显卡。</li><li>系列和代数：类似于NVIDIA，AMD显卡的数字前两位通常代表其系列。如RadeonRX 6700 XT，其中的“67”表示6000系列。</li></ul><p><em>性能级别：</em></p><p>数字的后两位或三位代表显卡在系列中的性能位置，数字越大，性能通常越高。</p><p><em>后缀：</em></p><p>XT：性能较高的版本。 M：指移动版，用于笔记本电脑。</p><h4 id="屏幕">3. 屏幕</h4><p><strong>尺寸</strong></p><p>指电脑屏幕的对角线长度，通常有小屏的13寸、14寸，大屏有15寸、16寸，17。14英寸以下便携性高，适合外带办公；15英寸以上，适合观影娱乐。</p><p><strong>分辨率：</strong>显示器最多能显示的像素数，反映屏幕色彩细腻程度的指标。常见有1920<em>1080、2240</em>1400（2k屏）。还有2.5k，3k屏。</p><p><strong>色域：</strong>色域可以认为是红（R）绿（G）蓝（B）的组合。色域值越高，色彩就更丰富。72%NTSC、100%SRGB都属于高色域，对于需要修图、视频剪辑和渲染的，高色域是必选项。</p><p><strong>刷新率：</strong>表示每秒刷新的画面帧数，刷新率越大越好，画面过渡越流畅，一般需要好的显卡支持。多数电脑是60Hz，能够满足日常的影音需求。90HZ、120HZ、144HZ属于高刷。</p><h4 id="内存">4. 内存</h4><p><strong>内存：</strong>指电脑RAM大小，系统和软件的运行都需要在RAM上，数据传输与交换都需要经过它。标配一般是16G，有的可以增加到32G，甚至64G。</p><p><strong>单双道：</strong>内存分单通道和双通道，双通道比单通道运行要更快。</p><p><strong>注：</strong>内存只负责传输数据，具有临时性，一旦电脑关机或者断点，会自动清空数据。</p><h4 id="硬盘">5. 硬盘</h4><p><strong>硬盘：</strong>硬盘分为机械硬盘和固态硬盘，市面上的笔记本电脑基本都是固态硬盘，特点是读取速度快（文件拷贝读写快），经久耐用。</p><p><strong>容量：</strong>电脑硬盘容量标配512G，有的可以达到1T</p><h4 id="接口">6. 接口</h4><p><strong>类型：</strong>通常有USB、Type-C、3.5毫米、HDMI、SD读卡器和网线接口。</p><p><strong>特点：</strong></p><ul><li>USB3.0要比USB2.0有更快的传输速度;</li><li>Type-C支持正反插，通常用来做扩展端口</li><li>HDMI主要用来连接投影仪或电视设备，如果办公经常要开会，该接口是必须的。</li></ul><h4 id="重量">7. 重量：</h4><p><strong>排序：</strong>轻薄本＜全能本＜游戏本</p><p>轻薄本通常在1<sub>1.5KG以内，游戏本一般在2</sub>3KG</p><h4 id="散热">8. 散热</h4><p><strong>散热：</strong>笔记本发热源主要来源于：CPU&amp;显卡&amp;主板电感，如果热量没法散开，那么性能也无法很好的表现出来。</p><p><strong>需求：</strong>散热方面通常需要需要考虑：内部要有大型的散热铜管导热、较大的风扇、整体散热的噪音尽可能的小;</p><h4 id="续航">9. 续航</h4><p><strong>续航：</strong> 轻薄本＞全能本＞游戏本</p><p><strong>注：</strong>正常情况下笔记本应该是充着电源使用，这样并不会对电池有什么影响，而且充着电源时性能才可以得到释放。</p><h3 id="桌面白图标">桌面白图标</h3><p>任务管理器 -&gt; windows资源器 -&gt; 右键重新启动</p><h3 id="装机法">装机法</h3><ol start="0" type="1"><li>请熟读背诵并严格遵守本文条例。</li><li>如果一个设备现在运行得很完美，就不要手贱去调整它。</li><li>不要空腹装机，务必保证开工前有足够的热量摄入。</li><li>不要在夜晚睡前折腾设备，除非你今晚并不打算睡觉。</li><li>新设备装箱前务必在外面做最小系统亮机测试。</li><li>将主板挡板摆在主板旁边最显眼的位置，并在最小系统亮机后第一时间安装。</li><li>务必撕去散热器的保护膜。</li><li>均匀适量涂抹品牌硅脂，禁止使用牙膏等物品替代。</li><li>硅脂应且仅应涂抹在CPU表面，禁止涂抹针脚与底座。</li><li>防呆并不防傻，禁止大力出奇迹。</li><li>内存应首先选择远离CPU的插槽安装。</li><li>内存数量：宁双不单，宁二不四。</li><li>ATX主板装不进ITX机箱，ITX主板也不建议装进ATX机箱。</li><li>使用正规散热器，禁止使用萝卜和水缸等物品代替。</li><li>使用品牌电源，禁止使用红星电源等高爆设备。</li><li>系统应尽量安装在固态硬盘里。</li><li>不要使用玻璃等易碎材质侧板。</li><li>间歇性清灰是必须的，频率取决于设备环境的洁净程度。</li><li>购买设备前务必仔细核对显卡、散热、机箱等配件的长宽高以及各类线材的长度。</li><li>显存导热硅片必须使用和原装同样厚度，拆显卡前请复习第1条内容。</li><li>工作空间距离一米内不要放置危险物品，如敞口的水杯、猫。</li><li>水冷有风险，选择需谨慎。</li><li>拆机前应先烤机、并保证散热器轻微扭动取下，避免连根拔起。</li><li>重启解决90%的问题，重装解决99%的问题，重买解决100%的问题。</li><li>电子产品长期来看价格只会越来越低，杜绝“精准下山”的想法。</li><li>备份是最安全且唯一真正安全的数据保存方法。</li><li>如果你不擅长空间管理，请保证C盘分区尽量大。</li><li>Linux是个好东西，对于且仅对于会用的人来说。</li><li>不要照抄网上的超频作业，因为每一个元件的“体质“都不一样。</li><li>显卡紧挨的PCIE槽不要插面积大的设备挡风。</li><li>扎带和双面胶有时比螺丝好用。</li><li>机箱不重要，安全的设备安放环境才重要。</li><li>不要给小白推组装机，更不要给他提供硬件或软件，让他去买品牌机或者笔记本。</li><li>整机功率应不高于电源标称功率的75%。</li><li>禁止在机箱内摆放熔点低的装饰物。</li><li>涉及重要工作生产内容的设备应配置UPS.</li><li>水洗设备后务必保证完全干燥再通电，水洗前请复习第1条。</li><li>不要用手触摸高速旋转的风扇。</li><li>不要太过热心当好人，也不要试图教育或改变他人。</li><li>快递设备务必拨下显卡和塔扇等设备，并做好填充和包装，允许时使用静电袋。</li><li>RGB灯能显著提升设备性能。</li></ol><h3 id="打游戏时">打游戏时</h3><p>GPU跑满说明游戏优化好</p><p>CPU跑满说明电脑要爆炸了</p><p>不严谨的说，GPU利用率越高越好，CPU越低越好</p><h3 id="取消大数据算法推送">取消大数据算法推送</h3><table><thead><tr><th>APP 类型</th><th>APP 名称</th><th>关闭步骤</th></tr></thead><tbody><tr><td>买</td><td>淘宝</td><td>设置 - 隐私 - 推荐管理 - 个性化推荐</td></tr><tr><td>买</td><td>京东</td><td>设置 - 隐私 - 广告管理 - 个性化广告（所有选项都可以关闭）</td></tr><tr><td>买</td><td>拼多多</td><td>设置 - 账号与安全 - 个性化广告管理 - 个性化广告</td></tr><tr><td>买</td><td>闲鱼</td><td>设置 - 隐私设置 - 个性化推荐</td></tr><tr><td>吃</td><td>饿了么</td><td>设置 - 安全中心 - 个性化推荐设计</td></tr><tr><td>吃</td><td>美团</td><td>设置 - 隐私设置 - 个性化内容推荐</td></tr><tr><td>行</td><td>携程旅行</td><td>设置 - 隐私设置 - 个性推荐</td></tr><tr><td>行</td><td>高德地图</td><td>设置 - 关于高德地图 - 隐私管理 - 个性化推荐设置</td></tr><tr><td>行</td><td>百度地图</td><td>设置 - 关于百度地图 - 隐私 -个性化推荐设置（有14个个性化选项，全部关闭）</td></tr><tr><td>行</td><td>同程旅行</td><td>设置 - 个性化内容推荐/个性化广告推荐</td></tr><tr><td>行</td><td>去哪儿旅行</td><td>设置 - 系统设置 - 接受个性化推荐</td></tr><tr><td>行</td><td>飞猪旅行</td><td>设置 - 隐私 - 个性化内容推荐/个性化广告推荐</td></tr><tr><td>玩</td><td>百度</td><td>设置 - 隐私设置 - 广告设置/搜索个性化推荐/推荐设置</td></tr><tr><td>玩</td><td>哔哩哔哩</td><td>设置 - 隐私权限设置 - 个性化内容推荐管理 - 个性化内容推荐</td></tr><tr><td>玩</td><td>西瓜视频</td><td>设置 - 个性化推荐（往下找）</td></tr><tr><td>玩</td><td>微博</td><td>设置 - 隐私设置 - 个人信息与权限 -个性化内容推荐/个性化广告推荐</td></tr><tr><td>玩</td><td>抖音</td><td>我的 - 设置 - 个人信息管理 - 个性化内容推荐</td></tr><tr><td>玩</td><td>音乐</td><td>设置 - 使用信息管理 -个性化内容推荐/视频展示个性化推荐/视频设置</td></tr><tr><td>玩</td><td>快手</td><td>设置 - 个人信息收集清单 - 广告 - 个性化广告展示</td></tr><tr><td>玩</td><td>懂车帝</td><td>设置 - 隐私设置 - 个性化广告/个性化推荐头条</td></tr><tr><td>玩</td><td>酷安</td><td>设置 - 隐私设置 - 个性化推荐</td></tr></tbody></table><h2 id="知乎上拍案叫绝的回答">知乎上拍案叫绝的回答</h2><h3id="你读过最有力量的一段文字是什么">你读过最有力量的一段文字是什么？</h3><p>无论你有多么不堪，多么卑微，你的身体都远比你想象中的更加爱你。</p><p>当你溺水时，你的肺会压缩成一团，只为了再给你输送一口氧气。</p><p>当你失血过多时，你的心脏仍然会拼了命的为你输血。</p><p>你染上坏习惯时，他们会成批成批的，在你的不自律下牺牲自己。只为你提醒，让你回头。他们从不曾嫌弃你，也从不会认为你无药可救。</p><p>每天，你的体内会有5个细胞发生癌变，免疫系统无时无刻不在战斗，他们奋力抵抗侵略，直至消灭所有的癌细胞。</p><p>就算所有人都不在乎你，你的器官和细胞都在为你拼命。你的皮肤知道你是热了还是冷了，你的胃知道你是否饿了，他们都在拼尽全力调节你的身体，你的温度，甚至你的情绪。</p><p>他们努力工作，只为了让你在这个世界上能活。</p><p>哪怕你自己放弃了自己，你身上的37兆2000亿细胞都会耗尽最后的力气，竭尽全力的保护你。</p><h3id="现在世界都在为战争做准备会演变成世界大战吗">现在世界都在为战争做准备，会演变成世界大战吗？</h3><figure><img src="/images/d3b6081c5349430c59262bf6d1285c4.jpg"alt="现在世界都在为战争做准备，会演变成世界大战吗？" /><figcaptionaria-hidden="true">现在世界都在为战争做准备，会演变成世界大战吗？</figcaption></figure><h3id="如果把赵构换成希特勒会怎么样">如果把赵构换成希特勒会怎么样？</h3><p>“今天，我们站在这里！站在汉人的土地上！站在临安，这块我们祖先用鲜血和尊严浇灌的土地上！我的身后，是诸葛武侯的雕像！他是天下公认的英雄！他是全天下的光荣！</p><p>“我的面前，站着的是一个民族，一个在屈辱中呻吟的民族！靖康之耻°之后，我们这个民族的骄傲就没有了！那些战胜者们骑在我们的脖子上作威作福，他们随意践踏我们的尊严，一个华夏大陆上最高贵民族的尊严！你们告诉我，你们是选择像诸葛武侯一样去做一个北伐斗士，还是一个奴隶？!</p><p>“你们或许要说：陛下，我需要一块地种，一个炊饼。是的，你的说法很对，生命实在是太重要了。但是我要告诉你们。这世界上还有一种东西比生命更重要，那是荣耀！那就是尊严！”</p><p>“只要燕云十六州和汴梁上空一日还飘扬着金国的国旗，我们的尊严就不存在！只要那些金国人、蒙古人在我们的国土上横行霸道，我们的尊严就不存在！只要在中国的版图上，这个叫大宋的国家四分五裂、积弱不堪，我们的尊严就不存在！只要其他国家的人，在聊天的时候说到大宋这个字眼的时候会发出一声轻蔑的笑声，我们的尊严就不存在！</p><p>“我们需要的不是一块炊饼！而是一个生存空间！一个民族的生存空间！这生存空间，不是靠乞求和抗议来实现的，而是靠铁和血来实现的！”</p><p>“别人欺辱我们，哪怕是最弱小的民族也来践踏我们，我们只会叫着：我们表示强烈的愤慨和抗议。这样的人，是没有骨头的！这样的人，是低贱的！我们应该用战吼地震耳欲聋声让敌人颤抖！我们应该碾压他们的尊严、生命，让他们知道我们不是一群只知道抗议的懦夫！”</p><p>“你们要记住，一个只懂得抗议的国家，是一个没有骨头的国家！一个只懂得抗议的政府，是一个没有骨头的政府！当我们地尊严、领土、生存地空间都遭受践踏的时候，还不知羞耻地抗议地政府，我们是不需要的！你们最后也会抛弃它们的！”</p><p>“我很骄傲，在你们这些人中，这样没有骨头的人，少之又少！我的面前，是一个留着千年不屈血液的军团！这血液，曾经在我们祖先的血管里面流淌过，他们没有屈服过！现在，它们在我们的身体里面汨汩奔涌，你们告诉我，你们愿意它冷却吗！？”</p><p>“能够团结人们的，有两件东西：共同的理想和共同的犯罪。我们有雕刻在大宋旗帜上面的伟大理想，我们会为这理想流尽我们的最后一滴血！在今天的临安。没有任何东西能够拯救我们的祖国，只有这理想！靖康和议，是一个极大的耻辱！我们有拒绝执行它的决心和理由！做你们想做的吧！就像诸葛武侯那样挥师北伐，就像他带领着他的同胞们高举着那面自由的大旗英勇杀敌一样！假如你们期望战斗，那就去战斗吧！然后我就能够看到你们是七千万奴隶还是七千万坚贞不屈的汉人！”</p><p>“如果有那么一天，我，赵构，也会像诸葛武侯那样，举着属于我们大宋的大旗冲在最前方！哪怕是战死，我也会微笑着进入天堂！我会见到那些大宋的荣耀的祖先们，我可以昂着头颅走到伟大的太祖跟前，我可以骄傲地对他说：我，你的子孙，没有给你丢脸，我为伟大的大汉民族流尽了最后一滴血！”</p><p>“我们不为奴役而战！我们为自由而战！我们不是机器，不是牛马，我们是人！是从来没有屈服过的汉人！”</p><p>“我们以自由的名义团结起来！为一个新的、公平的世界而战！我们为人人有地种而战！为那些奴役我们的人滚出中国人的土地而战！为我们不需要整天喊着抗议而战！为我们的尊严而战！为我们的诺言而战！为解放这个国家而战！汉人，我们为我们的祖先的荣耀而战！为我们的子孙后代能够骄傲地宣传：我们是从来不屈服的汉人而战！”</p><p>“我的同胞们，大宋和大汉人民万岁！自由，万岁!”</p><h3 id="中国有资本家吗">中国有资本家吗？</h3><p>1972年，有人问毛主席： //张春桥“资本主义复辟，无产阶级就会吃第二遍苦吗？”</p><p>毛主席说：“你太高看他们了，他们懂什么是资本主义？最多倒退回半殖民地半封建社会。资本主义是靠侵略和掠夺别的国家而积累资产的，他们敢侵略谁呀？不被侵略就阿弥陀佛喽”</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>词根词缀表</title>
    <link href="/2024/07/15/RootsAffixes/"/>
    <url>/2024/07/15/RootsAffixes/</url>
    
    <content type="html"><![CDATA[<h2 id="a">A</h2><h3 id="alt">alt</h3><ul><li><strong>Meaning</strong>:高，变（Altman）</li><li><strong>Example</strong>:<ul><li><code>v:</code> alter exalt</li><li><code>adj:</code> alterable altered altertive alterant altitudinalaltithermal</li><li><code>n:</code> alteration alterability exaltation altitudealtimeter altometer alto altrigraph altocumulus altostratusaltonimbus</li></ul></li></ul><h3 id="am">am</h3><ul><li><strong>Meaning</strong>:爱慕</li><li><strong>Example</strong>:<ul><li><code>n:</code>amour amativeness paramour</li><li><code>adj:</code>amorous enamored amatory amatorial amative</li><li><code>adv:</code>amorously</li><li><code>v:</code>enamor enamour</li></ul></li></ul><h3 id="ardu">ardu</h3><ul><li><strong>Meaning</strong>:艰辛，努力(阿杜)</li></ul><h3 id="awe">awe</h3><ul><li><strong>Meaning</strong>:恐惧，害怕，敬畏(在害怕时嘴巴张成<strong>O</strong>型，发出<strong>awe</strong>的声音)</li></ul><h2 id="b">B</h2><h3 id="bhor">bhor</h3><ul><li><strong>Meaning</strong>:不喜欢，讨厌，厌恶(不好)</li></ul><h3 id="bi">bi</h3><ul><li><strong>Meaning</strong>:二(B)</li></ul><h3 id="bullet">bullet</h3><ul><li><strong>Meaning</strong>:子弹(巴雷特)</li></ul><h2 id="c">C</h2><h3 id="canteen">canteen</h3><ul><li><strong>Meaning</strong>:餐厅</li></ul><h3 id="cease">cease</h3><ul><li><strong>Meaning</strong>:停止(息事)</li></ul><h3 id="cens">cens</h3><ul><li><strong>Meaning</strong>:审视，审查</li></ul><h3 id="chan">chan</h3><ul><li><strong>Meaning</strong>:唱</li></ul><h3 id="chat">chat</h3><ul><li><strong>Meaning</strong>:说话，聊天</li></ul><h3 id="cian">cian</h3><ul><li><strong>Meaning</strong>:在某个领域技能精湛的人(神)</li></ul><h3 id="co-con-com">co, con, com</h3><ul><li><strong>Meaning</strong>:一起(靠)</li></ul><h3 id="conq">conq</h3><ul><li><strong>Meaning</strong>:战胜，攻克(抗克，对抗攻克)</li></ul><h2 id="d">D</h2><h3 id="deb">deb</h3><ul><li><strong>Meaning</strong>:借钱(贷币)</li></ul><h3 id="deny">deny</h3><ul><li><strong>Meaning</strong>:抵赖，抵抗，否认</li></ul><h3 id="dim">dim</h3><ul><li><strong>Meaning</strong>:暮色暗淡，天光暗淡，天色昏暗(低暮)</li></ul><h3 id="disa">disa</h3><ul><li><strong>Meaning</strong>:灾难，灾祸(地煞)</li></ul><h3 id="doc">doc</h3><ul><li><strong>Meaning</strong>:教(道课，道，说，常言道就是常言说)</li></ul><h3 id="dodge">dodge</h3><ul><li><strong>Meaning</strong>:躲避(躲之)</li></ul><h3 id="dol">dol</h3><ul><li><strong>Meaning</strong>:哀悼的，悲哀的，悲伤的(悼)</li><li><strong>Example</strong>:<ul><li><code>v:</code>condole</li><li><code>adj:</code>condolent, condolatory, doleful, dolefully,indolently</li><li><code>n:</code>condolence, dolefulness, dolor, dolour,indolence</li><li><code>adj:</code>doleful, dolorous, indolent</li></ul></li></ul><h3 id="domin">domin</h3><ul><li><strong>Meaning</strong>: 皇帝(陈道明演过皇帝)</li><li><strong>Example</strong>:<ul><li><code>v:</code>dominate domineer predominate</li><li><code>n:</code>dominator domination dominant dominance dominancypredominance</li><li><code>adj:</code>dominative predominant</li><li><code>adv:</code>predominately</li></ul></li></ul><h3 id="dread">dread</h3><ul><li><strong>Meaning</strong>:恐惧的，担忧的(，惴的， 惴惴不安)</li></ul><h3 id="dum">dum</h3><ul><li><strong>Meaning</strong>:沉默(大默)，蠢(大木)</li></ul><h3 id="dur">dur</h3><ul><li><strong>Meaning</strong>:持久（durex）</li><li><strong>Example</strong>:<ul><li>adj: durable nondurable durative endurable endurbly unendurableenduring perdurable<br /></li><li>adv: durably enduringly</li><li>n: durability duration endurance perdurability</li><li>v: endure perdure</li></ul></li></ul><h2 id="e">E</h2><h3 id="ebb">ebb</h3><ul><li><strong>Meaning</strong>:水波渐矮，退潮(矮波)</li></ul><h3 id="ee">ee</h3><ul><li><strong>Meaning</strong>:被动者，被xx者(乙方)</li></ul><h3 id="eg">eg</h3><ul><li><strong>Meaning</strong>:自己，自我 (一己)</li></ul><h3 id="equ">equ</h3><ul><li><strong>Meaning</strong>:相同(一曲同工)</li><li><strong>Example</strong>:<ul><li><code>adj:</code>equal unequal equitable inequitable equationalequatorial equilateral equivalent equative equiangluar equiproable</li><li><code>n:</code>equal equity equality inequality equalizer equationequator equidistance equinox equivalent equivalence equipartition</li><li><code>v:</code>equal equalize equate</li><li><code>adv:</code>equally equitably</li></ul></li></ul><h3 id="er">er</h3><ul><li><strong>Meaning</strong>:xx的人</li></ul><h3 id="err">err</h3><ul><li><strong>Meaning</strong>:错误（讹，以讹传讹）</li><li><strong>Example</strong>:<ul><li><code>v:</code>err</li><li><code>n:</code>error erroneousness</li><li><code>adj:</code>errorless unerring errant inerrant erroneous</li><li><code>adv:</code>unerringly erroneously</li></ul></li></ul><h3 id="eu">eu</h3><ul><li><strong>Meaning</strong>:优</li></ul><h2 id="f">F</h2><h3 id="fac">fac</h3><ul><li><strong>Meaning</strong>:干（fuck）</li><li><strong>Example</strong>:<ul><li><code>adj:</code>facile</li><li><code>n:</code>malefactor malefaction malefactress benefactorbenefaction benefactress</li></ul></li></ul><h3 id="fee">fee</h3><ul><li><strong>Meaning</strong>:费，费用</li></ul><h3 id="feeb">feeb</h3><ul><li><strong>Meaning</strong>:废物，蠢货，笨蛋(废逼)</li></ul><h3 id="fem">fem</h3><ul><li><strong>Meaning</strong>:女性(粉)</li></ul><h3 id="fev">fev</h3><ul><li><strong>Meaning</strong>:发热，滚烫(沸物)</li></ul><h3 id="fla">fla</h3><ul><li><strong>Meaning</strong>:吹气(呼啦，夫啦)</li><li><strong>Example</strong>:<ul><li><code>v:</code>inflate, deflate, flatter</li><li><code>n:</code>inflation, inflator, deflation, flatus, flatulence,flattery, perflation</li><li><code>adj:</code>inflationary, inflatable, deflationary,flatulent</li></ul></li></ul><h3 id="for">for</h3><ul><li><strong>Meaning</strong>:否定(否)</li></ul><h2 id="g">G</h2><h3 id="gang">gang</h3><ul><li><strong>Meaning</strong>:一群罪犯流氓之类的人(干，一干人等)</li></ul><h3 id="guess">guess</h3><ul><li><strong>Meaning</strong>:猜测，推测</li></ul><h2 id="h">H</h2><h3 id="hal">hal</h3><ul><li><strong>Meaning</strong>:吸气(拟声词)</li></ul><h3 id="hance">hance</h3><ul><li><strong>Meaning</strong>:加强，增强(夯实)</li></ul><h3 id="hate">hate</h3><ul><li><strong>Meaning</strong>:讨厌</li></ul><h3 id="haus">haus</h3><ul><li><strong>Meaning</strong>:耗尽，耗光(耗死)</li><li><strong>Example</strong>:<ul><li><code>v:</code>exhaust</li><li><code>adj:</code>exhausted exhausting unexhausted exhaustibleinexhaustible exhaustless</li><li><code>n:</code>exhaustion</li><li><code>adv:</code>exhaustively</li></ul></li></ul><h3 id="hein">hein</h3><ul><li><strong>Meaning</strong>:恨的，令人憎恨的(恨)</li></ul><h3 id="hol">hol</h3><ul><li><strong>Meaning</strong>:全部(whole)</li></ul><h3 id="hotel">hotel</h3><ul><li><strong>Meaning</strong>:旅馆，酒店</li></ul><h3 id="holic">holic</h3><ul><li><strong>Meaning</strong>:好like ，喜欢</li><li><strong>Example</strong>:<ul><li>n:alcoholic workholic shopholic foodholic bookholic phonaholiccompurterholic sexaholic chocoholic colaholic carboholic cardholic</li></ul></li></ul><h3 id="hook">hook</h3><ul><li><strong>Meaning</strong>:钩子(虎克，彼得潘里的虎克船长，直译过来是钩子船长，左手是钩子)</li></ul><h2 id="i">I</h2><h3 id="isol">isol</h3><ul><li><strong>Meaning</strong>:一个人，独自，独立(一手)</li></ul><h2 id="j">J</h2><h3 id="jelly">jelly</h3><ul><li><strong>Meaning</strong>:胶（啫喱）</li><li><strong>Example</strong>：<ul><li><code>n:</code>jelly jel jell jello jellyfish <code>sea jelly</code><code>fruit jelly</code> gel gelation gelatin gelatine aerogel hydrogel<code>silica gel</code></li><li><code>v:</code>gelate</li><li><code>adj:</code>gelatinous</li></ul></li></ul><h2 id="k">K</h2><h2 id="l">L</h2><h3 id="labor">labor</h3><ul><li><strong>Meaning</strong>:劳工，劳动（累伯）</li><li><strong>Example</strong>:<ul><li><code>v:</code>labor collkaborate</li><li><code>n:</code>labour labokrer labourer collaboration collkaboratorlaboratory</li><li><code>adj:</code>collaborative laborious elaborate</li><li><code>adv:</code>laboriously elaborately</li></ul></li></ul><h3 id="langui">langui</h3><ul><li><strong>Meaning</strong>:懒惰(懒鬼)</li></ul><h3 id="lend">lend</h3><ul><li><strong>Meaning</strong>:借</li></ul><h3 id="loq">loq</h3><ul><li><strong>Meaning</strong>:说话，聊天(唠嗑)</li><li><strong>Example</strong>:<ul><li><code>adj:</code>loqiacious grandiloquent eloquent ineloquentsomniloquous magniloquent</li><li><code>n:</code>loquacity colloquy colloquist grandiloquenceeloquence soliloquy soliloquist somniloquy obloquy ventriloquygastriloquy</li><li><code>adv:</code>eloquently</li><li><code>v:</code>soliloquize</li></ul></li></ul><h3 id="loyal">loyal</h3><ul><li><strong>Meaning</strong>:忠诚(老友)</li></ul><h3 id="lun">lun</h3><ul><li><strong>Meaning</strong>:月亮(轮)</li></ul><h2 id="m">M</h2><h3 id="maid">maid</h3><ul><li><strong>Meaning</strong>:妹子，少女(妹的)</li></ul><h3 id="marshal">marshal</h3><ul><li><strong>Meaning</strong>:将帅，元帅(马首，马首是瞻)</li></ul><h3 id="massa">massa</h3><ul><li><strong>Meaning</strong>:按摩(摩挲)</li></ul><h3 id="merge">merge</h3><ul><li><strong>Meaning</strong>:沉没，沉下去(没之)</li></ul><h3 id="migr">migr</h3><ul><li><strong>Meaning</strong>:跨境，移民，迁徙(迈隔，迈过隔阂)</li><li><strong>Example</strong>:<ul><li><code>v:</code>migrate immigrate emigrate</li><li><code>n:</code>migration migrator immigration immigrant emigrationemigrant</li><li><code>adj:</code>migrant migratory immigrant emigrant</li></ul></li></ul><h3 id="mini">mini</h3><ul><li><strong>Meaning</strong>:迷你</li></ul><h3 id="mon">mon</h3><ul><li><strong>Meaning</strong>:一（孟）</li><li><strong>Example</strong>:<ul><li><code>n:</code>monday monopoly monologue monarch monoxide monotonemonotony monodrama monograph monogamy monocycle</li><li><code>adj:</code>monophonic</li></ul></li></ul><h3 id="mort">mort</h3><ul><li><strong>Meaning</strong>:死(殁)</li><li><strong>Example</strong>:<ul><li><code>adj:</code>immortal mortal amort</li><li><code>n:</code>immortal mortal immortality mortuary mortality</li><li><code>adv:</code>immortally</li><li><code>v:</code>immortalise immortalize</li></ul></li></ul><h3 id="movie">movie</h3><ul><li><strong>Meaning</strong>:电影</li></ul><h3 id="mum">mum</h3><ul><li><strong>Meaning</strong>:妈妈，母亲</li></ul><h2 id="n">N</h2><h3 id="numb">numb</h3><ul><li><strong>Meaning</strong>:迟钝，呆滞，麻木(木讷，讷木)</li></ul><h3 id="nym">nym</h3><ul><li><strong>Meaning</strong>:名字(name，与name发音相同)</li></ul><h2 id="o">O</h2><h2 id="p">P</h2><h3 id="pain">pain</h3><ul><li><strong>Meaning</strong>:痛苦</li></ul><h3 id="pany">pany</h3><ul><li><strong>Meaning</strong>:陪伴(陪你)</li><li><strong>Example</strong>:<ul><li><code>n:</code>companion, companionship, company, accompaniment,accompanist, accompanier</li><li><code>adj:</code>companionate, companionable, accompanied,uncompanied</li><li><code>adv:</code>companionably, uncompanionably</li><li><code>v:</code>accompany</li></ul></li></ul><h3 id="paw">paw</h3><ul><li><strong>Meaning</strong>:刨，爪子</li></ul><h3 id="ploy">ploy</h3><ul><li><strong>Meaning</strong>:仆人，劳役(仆劳役)</li><li><strong>注意</strong>：<strong>ploy</strong>会变成<strong>ploi</strong>的形式，是因为后面加了<strong>万能t</strong>(词根都可以加<strong>万能t</strong>)，但如果强行写成<strong>ployt</strong>会显得太过刻意，所以要把<strong>y</strong>写成意义相同的<strong>i</strong>再接万能<strong>t</strong></li></ul><h3 id="plunge">plunge</h3><ul><li><strong>Meaning</strong>:跳水，跳入(扑浪之)</li></ul><h2 id="q">Q</h2><h2 id="r">R</h2><h3 id="rar">rar</h3><ul><li><strong>Meaning</strong>:少(rar格式的压缩包)</li></ul><h3 id="rear">rear</h3><ul><li><strong>Meaning</strong>:向后，后面的，后部(<strong>re</strong>意思是向后，<strong>ar</strong>是形容词和名词后缀组成的复合词)</li></ul><h3 id="rumor">rumor</h3><ul><li><strong>Meaning</strong>:谣言(辱没)</li></ul><h2 id="s">S</h2><h3 id="sandwich">sandwich</h3><ul><li><strong>Meaning</strong>:三明治</li></ul><h3 id="sassion">sassion</h3><ul><li><strong>Meaning</strong>:杀手(杀神)</li></ul><h3 id="sev">sev</h3><ul><li><strong>Meaning</strong>:切(七，7的形状像一个镰刀)</li></ul><h3 id="shit">shit</h3><ul><li><strong>Meaning</strong>:屎</li></ul><h3 id="son">son</h3><ul><li><strong>Meaning</strong>:声音（嗓）</li><li><strong>Example</strong>：<ul><li><code>adj:</code>sonic supersonic subsonic consonant ultrasonicstereosonic</li><li><code>n:</code>sonics unison consonant dissonance assonancesonar</li><li><code>v:</code>resonate</li></ul></li></ul><h3 id="staff-fran">staff fran</h3><ul><li><strong>Meaning</strong>:<ul><li><strong>staff</strong>:参谋，策划，职员(士大夫)</li><li><strong>fran</strong>：(通fren)弗然大怒</li></ul></li></ul><h2 id="t">T</h2><h3 id="taboo">taboo</h3><ul><li><strong>Meaning</strong>:禁止，禁忌(特步的logo是一个巨大的<strong>×</strong>)</li></ul><h3 id="tami">tami</h3><ul><li><strong>Meaning</strong>：脏，弄脏(汰埋，埋汰)</li></ul><h3 id="tan">tan</h3><ul><li><strong>Meaning</strong>:皮肤日晒后的炭黑色&amp;把皮肤晒成宛如黑炭的颜色(碳)</li></ul><h3 id="tangle">tangle</h3><ul><li><strong>Meaning</strong>:纠缠（探戈：一种舞蹈）</li><li><strong>Example</strong>:<ul><li><code>n:</code>tangle entanglement</li><li><code>adj:</code>tangled</li><li><code>v:</code>untangle entangle disentangle detangle</li></ul></li></ul><h3 id="teen">teen</h3><ul><li><strong>Meaning</strong>:十(ten中间的e变为两个e)</li></ul><h3 id="tomb">tomb</h3><ul><li><strong>Meaning</strong>:土墓</li></ul><h3 id="typhoon">typhoon</h3><ul><li><strong>Meaning</strong>:台风</li></ul><h2 id="u">U</h2><h3 id="umb">umb</h3><ul><li><strong>Meaning</strong>:阴影(暗部)</li></ul><h3 id="und">und</h3><ul><li><strong>Meaning</strong>:洋溢，充溢，多到溢出来（盎的）</li><li><strong>Example</strong>:<ul><li><code>adj:</code>abundant redundant abounding</li><li><code>n:</code>abundance inundation redundancy</li><li><code>adv:</code>abundantly</li><li><code>v:</code>inundate abound superabound</li></ul></li></ul><h2 id="v">V</h2><h3 id="vac">vac</h3><ul><li><strong>Meaning</strong>:空空如也(外壳)</li></ul><h3 id="vigor">vigor</h3><ul><li><strong>Meaning</strong>:精力(伟哥：一款随时随地帮你把精力拉满的药)</li><li><strong>Example</strong>:<ul><li><code>n:</code>vigor vigour invigoration invigorator</li><li><code>adj:</code>vigorous invigorative</li><li><code>adv:</code>vigorously</li><li><code>v:</code>invigorate reinvigorate</li></ul></li></ul><h3 id="viro">viro</h3><ul><li><strong>Meaning</strong>:围绕，外绕</li><li><strong>注意</strong>：<strong>viro</strong>在单词出现的时候，经常在后面带上<strong>n.</strong>这个经典名词后缀，变成<strong>viron</strong>形式，表示<strong>围绕在周围的东西</strong></li></ul><h3 id="vita">vita</h3><ul><li><strong>Meaning</strong>:命（维他命）</li><li><strong>Example</strong>:<ul><li><code>n:</code>vita vijtality vitalization vitamin multivitaminrevitalization</li><li><code>adj:</code>vital</li><li><code>adv:</code>vitally</li><li><code>v:</code>vitalize devitalize revitalize</li></ul></li></ul><h2 id="w">W</h2><h3 id="want">want</h3><ul><li><strong>Meaning</strong>:想要</li></ul><h3 id="wee">wee</h3><ul><li><strong>Meaning</strong>：微小的，极小的(微)</li></ul><h2 id="x">X</h2><h2 id="y">Y</h2><h3 id="yer">yer</h3><ul><li><strong>Meaning</strong>:从事某某行业的人(爷，比如倒爷，军爷，官爷)</li></ul><h2 id="z">Z</h2>]]></content>
    
    
    
    <tags>
      
      <tag>词根词缀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端复习笔记</title>
    <link href="/2024/06/16/webExamination/"/>
    <url>/2024/06/16/webExamination/</url>
    
    <content type="html"><![CDATA[<p>因为老师给的笔记分散在多个文件夹，用百度翻译出来的结果经常不准，所以我在一怒之下<del>怒了一下</del>决定将所有的笔记归类到一篇文章中，并且将其中的一些难以理解的术语用大白话说出来</p><p>先上思维导图(你们应该能理解我有多肝了)</p><figure><img src="/images/web思维导图.png" alt="思维导图" /><figcaption aria-hidden="true">思维导图</figcaption></figure><h2 id="写在开头">0. 写在开头</h2><p>开始之前，我想先说一下html,css,Bootstrap,Javascript,Query之间的关系</p><ol type="1"><li>HTML(HyperText MarkupLanguage)是网页的基础，它定义了网页的结构和内容。你可以把它想象成建筑的骨架，决定了建筑的基本形状和内部空间的布局。</li><li>CSS(Cascading StyleSheet)是用来设置网页的样式的，包括布局、颜色、字体等。它的作用类似于建筑的装修，通过它可以使基本的建筑看起来更美观、更符合使用需求。</li><li>Bootstrap是基于 HTML 和 CSS的一个框架，它提供了预制的样式和组件，使网页设计变得更快、更容易。想象一下，如果有一个预装好家具和装饰的房间，你只需要进行一些小的调整就能入住，这就是Bootstrap 的作用。</li><li>JavaScript是一种脚本语言，用于添加网页的交互功能，比如响应按钮点击、数据更新等。如果把网页比作一部电影，那么JavaScript 就是让静态画面动起来的电影导演。</li><li>jQuery是一个 JavaScript 库，它简化了 JavaScript 的编程，使 DOM的操作、事件处理和动画效果的实现更加容易。使用 jQuery就像是为电影导演提供了一套高效的工具，使拍摄过程更加顺畅。</li></ol><p>想象你在建造一个现代住宅（网页）。首先，你需要一个结构图（HTML），它定义了房子的基本布局和每个房间的位置。接着，你需要进行内部装修（CSS），决定墙壁的颜色、地板的材质和房间的灯光等。然后，为了让装修更快更方便，你选择了一套现成的装修套餐（Bootstrap），这套套餐已经包括了一些流行的设计和家具。</p><p>现在房子看起来很好，但如果要住得舒适，你还需要添加一些高科技设备，比如自动窗帘、温度调节器等（JavaScript），使房子可以根据居住者的行为自动调整环境。最后，为了简化这些高科技设备的安装和使用，你引入了一个智能家居系统（jQuery），它可以帮你更容易地控制这些设备，让你的智能家居体验更加无缝和愉快。</p><h2 id="html-cheatsheethtml工作表">1. HTML Cheatsheet(HTML工作表)</h2><h3 id="basic-tags">1.1 Basic Tags</h3><ol type="1"><li><code>&lt;html&gt;&lt;/html&gt;</code>:Creates an HTMLdocument<br>创建HTML文档</li><li><code>&lt;head&gt;&lt;/head&gt;</code>:Sets off the title &amp;other info that isn'sdisplayed<br>用来标记网页标题和其他不会直接显示的内容(<em>这里的<code>set off</code>可以理解为标记或设定</em>)</li><li><code>&lt;body&gt;&lt;/body&gt;</code>:Sets off the visible portionof the document<br>用来标记文档可见部分</li><li><code>&lt;title&gt;&lt;/title&gt;</code>:Puts name of the documentin the title bar;when bookmarking pages,this is whatbookmarked<br>文档的标题会显示在浏览器的标题栏或标签页上，当用户为页面添加书签时，这个标题也是被保存的内容。(<code>bookmark</code>:书签)</li></ol><h3id="body-attributesonly-used-in-email-newsletters仅用于电子邮件通讯">1.2Body attributes[Only used in email newsletters(仅用于电子邮件通讯)]</h3><ol type="1"><li><code>&lt;body bgcolor=?&gt;</code>:Sets background color,using nameor hex value<br>设置背景颜色，使用名称或十六进制值</li><li><code>&lt;body text=?&gt;</code>:Sets text color,using name or hexvalue<br>设置文本颜色，使用名称或十六进制值</li><li><code>&lt;body link=?&gt;</code>:Sets color of links,using name orhex value<br>设置链接颜色，使用名称或十六进制值</li><li><code>&lt;body vlink=?&gt;</code>:Sets color of visited links,usingname or hex calue<br>设置已访问链接的颜色，使用名称或十六进制值</li><li><code>&lt;body alink=?&gt;</code>:Sets color of active links (whilemouse-clicking)<br>设置活动链接的颜色（鼠标点击时）</li></ol><blockquote><p><strong>小贴士（不赶时间可以看看）：</strong>使用名称或十六进制值是指在指定颜色时，可以使用颜色的名称或其对应的十六进制值使用名称，比如<code>red</code>,<code>blue</code>,<code>green</code>等等使用十六进制时，每种颜色都可以用一个六位的十六进制代码来表示，代码前加上<code>#</code>,比如<code>#FF0000</code>(红色)，<code>#0000FF</code>(蓝色)，<code>#00FF00</code>(绿色)，<code>#000000</code>(黑色)，<code>#FFFFFF</code>(白色)十六进制值由三个部分组成，分别表示红色、绿色和蓝色（RGB），每部分用两位十六进制数表示。比如，#FF0000代表红色，因为 FF 表示最大值 255，对应于红色，而绿色和蓝色的值为 0。</p></blockquote><h3 id="text-tags文本标签">1.3 Text Tags(文本标签)</h3><ol type="1"><li><code>&lt;pre&gt;&lt;/pre&gt;</code>:Creates preformattedtext<br>创建预格式化文本<br>大白话：使用<code>&lt;pre&gt;</code>标签可以确保文本的格式不会被浏览器自动调整，非常适合需要保持原始格式的内容</li><li><code>&lt;h1&gt;&lt;/h1&gt;--&gt;&lt;h6&gt;&lt;/h6&gt;</code>:Createsheadlines -- H1=largest, H6=smallest<br>创建标题，h1最大，h6最小</li><li><code>&lt;b&gt;&lt;/b&gt;</code>:Creates bold text (should use<code>&lt;strong&gt;</code>instead)<br>创建粗体文本(创建粗体文本（应该使用<code>&lt;strong&gt;</code> 代替）)</li><li><code>&lt;i&gt;&lt;/i&gt;</code>:Creates italicized text (should use<code>&lt;em&gt;</code> instead)<br>创建斜体文本（应该使用<code>&lt;em&gt;</code> 代替）</li><li><code>&lt;tt&gt;&lt;/tt&gt;</code>:Creates typewriter-styletext<br>创建打字机风格的文本</li><li><code>&lt;code&gt;&lt;/code&gt;</code>:Used to define source code,usually monospace<br>用于定义源代码，通常为等宽字体</li><li><code>&lt;cite&gt;&lt;/cite&gt;</code>:Creates a citation, usuallyprocessed in italics<br>创建引用，通常为斜体</li><li><code>&lt;address&gt;&lt;/address&gt;</code>:Creates addresssection, usually processed in italics<br>创建地址部分，通常为斜体</li><li><code>&lt;em&gt;&lt;/em&gt;</code>:Emphasizes a word (usuallyprocessed in italics)<br>强调一个词（通常为斜体）</li><li><code>&lt;strong&gt;&lt;/strong&gt;</code>:Emphasizes a word(usually processed in bold)<br>强调一个词（通常为粗体）</li><li><code>&lt;font size=?&gt;&lt;/font&gt;</code>:Sets size of font - 1to 7 (should use CSS instead)<br>设置字体大小 - 1 到 7（应该使用 CSS代替）</li><li><code>&lt;font color=?&gt;&lt;/font&gt;</code>:Sets font color(should use CSS instead)<br>设置字体颜色（应该使用 CSS 代替）</li><li><code>&lt;font face=?&gt;&lt;/font&gt;</code>:Defines the fontused(should use the CSS instead)<br>定义所使用的字体（应该使用 CSS代替）</li></ol><h3 id="links">1.4 Links</h3><ol type="1"><li><code>&lt;a href="URL"&gt;clickable text&lt;/a&gt;</code>:Creates ahyperlink to a Uniform ResourceLocator<br>创建一个指向统一资源定位符（URL）的超链接</li><li><code>&lt;a href="mailto:EMAIL_ADDRESS"&gt;clickable text&lt;/a&gt;</code>:Createsa hyperlink to an email address<br>创建一个指向电子邮件地址的超链接</li><li><code>&lt;a name="NAME"&gt;</code>:Creates a target location withina document<br>在文档内创建一个目标位置</li><li><code>&lt;a href="#NAME"&gt;clickable text&lt;/a&gt;</code>:Createsa link to that targetlocation<br>创建一个指向该目标位置的链接<br>大白话：创建一个指向该目标位置的链接。点击此链接时，页面会滚动到相应的锚点目标位置</li></ol><blockquote><p><strong>小贴士：</strong>超链接（Hyperlink）是指在网页或文档中，能够从一个页面或位置跳转到另一个页面或位置的链接。通过点击超链接，用户可以快速导航到指定的目标，例如另一个网页、同一页面中的特定位置、电子邮件地址或文件。超链接通常以不同的颜色或下划线显示，提示用户可以点击它们。超链接使用HTML 中的 <code>&lt;a&gt;</code>（anchor）标签来创建。 href是"HypertextReference"的缩写。在 HTML 中，href 属性用于指定超链接的目标地址。通过为<code>&lt;a&gt;</code> 标签设置 href属性，可以定义用户点击链接时应该跳转到的目标位置。 URL是"UniformResource Locator"的缩写，中文常译为“统一资源定位符”。URL是一种用于指定互联网上某一资源位置的地址，类似于我们在现实生活中使用的地址来找到特定位置。URL可以是网址(比如<a href="https://crazythursdayv50tome.cn">https://crazythursdayv50tome.cn</a>)也可以是路径(比如"/path/to/resource")等</p></blockquote><h3 id="formatting格式化">1.5 Formatting(格式化)</h3><ol type="1"><li><code>&lt;p&gt;&lt;/p&gt;</code>:Creates a newparagraph<br>创建一个新段落</li><li><code>&lt;br&gt;</code>：Inserts a line break(carriagereturn)<br>插入一个换行符(回车)</li><li><code>&lt;blockquote&gt;&lt;/blockquote&gt;</code>:Puts content in aquote-indents text from bothsides<br>将内容放在引号中-将文本从两边缩进<br>大白话：<code>&lt;blockquote&gt;</code>标签用于表示引用的内容，浏览器通常会对其进行缩进处理以突出显示引用的部分。这种标记常用于显示他人的言论或引用的文本，以便与正文区分开来。通常，浏览器会在左右两侧添加一些空白来使引用部分与周围内容有所区别。</li><li><code>&lt;div&gt;&lt;/div&gt;</code>:Used to format block contentwith CSS<br>用于使用 CSS 格式化块级内容</li><li><code>&lt;span&gt;&lt;/span&gt;</code>:Used to format inline contentwith CSS<br>用于使用 CSS 格式化内联内容<br><code>&lt;span&gt;</code>标签用于对文本中的一部分进行行内样式控制，通常用于对文本进行格式化或添加样式而不影响其它文本。它类似于<code>&lt;div&gt;</code>，但 <code>&lt;span&gt;</code>是行内元素，而<code>&lt;div&gt;</code>是块级元素，所以 <code>&lt;span&gt;</code>通常用于对文本的一部分进行样式设置，例如改变颜色、字体、大小等。<br>打个比方，<code>&lt;span&gt;</code>标签就像是一个装饰盒，你可以把它放在文字中任何你想要装饰的地方。比如，你可以用<code>&lt;span&gt;</code>来给文字涂上不同的颜色、改变字体大小或者添加特殊效果，而不会影响到其他文字。就像给一小块文字打扮一样，不会影响到整个段落的装扮。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一段 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red;&quot;</span>&gt;</span>红色<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 的文字。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure> <img src="/images/span.png" alt="效果图" /></li></ol><h3 id="lists列表">1.6 Lists(列表)</h3><ol type="1"><li><code>&lt;ul&gt;&lt;/ul&gt;</code>:Creates an unorderedlist<br>创建一个无序列表</li><li><code>&lt;ol start=?&gt;&lt;/ol&gt;</code>:Creates an ordered list(start=xx, where xx is a countingnumber)<br>创建一个有序列表（start=xx，其中 xx 是一个计数数字）<br>xx可以是任意整数，表示列表从这个编号开始。默认情况下，有序列表从 1开始编号，但通过设置 start 属性，可以更改起始编号。</li><li><code>&lt;li&gt;&lt;/li&gt;</code>:Encompasses each listitem<br>包围每个列表项</li><li><code>&lt;dl&gt;&lt;/dl&gt;</code>:Creates a definitionlist<br>创建一个定义列表</li><li><code>&lt;dt&gt;&lt;/dt&gt;</code>:Precedes each definitionterm<br>在每个定义术语之前</li><li><code>&lt;dd&gt;&lt;/dd&gt;</code>:Precedes eachdefinition<br>在每个定义之前</li></ol><p><strong>没听懂？没关系，举个例子你就明白了</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项二<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项三<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><span class="hljs-comment">&lt;!--&lt;dl&gt;:定义列表的容器(definition list)--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><span class="hljs-comment">&lt;!--&lt;dt&gt;:定义列表中的术语--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>超文本标记语言，用于创建网页。<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><span class="hljs-comment">&lt;!--定义列表中的定义--&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>层叠样式表，用于控制网页的外观和布局。<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>一种编程语言，用于为网页添加互动功能。<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/list.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><h3 id="graphical-elements图形元素">1.7 Graphicalelements(图形元素)</h3><ol type="1"><li><code>&lt;hr&gt;</code>:Inserts a horizontalrule<br>插入一个水平线</li><li><code>&lt;hr size=?&gt;</code>:Sets size (height) of horizontalrule<br>设置水平线的高度</li><li><code>&lt;hr width=?&gt;</code>:Sets width of rule(as a % orabsolute pixellength)<br>设置水平线的宽度（可以是百分比或绝对像素长度）</li><li><code>&lt;hr noshade&gt;</code>:Creates a horizoontal rule without ashadow<br>创建一个没有阴影的水平线</li><li><code>&lt;img src="URL" /&gt;</code>:Adds image; it is a separatefile located at the URL<br>添加图像；它是一个位于指定 URL的单独文件<br><code>&lt;img src="URL" /&gt;</code> 标签中的 /是自闭合标签的写法。这种写法主要源于 XHTML 规范，在 XHTML中，所有标签都必须正确关闭，即使是那些在 HTML 中不需要关闭的空元素（例如<code>&lt;img&gt;</code>、<code>&lt;br&gt;</code>、<code>&lt;hr&gt;</code>等）。</li><li><code>&lt;img src="URL" align=?&gt;</code>:Aligns imageleft/right/center/bottom/top/middle (useCSS)<br>将图像左对齐/右对齐/居中对齐/底部对齐/顶部对齐/中间对齐（建议使用CSS）</li><li><code>&lt;img src="URL" border=?&gt;</code>:Sets size of bordersurrounding image (use CSS)<br>设置图像周围边框的大小（建议使用CSS）</li><li><code>&lt;img src="URL" height=?&gt;</code>:Sets height of image, inpixels<br>设置图像的高度（单位为像素）</li><li><code>&lt;img src="URL" width=?&gt;</code>:Sets width of image, inpixels<br>设置图像的宽度（单位为像素）</li><li><code>&lt;img src="URL" alt=?&gt;</code>:Sets the alternate text forbrowsers that can't process images (required by theADA)<br>为无法处理图像的浏览器设置替代文本（ADA 要求）</li></ol><h3 id="forms表单">1.8 Forms(表单)</h3><ol type="1"><li><code>&lt;form&gt;&lt;/form&gt;</code>:Defines aform<br>定义一个表单</li><li><code>&lt;select multiple name=? size=?&gt;&lt;/select&gt;</code>:Createsa scrolling menu. Size sets the number of menu items visible before userneeds toscroll.<br>创建一个滚动菜单。size设置用于需要滚动前可见的菜单项数量</li><li><code>&lt;select name=?&gt;&lt;/select&gt;</code>:Creates a pulldownmenu<br>创建一个下拉菜单</li><li><code>&lt;option&gt;</code>:Sets off each menuitem<br>设置每个菜单项</li><li><code>&lt;textarea name=? col="x" rows="y"&gt;&lt;/textarea&gt;</code>:Createsa text box area. Columns set the width; rows set theheight.<br>创建一个文本区域。cols 设置宽度；rows 设置高度。</li><li><code>&lt;input type="checkbox" name=? value=?&gt;</code>:Creates acheckbox.<br>创建一个复选框。</li><li><code>&lt;input type="checkbox" name=? value=? checked&gt;</code>:Createsa checkbox which is pre-checked<br>创建一个预选中的复选框。</li><li><code>&lt;input type="radio" name=? value=?&gt;</code>:Creates aradio button.<br>创建一个单选按钮</li><li><code>&lt;input type="radio" name=? value=? checked&gt;</code>:Createsa radio button which is pre-checked.<br>创建一个预选中的单选按钮。</li><li><code>&lt;input type="text" name=? size=?&gt;</code>:Creates aone-line text area. Size sets length, incharacters.<br>创建一个单行文本区域。size 设置长度，以字符为单位。</li><li><code>&lt;input type="submit" value=?&gt;</code>:Creates a submitbutton. Value sets the text in the submitbutton.<br>创建一个提交按钮。value 设置提交按钮上的文本。</li><li><code>&lt;input type="image" name=? src=? border=? alt=?&gt;</code>:Createsa submit button using an image.<br>使用图像创建一个提交按钮。</li><li><code>&lt;input type="reset"&gt;</code>:Creates a resetbutton<br>创建一个重置按钮</li></ol><h3id="html5-input-tag-attributeshtml5-输入标签属性不是所有浏览器都支持请访问-httpcaniuse.com-获取详细信息">1.9HTML5 input tag attributes[HTML5输入标签属性（不是所有浏览器都支持；请访问 http://caniuse.com获取详细信息）]</h3><ol type="1"><li><code>&lt;input type="email" name=?&gt;</code>:Sets a single-linetextbox for email addresses<br>设置一个用于电子邮件地址的单行文本框</li><li><code>&lt;input type="URL" name=?&gt;</code>:Sets a single-linetextbox for URLs<br>设置一个用于 URL 的单行文本框</li><li><code>&lt;input type="number" name=?&gt;</code>:Sets a single-linetextbox for a number<br>设置一个用于数字的单行文本框</li><li><code>&lt;input type="range" name=?&gt;</code>:Sets a single-linetext box for a range of numbers<br>设置一个用于范围数字的单行文本框</li><li><code>&lt;input type="date/month/week/time" name=?&gt;</code>:Sets asingle-line text box with a calendar showing thedate/month/week/time<br>设置一个带有日历的单行文本框，显示日期/月份/周/时间</li><li><code>&lt;input type="search" name=?&gt;</code>:Sets a single-linetext box for searching<br>设置一个用于搜索的单行文本框</li><li><code>&lt;input type="color" name=?&gt;</code>:Sets a single-linetext box for picking a color<br>设置一个用于选择颜色的单行文本框</li></ol><h3id="tablesuse-only-for-data-layout--use-css-for-page-layout表格仅用于数据布局---使用-css-进行页面布局">1.10Tables(use only for data layout -use CSS for pagelayout)[表格（仅用于数据布局 - 使用 CSS 进行页面布局）]</h3><ol type="1"><li><code>&lt;table&gt;&lt;/table&gt;</code>:Creates atable<br>创建一个表格</li><li><code>&lt;tr&gt;&lt;/tr&gt;</code>:Sets off each row in atable<br>设置表格中的每一行</li><li><code>&lt;td&gt;&lt;/td&gt;</code>:Sets off each cell in arow<br>设置每行中的每个单元格<br>td:table data</li><li><code>&lt;th&gt;&lt;/th&gt;</code>:Sets off the table header(anormal cell with bold,centeeredtext)<br>设置表头（一个普通单元格，其中的文本加粗且居中显示）</li></ol><h3id="table-attributesonly-use-for-email-newsletters表格属性仅用于电子邮件新闻简报">1.11Table attributes(only use for emailnewsletters)[表格属性(仅用于电子邮件新闻简报)]</h3><ol type="1"><li><code>&lt;table border=?&gt;</code>:Sets the width of the borderaround table cells<br>设置单元格周围边框的宽度</li><li><code>&lt;table cellspacing=?&gt;</code>:Sets amount of spacebetween table cells<br>设置表格单元格之间的间距</li><li><code>&lt;table cellpadding=?&gt;</code>:Sets amount of spacebetween a cell's border and itscontents<br>设置单元格边框和内容之间的间距</li><li><code>&lt;table width=?&gt;</code>:Sets width of the table in pixelsor as a percentage<br>设置表格的宽度，单位可以是像素或百分比</li><li><code>&lt;tr align=?&gt;</code>:Sets alignment for cells within theroe(left/center/right)<br>设置行内单元格的对齐方式（左对齐/居中/右对齐）</li><li><code>&lt;td align=?&gt;</code>:Sets alignment for cells within therow(left/center/right)<br>设置单元格的对齐方式（左对齐/居中/右对齐）</li><li><code>&lt;tr valign=?&gt;</code>:Sets vertical alignment for cellswithin the row(top/middle/bottom)<br>设置行内单元格的垂直对齐方式（顶部对齐/居中/底部对齐）</li><li><code>&lt;td valign=?&gt;</code>:Sets vertical alignment for cell(top/middle/bottom)<br>设置单元格的垂直对齐方式（顶部对齐/居中/底部对齐）</li><li><code>&lt;td rowspan=?&gt;</code>:Sets number of rows a cell shouldspan (default=1)<br>设置单元格应跨越的行数（默认为1）</li><li><code>&lt;td colspan=?&gt;</code>:Sets number of columns a cellshould span<br>设置单元格应跨越的列数</li><li><code>&lt;td nowrap&gt;</code>:Prevents lines within a cell frombeing broken to fit<br>防止单元格内部的文本换行以适应</li></ol><h2 id="cascading-style-sheets-cheatsheet层叠样式表速查表">2. CascadingStyle Sheets Cheatsheet(层叠样式表速查表)</h2><h3 id="font-properties字体属性">2.1 Font Properties(字体属性)</h3><ol type="1"><li><p>Font Family:Changes the font family of certain words,sentences,paragraphs, etc. <br>更改特定单词、句子、段落等的字体系列。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;New Century Schoolbook&quot;</span>, Times, serif; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Font Style:Changes text: normal, oblique, anditalics.<br>更改文本的样式：正常、斜体、和斜体字。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">font-style</span>: oblique; &#125;<br><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">font-style</span>: normal; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Font-Variant:Used to display font in normal orsmall-caps.<br>用于显示正常字体或小型大写字体。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">span</span>&#123;<span class="hljs-attribute">font-variant</span>: small-caps&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Font-Weight:Used to specify the weight of thefont.<br>用于指定字体的粗细 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">font-weight</span>: <span class="hljs-number">800</span>;&#125;<br><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">font-weight</span>:normal;&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Font-Size:Used to modify the size of the displayedfont.<br>用于修改显示字体的大小。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">font-size</span>: large; &#125;<br><span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12pt</span>; &#125;<br><span class="hljs-selector-tag">li</span> &#123; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">90%</span>; &#125;<br><span class="hljs-selector-tag">strong</span> &#123; <span class="hljs-attribute">font-size</span>: larger; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Font:Used to combine all properties offonts<br>用于组合所有字体属性 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">font</span>: italic bold <span class="hljs-number">12pt</span>/<span class="hljs-number">14pt</span> Times, serif; &#125;<br></code></pre></td></tr></table></figure></p></li></ol><h3 id="color-and-background-properties颜色和背景属性">2.2 Color andBackground Properties(颜色和背景属性)</h3><ol type="1"><li><p>Color：Changes the color of text<br>更改文本的颜色。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">color</span>: blue&#125;;<br><span class="hljs-selector-tag">h2</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>&#125;;<br></code></pre></td></tr></table></figure></p></li><li><p>Background-Color:Sets the background color of anelement.<br>设置元素的背景颜色。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">background-color</span>: white; &#125;<br><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000080</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Background-Image: Sets the background image of anelement<br>设置元素的背景图片。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">/images/foo.gif</span>); &#125;<br><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">http://www.htmlhelp.com/bg.png</span>); &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Background-Repeat:Determines how a specified background image isrepeated. The repeat-x value will repeat the image horizontally whilethe repeat-y value will repeat the imagevertically.<br>确定指定的背景图像如何重复。repeat-x 值将图像水平重复，而repeat-y 值将图像垂直重复。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">background</span>: white <span class="hljs-built_in">url</span>(<span class="hljs-string">candybar.gif</span>); <span class="hljs-attribute">background-repeat</span>: repeat-x; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Background-Attachment:Determines if a specified background imagewill scroll with the content or be fixed with regard to thecanvas.<br>确定指定的背景图像是随着内容滚动还是相对于画布固定。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">background</span>: white <span class="hljs-built_in">url</span>(<span class="hljs-string">candybar.gif</span>); <span class="hljs-attribute">background-attachment</span>: fixed; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Background:Used to combine all properties ofbackground<br>用于组合所有背景属性。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">background</span>: white <span class="hljs-built_in">url</span>(<span class="hljs-string">http://www.htmlhelp.com/foo.gif</span>); &#125;<br><span class="hljs-selector-tag">BLOCKQUOTE</span> &#123; <span class="hljs-attribute">background</span>: <span class="hljs-number">#7fffd4</span>; &#125;<br><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../backgrounds/pawn.png</span>) <span class="hljs-number">#f0f8ff</span> fixed; &#125;<br><span class="hljs-selector-tag">TABLE</span> &#123; <span class="hljs-attribute">background</span>: red <span class="hljs-built_in">url</span>(<span class="hljs-string">leaves.jpg</span>) no-repeat bottom right; &#125;<br></code></pre></td></tr></table></figure></p></li></ol><h3 id="text-properties文本属性">2.3 Text Properties(文本属性)</h3><ol type="1"><li><p>Word-Spacing:Defines an additional amount of space betweenwords.<br>定义单词之间的额外间距。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> <span class="hljs-selector-tag">EM</span> &#123; <span class="hljs-attribute">word-spacing</span>: <span class="hljs-number">0.4em</span>; &#125;&lt;!--表示所有嵌套在 &lt;<span class="hljs-selector-tag">p</span>&gt; 标签内的 &lt;<span class="hljs-selector-tag">em</span>&gt; 标签，即 &lt;<span class="hljs-selector-tag">p</span>&gt; 元素中的 &lt;<span class="hljs-selector-tag">em</span>&gt; 元素。<br>--&gt;<br><span class="hljs-selector-tag">P</span><span class="hljs-selector-class">.note</span> &#123; <span class="hljs-attribute">word-spacing</span>: -<span class="hljs-number">0.2em</span>; &#125;&lt;!--表示所有带有 class=&quot;note&quot; 的 &lt;<span class="hljs-selector-tag">p</span>&gt; 标签。--&gt;<br></code></pre></td></tr></table></figure></p></li><li><p>Letter-Spacing:Defines an additional amount of space betweencharacters.<br>定义字符之间的额外间距。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">0.1em</span>; &#125;<br><span class="hljs-selector-tag">P</span><span class="hljs-selector-class">.note</span> &#123; <span class="hljs-attribute">letter-spacing</span>: -<span class="hljs-number">0.1em</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Text-Decoration:Allows text to be decorated through one of fiveproperties:underline, overline, line-through, blink,none.<br>允许通过以下五个属性之一装饰文本：下划线（underline）、上划线（overline）、删除线（line-through）、闪烁（blink）、无（none）。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:link</span>, <span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:visited</span>, <span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:active</span> &#123; <span class="hljs-attribute">text-decoration</span>: none; &#125;<br>&lt;!--<br><span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:link</span>：表示未访问过的链接（普通状态）。<br><span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:visited</span>：表示用户已经访问过的链接。<br><span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:active</span>：表示用户正在点击的链接（激活状态）<br>&#123; <span class="hljs-attribute">text-decoration</span>: none; &#125;：表示移除这些链接的默认文本装饰（通常是下划线）。<br> 对于所有未访问过的链接（<span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:link</span>），已经访问过的链接（<span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:visited</span>），和正在点击的链接（<span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:active</span>），都不显示文本装饰（例如下划线）。<br> 换句话说，这行代码将移除所有状态下的超链接的默认下划线效果，使其看起来像普通文本<br> --&gt;<br></code></pre></td></tr></table></figure></p></li><li><p>Vertical-Align:Used to alter the vertical positioning of aninline element,relative to its parent element or to the element'sline.<br>用于相对于父元素或元素的行，改变内联元素的垂直位置<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">IMG</span><span class="hljs-selector-class">.middle</span> &#123; <span class="hljs-attribute">vertical-align</span>: middle; &#125;<br><span class="hljs-selector-tag">IMG</span> &#123; <span class="hljs-attribute">vertical-align</span>: <span class="hljs-number">50%</span>; &#125;<br><span class="hljs-selector-class">.exponent</span> &#123; <span class="hljs-attribute">vertical-align</span>: super; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Text-Transform:Allows for capitalizing the first letter of eachword (capitalize),capitalizing all letters of a word (uppercase), usingall small letters in each word(lowercase), and the initalvalue(none).<br>允许将每个单词的首字母大写（capitalize），将所有字母大写（uppercase），将每个单词的所有字母小写（lowercase），以及初始值（none）。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">text-transform</span>: uppercase &#125;<br><span class="hljs-selector-tag">H2</span> &#123; <span class="hljs-attribute">text-transform</span>: capitalize &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Text-Align:Used to justify text left, center, right, andjustify.<br>用于将文本左对齐、居中对齐、右对齐和两端对齐。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">text-align</span>: center; &#125;<br><span class="hljs-selector-tag">P</span><span class="hljs-selector-class">.newspaper</span> &#123; <span class="hljs-attribute">text-align</span>: justify; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Text-Indent:Used to specify the amount of indentation prior tothe first line of text.<br>用于指定文本第一行的缩进量。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">5em</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Line-Height:Used to control the spacing between baselines oftext.<br>用于控制文本基线之间的间距。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200%</span>; &#125;<br></code></pre></td></tr></table></figure></p></li></ol><h3 id="classification-properties分类属性">2.4 ClassificationProperties(分类属性)</h3><ol type="1"><li><p>List-Style-Type:Specifies the type of list-item marker,and isused if list-style-image is none or if image loading is turnedoff.<br>指定列表项标记的类型，如果 list-style-image 为 none或者图像加载被关闭时使用。<br>大白话：list-style-type属性用来指定列表项的标记类型。这个属性决定了显示在列表项前的标记的形状，比如实心圆、方块或是数字等。这个属性非常有用，因为它允许你改变列表标记的样式，使之更符合网页的设计需求。如果你没有指定list-style-image，或者指定的图像无法显示，那么就会使用 list-style-type的设置。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">LI</span><span class="hljs-selector-class">.square</span> &#123; <span class="hljs-attribute">list-style-type</span>: square; &#125;<br><span class="hljs-selector-tag">UL</span><span class="hljs-selector-class">.plain</span> &#123; <span class="hljs-attribute">list-style-type</span>: none; &#125;<br><span class="hljs-selector-tag">OL</span> &#123; <span class="hljs-attribute">list-style-type</span>: upper-alpha; &#125; <span class="hljs-comment">/* A B C D E 等 */</span><br><span class="hljs-selector-tag">OL</span> <span class="hljs-selector-tag">OL</span> &#123; <span class="hljs-attribute">list-style-type</span>: decimal; &#125; <span class="hljs-comment">/* 1 2 3 4 5 等 */</span><br><span class="hljs-selector-tag">OL</span> <span class="hljs-selector-tag">OL</span> <span class="hljs-selector-tag">OL</span> &#123; <span class="hljs-attribute">list-style-type</span>: lower-roman; &#125; <span class="hljs-comment">/* i ii iii iv v 等 */</span><br></code></pre></td></tr></table></figure></p></li><li><p>List-Style-Image:Specifies the image that will be used aslist-item marker when image loading is turned on, replacing the markerspecified in the list-style-typeproperty.<br>指定在图像加载开启时，将用作列表项标记的图像，替换list-style-type 属性中指定的标记。<br>list-style-image属性允许你将图像用作列表项的标记。这意味着你可以用自定义图像替换传统的列表标记，如圆点或数字。这在创建更具视觉吸引力的列表时非常有用。当图像加载被关闭时，会回退到list-style-type 指定的标记。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">UL</span><span class="hljs-selector-class">.check</span> &#123; <span class="hljs-attribute">list-style-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">/LI-markers/checkmark.gif</span>); &#125;<br><span class="hljs-selector-tag">UL</span> <span class="hljs-selector-tag">LI</span><span class="hljs-selector-class">.x</span> &#123; <span class="hljs-attribute">list-style-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">x.png</span>); &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>List-Style-Position:Determines where the marker is placed inregard to the list item. If the value inside is used, the lines willwrap under the marker instead of being indented. outside isdefault.<br>确定标记在列表项中的位置。如果值为inside，则行会在标记下方换行，而不是缩进。默认值为outside。<br>大白话：list-style-position属性定义列表标记的位置相对于列表内容的放置位置。它有两个可能的值：inside和 outside。默认值是outside，标记在内容的外部，并且列表项的文本与页面左侧对齐。如果设为inside，标记则位于内容的内部，列表文本将环绕标记对齐，这通常会导致文本的首行缩进不同于其他行<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">UL</span> &#123; <span class="hljs-attribute">list-style-position</span>: inside; &#125;<br></code></pre></td></tr></table></figure></p></li></ol><h3 id="box-properties盒子属性">2.5 Box Properties(盒子属性)</h3><figure><img src="/images/Box_Model.png" alt="盒子模型" /><figcaption aria-hidden="true">盒子模型</figcaption></figure><blockquote><p><strong>小贴士：</strong> Margin(外边距) -清除边框外的区域，外边距是透明的Margin(外边距) -清除边框外的区域，外边距是透明的 Border(边框) -围绕在内边距和内容外的边框 Padding(内边距) -清除内容周围的区域，内边距是透明的 Content(内容) -盒子的内容，显示文本和图像</p></blockquote><ol type="1"><li><p>Margin-Top：Sets the top margin of an element by specifying alength or a percentage.<br>通过指定长度或百分比设置元素的上边距。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5pt</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Margin-Right:Sets the right margin of an element by specifying alength or a percentage.<br>通过指定长度或百分比设置元素的右边距<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span><span class="hljs-selector-class">.narrow</span> &#123; <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">50%</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Margin-Bottom:sets the bottom margin of an element by specifyinga length or a percentage.<br>通过指定长度或百分比设置元素的下边<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">DT</span> &#123; <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">3em</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Margin-Left:Sets the left margin of an element by specifying alength or a percentage.<br>通过指定长度或百分比设置元素的左边距<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">ADDRESS</span> &#123; <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">50%</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Margin:Sets the margins of an element by specifying top, bottom,left and right margins -- all either specifying length orpercentage<br>通过指定上、下、左、右边距来设置元素的边距 -都是指定长度或百分比 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">margin</span>: <span class="hljs-number">5em</span>; &#125; <span class="hljs-comment">/* 所有边距 5em */</span><br><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">margin</span>: <span class="hljs-number">2em</span> <span class="hljs-number">4em</span>; &#125; <span class="hljs-comment">/* 上下边距 2em，左右边距 4em */</span><br><span class="hljs-selector-tag">DIV</span> &#123; <span class="hljs-attribute">margin</span>: <span class="hljs-number">1em</span> <span class="hljs-number">2em</span> <span class="hljs-number">3em</span> <span class="hljs-number">4em</span>; &#125; <br><span class="hljs-comment">/* 上边距 1em，右边距 2em，下边距 3em，左边距 4em */</span><br></code></pre></td></tr></table></figure></p></li><li><p>Padding-Top:Describes the amount of space between the top borderand the content of theselector.<br>描述选择器的顶部边框和内容之间的空间。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">20%</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Padding-Right:Describes the amount of space between the rightborder and the content of theselector.<br>描述选择器的右边框和内容之间的空间。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">20px</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Padding-Bottom:Describes the amount of space between the bottomborder and the content of theselector.<br>描述选择器的底部边框和内容之间的空间。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">5em</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Padding-Left:Describes the amount of space between the leftborder and the content of theselector.<br>描述选择器的左边框和内容之间的空间。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">15pt</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Padding:Shorthand for the padding-top, padding-right,padding-bottom,and padding-left properties.<br>内边距的简写属性，依次是上、右、下、左。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BLOCKQUOTE</span> &#123; <span class="hljs-attribute">padding</span>: <span class="hljs-number">2em</span> <span class="hljs-number">4em</span> <span class="hljs-number">5em</span> <span class="hljs-number">4em</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Top-Width:Used to specify the width of an element's topborder.<br>用于指定元素顶部边框的宽度。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123;<span class="hljs-attribute">border-top</span>:<span class="hljs-number">20%</span>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Right-Width:Used to specify the width of an element'sright border<br>用于指定元素右侧边框的宽度。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-right</span>: <span class="hljs-number">20%</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Bottom-Width:Used to specify the width of an element'sbottom border<br>用于指定元素底部边框的宽度 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">20%</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Left-Width:Used to specify the width of an element's leftborder.<br>用于指定元素左侧边框的宽度。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-left</span>: <span class="hljs-number">20%</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Width:Used to set the width of an element's border (eitherall borders, or specifying top border, right border, bottom border,leftborder).<br>用于设置元素的边框宽度（所有边框，或分别指定上、右、下、左边框）。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-width</span>: <span class="hljs-number">20%</span>; &#125;<br><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-width</span>: <span class="hljs-number">10px</span> <span class="hljs-number">5px</span> <span class="hljs-number">10px</span> <span class="hljs-number">5px</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Color:Used to set the color of an element'sborder.<br>用于设置元素边框的颜色 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#000000</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Style:Sets style of a border - none, dotted, dashed,solid, double.<br>设置边框样式 - 无、点状、虚线、实线、双线。</p></li><li><p>Border-Top:Sets the width, style, and color of an element's topborder<br>设置元素顶部边框的宽度、样式和颜色 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-top</span>: <span class="hljs-number">10px</span> red double; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Right:Sets the width, style, and color of an element'sright border.<br>设置元素右侧边框的宽度、样式和颜色。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-right</span>: <span class="hljs-number">10px</span> red double; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Bottom:Sets the width, style, and color of an element'sbottom border<br>设置元素底部边框的宽度、样式和颜色<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">10px</span> red double; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Left:Sets the width, style, and color of an element's leftborder<br>设置元素左侧边框的宽度、样式和颜色 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-left</span>: <span class="hljs-number">10px</span> red double; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border:Sets the width, style, and color of an element'sborder<br>设置元素边框的宽度、样式和颜色 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> red double; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Width:Each block-level or replaced element can be given a width,specified as a length, a percentage, or asauto.<br>每个块级或替换元素都可以指定一个宽度，长度、百分比或自动。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">15px</span>; &#125;<br><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">35%</span>; &#125;<br><span class="hljs-selector-class">.foo</span> &#123; <span class="hljs-attribute">width</span>: auto; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Height:Each block-level or replaced element can be given aheight,specified as a length or asauto.<br>每个块级或替换元素都可以指定一个高度，长度或自动。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">height</span>: <span class="hljs-number">15px</span>; &#125;<br><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">height</span>: <span class="hljs-number">35%</span>; &#125;<br><span class="hljs-selector-class">.foo</span> &#123; <span class="hljs-attribute">height</span>: auto; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Float:Allows text to wrap around an element (left, right,none).<br>允许文本环绕元素（左、右、无） <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">float</span>: left; &#125;<br><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">float</span>: right; &#125;<br><span class="hljs-selector-class">.foo</span> &#123; <span class="hljs-attribute">float</span>: none; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Clear:Specifies whether an element allows floating elements toits sides (left, right,none).<br>指定一个元素是否允许浮动元素在其侧边（左、右、无）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">clear</span>: left; &#125;<br><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">clear</span>: right; &#125;<br><span class="hljs-selector-class">.foo</span> &#123; <span class="hljs-attribute">clear</span>: none; &#125;<br></code></pre></td></tr></table></figure></p></li></ol><p>一个具体的例子： <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Box Model Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-comment">/*全局样式*/</span></span><br><span class="language-css">            <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;  <span class="hljs-comment">/* 设置盒子的宽度 */</span></span><br><span class="language-css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>; <span class="hljs-comment">/* 设置盒子的高度 */</span></span><br><span class="language-css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;  <span class="hljs-comment">/* 设置盒子外边距 */</span></span><br><span class="language-css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>; <span class="hljs-comment">/* 设置盒子内边距 */</span></span><br><span class="language-css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> solid black; <span class="hljs-comment">/* 设置盒子边框样式 */</span></span><br><span class="language-css">                <span class="hljs-attribute">float</span>: left; <span class="hljs-comment">/* 设置浮动，使盒子并排显示 */</span></span><br><span class="language-css">                <span class="hljs-attribute">box-sizing</span>: border-box; <span class="hljs-comment">/* 包括边框和内边距在内的总宽高计算 */</span></span><br><span class="language-css">            &#125;</span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-comment">/*针对第一个盒子的特定样式*/</span></span><br><span class="language-css">            <span class="hljs-selector-class">.box1</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">background-color</span>:lightblue;</span><br><span class="language-css">            &#125;</span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-comment">/*针对第二个盒子的特定样式*/</span></span><br><span class="language-css">            <span class="hljs-selector-class">.box2</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">background-color</span>:lightgreen;</span><br><span class="language-css">                <span class="hljs-attribute">clear</span>:both;<span class="hljs-comment">/* 清除浮动，使此盒子不并排在第一个盒子旁边 */</span></span><br><span class="language-css">            &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span>Box 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span>box 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></p><figure><img src="/images/boxExample.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><p>说明： * HTML 部分： *设定了一个基本的HTML结构，包含了标题和两个盒子元素。 * CSS 部分： *在<code>style</code>标签内定义了样式，包含： * 全局样式：为所有 div设置了宽度、高度、外边距、内边距、边框和浮动属性。 * .box1 和 .box2的特定样式，分别设置了背景颜色和清除浮动。</p><h2 id="javascript">3. JavaScript</h2><h3 id="syntax-and-structure">3.1 Syntax and Structure</h3><ul><li>Comments<ul><li>// Single line comment</li><li>/<em>Multi-line comment </em>/</li></ul></li><li>Statements<ul><li>Statements are the building blocks of a JavaScript program.</li><li>End with a semicolon;(optional but recommended)</li></ul></li></ul><h3 id="语法和结构">3.1 语法和结构</h3><ul><li>注释<ul><li>//单行注释</li><li>/<em>多行 注释</em>/</li></ul></li><li>语句<ul><li>语句是JavaScript程序的构建块</li><li>以分号结尾;(可选但建议使用)</li></ul></li></ul><h3 id="variables">3.2 Variables</h3><ul><li>Declaration var name;//Function-scoped, can be re-declared letage;//Block-scoped, cannot be re-declared within the same scope const PI= 3.14;// Block-scoped, constant value</li><li>Initialization<ul><li>var name = "John";</li><li>let age = 25;</li><li>const PI = 3.14;</li></ul></li></ul><h3 id="变量">3.2 变量</h3><ul><li>声明<ul><li>var name;//函数作用域，可以重新声明</li><li>let age;//块作用域，同一作用域不能重新声明</li><li>const PI = 3.14;//块作用域，常数值</li></ul></li><li>初始化<ul><li>var name = "John";</li><li>let age = 25;</li><li>const PI = 3.14;</li></ul></li></ul><h3 id="data-types">3.3 Data Types</h3><ul><li>Primitive Types<ul><li>Number: Represents both integer and floating-point numbers. Example:42, 3.14</li><li>String: Represents a sequence of characters. Example: "Hello",'World'</li><li>Boolean: Represents logical values. Example: true, false</li><li>Null: Represents the intentional absence of any object value.Example: null</li><li>Undefined: Represents an uninitialized variable. Example:undefined</li><li>Symbol: Represents a unique and immutable primitive value. Example:Symbol('description')</li><li>BigInt: Represents integers with arbitrary precision. Example:123n</li></ul></li></ul><h3 id="数据类型">3.3 数据类型</h3><ul><li>原始类型<ul><li>Number：表示整数和浮点数。例如：42, 3.14</li><li>String：表示字符序列。例如："Hello", 'World'</li><li>Boolean：表示逻辑值。例如：true, false</li><li>Null：表示有意的没有任何对象值。例如：null</li></ul></li><li>Undefined：表示未初始化的变量。例如：undefined<ul><li>undefined 在 JavaScript中代表未定义的值。当声明的变量未被初始化时，变量的默认值就是undefined。也就是说，这个变量已经被声明了，但还没有被赋予任何值。</li><li>undefined也可以作为函数没有返回值的标志。例如，当一个函数没有明确的返回语句时，它默认返回undefined。</li></ul></li><li>Symbol：表示唯一且不可变的原始值。例如：Symbol('description') *Symbol 是 ES6引入的一种新的原始数据类型，主要用于创建唯一的标识符。Symbols是不可变的且是唯一的，即使创建两个相同描述的Symbol，它们也是不相等的。这使得 Symbol成为添加属性到对象时不会出现属性名冲突的理想选择。</li><li>BigInt：表示任意精度的整数。例如：123n</li></ul><h3 id="operators">3.4 Operators</h3><ul><li>Arithmetic Operators:+ (Addition), - (Subtraction), *(Multiplication), / (Division), % (Modulus), ++ (Increment), --(Decrement)</li><li>Assignment Operators:= (Assignment), += (Addition assignment), -=(Subtraction assignment), *= (Multiplication assignment), /= (Divisionassignment), %= (Modulus assignment)</li><li>Comparison Operators:== (Equal to), === (Strict equal to), != (Notequal to), !== (Strict not equal to), &gt; (Greater than), &lt; (Lessthan), &gt;= (Greater than or equal to), &lt;= (Less than or equalto)</li><li>Logical Operators:&amp;&amp; (AND), || (OR), ! (NOT)</li></ul><h3 id="运算符">3.4 运算符</h3><ul><li>算术运算符：+(加法), - (减法), * (乘法), / (除法), % (取模), ++(自增), -- (自减)</li><li>赋值运算符：= (赋值), += (加法赋值), -= (减法赋值), *= (乘法赋值),/= (除法赋值), %= (取模赋值)</li><li>比较运算符：== (等于), === (严格等于), != (不等于), !==(严格不等于), &gt; (大于), &lt; (小于), &gt;= (大于或等于), &lt;=(小于或等于)</li><li>逻辑运算符：&amp;&amp;(与)， ||(或), !(非)</li></ul><h3 id="functions">3.5 Functions</h3><ul><li>Function Declaration<ul><li>Named functions that can be called anywhere in the scope<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li>Function Expression<ul><li>Functions assigned to variables.Can be anonymous.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> greet = <span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="函数">3.5 函数</h3><ul><li>函数声明<ul><li>可在作用域内任何位置调用的命名函数 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li>函数表达式<ul><li>分配给变量的函数。可以是匿名的 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> greet = <span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="代码示例">3.6 代码示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JavaScript Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;John&quot;</span>;<span class="hljs-comment">//旧式变量声明</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> num1 = <span class="hljs-number">10</span>;<span class="hljs-comment">//块级作用域变量</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> num2 = <span class="hljs-number">5</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> greetingText = <span class="hljs-string">&quot;Hello&quot;</span>;<span class="hljs-comment">//常量声明</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">//函数声明</span></span><br><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> greetingText + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-string">&quot;!&quot;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">//函数表达式</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> calculate = <span class="hljs-keyword">function</span>(<span class="hljs-params">operation</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (operation === <span class="hljs-string">&#x27;add&#x27;</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> num1 + num2;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (operation === <span class="hljs-string">&#x27;subtract&#x27;</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> num1 - num2;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (operation === <span class="hljs-string">&#x27;multiply&#x27;</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> num1 * num2;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (operation === <span class="hljs-string">&#x27;divide&#x27;</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> num1 / num2;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">greet</span>(name));<span class="hljs-comment">//输出问候语</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Addition: &quot;</span> + <span class="hljs-title function_">calculate</span>(<span class="hljs-string">&#x27;add&#x27;</span>));        <span class="hljs-comment">// 加法</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Subtraction: &quot;</span> + <span class="hljs-title function_">calculate</span>(<span class="hljs-string">&#x27;subtract&#x27;</span>)); <span class="hljs-comment">// 减法</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Multiplication: &quot;</span> + <span class="hljs-title function_">calculate</span>(<span class="hljs-string">&#x27;multiply&#x27;</span>)); <span class="hljs-comment">// 乘法</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Division: &quot;</span> + <span class="hljs-title function_">calculate</span>(<span class="hljs-string">&#x27;divide&#x27;</span>));     <span class="hljs-comment">// 除法</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">//演示null和undefined</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> undefinedVariable;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;An undefined variable: &quot;</span>, undefinedVariable);<span class="hljs-comment">// 显示 undefined</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;A null operation result: &quot;</span>, <span class="hljs-title function_">calculate</span>(<span class="hljs-string">&#x27;unknown&#x27;</span>)); <span class="hljs-comment">// 显示 null</span></span><br><span class="language-javascript">            </span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><em>代码解释</em>： <em>变量声明：使用了 var, let, 和 const来声明和初始化变量。</em> <em>函数声明和函数表达式：greet是一个函数声明，用于生成问候语。calculate是一个函数表达式，根据传入的操作类型执行数学运算。</em><em>算术和赋值运算符：在 calculate 函数中使用了加法 (+), 减法 (-), 乘法(</em>), 和除法 (/) 运算符。<em> </em>输出结果：使用 console.log输出问候语和各种数学运算的结果。<em></em>处理未定义和空值：演示了如何处理 undefined 和 null。*</p><blockquote><p><strong>小贴士：let和var的区别</strong> 1.作用域(scope)：var声明的变量具有函数作用域，这意味着在函数内部定义的变量在整个函数中都是可见的，即使是在声明之前。如果在函数外部使用var声明变量，该变量成为全局变量。而let声明的变量具有块级作用域，这意味着变量只在包含它的代码块（例如：循环、条件语句等）内有效。2.变量提升(hoisting):var变量会提升，这表示变量可以在声明之前被访问，此时变量的值是undefined。而let变量同样被提升到块的顶部，但在声明之前访问这些变量会导致一个暂时性死区（TemporalDead Zone, TDZ），即在声明之前访问变量会报错。 3.重复声明(Re-dedclaration):var允许在同一作用域内多次声明同一个变量，而let在相同的作用域或块级作用域内不能重复声明同一个变量，尝试这样做将抛出一个错误。</p></blockquote><blockquote><p>例子： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">var</span> varVariable = <span class="hljs-string">&quot;I am var&quot;</span>;<br>    <span class="hljs-keyword">let</span> letVariable = <span class="hljs-string">&quot;I am let&quot;</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(varVariable); <span class="hljs-comment">// 输出: &quot;I am var&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(letVariable); <span class="hljs-comment">// 报错: letVariable is not defined</span><br><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> x = <span class="hljs-number">20</span>; <span class="hljs-comment">// 有效</span><br><span class="hljs-keyword">let</span> y = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">let</span> y = <span class="hljs-number">20</span>; <span class="hljs-comment">// 报错: Identifier &#x27;y&#x27; has already been declared</span><br></code></pre></td></tr></table></figure></p></blockquote><h2 id="jquery">4. jQuery</h2><h3 id="introuduction介绍">4.1 Introuduction(介绍)</h3><ul><li>jQuery is a fast, small, and feature-rich JavaScript library.</li><li>jQuery 是一个快速、小巧且功能丰富的 JavaScript 库。</li><li>Simplifies HTML document traversal and manipulation, event handling,animation, and Ajax.</li><li>简化了 HTML 文档遍历和操作、事件处理、动画和 Ajax 的使用。</li></ul><h3 id="including-jquery">4.2 Including jQuery</h3><ol type="1"><li>CDN</li></ol><p>html Copy code <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jQuery.com/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p><ol start="2" type="1"><li>Local(本地)</li></ol><p>html Copy code <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;path/to/your/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h3 id="basic-syntax基本语法">4.3 Basic Syntax(基本语法)</h3><ul><li>The basic syntax is:$(selector).action()</li><li>基本语法为：<code>$(selector).action()</code></li><li>$ is a shorthand for jQuery</li><li><code>$</code> 是 jQuery 的简写。</li><li>Selector:Finds HTML elements</li><li>选择器（Selector）：查找 HTML 元素。</li><li>Action:Performs an action on the elements</li><li>操作（Action）：对元素执行操作。</li></ul><h3 id="document-ready-event文档就绪事件">4.4 Document ReadyEvent(文档就绪事件)</h3><ul><li>Ensures the DOM is fully loaded before running scripts.</li><li>确保 DOM 完全加载后再运行脚本。 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Code to execute when the DOM is ready// 当 DOM 准备好后执行的代码</span><br>&#125;);<br></code></pre></td></tr></table></figure></li><li>Shorthand:</li><li>简写形式： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Code to execute when the DOM is ready// 当 DOM 准备好后执行的代码</span><br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h3 id="selectors选择器">4.5 Selectors(选择器)</h3><ul><li>Element Selector(元素选择器) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>); <span class="hljs-comment">// Selects all &lt;p&gt; elements//选择所有 &lt;p&gt; 元素</span><br></code></pre></td></tr></table></figure></li><li>ID Selector(ID选择器) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myId&quot;</span>); <span class="hljs-comment">// Selects the element with id=&quot;myId&quot;//选择 id=&quot;myId&quot; 的元素</span><br></code></pre></td></tr></table></figure></li><li>Class Selector(类选择器) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;.myClass&quot;</span>); <span class="hljs-comment">// Selects all elements with class=&quot;myClass&quot;//选择所有 class=&quot;myClass&quot; 的元素</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="event-handling">4.6 Event Handling</h3><ul><li>Common Events<ul><li>click <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myButton&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-params"><span class="hljs-keyword">function</span></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Button clicked!&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li><li>Mouse Events <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">mouseenter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>);<br>&#125;);<br>$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">mouseleave</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li>Keyboard Events <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">keypress</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Key pressed!&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h3 id="事件处理">4.6 事件处理</h3><ul><li><p>常见事件</p><ul><li>点击事件 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myButton&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-params"><span class="hljs-keyword">function</span></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Button clicked!&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure> <em>解释</em></li></ul></li><li><p><code>$("#myButton")</code> 选择具有 <code>ID myButton</code>的元素，通常是一个按钮。</p></li><li><p><code>.click(function() &#123;...&#125;)</code>为这个按钮添加一个点击事件监听器。当用户点击这个按钮时，会执行函数内的代码。</p></li><li><p><code>alert("Button clicked!");</code>在用户点击按钮后显示一个警告对话框，内容为 "Button clicked!"。</p><ul><li>鼠标事件 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">mouseenter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>);<br>&#125;);<br>$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">mouseleave</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure> <em>解释</em></li></ul></li><li><p><code>$("p")</code> 选择所有 <code>&lt;p&gt;</code>元素。</p></li><li><p>.mouseenter(function() {...}) 为这些 <code>&lt;p&gt;</code>元素添加鼠标进入（鼠标悬停）事件监听器。当鼠标指针移入这些元素时，会执行函数内的代码。</p><ul><li>键盘事件 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">keypress</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Key pressed!&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure> <em>解释</em></li></ul></li><li><p><code>$("input")</code> 选择所有 <code>&lt;input&gt;</code>元素。</p></li><li><p><code>.keypress(function() &#123;...&#125;)</code> 为这些<code>&lt;input&gt;</code>元素添加键盘按键事件监听器。当用户在这些元素中按下任意键时，函数内的代码会被执行。</p></li><li><p><code>console.log("Key pressed!");</code> 在浏览器的控制台输出"Keypressed!"，这用于调试或向开发者提供反馈，用户看不到这个输出。</p></li></ul><h3 id="manipulating-html-and-css操作html和css">4.7 Manipulating HTMLand CSS(操作HTML和CSS)</h3><ul><li><p>HTML Content(HTML内容) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&lt;p&gt;New content&lt;/p&gt;&quot;</span>); <span class="hljs-comment">// Sets HTML content//设置HTML内容</span><br><span class="hljs-keyword">var</span> content = $(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">html</span>(); <span class="hljs-comment">// Gets HTML content//获取HTML内容</span><br></code></pre></td></tr></table></figure></p></li><li><p>Text Content(文本内容) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;New text content&quot;</span>); <span class="hljs-comment">// Sets text content//设置文本内容</span><br><span class="hljs-keyword">var</span> text = $(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">text</span>(); <span class="hljs-comment">// Gets text content//获取文本内容</span><br></code></pre></td></tr></table></figure></p></li><li><p>CSS <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>); <span class="hljs-comment">// Sets the color to blue//设置颜色为蓝色</span><br><span class="hljs-keyword">var</span> color = $(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>); <span class="hljs-comment">// Gets the color value//获取颜色值</span><br></code></pre></td></tr></table></figure></p></li></ul><h3 id="effects-and-animations效果和动画">4.8 Effects andAnimations(效果和动画)</h3><ul><li>Show/Hide(显示/隐藏) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">show</span>(); <span class="hljs-comment">// Shows the element//显示元素</span><br>$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">hide</span>(); <span class="hljs-comment">// Hides the element//隐藏元素</span><br></code></pre></td></tr></table></figure></li><li>Fade(淡入/淡出) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">fadeIn</span>(); <span class="hljs-comment">// Fades in the element//元素淡入</span><br>$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">fadeOut</span>(); <span class="hljs-comment">// Fades out the element//元素淡出</span><br></code></pre></td></tr></table></figure></li><li>Slide(滑动) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">slideDown</span>(); <span class="hljs-comment">// Slides down the element//元素向下滑动</span><br>$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">slideUp</span>(); <span class="hljs-comment">// Slides up the element//元素向上滑动</span><br></code></pre></td></tr></table></figure></li><li>Animate(动画) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">animate</span>(&#123;<br>  <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;250px&#x27;</span>,<br>  <span class="hljs-attr">opacity</span>: <span class="hljs-string">&#x27;0.5&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h3 id="chaininig">4.9 Chaininig</h3><ul><li>jQuery allows you to chain multiple methods.</li><li>jQuery 允许你链式调用多个方法。 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>).<span class="hljs-title function_">slideUp</span>().<span class="hljs-title function_">slideDown</span>();<br></code></pre></td></tr></table></figure></li></ul><h2 id="bootstrap">5 Bootstrap</h2><h3 id="bootstrap-basics-review-notes">5.1 Bootstrap Basics ReviewNotes</h3><h4 id="introduction介绍">5.1.1 Introduction(介绍)</h4><ul><li>Bootstrap is a popular front-end framework for developing responsiveand mobile-first websites.</li><li>Bootstrap是一个流行的前端框架，用于开发响应式和移动优先的网站</li><li>It includes HTML, CSS, and JavaScript components.</li><li>它包括HTML，CSS和JavaScript组件</li></ul><blockquote><p><strong>小贴士：</strong> * 响应式网站设计(Responsive WebDesign):响应式网站设计（RWD）是一种网页设计方法论，其目的是使网站能够对不同的屏幕尺寸和解析度做出响应并相应地调整其布局。这意味着网站可以在桌面显示器、笔记本电脑、平板电脑以及手机上提供一致的查看体验，无需为每种设备制作不同的版本* 移动优先设计(Mobile FirstDesign)：移动优先设计是一种策略，优先考虑移动设备的布局和设计，在此基础上扩展至桌面版视图。这种设计策略的主要原因是移动互联网使用已超过桌面互联网使用，许多设计师和开发者选择优先为小屏幕优化其网站。</p></blockquote><h4 id="including-bootstrap">5.1.2 Including Bootstrap</h4><ul><li>CDN<ul><li><p>CSS <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;link href=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.6.0/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br></code></pre></td></tr></table></figure></p></li><li><p>JS <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;</span>&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.6.0/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></p></li></ul></li><li>Local<ul><li>Download from getbootstrap.com and include the files in yourproject.</li></ul></li></ul><h4 id="basic-structure">5.1.3 Basic Structure</h4><ul><li>HTML Template(HTML模板) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>  &lt;meta charset=&quot;UTF-8&quot;&gt;<br>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>  &lt;title&gt;Bootstrap Example&lt;/title&gt;<br>  &lt;link href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.6.0/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>  &lt;h1&gt;Hello, world!&lt;/h1&gt;<br><br>  &lt;script src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;<br>  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js&quot;&gt;&lt;/script&gt;<br>  &lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.6.0/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="grid-system网格系统">5.1.4 Grid System(网格系统)</h4><ul><li>Bootstrap's grid system uses a series of containers, rows, andcolumns to layout and align content.</li><li>Bootstrap 的网格系统使用一系列容器、行和列来布局和对齐内容。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm&quot;</span>&gt;</span><br>      Column 1<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm&quot;</span>&gt;</span><br>      Column 2<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm&quot;</span>&gt;</span><br>      Column 3<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>Containers(容器)<ul><li><code>.container</code> for a responsive fixed-width container.</li><li><code>.container</code>用于响应式固定宽度容器</li><li><code>.container-fluid</code> for a full-width container, spanningthe entire width of the viewport.</li><li><code>.container-fluid</code>用于全宽容器，覆盖视口的整个宽度</li></ul></li><li>Columns(列)<ul><li><code>.col-*</code>用于响应式列(例如，<code>.col-6</code>为50%宽度)</li><li><code>.col-sm-*</code>,<code>.col-md-*</code>,<code>.col-lg-*</code>,<code>.col-xl-*</code>用于不同的断点</li></ul></li></ul><blockquote><p><strong>小贴士：理解断点(Breakpoints)</strong>在Bootstrap中，断点是媒体查询的预设尺寸，定义了在不同的屏幕宽度下布局应该如何变化。这些断点主要对应不同种类的设备屏幕尺寸，如手机、平板电脑、桌面显示器等。</p></blockquote><h4 id="typography排版">5.1.5 Typography(排版)</h4><ul><li>Headings(标题) <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h1. Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>h2. Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-comment">&lt;!-- and so on --&gt;</span><br></code></pre></td></tr></table></figure></li><li>Lead(引导段落) <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lead&quot;</span>&gt;</span>This is a lead paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>Text Utilities(文本工具) <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted&quot;</span>&gt;</span>Muted text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-primary&quot;</span>&gt;</span>Primary text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-success&quot;</span>&gt;</span>Success text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-info&quot;</span>&gt;</span>Info text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-warning&quot;</span>&gt;</span>Warning text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-danger&quot;</span>&gt;</span>Danger text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="components组件">5.1.6 Components(组件)</h4><ul><li>Buttons(按钮) <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Primary<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-secondary&quot;</span>&gt;</span>Secondary<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span>&gt;</span>Success<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="forms表单-1">5.1.7 Forms(表单)</h4><ul><li>Basic Form(基本表单) <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;</span>Email address<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span> <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">&quot;emailHelp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emailHelp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span>We&#x27;ll never share your email with anyone else.<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-input&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleCheck1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-label&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleCheck1&quot;</span>&gt;</span>Check me out<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="utilities实用工具类">5.1.8 Utilities(实用工具类)</h4><ul><li>Spacing(间距) <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span>&gt;</span>Margin bottom<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-3&quot;</span>&gt;</span>Padding<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>Text Alignment(文本对齐) <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-left&quot;</span>&gt;</span>Left aligned text<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>Center aligned text<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-right&quot;</span>&gt;</span>Right aligned text<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>Display Property <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-none&quot;</span>&gt;</span>Hidden<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-block&quot;</span>&gt;</span>Block<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-inline&quot;</span>&gt;</span>Inline<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="bootstrap4-cheatsheet">5.2 Bootstrap4 Cheatsheet</h3><h4 id="breakpoints断点">5.2.1 Breakpoints(断点)</h4><ul><li>Extra small ＜ 544px</li><li>Small ≥ 544px</li><li>Medium ≥ 768px</li><li>Large ≥ 992px</li><li>Extra Large ≥ 1200px</li></ul><h4 id="colors颜色">5.2.2 Colors(颜色)</h4><ul><li><code>.text-primary</code></li><li><code>.text-secondary</code></li><li><code>.text-success</code></li><li><code>.text-danger</code></li><li><code>.text-warning</code></li><li><code>.text-info</code></li><li><code>.text-light</code></li><li><code>.text-dark</code></li><li><code>.bg-primary</code></li><li><code>.bg-secondary</code></li><li><code>.bg-success</code></li><li><code>.bg-danger</code></li><li><code>.bg-warning</code></li><li><code>.bg-info</code></li><li><code>.bg-light</code></li><li><code>.bg-dark</code></li><li><code>.bg-white</code></li></ul><blockquote><p><strong>小贴士</strong> 文本颜色类 (text-<em>):<code>.text-primary</code>, <code>.text-secondary</code>,<code>.text-success</code>, <code>.text-danger</code>,<code>.text-warning</code>, <code>.text-info</code>,<code>.text-light</code>, 和 <code>.text-dark</code>分别将段落的文本颜色设置为主题的基本颜色、次要颜色、成功颜色（通常是绿色）、危险颜色（通常是红色）、警告颜色（通常是黄色）、信息颜色（通常是浅蓝色）、浅色（用于深色背景）、和深色（用于浅色背景）。背景颜色类 (bg-</em>): <code>.bg-primary</code>,<code>.bg-secondary</code>, <code>.bg-success</code>,<code>.bg-danger</code>, <code>.bg-warning</code>,<code>.bg-info</code>, <code>.bg-light</code>, <code>.bg-dark</code>, 和<code>.bg-white</code> 用于设置背景颜色，通常与 <code>text-white</code>或 <code>text-dark</code>搭配使用以保证足够的对比，从而确保文本可读性。</p></blockquote><p>一个具体的例子： <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Color Classes Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container mt-5&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-primary&quot;</span>&gt;</span>This is a primary text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-secondary&quot;</span>&gt;</span>This is a secondary text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-success&quot;</span>&gt;</span>This is a success text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-danger&quot;</span>&gt;</span>This is a danger text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-warning&quot;</span>&gt;</span>This is a warning text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-info&quot;</span>&gt;</span>This is an info text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-light bg-dark&quot;</span>&gt;</span>This is a light text on dark background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-dark bg-light&quot;</span>&gt;</span>This is a dark text on light background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-primary text-white p-2&quot;</span>&gt;</span>This is a text with primary background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-secondary text-white p-2&quot;</span>&gt;</span>This is a text with secondary background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-success text-white p-2&quot;</span>&gt;</span>This is a text with success background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-danger text-white p-2&quot;</span>&gt;</span>This is a text with danger background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-warning text-white p-2&quot;</span>&gt;</span>This is a text with warning background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-info text-white p-2&quot;</span>&gt;</span>This is a text with info background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-light text-dark p-2&quot;</span>&gt;</span>This is a text with light background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-dark text-white p-2&quot;</span>&gt;</span>This is a text with dark background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-white text-dark p-2&quot;</span>&gt;</span>This is a text with white background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p><img src="/images/bscolors1.png" alt="效果图1" /> <imgsrc="/images/bscolors2.png" alt="效果图2" /></p><h4 id="typography排版-1">5.2.3 Typography(排版)</h4><ul><li><code>.text-left</code>: Left aligned text(左对齐文本)</li><li><code>.text-center</code>: Center aligned text(居中对齐文本)</li><li><code>.text-right</code>: Right aligned text(右对齐文本)</li><li><code>.text-justify</code>： Justified text(两端对齐文本)</li><li><code>.text-nowrap</code>： No wrap text(禁止文本换行)</li><li><code>.text-lowercause</code>： Lowercasetext(将文本转换为小写)</li><li><code>.text-uppercase</code>： Uppercase text(将文本转换为大写)</li><li><code>.text-capitalize</code>： Capitalizedtext(将文本中每个单词首字母大写)</li><li><code>.lead</code>： Good for first paragraph ofarticl(适合用作文章的第一段)<ul><li>通常文本会大一些，用于引导读者进入文章内容</li></ul></li></ul><h4 id="lists列表-1">5.2.4 Lists(列表)</h4><ul><li><code>list-unstyled</code>:Removes default listmargin(移除默认的列表外边距)<ul><li>通常用于移除 <code>&lt;ul&gt;</code> 或 <code>&lt;ol&gt;</code>的默认列表样式，如前面的项目符号或数字。</li></ul></li><li><code>.dl-horizontal</code>:Makes list items twocolumns(将定义列表<code>&lt;dl&gt;</code>的项显示为两列)<ul><li>通常用于使术语和描述并排显示，而不是上下排列。</li></ul></li><li><code>.list-inline</code>:Makes list itemsinline(使列表项<code>&lt;li&gt;</code>呈行内（inline）显示)<ul><li>可以将所有列表项放在一行显示，而不是默认的垂直堆叠。</li></ul></li><li><code>.list-inline-item</code>:Added to eachli(应添加到每个行内列表项<code>&lt;li&gt;</code>上)<ul><li>当使用 <code>.list-inline</code>时，此类确保列表项正确地显示在同一行内。</li></ul></li></ul><p>Example</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;social-icons list-inline&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline-item&quot;</span>&gt;</span>item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一个具体的例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>List Styles Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container mt-5&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 无样式列表 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-unstyled&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Apple<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Banana<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Cherry<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 横向定义列表 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dt</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>Black hot drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dt</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>White cold drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 行内列表 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline-item&quot;</span>&gt;</span>Red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline-item&quot;</span>&gt;</span>Green<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline-item&quot;</span>&gt;</span>Blue<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/bslist.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><p><strong>说明：</strong> 1. 无样式列表 (<code>list-unstyled</code>):这个无序列表 <code>&lt;ul&gt;</code> 使用 <code>.list-unstyled</code>类来移除默认的内边距和列表项目符号，使得列表项纯粹呈现内容。 2.横向定义列表 (<code>dl-horizontal</code>): 在Bootstrap4中，dl-horizontal 类已被移除，取而代之的是使用带 .row 类的<code>&lt;dl&gt;</code> 和 .col-sm-* 类的 <code>&lt;dt&gt;</code> 和<code>&lt;dd&gt;</code>。这种方式使定义列表的术语<code>&lt;dt&gt;</code> 和描述 <code>&lt;dd&gt;</code>并排显示，形成两列布局。</p><h4 id="blockquote">5.2.5 Blockquote</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blockquote&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;m-b-0&quot;</span>&gt;</span>Lorem ipsum dolor sit <br>amet, consectetur adipiscing elit. Integer <br>posuere erat a ante.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="headings">5.2.6 Headings</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h1. Bootstrap heading <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>Secondary <br>text<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>Paragraph that looks like <br>heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="images">5.2.7 Images</h4><ul><li><code>.img-fluid</code>:Make an image responsive(使图像响应式)</li><li><code>.rounded</code>:Adds rounded corners toimage(为图像添加圆角)</li><li><code>.rounded-circle</code>:Crops image to becircle(将图像裁剪为圆形)</li><li><code>.img-thumbnail</code>:Adds rounded corner +border(为图像添加圆角和边框)</li></ul><h4 id="floats浮动">5.2.8 Floats(浮动)</h4><ul><li><code>.float-left</code>:Floats items left(将元素浮动到左侧)</li><li><code>.float-right</code>:Floats items right(将元素浮动到右侧)</li><li><code>.float-none</code>:Removes float(移除元素的浮动属性)<ul><li>这个类用于取消元素的任何浮动效果，使元素回归到正常的文档流中。</li></ul></li><li><code>.float-*-*</code>:Add breakpoints if needed( 在断点处添加浮动)<ul><li>这种模式的类用于响应式设计，允许在特定的屏幕尺寸断点上应用浮动属性</li><li>例如，<code>.float-md-left</code>表示在中等尺寸的屏幕上将元素浮动到左侧。</li></ul></li></ul><h4 id="starter-template启动模板">5.2.9 Starter Template(启动模板)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- Required meta tags --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- Bootstrap CSS --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/</span></span><br><span class="hljs-string"><span class="hljs-tag">bootstrap.min.css&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Main CSS --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/main.css&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span>Left Column<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span>Right Column<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- jQuery first, then Tether, then Bootstrap JS. --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.2.1.slim.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.</span></span><br><span class="hljs-string"><span class="hljs-tag">js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.</span></span><br><span class="hljs-string"><span class="hljs-tag">js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- Main JS --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="one-column-centered-grid一列居中网格">5.2.10 One Column CenteredGrid(一列居中网格)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row justify-content-center&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="two-column-grid两列网格">5.2.11 Two Column Grid(两列网格)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="three-column-grid三列网格">5.2.12 Three ColumnGrid(三列网格)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="four-column-grid四列网格">5.2.13 Four Column Grid(四列网格)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="forms表格">5.2.14 Forms(表格)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;</span>Email address<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span> <span class="hljs-attr">aria</span><span class="hljs-attr">describedby</span>=<span class="hljs-string">&quot;emailHelp&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter email&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emailHelp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span>We&#x27;ll never share your email with <br>anyone else.<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> Check me out<br> <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="buttons按钮">5.2.15 Buttons(按钮)</h4><ul><li><code>.btn</code>:Needs to be added to all buttons because it addspadding andmargin(需要添加到所有按钮上，因为它增加了内边距和外边距)</li><li><code>.btn-*</code>: primary, secondary, success, danger, warning,info, light, dark, link(表示按钮的不同样式，其中 * 可以是primary、secondary、success、danger、warning、info、light、dark、link。)</li><li><code>.btn-outline-*</code>:primary, secondary, success, danger,warning, info, light, dark, link(边框样式按钮,其中 * 可以是primary、secondary、success、danger、warning、info、light、dark、link)</li><li><code>.btn-lg</code>:Large buttom(大号按钮)</li><li><code>.btn-sm</code>:Smaller than default button(小号按钮)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-secondary&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="tables表">5.2.16 Tables(表)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">thead</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;thead-default&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>thead-default<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Nina<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">thead</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;thead-inverse&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>thead-inverse<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Nina<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="代码解析">6.代码解析</h2><h3 id="webpage1">6.1 webpage1</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>webpage 1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> Photography<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;pic1.jpg&quot;</span>   <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;IMAGE NO AVAILABLE&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sound1.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">video</span>  <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;350&quot;</span>   <span class="hljs-attr">controls</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;Video1.mp4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.beautifulworld.com/wp-content/uploads/2017/07/lake-dal-shikava-boat.jpg.webp&quot;</span>&gt;</span>   Click Here to Download   <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;webpage2.html&quot;</span>&gt;</span> Page 2 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/webpage1.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><h3 id="webpage2">6.2 webpage2</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.center</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>Red and center-aligned heading<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>Red and center-aligned paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/webpage2.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><h3 id="webpage3">6.3 webpage3</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">         <span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-color</span>: linen;&#125;</span><br><span class="language-css">         <span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">color</span>:red;<span class="hljs-attribute">margin-left</span>:<span class="hljs-number">40px</span>;&#125;</span><br><span class="language-css">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>This is a heading<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/webpage3.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><h3 id="inlinecss">6.4 inLINECSS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>InLine CSS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red; text-align: center;&quot;</span>&gt;</span> Welcome to the Hainan University<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: green; font-size: 100px; text-align: center;&quot;</span>&gt;</span> Welcome to Haikou<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue; font-style: italic;&quot;</span>&gt;</span> Department of Computer Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue; font-style: italic;&quot;</span>&gt;</span> Department of Chemical Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue; font-style: italic;&quot;</span>&gt;</span> Department of Bio Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue; font-style: italic;&quot;</span>&gt;</span> Department of Material Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="external-css">6.5 External CSS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> External CSS <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;cssfile1.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> &gt;</span> Welcome to the Hainan University<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> Welcome to Haikou<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span> Department of Computer Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span> Department of Chemical Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;b&quot;</span> &gt;</span> Department of Bio Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span> Department of Material Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span> Department of Chemical Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span> Department of Bio Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span> Department of Material Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/enternalCSS.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><h3 id="internalcss">6.6 InternalCSS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>InLine CSS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">               <span class="hljs-selector-tag">h1</span>&#123; <span class="hljs-attribute">text-align</span>: center; <span class="hljs-attribute">color</span>:red; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30</span>; <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Franklin Gothic Medium&#x27;</span>, <span class="hljs-string">&#x27;Arial Narrow&#x27;</span>, Arial, sans-serif;&#125;</span><br><span class="language-css">               <span class="hljs-selector-tag">h2</span>&#123; <span class="hljs-attribute">color</span>: green; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>; <span class="hljs-attribute">text-align</span>: center;&#125;</span><br><span class="language-css">               <span class="hljs-selector-tag">h3</span>&#123;<span class="hljs-attribute">color</span>: blue; <span class="hljs-attribute">font-style</span>: italic;&#125;</span><br><span class="language-css">               <span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">background-color</span>:bisque&#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> &gt;</span> Welcome to the Hainan University<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> &gt;</span> Welcome to Haikou<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Computer Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Chemical Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Bio Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Material Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Chemical Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Bio Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Material Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/internal.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><h3 id="cssfontproperties">6.7 CssFontProperties</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">          <span class="hljs-selector-tag">h1</span></span><br><span class="language-css">          &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>:<span class="hljs-string">&#x27;Times New Roman&#x27;</span>, Times, serif;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-weight</span>:<span class="hljs-number">100</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-style</span>:normal;</span><br><span class="language-css">           <span class="hljs-comment">/*/ font-variant:small-caps;  */</span></span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>:center;</span><br><span class="language-css">            <span class="hljs-attribute">letter-spacing</span>: .<span class="hljs-number">25em</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: underline;</span><br><span class="language-css">            <span class="hljs-attribute">word-spacing</span>: .<span class="hljs-number">50em</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-transform</span>: lowercase;</span><br><span class="language-css">            <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">35%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>:antiquewhite;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">Kmr.jpg</span>);</span><br><span class="language-css">            <span class="hljs-attribute">background-position</span>: left;</span><br><span class="language-css">            <span class="hljs-attribute">background-size</span>:cover;</span><br><span class="language-css">          &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Distinctio ipsum, recusandae repellendus rem laboriosam ad porro nobis ratione incidunt consequatur aliquam rerum. Aliquam quisquam animi aspernatur tempore at, ut deleniti!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/CssFontProperties.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><h3 id="cssselectors">6.8 CssSelectors</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;<span class="hljs-attribute">color</span>:blueviolet&#125;   <span class="hljs-comment">/* Universal selector */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.c1</span> &#123;<span class="hljs-attribute">color</span>:blueviolet&#125; <span class="hljs-comment">/* Class Selector  */</span></span><br><span class="language-css">        <span class="hljs-selector-id">#a1</span> &#123;<span class="hljs-attribute">color</span>:blueviolet&#125; <span class="hljs-comment">/* Id Selector */</span></span><br><span class="language-css">       <span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">color</span>:blueviolet&#125;   <span class="hljs-comment">/* Tag Selector*/</span></span><br><span class="language-css">       <span class="hljs-selector-tag">h1</span>,<span class="hljs-selector-tag">h2</span>&#123;<span class="hljs-attribute">color</span>:blueviolet&#125; <span class="hljs-comment">/* Group Selector*/</span> </span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a1&quot;</span> &gt;</span>Hello World! <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a1&quot;</span> &gt;</span>Hello World! <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      <br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span> Web Front-end Class<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Eum quod, provident quam ipsum ratione laudantium et reiciendis. Repudiandae laborum delectus vel consequatur sequi dignissimos unde beatae cupiditate, autem sit nulla.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/CssSelectors.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><h3 id="cssproperties">6.9 Cssproperties</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">h1</span>&#123;</span><br><span class="language-css">     <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">font-family</span>:<span class="hljs-string">&#x27;Trebuchet MS&#x27;</span>, <span class="hljs-string">&#x27;Lucida Sans Unicode&#x27;</span>, <span class="hljs-string">&#x27;Lucida Grande&#x27;</span>, <span class="hljs-string">&#x27;Lucida Sans&#x27;</span>, Arial, sans-serif;</span><br><span class="language-css">     <span class="hljs-attribute">font-weight</span>:lighter;</span><br><span class="language-css">     <span class="hljs-attribute">font-style</span>: oblique;</span><br><span class="language-css">     <span class="hljs-attribute">font-variant</span>:small-caps;</span><br><span class="language-css">     </span><br><span class="language-css">     <span class="hljs-attribute">text-align</span>: right;</span><br><span class="language-css">     <span class="hljs-attribute">text-decoration</span>:underline;</span><br><span class="language-css">     <span class="hljs-attribute">letter-spacing</span>: .<span class="hljs-number">20em</span>;</span><br><span class="language-css">     <span class="hljs-attribute">word-spacing</span>: .<span class="hljs-number">50em</span>;</span><br><span class="language-css">     <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200%</span>;</span><br><span class="language-css">     </span><br><span class="language-css">     <span class="hljs-comment">/*background-image: url(pic1.jpg);*/</span></span><br><span class="language-css">     <span class="hljs-attribute">background-color</span>:antiquewhite;</span><br><span class="language-css">     <span class="hljs-attribute">background-position</span>: right;</span><br><span class="language-css"></span><br><span class="language-css">     <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">     <span class="hljs-attribute">border-style</span>: dashed;</span><br><span class="language-css">     <span class="hljs-attribute">border-width</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">border-color</span>: red; </span><br><span class="language-css">     <span class="hljs-attribute">border-top-color</span>: blueviolet;</span><br><span class="language-css">     <span class="hljs-attribute">border-top-width</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">border-left-style</span>: dotted;</span><br><span class="language-css">     <span class="hljs-attribute">border-left-color</span>: green;</span><br><span class="language-css">     <span class="hljs-attribute">border-left-width</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eius, temporibus! Reiciendis deserunt facilis accusantium quasi sapiente similique velit, facere nulla explicabo, vel iste quas? Autem recusandae mollitia incidunt iusto maiores!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![效果图] (/images/Cssproperties.png)</p><h3 id="div">6.10 DIV</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#d1</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: antiquewhite;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Franklin Gothic Medium&#x27;</span>, <span class="hljs-string">&#x27;Arial Narrow&#x27;</span>, Arial, sans-serif;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">     <span class="hljs-selector-id">#d2</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Gill Sans&#x27;</span>, <span class="hljs-string">&#x27;Gill Sans MT&#x27;</span>, Calibri, <span class="hljs-string">&#x27;Trebuchet MS&#x27;</span>, sans-serif;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span> <br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">H1</span>&gt;</span>Section 1<span class="hljs-tag">&lt;/<span class="hljs-name">H1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Hello This is example of div tag<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ipsam animi vitae alias doloribus reprehenderit debitis maiores aut optio velit officiis, asperiores totam, sequi necessitatibus magni numquam corporis nesciunt quisquam voluptatem.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">H1</span>&gt;</span>Section 2<span class="hljs-tag">&lt;/<span class="hljs-name">H1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Hello This is example of div tag<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ipsam animi vitae alias doloribus reprehenderit debitis maiores aut optio velit officiis, asperiores totam, sequi necessitatibus magni numquam corporis nesciunt quisquam voluptatem.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/DIV.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure>]]></content>
    
    
    
    <tags>
      
      <tag>web前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用模板</title>
    <link href="/2024/06/11/dataStructureTemplate/"/>
    <url>/2024/06/11/dataStructureTemplate/</url>
    
    <content type="html"><![CDATA[<h2 id="基础算法">1. 基础算法</h2><figure><img src="/images/基础算法知识框架.jpg" alt="基础算法知识框架" /><figcaption aria-hidden="true">基础算法知识框架</figcaption></figure><h3 id="快速排序">1.1 快速排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l &gt;= r) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = q[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span>(i &lt; j)<br>    &#123;<br>        <span class="hljs-keyword">do</span> i ++; <span class="hljs-keyword">while</span>(q[i] &lt; x);<br>        <span class="hljs-keyword">do</span> j --; <span class="hljs-keyword">while</span>(q[j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(q[i], q[j]);<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(q, l, j), <span class="hljs-built_in">quick_sort</span>(q, j + <span class="hljs-number">1</span>, r);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="归并排序">1.2 归并排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">merge_sort</span>(q, l, mid);<br>    <span class="hljs-built_in">merge_sort</span>(q, mid + <span class="hljs-number">1</span>, r);<br><br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, i = l, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class="hljs-keyword">if</span> (q[i] &lt;= q[j]) tmp[k++] = q[i++];<br>        <span class="hljs-keyword">else</span> tmp[k++] = q[j++];<br><br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k++] = q[i++];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) tmp[k++] = q[j++];<br><br>    <span class="hljs-keyword">for</span>(i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i++, j++) q[i] = tmp[j];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小贴士</strong> <br></p><blockquote><p>快速排序和归并排序时间复杂度都是<spanclass="math inline">\(O(nlogn)\)</span><br> 二者的选择：<br> 1.快速排序：大规模数据<br> 2.归并排序：对于稳定性要求高，比如涉及多关键字排序（成绩排序）或者涉及数据记录的题目；链表排序<br>在大多数算法比赛中不需要考虑稳定性，而快速排序大部分情况下平均表现优异</p></blockquote><h3 id="整数二分">1.3 整数二分</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<span class="hljs-comment">/*...*/</span>&#125;<br><br><span class="hljs-comment">//当区间[l, r]被划分为[l, mid]和[mid + 1, r]时使用</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bsearch_1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><br><span class="hljs-comment">//当区间[l, r]被划分为[l, mid - 1]和[mid, r]时使用</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bsearch_2</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r) <br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid  - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小贴士</strong><br></p><blockquote><ol type="1"><li><code>bsearch_1</code>特点：区间划分为<code>[l, mid]</code>和<code>[mid + 1, r]</code><br>当<code>check(mid)</code>为真时，将右边界收缩到<code>mid</code>，即<code>r = mid</code><br>当<code>check(mid)</code>为假时，将左边界移到<code>mid + 1</code>即<code>l = mid + 1</code><br>这种方式确保了最终收敛时，l 和 r 会指向满足条件的最左边的位置<br>使用场景：适用于需要找到满足<code>check</code>条件的第一个位置，如有序数组中寻找第一个大于等于某个值的位置<br></li><li><code>bsearch_2</code>特点：区间划分为<code>[l, mid - 1]</code>和<code>[mid, r]</code><br>当<code>check(mid)</code>为真时，将左边界收缩到<code>mid</code>，即<code>l = mid</code><br>当<code>check(mid)</code>为假时，将右边界移到<code>mid - 1</code>即<code>r = mid - 1</code><br>这种方式确保了最终收敛时，l 和 r 会指向满足条件的最右边的位置<br>使用场景：适用于需要找到满足<code>check</code>条件的最后一个位置，如有序数组中寻找最后一个小于等于某个值的位置</li></ol></blockquote><h3 id="浮点数二分算法">1.4 浮点数二分算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> </span>&#123;<span class="hljs-comment">/*...*/</span>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">bsearch_3</span><span class="hljs-params">(<span class="hljs-type">double</span> l, <span class="hljs-type">double</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-6</span>;<br>    <span class="hljs-keyword">while</span> (r - l &gt; eps)<br>    &#123;<br>        <span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高精度加法">1.5 高精度加法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>() || i &lt; B.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; A.<span class="hljs-built_in">size</span>()) t += A[i];<br>        <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t += B[i];<br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (t) C.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol type="1"><li>将两个数字的每一位存入数组，低位在前，高位在后。</li><li>从最低位开始相加，若和大于等于 10，处理进位。</li><li>将每位的和存入结果数组。</li><li>最后输出结果数组。</li></ol></blockquote><h3 id="高精度减法">1.6 高精度减法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        t = A[i] - t;<br>        <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t -= B[i];<br>        C.<span class="hljs-built_in">push_back</span>((t + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (t &lt; <span class="hljs-number">0</span>) t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C; <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol type="1"><li>将两个数字的每一位存入数组，低位在前，高位在后。</li><li>从最低位开始逐位相减，若差小于 0，处理借位。</li><li>将每位的差存入结果数组</li><li>去掉结果数组前导零</li><li>最后输出结果数组</li></ol></blockquote><h3 id="高精度乘低精度">1.7 高精度乘低精度</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// C = A * b, A &gt;= 0, b &gt;= 0</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.size || t; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; A.<span class="hljs-built_in">size</span>()) t += A[i] * b;<br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (C.size &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br><br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高精度除以低精度">1.8 高精度除以低精度</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// A / b = C ... r, A &gt;= 0, b &gt; 0</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">div</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> &amp;r)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        r = r * <span class="hljs-number">10</span> + A[i];<br>        C.<span class="hljs-built_in">push_back</span>(r / b);<br>        r %= b;<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(C.<span class="hljs-built_in">begin</span>(), C.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.back == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="一维前缀和">1.9 一维前缀和</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TXT">S[i] = a[1] + a[2] + ... + a[i]<br>a[l] + ... + a[r] = S[r] - S[l - 1]<br></code></pre></td></tr></table></figure><h3 id="二维前缀和">1.10 二维前缀和</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TXT">S[i, j] = 第i行j列格子左上部分所有元素的和<br>以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：<br>S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]<br></code></pre></td></tr></table></figure><h3 id="一维差分">1.11 一维差分</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs TXT">给区间[l, r]中的每个数加上c：B[l] += c, B[r + 1] -= c<br></code></pre></td></tr></table></figure><p><strong>小贴士</strong></p><blockquote><p>差分原理： 1. 假设我们有一个原数组 <spanclass="math inline">\(a\)</span>，差分数组 <spanclass="math inline">\(b\)</span> 定义如下：<br /><span class="math inline">\(b[i] = a[i] - a[i - 1]\)</span> （其中 <spanclass="math inline">\(a[0]\)</span> 为 0） 2. 假设原数组 <spanclass="math inline">\(a = [2, 3, 5, 8]\)</span>，我们希望对区间 [2, 4]的每个元素增加 3<br />原数组 <span class="math inline">\(a = [2, 3, 5, 8]\)</span><br /><span class="math inline">\(b[1] = a[1] - a[0] = 2\)</span><br /><span class="math inline">\(b[2] = a[2] - a[1] = 1\)</span><br /><span class="math inline">\(b[3] = a[3] - a[2] = 2\)</span><br /><span class="math inline">\(b[4] = a[4] - a[3] = 3\)</span> 3.更新差分数组：<br /><span class="math inline">\(b[2] += 3\)</span><br /><span class="math inline">\(b[5] -= 3\)</span>（假设 <spanclass="math inline">\(b[5]\)</span> 初始为 0）<br />更新后 <span class="math inline">\(b = [2, 4, 2, 3, -3]\)</span> 4.通过前缀和恢复原数组：<br /><span class="math inline">\(a[1] = b[1] + a[0] = 2\)</span><br /><span class="math inline">\(a[2] = b[2] + a[1] = 6\)</span><br /><span class="math inline">\(a[3] = b[3] + a[2] = 9\)</span><br /><span class="math inline">\(a[4] = b[4] + a[3] = 11\)</span></p></blockquote><h3 id="二维差分">1.12 二维差分</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TXT">给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：<br>S[x1, y1] += c, S[x2 + 1, y1] -= c, S[x1, y2 + 1] -= c, S[x2 + 1, y2 + 1] += c<br></code></pre></td></tr></table></figure><p><strong>小贴士</strong></p><blockquote><p>差分矩阵原理：<br />1. 假设我们有一个二维矩阵<spanclass="math inline">\(a\)</span>,差分矩阵<spanclass="math inline">\(b\)</span>的定义如下：<br /><span class="math inline">\(b[i][j] = a[i][j] - a[i - 1][j] - a[i][j -1] + a[i - 1][j - 1]\)</span><br />2. 更新差分矩阵：<br> 假设我们要对子矩形区域<spanclass="math inline">\([x1][y1]\)</span>到<spanclass="math inline">\(x[2][y2]\)</span>进行加c操作<br> <spanclass="math inline">\(b[x1][y1] += c\)</span><br> <spanclass="math inline">\(b[x2 + 1][y1] -= c\)</span><br> <spanclass="math inline">\(b[x1][y2 + 1] -= c\)</span><br> <spanclass="math inline">\(b[x2 + 1][y2 + 1] += c\)</span><br> 3.通过前缀和恢复原矩阵：<br> <span class="math inline">\(a[i][j] = b[i][j]+ a[i - 1][j] + a[i][j - 1] - a[i - 1][j - 1]\)</span><br>具体例子：<br> 1. 假设一个二维数组 a = {<br> {1, 2, 3},<br> {4, 5,6},<br> {7, 8, 9} };<br> 差分矩阵为 b = {<br> {1, 1, 1},<br> {3, 0,0},<br> {3, 0, 0}<br> };<br> 2. 对子矩阵区域[1, 1]到[2, 2]进行更新<br><span class="math inline">\(b[1][1] += 10\)</span><br> <spanclass="math inline">\(b[3][1] -= 10\)</span><br> <spanclass="math inline">\(b[1][3] -= 10\)</span><br> <spanclass="math inline">\(b[3][3] += 10\)</span><br> 3. 恢复原矩阵<br> <spanclass="math inline">\(a[i][j] = b[i][j] + a[i - 1][j] + a[i][j - 1] -a[i - 1][j - 1]\)</span></p></blockquote><h3 id="位运算">1.13 位运算</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TXT">求整数n的第k位二进制数字: n &gt;&gt; k &amp; 1(从右边开始计数)<br>返回n的最后一位1：lowbit(n) = n &amp; -n<br></code></pre></td></tr></table></figure><p><strong>理解<code>n &amp; -n</code></strong><br></p><blockquote><p>假设<spanclass="math inline">\(n\)</span>是整数12，其二进制表示如下：<br> 1.正数二进制为<code>1100</code><br> 2. <spanclass="math inline">\(-n\)</span>的二进制表示通过取反并加1，故取反得到<code>0011</code>,加1得到<code>0100</code><br> 3. 故有<span class="math inline">\(n \&amp; -n= 0100\)</span> 4. 则n中最低位的1所对应的值为4</p></blockquote><p><strong>什么是最低位的 1 所对应的值？</strong></p><blockquote><p>具体来说，它是二进制表示中从右到左第一个 1的<em>权重</em>(二进制数字每一位的权重是2的幂次，例如，最低位（最右边）的权重是<spanclass="math inline">\(2^0 = 1\)</span>,第二位的权重是<spanclass="math inline">\(2^1 = 2\)</span>,第三位的权重是<spanclass="math inline">\(2^2 = 4\)</span>)。示例：整数12，二进制为<code>1100</code>,最低为的1是从右到左的第三位，对应的值，即这个最低位的1的权重是<spanclass="math inline">\(2^2 = 4\)</span></p></blockquote><h3 id="双指针算法">1.14 双指针算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (j &lt; i &amp;&amp; <span class="hljs-built_in">check</span>(i, j)) j ++ ;<br><br>    <span class="hljs-comment">// 具体问题的逻辑</span><br>&#125;<br><span class="hljs-comment">/*常见问题分类：</span><br><span class="hljs-comment">    (1) 对于一个序列，用两个指针维护一段区间</span><br><span class="hljs-comment">    (2) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作*/</span><br></code></pre></td></tr></table></figure><h3 id="离散化">1.15 离散化</h3><p><strong>离散化</strong>是将连续数据转换为离散数据的过程</p><ol type="1"><li>使用场景：</li></ol><ul><li>连续数据的范围非常大，而离散化可以将数据映射到较小的范围</li></ul><ol start="2" type="1"><li>基本步骤<ol type="1"><li>收集数据：首先收集所有需要离散化的数值，通常存储在一个数组或列表中</li><li>排序和去重：将收集到的数据进行排序，并去除重复值，得到一个有序且唯一的数值列表</li><li>建立映射：建立原始数值到离散值的映射关系，通常使用哈希表或字典来实现</li><li>应用映射：将原始数据根据建立的映射关系转换为离散值</li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs CPP">vector&lt;<span class="hljs-type">int</span>&gt; alls; <span class="hljs-comment">// 存储所有待离散化的值</span><br><span class="hljs-built_in">sort</span>(alls.<span class="hljs-built_in">begin</span>(), alls.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 将所有值排序</span><br>alls.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(alls.<span class="hljs-built_in">begin</span>(), alls.<span class="hljs-built_in">end</span>()), alls.<span class="hljs-built_in">end</span>());   <span class="hljs-comment">// 去掉重复元素</span><br><br><span class="hljs-comment">// 二分求出x对应的离散化的值</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 找到第一个大于等于x的位置</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = alls.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (alls[mid] &gt;= x) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span>; <span class="hljs-comment">// 映射到1, 2, ...n</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="区间合并">1.16 区间合并</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-comment">// 将所有存在交集的区间合并</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;PII&gt; &amp;segs)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;PII&gt; res;<br><br>    <span class="hljs-built_in">sort</span>(segs.<span class="hljs-built_in">begin</span>(), segs.<span class="hljs-built_in">end</span>());<br><br>    <span class="hljs-type">int</span> st = <span class="hljs-number">-2e9</span>, ed = <span class="hljs-number">-2e9</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> seg : segs)<br>        <span class="hljs-keyword">if</span> (ed &lt; seg.first)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, ed&#125;);<br>            st = seg.first, ed = seg.second;<br>        &#125;<br>        <span class="hljs-keyword">else</span> ed = <span class="hljs-built_in">max</span>(ed, seg.second);<br><br>    <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, ed&#125;);<br><br>    segs = res;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据结构">2. 数据结构</h2><figure><img src="/images/数据结构知识框架.jpg" alt="数据结构知识框架" /><figcaption aria-hidden="true">数据结构知识框架</figcaption></figure><h3 id="单链表">2.1 单链表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点</span><br><span class="hljs-type">int</span> head, e[N], ne[N], idx;<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    head = <span class="hljs-number">-1</span>;<br>    idx = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 在链表头插入一个数a</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = a, ne[idx] = head, head = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 将头结点删除，需要保证头结点存在</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    head = ne[head];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双链表">2.2 双链表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点</span><br><span class="hljs-type">int</span> e[N], l[N], r[N], idx;<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//0是左端点，1是右端点</span><br>    r[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, l[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    idx = <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment">// 在节点a的右边插入一个数x</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = x;<br>    l[idx] = a, r[idx] = r[a];<br>    l[r[a]] = idx, r[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 删除节点a</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    l[r[a]] = l[a];<br>    r[l[a]] = r[a];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="栈">2.3 栈</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// tt表示栈顶</span><br><span class="hljs-type">int</span> stk[N], tt = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 向栈顶插入一个数</span><br>stk[ ++ tt] = x;<br><br><span class="hljs-comment">// 从栈顶弹出一个数</span><br>tt -- ;<br><br><span class="hljs-comment">// 栈顶的值</span><br>stk[tt];<br><br><span class="hljs-comment">// 判断栈是否为空，如果 tt &gt; 0，则表示不为空</span><br><span class="hljs-keyword">if</span> (tt &gt; <span class="hljs-number">0</span>)<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="队列">2.4 队列</h3><h4 id="普通队列">2.4.1 普通队列</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// hh 表示队头，tt表示队尾</span><br><span class="hljs-type">int</span> q[N], hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br><br><span class="hljs-comment">// 向队尾插入一个数</span><br>q[ ++ tt] = x;<br><br><span class="hljs-comment">// 从队头弹出一个数</span><br>hh ++ ;<br><br><span class="hljs-comment">// 队头的值</span><br>q[hh];<br><br><span class="hljs-comment">// 判断队列是否为空，如果 hh &lt;= tt，则表示不为空</span><br><span class="hljs-keyword">if</span> (hh &lt;= tt)<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="循环队列">2.4.2 循环队列</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// hh 表示队头，tt表示队尾的后一个位置</span><br><span class="hljs-type">int</span> q[N], hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 向队尾插入一个数</span><br>q[tt ++ ] = x;<br><span class="hljs-keyword">if</span> (tt == N) tt = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 从队头弹出一个数</span><br>hh ++ ;<br><span class="hljs-keyword">if</span> (hh == N) hh = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 队头的值</span><br>q[hh];<br><br><span class="hljs-comment">// 判断队列是否为空，如果hh != tt，则表示不为空</span><br><span class="hljs-keyword">if</span> (hh != tt)<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单调栈">2.5 单调栈</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//常见模型：找出每个数左边离它最近的比它大/小的数</span><br><span class="hljs-type">int</span> tt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (tt &amp;&amp; <span class="hljs-built_in">check</span>(stk[tt], i)) tt -- ;<br>    stk[ ++ tt] = i;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单调队列">2.6 单调队列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//常见模型：找出滑动窗口中的最大值/最小值</span><br><span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="hljs-built_in">check_out</span>(q[hh])) hh ++ ;  <span class="hljs-comment">// 判断队头是否滑出窗口</span><br>    <span class="hljs-keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="hljs-built_in">check</span>(q[tt], i)) tt -- ;<br>    q[ ++ tt] = i;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kmp">2.7 KMP</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// s[]是长文本，p[]是模式串，n是s的长度，m是p的长度</span><br>求模式串的Next数组：<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= m; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br>    <span class="hljs-keyword">if</span> (p[i] == p[j + <span class="hljs-number">1</span>]) j ++ ;<br>    ne[i] = j;<br>&#125;<br><br><span class="hljs-comment">// 匹配</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br>    <span class="hljs-keyword">if</span> (s[i] == p[j + <span class="hljs-number">1</span>]) j ++ ;<br>    <span class="hljs-keyword">if</span> (j == m)<br>    &#123;<br>        j = ne[j];<br>        <span class="hljs-comment">// 匹配成功后的逻辑</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="trie树">2.8 Trie树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> son[N][<span class="hljs-number">26</span>], cnt[N], idx;<br><span class="hljs-comment">// 0号点既是根节点，又是空节点</span><br><span class="hljs-comment">// son[][]存储树中每个节点的子节点</span><br><span class="hljs-comment">// cnt[]存储以每个节点结尾的单词数量</span><br><br><span class="hljs-comment">// 插入一个字符串</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i]; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!son[p][u]) son[p][u] = ++ idx;<br>        p = son[p][u];<br>    &#125;<br>    cnt[p] ++ ;<br>&#125;<br><br><span class="hljs-comment">// 查询字符串出现的次数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i]; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!son[p][u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        p = son[p][u];<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt[p];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小贴士</strong></p><blockquote><p>异或对(XOR pair)<br /><strong>异或：</strong>指的是使用异或运算（XOR operation），即 ^操作符。<br /><strong>对：</strong>指的是成对的两个数。通常，我们关注的是一对数（a,b），并研究它们在应用异或运算后的一些特性。<br /><strong>性质：</strong><br />1. a ^ a = 0<br />2. a ^ 0 = a<br />3. 异或运算满足交换律和结合律，即 a ^ b = b ^ a 和 (a ^ b) ^ c = a ^ (b^ c)</p></blockquote><h3 id="并查集">2.9 并查集</h3><h4 id="朴素并查集">2.9.1 朴素并查集</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> p[N]; <span class="hljs-comment">//存储每个点的祖宗节点</span><br><br><span class="hljs-comment">// 返回x的祖宗节点</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 初始化，假定节点编号是1~n</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) p[i] = i;<br><br><span class="hljs-comment">// 合并a和b所在的两个集合：</span><br>p[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b);<br></code></pre></td></tr></table></figure><h4 id="维护size的并查集">2.9.2 维护size的并查集</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> p[N], size[N];<br><span class="hljs-comment">//p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量</span><br><br><span class="hljs-comment">// 返回x的祖宗节点</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 初始化，假定节点编号是1~n</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    p[i] = i;<br>    size[i] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 合并a和b所在的两个集合：</span><br>size[<span class="hljs-built_in">find</span>(b)] += size[<span class="hljs-built_in">find</span>(a)];<br>p[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b);<br></code></pre></td></tr></table></figure><h4 id="维护到祖宗节点的并查集">2.9.3 维护到祖宗节点的并查集</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> p[N], d[N];<br><span class="hljs-comment">//p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离</span><br><br><span class="hljs-comment">// 返回x的祖宗节点</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x)<br>    &#123;<br>        <span class="hljs-type">int</span> u = <span class="hljs-built_in">find</span>(p[x]);<br>        d[x] += d[p[x]];<br>        p[x] = u;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 初始化，假定节点编号是1~n</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    p[i] = i;<br>    d[i] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 合并a和b所在的两个集合：</span><br>p[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b);<br>d[<span class="hljs-built_in">find</span>(a)] = distance; <span class="hljs-comment">// 根据具体问题，初始化find(a)的偏移量</span><br></code></pre></td></tr></table></figure><h3 id="堆">2.10 堆</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1</span><br><span class="hljs-comment">// ph[k]存储第k个插入的点在堆中的位置</span><br><span class="hljs-comment">// hp[k]存储堆中下标是k的点是第几个插入的</span><br><span class="hljs-type">int</span> h[N], ph[N], hp[N], size;<br><br><span class="hljs-comment">// 交换两个点，及其映射关系</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heap_swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">swap</span>(ph[hp[a]],ph[hp[b]]);<br>    <span class="hljs-built_in">swap</span>(hp[a], hp[b]);<br>    <span class="hljs-built_in">swap</span>(h[a], h[b]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = u;<br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> &lt;= size &amp;&amp; h[u * <span class="hljs-number">2</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= size &amp;&amp; h[u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (u != t)<br>    &#123;<br>        <span class="hljs-built_in">heap_swap</span>(u, t);<br>        <span class="hljs-built_in">down</span>(t);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (u / <span class="hljs-number">2</span> &amp;&amp; h[u] &lt; h[u / <span class="hljs-number">2</span>])<br>    &#123;<br>        <span class="hljs-built_in">heap_swap</span>(u, u / <span class="hljs-number">2</span>);<br>        u &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// O(n)建堆</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n / <span class="hljs-number">2</span>; i; i -- ) <span class="hljs-built_in">down</span>(i);<br></code></pre></td></tr></table></figure><h3 id="一般哈希">2.11 一般哈希</h3><h4 id="拉链法">2.11.1 拉链法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><br><span class="hljs-comment">// 向哈希表中插入一个数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k = (x % N + N) % N;<br>    e[idx] = x;<br>    ne[idx] = h[k];<br>    h[k] = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 在哈希表中查询某个数是否存在</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k = (x % N + N) % N;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[k]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        <span class="hljs-keyword">if</span> (e[i] == x)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="开放寻址法">2.11.2 开放寻址法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> h[N];<br><br><span class="hljs-comment">// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = (x % N + N) % N;<br>    <span class="hljs-keyword">while</span> (h[t] != null &amp;&amp; h[t] != x)<br>    &#123;<br>        t ++ ;<br>        <span class="hljs-keyword">if</span> (t == N) t = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串哈希">2.12 字符串哈希</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//核心思想：将字符串看成P进制数，P的经验值是131或13331，取这两个值的冲突概率低</span><br><span class="hljs-comment">//小技巧：取模的数用2^64，这样直接用unsigned long long存储，溢出的结果就是取模的结果</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ULL;<br>ULL h[N], p[N]; <span class="hljs-comment">// h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64</span><br><br><span class="hljs-comment">// 初始化</span><br>p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    h[i] = h[i - <span class="hljs-number">1</span>] * P + str[i];<br>    p[i] = p[i - <span class="hljs-number">1</span>] * P;<br>&#125;<br><br><span class="hljs-comment">// 计算子串 str[l ~ r] 的哈希值</span><br><span class="hljs-function">ULL <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> h[r] - h[l - <span class="hljs-number">1</span>] * p[r - l + <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="搜索与图论">3. 搜索与图论</h2><figure><img src="/images/搜索与图论知识框架.jpg" alt="搜索与图论知识框架" /><figcaption aria-hidden="true">搜索与图论知识框架</figcaption></figure><h3 id="树与图的存储">3.1 树与图的存储</h3><ul><li>树是一种特殊的图，与图的存储方式相同</li><li>对于无向图中的边ab，存储两条有向边a-&gt;b,b-&gt;a</li><li>因此我们可以只考虑有向图的存储</li></ul><h4 id="邻接矩阵">3.1.1 邻接矩阵</h4><p>g[a][b] 存储边a-&gt;b</p><h4 id="邻接表">3.1.2 邻接表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点</span><br><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><br><span class="hljs-comment">//添加一条边a-&gt;b</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-comment">//初始化</span><br>idx = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br></code></pre></td></tr></table></figure><h3 id="树与图的遍历">3.2 树与图的遍历</h3><p>时间复杂度O(n + m), n表示点数， m表示边数</p><h4 id="深度优先遍历">3.2.1 深度优先遍历</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    st[u] = <span class="hljs-literal">true</span>;<span class="hljs-comment">//st[u]表示点u已经被遍历过</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span>(!st[j]) <span class="hljs-built_in">dfs</span>(j);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="宽度优先遍历">3.2.2 宽度优先遍历</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs CPP">queue&lt;<span class="hljs-type">int</span>&gt; q;<br>st[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>&#123;<br>    <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>    q.<span class="hljs-built_in">pop</span>();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!st[j])<br>        &#123;<br>            st[j] = <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(j);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="拓扑排序">3.3 拓扑排序</h3><p>时间复杂度O(n + m), n表示点数， m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">topsort</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-comment">//d[i] 存储点i的入度</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!d[i])<br>            q[++tt] = i;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (hh &lt;= tt)<br>    &#123;<br>        <span class="hljs-type">int</span> t = q[hh++];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span>(--d[j] ==<span class="hljs-number">0</span>)<br>                q[++tt] = j;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//如果所有点都入队了，说明存在拓扑排序，否则不存在拓扑排序</span><br>    <span class="hljs-keyword">return</span> tt = n - <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="朴素dijkstra算法">3.4 朴素dijkstra算法</h3><p>时间复杂度O(n<sup>2</sup> + m), n表示点数， m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> g[N][N];  <span class="hljs-comment">// 存储每条边</span><br><span class="hljs-type">int</span> dist[N];  <span class="hljs-comment">// 存储1号点到每个点的最短距离</span><br><span class="hljs-type">bool</span> st[N];   <span class="hljs-comment">// 存储每个点的最短路是否已经确定</span><br><br><span class="hljs-comment">// 求1号点到n号点的最短路，如果不存在则返回-1</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;     <span class="hljs-comment">// 在还未确定最短路的点中，寻找距离最小的点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))<br>                t = j;<br><br>        <span class="hljs-comment">// 用t更新其他点的距离</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            dist[j] = <span class="hljs-built_in">min</span>(dist[j], dist[t] + g[t][j]);<br><br>        st[t] = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="堆优化版dijkstra">3.5 堆优化版dijkstra</h3><p>时间复杂度O(mlogm), n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">int</span> n;      <span class="hljs-comment">// 点的数量</span><br><span class="hljs-type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="hljs-comment">// 邻接表存储所有边</span><br><span class="hljs-type">int</span> dist[N];        <span class="hljs-comment">// 存储所有点到1号点的距离</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个点的最短距离是否已确定</span><br><br><span class="hljs-comment">// 求1号点到n号点的最短距离，如果不存在，则返回-1</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br>    heap.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;);      <span class="hljs-comment">// first存储距离，second存储节点编号</span><br><br>    <span class="hljs-keyword">while</span> (heap.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = heap.<span class="hljs-built_in">top</span>();<br>        heap.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-type">int</span> ver = t.second, distance = t.first;<br><br>        <span class="hljs-keyword">if</span> (st[ver]) <span class="hljs-keyword">continue</span>;<br>        st[ver] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[ver]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; distance + w[i])<br>            &#123;<br>                dist[j] = distance + w[i];<br>                heap.<span class="hljs-built_in">push</span>(&#123;dist[j], j&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="bellman-ford算法">3.6 Bellman-Ford算法</h3><p>时间复杂度O(mn), n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n, m;       <span class="hljs-comment">// n表示点数，m表示边数</span><br><span class="hljs-type">int</span> dist[N];        <span class="hljs-comment">// dist[x]存储1到x的最短路距离</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>     <span class="hljs-comment">// 边，a表示出点，b表示入点，w表示边的权重</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b, w;<br>&#125;edges[M];<br><br><span class="hljs-comment">// 求1到n的最短路距离，如果无法从1走到n，则返回-1。</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bellman_ford</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++ )<br>        &#123;<br>            <span class="hljs-type">int</span> a = edges[j].a, b = edges[j].b, w = edges[j].w;<br>            <span class="hljs-keyword">if</span> (dist[b] &gt; dist[a] + w)<br>                dist[b] = dist[a] + w;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] &gt; <span class="hljs-number">0x3f3f3f3f</span> / <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="spfa算法">3.7 spfa算法</h3><p>时间复杂度 平均情况下O(m),最坏情况下O(nm), n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n;      <span class="hljs-comment">// 总点数</span><br><span class="hljs-type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="hljs-comment">// 邻接表存储所有边</span><br><span class="hljs-type">int</span> dist[N];        <span class="hljs-comment">// 存储每个点到1号点的最短距离</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个点是否在队列中</span><br><br><span class="hljs-comment">// 求1号点到n号点的最短路距离，如果从1号点无法走到n号点则返回-1</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>    st[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        st[t] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i])<br>            &#123;<br>                dist[j] = dist[t] + w[i];<br>                <span class="hljs-keyword">if</span> (!st[j])     <span class="hljs-comment">// 如果队列中已存在j，则不需要将j重复插入</span><br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="spfa判断图中是否存在负环">3.8 spfa判断图中是否存在负环</h3><p>时间复杂度是 O(nm)， n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n;      <span class="hljs-comment">// 总点数</span><br><span class="hljs-type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="hljs-comment">// 邻接表存储所有边</span><br><span class="hljs-type">int</span> dist[N], cnt[N];        <span class="hljs-comment">// dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个点是否在队列中</span><br><br><span class="hljs-comment">// 如果存在负环，则返回true，否则返回false。</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 不需要初始化dist数组</span><br>    <span class="hljs-comment">// 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环。</span><br><br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        q.<span class="hljs-built_in">push</span>(i);<br>        st[i] = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        st[t] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i])<br>            &#123;<br>                dist[j] = dist[t] + w[i];<br>                cnt[j] = cnt[t] + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (cnt[j] &gt;= n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;       <span class="hljs-comment">// 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环</span><br>                <span class="hljs-keyword">if</span> (!st[j])<br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="floyd算法">3.9 Floyd算法</h3><p>时间复杂度是O(n<sup>3</sup>), n表示点数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//初始化</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        <span class="hljs-keyword">if</span> (i == j) d[i][j] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> d[i][j] = INF;<br><br><span class="hljs-comment">//算法结束后，d[a][b]表示a到b的距离</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">floyd</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>                d[i][j] = <span class="hljs-built_in">min</span>(d[i][j], d[i][k] + d[k][j]);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="朴素版prim算法">3.10 朴素版prim算法</h3><p>时间复杂度是O(n<sup>2</sup>+m), n表示点数， m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n;      <span class="hljs-comment">// n表示点数</span><br><span class="hljs-type">int</span> g[N][N];        <span class="hljs-comment">// 邻接矩阵，存储所有边</span><br><span class="hljs-type">int</span> dist[N];        <span class="hljs-comment">// 存储其他点到当前最小生成树的距离</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个点是否已经在生成树中</span><br><br><br><span class="hljs-comment">// 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))<br>                t = j;<br><br>        <span class="hljs-keyword">if</span> (i &amp;&amp; dist[t] == INF) <span class="hljs-keyword">return</span> INF;<br><br>        <span class="hljs-keyword">if</span> (i) res += dist[t];<br>        st[t] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ ) dist[j] = <span class="hljs-built_in">min</span>(dist[j], g[t][j]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kriskal算法">3.11 Kriskal算法</h3><p>时间复杂度O(mlogm), n表示点数， m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n, m;       <span class="hljs-comment">// n是点数，m是边数</span><br><span class="hljs-type">int</span> p[N];       <span class="hljs-comment">// 并查集的父节点数组</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>     <span class="hljs-comment">// 存储边</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b, w;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt; (<span class="hljs-type">const</span> Edge &amp;W)<span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &lt; W.w;<br>    &#125;<br>&#125;edges[M];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>     <span class="hljs-comment">// 并查集核心操作</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sort</span>(edges, edges + m);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) p[i] = i;    <span class="hljs-comment">// 初始化并查集</span><br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>, cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;<br><br>        a = <span class="hljs-built_in">find</span>(a), b = <span class="hljs-built_in">find</span>(b);<br>        <span class="hljs-keyword">if</span> (a != b)     <span class="hljs-comment">// 如果两个连通块不连通，则将这两个连通块合并</span><br>        &#123;<br>            p[a] = b;<br>            res += w;<br>            cnt ++ ;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (cnt &lt; n - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> INF;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="染色法判别二分图">3.12 染色法判别二分图</h3><p>时间复杂度是O(n + m), n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n;      <span class="hljs-comment">// n表示点数</span><br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;     <span class="hljs-comment">// 邻接表存储图</span><br><span class="hljs-type">int</span> color[N];       <span class="hljs-comment">// 表示每个点的颜色，-1表示未染色，0表示白色，1表示黑色</span><br><br><span class="hljs-comment">// 参数：u表示当前节点，c表示当前点的颜色</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    color[u] = c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (color[j] == <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">dfs</span>(j, !c)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color[j] == c) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(color, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> color);<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">if</span> (color[i] == <span class="hljs-number">-1</span>)<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">dfs</span>(i, <span class="hljs-number">0</span>))<br>            &#123;<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="匈牙利算法">3.13 匈牙利算法</h3><p>时间复杂度是O(nm), n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n1, n2;     <span class="hljs-comment">// n1表示第一个集合中的点数，n2表示第二个集合中的点数</span><br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;     <span class="hljs-comment">// 邻接表存储所有边，匈牙利算法中只会用到从第一个集合指向第二个集合的边，所以这里只用存一个方向的边</span><br><span class="hljs-type">int</span> match[N];       <span class="hljs-comment">// 存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 表示第二个集合中的每个点是否已经被遍历过</span><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[x]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!st[j])<br>        &#123;<br>            st[j] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (match[j] == <span class="hljs-number">0</span> || <span class="hljs-built_in">find</span>(match[j]))<br>            &#123;<br>                match[j] = x;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点</span><br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; i ++ )<br>&#123;<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> st);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(i)) res ++ ;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数学知识">4. 数学知识</h2><figure><img src="/images/数学知识知识框架.jpg" alt="数学知识知识框架" /><figcaption aria-hidden="true">数学知识知识框架</figcaption></figure><h3 id="试除法判定质数">4.1 试除法判定质数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i++)<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="试除法分解质因数">4.2 试除法分解质因数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>) x /= i, s ++ ;<br>            cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; s &lt;&lt; endl;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; endl;<br>    cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="朴素筛法求素数">4.3 朴素筛法求素数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-type">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (st[i]) <span class="hljs-keyword">continue</span>;<br>        primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + i; j &lt;= n; j += i)<br>            st[j] = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线性筛法求素数">4.4 线性筛法求素数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-type">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="试除法求所有约数">4.5 试除法求所有约数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">get_divisors</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            res.<span class="hljs-built_in">push_back</span>(i);<br>            <span class="hljs-keyword">if</span> (i != x / i) res.<span class="hljs-built_in">push_back</span>(x / i);<br>        &#125;<br>    <span class="hljs-built_in">sort</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="约数个数和约数之和">4.6 约数个数和约数之和</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TXT">如果 N = p1^c1 * p2^c2 * ... *pk^ck<br>约数个数： (c1 + 1) * (c2 + 1) * ... * (ck + 1)<br>约数之和： (p1^0 + p1^1 + ... + p1^c1) * ... * (pk^0 + pk^1 + ... + pk^ck)<br></code></pre></td></tr></table></figure><h3 id="欧几里得算法">4.7 欧几里得算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> b ? <span class="hljs-built_in">gcd</span>(b, a % b) : a;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="求欧拉函数">4.8 求欧拉函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">phi</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            res = res / i * (i - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>) x /= i;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) res = res / x * (x - <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="筛法求欧拉函数">4.9 筛法求欧拉函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-type">int</span> euler[N];           <span class="hljs-comment">// 存储每个数的欧拉函数</span><br><span class="hljs-type">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_eulers</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    euler[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i])<br>        &#123;<br>            primes[cnt ++ ] = i;<br>            euler[i] = i - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            <span class="hljs-type">int</span> t = primes[j] * i;<br>            st[t] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                euler[t] = euler[i] * primes[j];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            euler[t] = euler[i] * (primes[j] - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快速幂">4.10 快速幂</h3><p>求m<sup>k</sup> mod p,时间复杂度O(logk)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span> % p, t = m;<br>    <span class="hljs-keyword">while</span> (k)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k&amp;<span class="hljs-number">1</span>) res = res * t % p;<br>        t = t * t % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="扩展欧几里得算法">4.11 扩展欧几里得算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// 求x, y，使得ax + by = gcd(a, b)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> &amp;x, <span class="hljs-type">int</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!b)<br>    &#123;<br>        x = <span class="hljs-number">1</span>; y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-type">int</span> d = <span class="hljs-built_in">exgcd</span>(b, a % b, y, x);<br>    y -= (a/b) * x;<br>    <span class="hljs-keyword">return</span> d;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高斯消元">4.12 高斯消元</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// a[N][N]是增广矩阵</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gauss</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> c, r;<br>    <span class="hljs-keyword">for</span> (c = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>; c &lt; n; c ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> t = r;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; i &lt; n; i ++ )   <span class="hljs-comment">// 找到绝对值最大的行</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][c]) &gt; <span class="hljs-built_in">fabs</span>(a[t][c]))<br>                t = i;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[t][c]) &lt; eps) <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = c; i &lt;= n; i ++ ) <span class="hljs-built_in">swap</span>(a[t][i], a[r][i]);      <span class="hljs-comment">// 将绝对值最大的行换到最顶端</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= c; i -- ) a[r][i] /= a[r][c];      <span class="hljs-comment">// 将当前行的首位变成1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r + <span class="hljs-number">1</span>; i &lt; n; i ++ )       <span class="hljs-comment">// 用当前行将下面所有的列消成0</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][c]) &gt; eps)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n; j &gt;= c; j -- )<br>                    a[i][j] -= a[r][j] * a[i][c];<br><br>        r ++ ;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (r &lt; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; i &lt; n; i ++ )<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][n]) &gt; eps)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>; <span class="hljs-comment">// 无解</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 有无穷多组解</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j ++ )<br>            a[i][n] -= a[i][j] * a[j][n];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 有唯一解</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递推法求组合数">4.13 递推法求组合数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// c[a][b] 表示从a个苹果中选b个的方案数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i ++ )<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j ++ )<br>        <span class="hljs-keyword">if</span> (!j) c[i][j] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> c[i][j] = (c[i - <span class="hljs-number">1</span>][j] + c[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) % mod;<br></code></pre></td></tr></table></figure><h3 id="通过预处理逆元的方式求组合数">4.14通过预处理逆元的方式求组合数</h3><ul><li>首先预处理出所有阶乘取模的余数fact[N]，以及所有阶乘取模的逆元infact[N]</li><li>如果取模的数是质数，可以用费马小定理求逆元</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> p)</span>    <span class="hljs-comment">// 快速幂模板</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (k)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) res = (LL)res * a % p;<br>        a = (LL)a * a % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">// 预处理阶乘的余数和阶乘逆元的余数</span><br>fact[<span class="hljs-number">0</span>] = infact[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i ++ )<br>&#123;<br>    fact[i] = (LL)fact[i - <span class="hljs-number">1</span>] * i % mod;<br>    infact[i] = (LL)infact[i - <span class="hljs-number">1</span>] * <span class="hljs-built_in">qmi</span>(i, mod - <span class="hljs-number">2</span>, mod) % mod;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="lucas定理">4.15 Lucas定理</h3><p>若p是质数，则对于任意整数 1 &lt;= m &lt;= n，有： C(n, m) = C(n % p,m % p) * C(n / p, m / p) (mod p)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> p)</span>  <span class="hljs-comment">// 快速幂模板</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span> % p;<br>    <span class="hljs-keyword">while</span> (k)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) res = (LL)res * a % p;<br>        a = (LL)a * a % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> p)</span>  <span class="hljs-comment">// 通过定理求组合数C(a, b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a &lt; b) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    LL x = <span class="hljs-number">1</span>, y = <span class="hljs-number">1</span>;  <span class="hljs-comment">// x是分子，y是分母</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a, j = <span class="hljs-number">1</span>; j &lt;= b; i --, j ++ )<br>    &#123;<br>        x = (LL)x * i % p;<br>        y = (LL) y * j % p;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> x * (LL)<span class="hljs-built_in">qmi</span>(y, p - <span class="hljs-number">2</span>, p) % p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lucas</span><span class="hljs-params">(LL a, LL b, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a &lt; p &amp;&amp; b &lt; p) <span class="hljs-keyword">return</span> <span class="hljs-built_in">C</span>(a, b, p);<br>    <span class="hljs-keyword">return</span> (LL)<span class="hljs-built_in">C</span>(a % p, b % p, p) * <span class="hljs-built_in">lucas</span>(a / p, b / p, p) % p;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分解质因数求组合数">4.16 分解质因数求组合数</h3><p>当我们需要求出组合数的真实值，而非对某个数的余数时，分解质因数的方式比较好用：1. 筛法求出范围内的所有质数 2. 通过 C(a, b) = a! / b! / (a - b)!这个公式求出每个质因子的次数。 n! 中p的次数是 n / p + n / p^2 + n / p^3+ ... 3. 用高精度乘法将所有质因子相乘</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> primes[N], cnt;     <span class="hljs-comment">// 存储所有质数</span><br><span class="hljs-type">int</span> sum[N];     <span class="hljs-comment">// 存储每个质数的次数</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个数是否已被筛掉</span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>      <span class="hljs-comment">// 线性筛法求素数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> p)</span>       <span class="hljs-comment">// 求n！中的次数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        res += n / p;<br>        n /= p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; a, <span class="hljs-type">int</span> b)</span>       <span class="hljs-comment">// 高精度乘低精度模板</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; c;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        t += a[i] * b;<br>        c.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (t)<br>    &#123;<br>        c.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-built_in">get_primes</span>(a);  <span class="hljs-comment">// 预处理范围内的所有质数</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i ++ )     <span class="hljs-comment">// 求每个质因数的次数</span><br>&#123;<br>    <span class="hljs-type">int</span> p = primes[i];<br>    sum[i] = <span class="hljs-built_in">get</span>(a, p) - <span class="hljs-built_in">get</span>(b, p) - <span class="hljs-built_in">get</span>(a - b, p);<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; res;<br>res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i ++ )     <span class="hljs-comment">// 用高精度乘法将所有质因子相乘</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; sum[i]; j ++ )<br>        res = <span class="hljs-built_in">mul</span>(res, primes[i]);<br></code></pre></td></tr></table></figure><h2 id="动态规划">5. 动态规划</h2><h3 id="动态规划的三大步骤">5.1 动态规划的三大步骤</h3><ul><li><p><strong>第一步骤</strong>：定义<strong>数组元素的含义</strong>。假设用一维数组dp[]，就是规定这个数组元素的含义</p></li><li><p><strong>第二步骤</strong>：找出<strong>数组元素之间的关系式</strong>。动态规划有点类似于我们高中学的归纳法，当我们要计算dp[n]时，可以利用dp[n - 1]， dp[n -2]...d[[1]]，来推出dp[n]，也就是可以利用<strong>历史数据</strong>来推出新的元素值</p></li><li><p><strong>第三步骤</strong>：找出<strong>初始值</strong>。虽然我们知道了数组元素之间的关系式，例如dp[n]= dp[n - 1] + dp[n -2],但是，我们要知道初始值，例如这样一直推下去的话，会得到dp[3] = dp[2] +dp[1]。而dp[2]和dp[1]是不能再分解的了，所以我们必须要能够直接获得dp[2]和dp[1]的值，而这，就是所谓的初始值</p></li></ul><p>有了<strong>初始值</strong>，并且有了<strong>数组元素之间的关系式</strong>，我们就可以得到dp[n]的值了，而dp[n]的含义是由你来定义的，你想求什么，就定义什么，这样，这题的值也就解出来了</p><h3 id="案例一简单的一维dp">5.2 案例一、简单的一维DP</h3><blockquote><p>问题描述：一只青蛙一次可以跳上1级台阶，也可以跳上2级，求该青蛙跳上一个n级台阶总共有多少种跳法</p></blockquote><ul><li><strong>第一步骤</strong>：我们的问题是青蛙跳上n级台阶总共有多少种跳法，我们不妨设：跳上i级台阶总共有dp[i]种跳法</li><li><strong>第二步骤</strong>：对于这道题，由于情况可以是跳一级，也可以是跳2级，所以我们得出dp[i]= dp[i - 1] + dp[i - 2]</li><li><strong>第三步骤</strong>：显然，由第二步推出的关系式我们知道我们最多需要得到dp[0],dp[1],dp[2]的值，而dp[0]= 0, dp[1] = 1(青蛙一次跳一级台阶)， dp[2] =2(青蛙经过2次一次跳一级台阶或经过1次一次跳两级台阶)</li></ul><p>所以我们得到代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>, dp[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; i &lt;= n; i++) dp[i] = dp[i - <span class="hljs-number">1</span>] + dp[i - <span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">return</span> dp[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例二二维数组的dp">5.3 案例二、二维数组的DP</h3><blockquote><p>问题描述：一个机器人位于一个 m * n网格的左上角(起始点在下图中标记为"Start")。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角(在下图中标记为"Finish")。问总共由多少条不同的路径？</p></blockquote><figure><img src="/images/leetcode62.jpg" alt="图示" /><figcaption aria-hidden="true">图示</figcaption></figure><ul><li><strong>第一步骤</strong>：由于我们的目的是求从左上角到右下角一共有多少种路径，那我们就定义<code>dp[i][j]</code>的含义为：当机器人从左上角移动到(i,j)这个位置时，总共由多少种路径</li><li><strong>第二步骤</strong>：由于机器人每次只能向下或者向右移动一步，所以我们可以得到<code>dp[i][j]</code>= <code>dp[i - 1][j]</code> + <code>dp[i][j - 1]</code></li><li><strong>第三步骤</strong>：由第二步骤得到的关系式我们知道我们需要的初始值是第0行和第0列，而很显然<code>dp[0][j]</code>和<code>dp[i][0]</code>的值都为1</li></ul><blockquote><p>注意，这个网格相当于一个二维数组，数组是从下标为0开始算的，所以右下角的位置是(m- 1, n - 1)</p></blockquote><p>所以我们得到代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m - <span class="hljs-number">1</span>; i++) dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= n - <span class="hljs-number">1</span>; j++) dp[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m - <span class="hljs-number">1</span>; i++) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n - <span class="hljs-number">1</span>; j++)<br>            dp[i][j] = dp[i - <span class="hljs-number">1</span>][j] + dp[i][j - <span class="hljs-number">1</span>];<br>    <br>    <span class="hljs-keyword">return</span> dp[m - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例三二维数组的dp">5.4 案例三、二维数组的DP</h3><blockquote><p>问题描述：给定一个包含非负整数的 m * n网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和最小。</p><p>说明：每次只能向下或向右移动一步</p></blockquote><ul><li><strong>第一步骤</strong>：<ul><li>用数组<code>a[M][N]</code>存储每个网格的数字。</li><li>由题意可设<code>dp[i][j]</code>为从(0, 0)到(i,j)路径上的数字总和最小。</li></ul></li><li><strong>第二步骤</strong>：由于每次只能向下或向右移动一步，故我们可得关系式：<code>dp[i][j]</code>= min(<code>dp[i][j - 1]</code> + <code>dp[i - 1][j]</code>) +<code>a[i][j]</code></li><li><strong>第三步骤</strong>：很显然初始值还是第0行和第0列，由此我们可得初始值<code>dp[i][0]</code>= <code>dp[i - 1][0]</code> + <code>a[i][0]</code>,<code>dp[0][j]</code>= <code>dp[0][j - 1]</code> + <code>a[0][j]</code></li></ul><p>所以我们得到代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) dp[i][<span class="hljs-number">0</span>] = dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + a[i][<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++) dp[<span class="hljs-number">0</span>][j] = dp[<span class="hljs-number">0</span>][j - <span class="hljs-number">1</span>] + a[<span class="hljs-number">0</span>][j];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++)<br>            dp[i][j] = <span class="hljs-built_in">min</span>(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]) + a[i][j];<br>    <br>    <span class="hljs-keyword">return</span> dp[m - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例四编辑距离">5.5 案例四、编辑距离</h3><blockquote><p>问题描述：给定两个单词word1和word2，计算出将word1转换成word2所使用的最少操作数</p><p>你可以对一个单词进行如下三种操作：</p><p>插入一个字符，删除一个字符，替换一个字符</p></blockquote><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xl">示例：  <br>输入：word1 = <span class="hljs-string">&quot;horse&quot;</span>,word2 = <span class="hljs-string">&quot;ros&quot;</span>  <br>输出：<span class="hljs-number">3</span>  <br>解释：  <br><span class="hljs-function"><span class="hljs-title">horse</span> -&gt;</span> rorse(将<span class="hljs-string">&#x27;h&#x27;</span>替换成<span class="hljs-string">&#x27;r&#x27;</span>)  <br><span class="hljs-function"><span class="hljs-title">rorse</span> -&gt;</span> rose(删除<span class="hljs-string">&#x27;r&#x27;</span>)  <br><span class="hljs-function"><span class="hljs-title">rose</span> -&gt;</span> ros(删除<span class="hljs-string">&#x27;e&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><strong>第一步骤</strong>：<ul><li>我们不妨将第一个单词存入word1[N]数组中，将第二个单词存入word2[NJ]数组中</li><li>当第一个单词长度为i，第二个单词长度为j时，将单词1转换成单词2所需的最少操作数是<code>dp[i][j]</code></li></ul></li><li><strong>第二步骤</strong>：<ul><li>当word1[i] = word2[j]时，显然有<code>dp[i][j]</code> =<code>dp[i - 1][j - 1]</code>,即不用对他进行任何操作</li><li>当word1[i] ≠ word2[j]时，有三种操作分别如下：<ul><li>插入：如果对word1插入一个字符，则有<code>dp[i][j]</code> =<code>dp[i - 1][j]</code> + 1</li><li>删除：如果对word1删除一个字符，则有<code>dp[i][j]</code> =<code>dp[i][j - 1]</code> + 1;</li><li>替换：如果将word1一个字符替换成另一个字符，则有<code>dp[i][j]</code>= <code>dp[i - 1][j - 1]</code> + 1;</li><li>因此得到关系式：<code>dp[i][j]</code> =min(<code>dp[i - 1][j]</code>, <code>dp[i][j - 1]</code>,<code>dp[i - 1][j - 1]</code>) + 1</li></ul></li></ul></li><li><strong>第三步骤</strong>：由第二步骤得到的关系式可以看出我们需要的初始值是i= 0或是j = 0的情况。显然，i, j不同时等于0时，<code>dp[i][0]</code> =<code>dp[ i - 1][0]</code> + 1， <code>dp[0][j]</code> =<code>dp[0][j - 1]</code> + 1(进行删除操作)</li></ul><p>所以我们得到代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n1, <span class="hljs-type">int</span> n2)</span> </span>&#123;<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; i++) dp[i][<span class="hljs-number">0</span>] = dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>;<span class="hljs-comment">//对word1进行删除操作</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n2; j++) dp[<span class="hljs-number">0</span>][j] = dp[<span class="hljs-number">0</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<span class="hljs-comment">//对word2进行插入操作</span><br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; i++)  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n2; j++)<br>        &#123;<br>        <span class="hljs-keyword">if</span> (word1[i] == word2[j]) dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];    <br>            <span class="hljs-keyword">else</span> dp[i][j] = <span class="hljs-built_in">min</span>(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>], dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) + <span class="hljs-number">1</span>;<br>&#125;<br>    <br>    <span class="hljs-keyword">return</span> dp[n1][n2];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="贪心">6. 贪心</h2><h3 id="基本思想">6.1 基本思想</h3><p>贪心算法是一种在求解问题时，每一步都选择当前最优解，以期望最终得到全局最优解的算法思想。贪心算法的基本思想可以总结为“每一步都做出一个局部最优的选择，最终就能得到全局最优解”。</p><p>贪心算法通常包含以下关键步骤：<br />1.<strong>找到可选的子问题</strong>：首先，将原问题拆分成一系列可选的子问题或决策2.<strong>找到局部最优解</strong>：对每个子问题，找到一个局部最优解。这个局部最优解应该是一个贪心选择，即在当前状态下选择最优的方式3.<strong>合并子问题的解</strong>：将各个子问题的局部最优解合并起来，得到原问题的解4.<strong>检查解的有效性</strong>：最后，检查得到的解是否满足问题的约束和要求。如果满足，就认为得到了问题的解</p><h2 id="小tips">7. 小tips</h2><h3 id="命名规范">7.1 命名规范</h3><h4 id="变量">7.1.1 变量</h4><ul><li>小驼峰命名法</li><li>示例：<code>totalCount</code>, <code>userName</code></li></ul><h4 id="常量">7.1.2 常量</h4><ul><li>使用全大写字母，单词之间使用下划线分割</li><li>示例：<code>MAX_SIZE</code>, <code>PI_VALUE</code></li></ul><h4 id="函数和方法">7.1.3 函数和方法</h4><ul><li>小驼峰命名法</li><li>函数名应描述函数的动作或返回的结果</li><li>示例：<code>calculateTotal</code>, <code>getUserName</code></li></ul><h4 id="类和结构体">7.1.4 类和结构体</h4><ul><li>大驼峰命名法</li><li>示例：<code>UserAccount</code>, <code>DataManager</code></li></ul><h3 id="时间复杂度">7.2 时间复杂度</h3><figure><img src="/images/时间复杂度.jpg" alt="时间复杂度" /><figcaption aria-hidden="true">时间复杂度</figcaption></figure><h3 id="代码风格">7.3 代码风格</h3><h4 id="缩进">7.3.1 缩进</h4><ul><li>使用一致的缩进风格(常用 4 个空格或 1 个 Tab)<br /></li><li>确保所有代码块都正确缩进</li></ul><h4 id="括号">7.3.2 括号</h4><ul><li>代码块的左括号 <code>&#123;</code> 通常放在行尾，右括号 <code>&#125;</code>单独占一行</li><li>示例：<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">if</span> (condition) &#123;<br>    <span class="hljs-comment">// code block</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// code block</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="空行">7.3.3 空行</h4><ul><li>使用空行分割逻辑上相关的代码块，增强代码可读性</li><li>示例:<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">initialize</span>();<br>    <br>    <span class="hljs-keyword">while</span> (running) &#123;<br>        <span class="hljs-built_in">processInput</span>();<br>        <span class="hljs-built_in">update</span>();<br>        <span class="hljs-built_in">render</span>();<br>    &#125;<br>    <br>    <span class="hljs-built_in">cleanup</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="空格">7.3.4 空格</h4><ul><li>在关键字和括号之间加空格<br /></li><li>在操作符两边加空格<br /></li><li>示例：<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (a[i] &gt; b[i]) &#123;<br>        result = a[i] + b[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="的两种使用方法">7.4 &amp;的两种使用方法</h3><p><code>&amp;：</code>一个是取地址用，另一个是引用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> a;<br><br><span class="hljs-type">int</span> *p = &amp;a;<span class="hljs-comment">//这就是取地址符，指针p指向对象a，p里面存着a的地址</span><br><br><span class="hljs-type">int</span> b;<br><br><span class="hljs-type">int</span> &amp;c = b;<span class="hljs-comment">//这是引用，定义一个引用就是说c是b的一个别名。c就是代表b。注意的是声明引用要初始化</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于洛谷113号题单对线性表的总结</title>
    <link href="/2024/06/03/113/"/>
    <url>/2024/06/03/113/</url>
    
    <content type="html"><![CDATA[<h2 id="p3156-询问学号">1 P3156 询问学号</h2><p><a href="https://www.luogu.com.cn/problem/P3156">传送门</a></p><p>没啥好说的，跳</p><h2 id="p3613-寄包柜">2 P3613 寄包柜</h2><p><a href="https://www.luogu.com.cn/problem/P3613">传送门</a></p><p><del>二维数组秒了</del></p><p>虽然这题的题目是寄包柜，但他真的是考察寄包柜吗？<del>是的</del></p><p>根据问题找答案，显然对于每个问题有三个元素:第i个寄包柜，第j个格子里的物品。如果用二维数组，显然10<sup>5</sup>* 10<sup>9</sup>会MLE，即使是动态数组也不太妥。</p><p>所以呢？最简单的方法当然是STL大法！</p><p>但有个问题，一个map元素只有两个值，比如map&lt;int,int&gt;b;但我们有三个元素。</p><p><del>aabandon</del></p><h3 id="方法1">2.1 方法1</h3><p>把第一个int改成long long，将第一个元素改成10<sup>5</sup>*i + j</p><h3 id="方法2">2.2 方法2</h3><p>map&lt;int,int&gt; b[MAX]; b[i][j] = k;</p><h2 id="p1449-后缀表达式">3 P1449 后缀表达式</h2><p><a href="https://www.luogu.com.cn/problem/P1449">传送门</a></p><p>很显然，这题需要用到栈。当输入不是数字时，将这个数字压入栈。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>(i &lt; postfix.<span class="hljs-built_in">length</span>() &amp;&amp; <span class="hljs-built_in">isdigit</span>(postfix[i]))<br>&#123;<br>   val = val * <span class="hljs-number">10</span> + (postfix[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<span class="hljs-comment">//这里注意，由于是从char型字符转化为int型字符，所以需要postfix[i] - &#x27;0&#x27;</span><br>   i++;<br>&#125;<br></code></pre></td></tr></table></figure><p>当输入不是数字时，就从栈中弹出两个数字进行运算，注意顺序：第一个弹出来的是val2，第二个弹出来的是val1，这对于减法和除法很重要</p><p>AC代码 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>string postfix;<br>stack&lt;<span class="hljs-type">int</span>&gt; s;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; postfix;<br>    <br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(i &lt; postfix.<span class="hljs-built_in">length</span>())<br>    &#123;<br>        <span class="hljs-keyword">if</span>(postfix[i] == <span class="hljs-string">&#x27;@&#x27;</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(postfix[i]))<br>        &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(postfix[i]))<br>            &#123;<br>                t = t * <span class="hljs-number">10</span> + (postfix[i++] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>            &#125;<br>            i++;<br>            s.<span class="hljs-built_in">push</span>(t);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> val2 = s.<span class="hljs-built_in">top</span>(); s.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-type">int</span> val1 = s.<span class="hljs-built_in">top</span>(); s.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-type">char</span> c = postfix[i];<br>            <span class="hljs-keyword">switch</span>(c)<br>            &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span> : s.<span class="hljs-built_in">push</span>(val1 + val2); <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span> : s.<span class="hljs-built_in">push</span>(val1 - val2); <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span> : s.<span class="hljs-built_in">push</span>(val1 * val2); <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span> : s.<span class="hljs-built_in">push</span>(val1 / val2); <span class="hljs-keyword">break</span>;<br>            &#125;<br>            i++;<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; s.<span class="hljs-built_in">top</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>------------------------手动分割线--------------------</p><p>单纯做这题其实并不难，但是我想到了一个问题：前缀表达式和前序遍历、中缀表达式和中序遍历、后续表达式和后序遍历之间是否有关系？</p><p>根据我自己的探索，发现其实前、中、后缀表达式可以说是前、中、后序遍历的一种特殊形式</p><p>举个例子，对于<code>3*(5-2)+7</code>这个表达式，可以转化为树。</p><p>很显然，我们最先算<code>3*(5-2)</code>与<code>7</code>的和，其次算<code>3</code>和<code>(5-2)</code>的乘积，要算<code>5-2</code>我们要先做<code>5</code>和<code>2</code>的减法，因此<code>*</code>的子节点是<code>3</code>和<code>-</code>。显然<code>-</code>的子节点是<code>5</code>和<code>2</code>。最后计算的是</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">    +</span><br>   / \<br><span class="hljs-bullet">  *</span>   7<br> / \<br>3   -<br>   / \<br>  5   2<br></code></pre></td></tr></table></figure><p>前缀表达式(前序遍历)： +*3-5.2.7</p><p>中缀表达式(中序遍历) 3*5-2+7</p><p>后缀表达式(后序遍历): 3.5.2.-*7+</p><h2 id="p1996">4 P1996</h2><p><a href="https://www.luogu.com.cn/problem/P1996">传送门</a></p><p>这题有两个方法：模拟法和递推法。模拟法更加直观，而递推法更加优雅</p><h3 id="模拟法">4.1 模拟法</h3><p>模拟法很直观，直接模拟整个出圈的过程，可以使用队列来解决。</p><p>将所有小朋友排好编号排成一列，在出列时报数。如果报数不是m的倍数则入列；否则直接出列，同时输出小朋友的编号</p><h4 id="ac代码">4.1.1 AC代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">joes</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        q.<span class="hljs-built_in">push</span>(i);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        t++;<br>        <span class="hljs-keyword">if</span>(t % m != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            q.<span class="hljs-built_in">push</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout &lt;&lt; q.<span class="hljs-built_in">front</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            q.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-built_in">joes</span>(n, m);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数学法约瑟夫环递推公式">4.2 数学法(约瑟夫环递推公式)</h3><p>约瑟夫环问题有一个著名的递推公式解法。设f(n,m)为n个人报数，每次数到m出列的最终胜利者，则有递推关系：</p><p>f(n,m) = (f(n - 1), m) mod n</p><p>从只有一个人开始推，直到n个人。基于此我们可以反向推导出每一步出圈的人的编号。</p><p>现在让我们进行递推公式</p><p>设f(n, m)为n个人报数，每次数到m的情况下，最后那个人的位置。</p><p>当只有一个人的时候，(即n=1)，很显然此人(编号'0')是最后的存活者</p><p>基于前一个数量的结果，但是因为我们现在有 <code>n</code>个人，所以我们要在这个位置基础上加上 <code>m</code>（因为每次都是数到<code>m</code> 的人出列），然后对当前人数 <code>n</code>取模，以确保我们得到的索引是有效的（即不会超出当前的人数范围）</p><p>举个例子</p><p>假设现在有<code>3</code>个人，每次数到<code>2</code>时出列，我们要找到最后存活的位置</p><ol type="1"><li>f(1,2) = 0;</li><li>f(2,2) = (f(1,2) + 2) % 2 = 0;</li><li>f(3,2) = (f(2,2) + 2) % 3 = 2;</li></ol><h4 id="ac代码-1">4.2.2 AC代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">josephus</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">people</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        people[i] = i + <span class="hljs-number">1</span>;<br>        <br>    vector&lt;<span class="hljs-type">int</span>&gt; result;<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(!people.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        index = (index + m - <span class="hljs-number">1</span>) % people.<span class="hljs-built_in">size</span>();<br>        result.<span class="hljs-built_in">push_back</span>(people[index]);<br>        people.<span class="hljs-built_in">erase</span>(people.<span class="hljs-built_in">begin</span>() + index);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; order = <span class="hljs-built_in">josephus</span>(n, m);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> person : order)<br>        cout &lt;&lt; person &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <br>    cout &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="p1160-队列安排">5 P1160 队列安排</h2><p><a href="https://www.luogu.com.cn/problem/P1160">传送门</a></p><p>此题有两个难点： 1. 如何插入同学？ 2. 如何删除同学？</p><h3 id="如何插入同学">5.1 如何插入同学？</h3><p>对于此类需要频繁插入的问题，数组显然不行，第一反应当然是链表。</p><p>我们可以把每个同学想象成互相握住肩膀，比如a同学的右边是b同学，a同学握着b同学的肩膀，b同学握住a同学的肩膀。如果想要在a同学的右边插入c同学，首先要让c同学握住a同学，之后c同学握住a同学握着的b同学，接着a同学右边的b同学握住a同学的手转为握住c同学，a同学握住b同学的手转为握住c同学。</p><p>这题可以使用结构体，但结构体比数组慢，所以我们可以用数组来模拟结构体。</p><p>但是要注意避免数据溢出，即第一个同学左边的同学是谁？所以对于同学的编号我们应该从1开始而不是从0开始</p><h3 id="如何删除同学">5.2 如何删除同学？</h3><p>当时第一反应是通过一个双重循环，即每输入一个需要删除的i号同学就搜索一遍链表，将i号同学改为0。输出时进行检查，如果是0则不输出。但显然时间复杂度则为O(N<sup>2</sup>)了。</p><p>正难则反，以退为进。我们不妨先用一个布尔数组标记所有要删除的学号，接着依次输出链表，当遇到要输出的学号被标记时则不输出，时间复杂度O(N)。</p><h3 id="ac代码-2">5.3 AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> l[N], r[N], res[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <br>    r[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, l[n + <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    r[<span class="hljs-number">1</span>] = n + <span class="hljs-number">1</span>, l[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> k, p;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;k, &amp;p);<br>        <br>        <span class="hljs-keyword">if</span>(p == <span class="hljs-number">0</span>)<br>        &#123;<br>            r[i] = k;<br>            l[i] = l[k];<br>            r[l[k]] = i;<br>            l[k] = i;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p == <span class="hljs-number">1</span>)<br>        &#123;<br>            l[i] = k;<br>            r[i] = r[k];<br>            l[r[k]] = i;<br>            r[k] = i;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> idx = <span class="hljs-number">1</span>, temp = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(r[temp] != n + <span class="hljs-number">1</span>)<br>    &#123;<br>        res[idx++] = r[temp];<br>        temp = r[temp];<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-type">bool</span> isDeleted[N] = &#123;<span class="hljs-literal">false</span>&#125;;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        isDeleted[x] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!isDeleted[res[i]])<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, res[i]);<br>    &#125;<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="p1540-机器翻译">6 P1540 机器翻译</h2><p><a href="https://www.luogu.com.cn/problem/P1540">传送门</a></p><p>解题思路：</p><ol type="1"><li>初始化<ul><li>使用一个固定大小的队列或列表来模拟内存</li><li>使用一个计算器来记录查词典的次数</li></ul></li><li>对于文章中的每个单词<ul><li>对于文章中每个单词首先要判断他是否在内存（这里用队列来模拟）中<ul><li>如果在，不需要做任何操作</li><li>如果不在<ul><li>如果内存未满，直接将单词添加到内存中</li><li>如果队列已满，移除最先进入内存的单词(直接pop())，然后将新单词添加到内存中</li><li>每次将单词加入内存时，增加查词典的计数</li></ul></li></ul></li></ul></li><li>输出结果<ul><li>文章处理完成后，输出查词典的总次数</li></ul></li></ol><p>AC代码 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;deque&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>deque&lt;<span class="hljs-type">int</span>&gt; words;<br><span class="hljs-type">int</span> m, n;<span class="hljs-comment">//m为内存容量，n为文章长度</span><br><span class="hljs-type">int</span> res;<br><span class="hljs-type">bool</span> isFound;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; m &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">while</span>(n -- )<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <br>        cin &gt;&gt; x;<br>        <br>        isFound = <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it = words.<span class="hljs-built_in">begin</span>(); it != words.<span class="hljs-built_in">end</span>(); it ++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span>(x == *it) <br>            &#123;<br>                isFound = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(!isFound)<br>        &#123;<br>            res ++ ;<br>            <br>            <span class="hljs-keyword">if</span>(words.<span class="hljs-built_in">size</span>() &gt;= m)<br>            &#123;<br>                words.<span class="hljs-built_in">pop_front</span>();<br>                words.<span class="hljs-built_in">push_back</span>(x);<br>            &#125;<span class="hljs-keyword">else</span> words.<span class="hljs-built_in">push_back</span>(x);<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>以上是本蒟蒻的代码，时间复杂度O(N<sup>2</sup>)。翻看题解，看到一位大佬的代码，居然将时间复杂度做到O(N)</p><p>用内存换时间，这是很划算的做法。 * 开辟两个数组a[MAX]、b[MAX] *用b[MAX]表示依次存入的单词,比如b[1] = 3, b[2] =5,表示第一个存入的单词是3，第二个存入的单词是5 *a[MAX]表示查询单词是否在区域中，如果在则为1，不在为0 *用左、右指针计算内存的长度</p><p>大佬的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,x,ans,l,r,a[<span class="hljs-number">1005</span>],b[<span class="hljs-number">1005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;m&gt;&gt;n;<br>    l=<span class="hljs-number">0</span>;r=<span class="hljs-number">0</span>;<span class="hljs-comment">//初始化两个指针</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>         <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<span class="hljs-comment">//边读入边做</span><br>         <span class="hljs-keyword">if</span> (a[x]==<span class="hljs-number">0</span>) <br>         &#123;<br>             ans++;<br>            r++;b[r]=x;a[x]=<span class="hljs-number">1</span>;<span class="hljs-comment">//因为每次遇到新单词都要做这些操作，不如搬到判断语句外做，这样程序更简洁</span><br>            <span class="hljs-keyword">if</span> (r&gt;m) &#123;l++;a[b[l]]=<span class="hljs-number">0</span>;&#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//千万不能忘记打这句，不然在比赛中会出错</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图(C++干货版)</title>
    <link href="/2024/05/28/graph/"/>
    <url>/2024/05/28/graph/</url>
    
    <content type="html"><![CDATA[<p>本章除了1:图的定义之外，其他内容很少讲概念，主要通过例题来感悟。因为我<del>懒</del>认为通过例题是一种更直观，也更实用的方法。</p><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="ie=edge"><title>Document</title><script src="https://cdn.jsdelivr.net/npm/mermaid@10.6.1/dist/mermaid.min.js"></script><script>        window.onload=mermaid.initialize({"theme": "forest"});    </script></head><h2 id="图的定义">1 图的定义</h2><p>图(graph)是由顶点的有穷非空集合V(G)和顶点之间边的集合E(G)组成，通常表示为:G=(V,E),其中G表示图，V是图G中顶点的个数，E是图G中边的集合</p><h2 id="图的基本概念和术语">2 图的基本概念和术语</h2><h3 id="有向图">2.1 有向图</h3><p>若E是有向边的有限集合时，则图G为有向图。弧是顶点的有序对，记为&lt;v,w&gt;。其中v，w是顶点，v为弧头，w是弧尾，&lt;v,w&gt;称为从v到w的弧，也称v邻接到w，或w邻接自v。</p><div class="mermaid"><pre><code class="hljs">    graph LR;        1--&gt;2;        2--&gt;1;        2--&gt;3;</code></pre></div><p>图中有向图可表示为 G<sub>1</sub>=(V<sub>1</sub>,E<sub>1</sub>);V<sub>1</sub>={1,2,3}E<sub>1</sub>={&lt;1,2&gt;,&lt;2,1&gt;,&lt;2,3&gt;}</p><h3 id="无向图">2.2 无向图</h3><p>若E是无向边(简称边)的有限集合时，则图G为无向图。边是顶点的无序对，记为(v,w)或(w,v)。其中v,w是顶点。可以说顶点v和顶点w互为邻接点。边(v,w)依附于顶点w和v，或者说边(v,w)和顶点v,w相关联</p><div class="mermaid"><pre><code class="hljs">    graph LR;        1 --- 2;        1 --- 3;        2 --- 3;</code></pre></div><p>图中所示无向图可表示为 G<sub>2</sub>=(V<sub>2</sub>,E<sub>2</sub>);V<sub>2</sub>={1, 2, 3}; E<sub>2</sub>={(1,2),(1,3),(2,3)};</p><h3 id="简单图">2.3 简单图</h3><p>一个图G若满足： 1. 不存在重复边 2. 不存在顶点到自身的边则其被称为简单图。</p><p><em>数据结构仅讨论简单图</em></p><h3 id="多重图">2.4 多重图</h3><p>若图G中某两个结点之间的边数多于一条，又运行顶点通过一条边与自己关联，则G为多重图。多重图的定义和简单图是相对的。</p><h3 id="完全图也称简单完全图">2.5 完全图(也称简单完全图)</h3><p>完全图是一个简单图，其中每对不同的顶点都恰好由一条边相连。这意味着在完全图中，任意两个不同的顶点之间都有直接的相连，没有任何的顶点是孤立的。</p><p>完全图的性质： * 顶点的数量：用(V)表示 * 边的数量：V<em>(V-1)/2 </em>度数：完全图中每个结点的度数都是(V-1)</p><h2 id="图的存储结构">3 图的存储结构</h2><h3 id="邻接矩阵">3.1 邻接矩阵</h3><p>相关概念不赘述，因为<del>懒</del>觉得没必要，直接上例子：</p><p>假设我们有三个顶点A、B、C，顶点之间的关系：</p><div class="mermaid"><pre><code class="hljs">graph LR;    A --&gt; B;    B --&gt; C;    C --&gt; A;</code></pre></div><p>为了用邻接矩阵表示这个图，首先定义一个二维数组，其中行和列的索引分别代表起点和终点。如果结点i有一条边指向j，则martix[i][j]被设置为1(无向图)或边的权重(如果是有权图)。如果没有直接连接，则设置为0。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> V = <span class="hljs-number">3</span>;<span class="hljs-comment">//顶点数</span><br><span class="hljs-type">int</span> adjMartix[V][V];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    adjMartix[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    adjMartix[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    adjMartix[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;邻接矩阵为：&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; V; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; V; j++)<br>            cout &lt;&lt; adjMartix[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="邻接表">3.2 邻接表</h3><p>邻接表是另一种常用的图的表示方法，适用于稀疏图，即边的数量远少于顶点的数量</p>假设我们有四个顶点:A,B,C,D。顶点之间的关系如下：<div class="mermaid"><pre><code class="hljs">graph LR;    A --- B;    A --- C;    B --- D;    C --- D;</code></pre></div><p>为了使用邻接表表示这个图，我们可以使用一个数组。其中每个元素是一个列表，列表中包含与该顶点相连的其他顶点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> V = <span class="hljs-number">4</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">adjList</span>(V);<span class="hljs-comment">//创建一个大小为V的向量</span><br><br>    adjList[<span class="hljs-number">0</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//A与B相连</span><br>    adjList[<span class="hljs-number">1</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//B与A相连</span><br>    adjlist[<span class="hljs-number">0</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>    adjList[<span class="hljs-number">2</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>    adjList[<span class="hljs-number">1</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>    adjList[<span class="hljs-number">3</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    adjList[<span class="hljs-number">2</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>    adjList[<span class="hljs-number">3</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;邻接表为：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; V; i++)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;顶点&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;: &quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j : adjList[i])<br>        &#123;<br>            cout &lt;&lt; j &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="十字链表">3.3 十字链表</h3><p>十字链表适用于表示有向图的数据结构，特别适用于稀疏图。在十字链表中，每个顶点和每条边都用一个结点表示，这种结构特别适用于访问任何顶点的入边和出边</p><p>基本结构： * 顶点结点： - 包含顶点的信息 -两个指针，一个指向该顶点的第一条出边，另一个指向该顶点的第一条入边 *边结点： - 包含边的信息 -有四个指针，两个用于在顶点的出边或入边中前后链表，另外两个用于链接同一个顶点的下一条出边或入边</p><p><em>听不懂？没关系，看完例子再回过头来看</em></p><p>假设有一个有向图，包含A,B,C,D</p><p>考虑以下有向图：</p><div class="mermaid"><pre><code class="hljs">graph LR;    1 --&gt; 2;    1 --&gt; 3;    3 --&gt; 4;    2 --&gt; 4;</code></pre></div><p>使用十字链表构建有向图：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span><br>&#123;<br>    <span class="hljs-type">int</span> tail, head;<span class="hljs-comment">//边的尾和头</span><br>    ArcNode *tailLink, *headLink;<span class="hljs-comment">//指向下一个相同尾、头的边</span><br>    <span class="hljs-built_in">ArcNode</span>(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> h): <span class="hljs-built_in">tail</span>(t), <span class="hljs-built_in">head</span>(h), <span class="hljs-built_in">tailLink</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">headLink</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">VertexNode</span><br>&#123;<br>    <span class="hljs-type">int</span> vertex;<span class="hljs-comment">//顶点信息</span><br>    ArcNode *firstIn, *firstOut;<span class="hljs-comment">//指向该顶点的第一个入边和出边</span><br>    <span class="hljs-built_in">VertexNode</span>(<span class="hljs-type">int</span> v): <span class="hljs-built_in">vertex</span>(v), <span class="hljs-built_in">firstIn</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">firstOut</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><br>vector&lt;VertexNode*&gt; vertices;<br><br><span class="hljs-comment">// 添加顶点</span><br><span class="hljs-function">VertexNode* <span class="hljs-title">addVertex</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>    VertexNode* vertex = <span class="hljs-keyword">new</span> <span class="hljs-built_in">VertexNode</span>(id);<br>    vertices.<span class="hljs-built_in">push_back</span>(vertex);<br>    <span class="hljs-keyword">return</span> vertex;<br>&#125;<br><br><span class="hljs-comment">// 查找顶点</span><br><span class="hljs-function">VertexNode* <span class="hljs-title">findVertex</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : vertices) &#123;<br>        <span class="hljs-keyword">if</span> (v-&gt;id == id) <span class="hljs-keyword">return</span> v;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-comment">// 添加边</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> tail, <span class="hljs-type">int</span> head)</span> </span>&#123;<br>    VertexNode* tailVertex = <span class="hljs-built_in">findVertex</span>(tail);<br>    VertexNode* headVertex = <span class="hljs-built_in">findVertex</span>(head);<br>    <span class="hljs-keyword">if</span> (!tailVertex) tailVertex = <span class="hljs-built_in">addVertex</span>(tail);<br>    <span class="hljs-keyword">if</span> (!headVertex) headVertex = <span class="hljs-built_in">addVertex</span>(head);<br><br>    ArcNode* arc = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArcNode</span>(tail, head);<br>    arc-&gt;tailNext = tailVertex-&gt;firstOut;<br>    tailVertex-&gt;firstOut = arc;<br>    arc-&gt;headNext = headVertex-&gt;firstIn;<br>    headVertex-&gt;firstIn = arc;<br>&#125;<br><br><span class="hljs-comment">// 显示图的信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : vertices) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Vertex &quot;</span> &lt;&lt; v-&gt;id &lt;&lt; <span class="hljs-string">&quot;:\n&quot;</span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;  Outgoing: &quot;</span>;<br>        <span class="hljs-keyword">for</span> (ArcNode* arc = v-&gt;firstOut; arc; arc = arc-&gt;tailNext)<br>            std::cout &lt;&lt; arc-&gt;head &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;\n  Incoming: &quot;</span>;<br>        <span class="hljs-keyword">for</span> (ArcNode* arc = v-&gt;firstIn; arc; arc = arc-&gt;headNext)<br>            std::cout &lt;&lt; arc-&gt;tail &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 清理内存</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cleanup</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : vertices) &#123;<br>        <span class="hljs-keyword">while</span> (v-&gt;firstOut) &#123;<br>            ArcNode* tmp = v-&gt;firstOut;<br>            v-&gt;firstOut = tmp-&gt;tailNext;<br>            <span class="hljs-keyword">delete</span> tmp;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (v-&gt;firstIn) &#123;<br>            ArcNode* tmp = v-&gt;firstIn;<br>            v-&gt;firstIn = tmp-&gt;headNext;<br>            <span class="hljs-keyword">delete</span> tmp;<br>        &#125;<br>        <span class="hljs-keyword">delete</span> v;<br>    &#125;<br>    vertices.<span class="hljs-built_in">clear</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">addEdge</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">addEdge</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">addEdge</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">addEdge</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><br>    <span class="hljs-built_in">display</span>();<br><br>    <span class="hljs-built_in">cleanup</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>代码解释：</em> *我们定义了结构体<code>ArcNode</code>和<code>VertexNode</code>来表示图中的边和顶点* 使用全局的<code>vertices</code>向量来存储图中的所有顶点</p><p>例题</p><h3 id="题目描述">题目描述</h3><p>假设你是一家航空公司的数据分析师，你需要管理和分析航班与机场之间的关系。使用十字链表来存储航班信息。每个机场都可以有多个航班起飞和降落。设计一个系统，能够快速回答关于航班起降的查询。</p><h4 id="输入格式">输入格式</h4><ul><li>首先输入一个整数n，表示机场的数量</li><li>接着输入一个整数m，表示航班的数量</li><li>然后输入m行航班信息，每行包括起始机场和目的地机场编号</li></ul><h4 id="功能要求">功能要求</h4><ul><li>给定一个机场编号，查询从该机场起飞的所有航班的目的地机场。</li><li>给定一个机场编号，查询降落到该机场的所有航班的起始机场。</li><li>查询每个机场的出发航班数和到达航班数。</li></ul><h4 id="示例输入">示例输入</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">4</span>  <span class="hljs-comment">// 机场数量</span><br><span class="hljs-number">5</span>  <span class="hljs-comment">// 航班数量</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-number">4</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="示例输出">示例输出</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp">From airport <span class="hljs-number">1</span>:<br>  Departures to: <span class="hljs-number">2</span>, <span class="hljs-number">3</span><br>  Arrivals from: <span class="hljs-number">4</span><br>Departure count: <span class="hljs-number">2</span>, Arrival count: <span class="hljs-number">1</span><br><br>From airport <span class="hljs-number">2</span>:<br>  Departures to: <span class="hljs-number">3</span><br>  Arrivals from: <span class="hljs-number">1</span><br>Departure count: <span class="hljs-number">1</span>, Arrival count: <span class="hljs-number">1</span><br><br>From airport <span class="hljs-number">3</span>:<br>  Departures to: <span class="hljs-number">4</span><br>  Arrivals from: <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br>Departure count: <span class="hljs-number">1</span>, Arrival count: <span class="hljs-number">2</span><br><br>From airport <span class="hljs-number">4</span>:<br>  Departures to: <span class="hljs-number">1</span><br>  Arrivals from: <span class="hljs-number">3</span><br>Departure count: <span class="hljs-number">1</span>, Arrival count: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="代码示例">代码示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span><br>&#123;<br>    <span class="hljs-type">int</span> tail, head;<br>    ArcNode *tailnext, *headnext;<br>    <span class="hljs-built_in">ArcNode</span>(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> h) : <span class="hljs-built_in">tail</span>(t), <span class="hljs-built_in">head</span>(h), <span class="hljs-built_in">tailNext</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">headNext</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">VertexNode</span><br>&#123;<br>    <span class="hljs-type">int</span> id;<br>    ArcNode *firstOut, *firstIn;<br>    <span class="hljs-built_in">VertexNode</span>(<span class="hljs-type">int</span> v) : <span class="hljs-built_in">id</span>(v), <span class="hljs-built_in">firstOut</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">firstIn</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><br>map&lt;<span class="hljs-type">int</span>, VertexNode*&gt; airports;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addFlight</span><span class="hljs-params">(<span class="hljs-type">int</span> tail, <span class="hljs-type">int</span> head)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(airports.<span class="hljs-built_in">find</span>(tail) == airports.<span class="hljs-built_in">end</span>())<br>    &#123;<br>        airports[tail] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">VertexNode</span>(tail);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(airports.<span class="hljs-built_in">find</span>(head) == airports.<span class="hljs-built_in">end</span>())<br>    &#123;<br>        airports[head] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">VertexNode</span>(head);<br>    &#125;<br><br>    ArcNode* newArc = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArcNode</span>(tail, head);<br>    newArc-&gt;tailNext = airports[tail]-&gt;firstOut;<br>    airports[tail]-&gt;firstOut = newArc;<br>    newArc-&gt;headNext = airports[head]-&gt;firstIn;<br>    airports[head]-&gt;firstIn = newArc;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;v : airports)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;From airport&quot;</span> &lt;&lt; v.first &lt;&lt; <span class="hljs-string">&quot;:\n Departures to: &quot;</span>;<br>        <span class="hljs-keyword">for</span>(ArcNode* arc = v.second-&gt;firstOut; arc != <span class="hljs-literal">nullptr</span>; arc = arc-&gt;tailNext)<br>            cout &lt;&lt; arc-&gt;head &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;  Arrivals from: &quot;</span>;<br>        <span class="hljs-keyword">for</span>(ArcNode* arc = v.second-&gt;firstIn; arc != <span class="hljs-literal">nullptr</span>; arc = arc-&gt;headNext)<br>            cout &lt;&lt; arc-&gt;tail &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-type">int</span>  outCount = <span class="hljs-number">0</span>, inCount = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(ArcNode* arc = v.second-&gt;firstOut; arc; arc = arc-&gt;tailNext) outCount++;<br>        <span class="hljs-keyword">for</span>(ArcNode* arc = v.second-&gt;firstIn; arc; arc = arc-&gt;headNext) inCount++;<br>        cout &lt;&lt; <span class="hljs-string">&quot;\nDeparture count:&quot;</span> &lt;&lt; outCount &lt;&lt; <span class="hljs-string">&quot;, Arrival count: &quot;</span> &lt;&lt; inCount &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, u, v;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        cin &gt;&gt; u &gt;&gt; v;<br>        <span class="hljs-built_in">addFlight</span>(u, v);<br>    &#125;<br><br>    <span class="hljs-built_in">display</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS(够用版)</title>
    <link href="/2024/05/27/css/"/>
    <url>/2024/05/27/css/</url>
    
    <content type="html"><![CDATA[<h2 id="css简介">1 CSS简介</h2><h3 id="什么是css">1.1 什么是CSS？</h3><p><code>CSS</code>: Cascading Style Sheet</p><p><em>为什么被命名为CSS？</em><em>级联（Cascading）：CSS的“级联”特性意味着当多个样式应用于同一个HTML元素时，这些样式会根据它们的来源（例如用户样式表、作者样式表或浏览器默认样式）和优先级（例如内联样式、ID选择器、类选择器等）来决定如何组合或覆盖。这种机制允许开发者在多个地方定义样式，而浏览器会根据一定的规则来确定最终应用于元素的样式。</em><em>样式表（StyleSheets）：CSS使用“样式表”的方式来组织样式信息。一个样式表包含了一组规则，每个规则都由一个或多个选择器和一条或多条声明组成。选择器用于指定哪些HTML元素应用该规则，而声明则指定了这些元素应该如何被渲染（例如颜色、字体、布局等）。</em></p><h3 id="css的作用">1.2 CSS的作用</h3><p>页面外观美化</p><p>布局和定位</p><h2 id="基本用法">2 基本用法</h2><h3 id="css语法">2.1 CSS语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        选择器&#123;</span><br><span class="language-css">            属性名:属性值;</span><br><span class="language-css">            属性名:属性值;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>选择器：要修饰的对象</li><li>属性名：修饰对象的属性</li><li>属性值：样式的取值</li></ul><p><em>没听懂？没关系，接着往后看就行</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>:<span class="hljs-number">#cccccc</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">h2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>:blue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>CSS从入门到入土<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="css应用方式">2.2 CSS应用方式</h3><ul><li>内部样式(internal styles)</li><li>行内样式(inline styles)</li><li>外部样式(external styles)</li></ul><h4 id="内部样式">2.2.1 内部样式</h4><p>也称为内嵌样式，在页面头部通过style标签定义</p><p>对当前页面所有符合样式选择器的标签都起作用</p><h4 id="行内样式">2.2.2 行内样式</h4><p>也称为嵌入样式，使用HTML标签的style属性定义</p><p>只对设置style属性的标签起作用</p><h3 id="外部样式">2.2.3 外部样式</h3><p>使用单独的<code>.css</code>文件定义，然后在页面中使用<code>link标签</code>或<code>@import指令</code>引入</p><ul><li>使用<code>link标签</code>链接外部样式文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;path/to/your/example.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><em>小提示：type可省略</em></p><ul><li><code>@import</code>指令导入外部样式文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;path/to/your/example.css&quot;</span>;</span><br><span class="language-css">    <span class="hljs-keyword">@import</span> url(path/to/your/example.css);</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="选择器">3 选择器</h2><h3 id="基础选择器">3.1 基础选择器</h3><h4 id="标签选择器">3.1.1 标签选择器</h4><p>也称为元素选择器，使用HTML标签作为选择器的名称</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">p &#123;  <br>    color: red;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="类选择器">3.1.2 类选择器</h4><p>使用自定义的名称，以<code>.</code>号作为前缀，然后通过HTML标签的class属性调用类选择器</p><p><em>注意</em><br></p><ul><li>调用时不能添加<code>.</code>号；</li><li>同时调用多个类选择器时，用<code>空格</code>分割</li><li>类选择器名称不能以<code>数字</code>开头</li></ul><h4 id="id选择器">3.1.3 ID选择器</h4><p>使用自定义的名称，以<code>#</code>作为前缀，然后通过HTML标签的id属性进行名称匹配</p><p>ID属性是一对一的关系</p><h3 id="复杂选择器">3.2 复杂选择器</h3><h4 id="复合选择器">3.2.1 复合选择器</h4><p>标签选择器和类选择器、标签选择器和ID选择器一起使用</p><p>必须同时满足两个条件才能应用样式</p><ul><li>交集选择器<ul><li>语法：E.F</li><li>例子：<code>p.intro</code>将选择所有既是<code>&lt;p&gt;</code>元素又拥有<code>intro</code>类的元素</li></ul></li><li>并集选择器<ul><li>语法：E,f</li><li>例子：<code>h1,h2&#123;color:blue;&#125;</code>将选择所有的<code>&lt;h1&gt;</code>和<code>&lt;h2&gt;</code>元素，并将他们的颜色设为蓝色</li></ul></li></ul><h4 id="组合选择器">3.2.2 组合选择器</h4><p>组合选择器描述了元素之间的关系，如父子关系、兄弟关系等，允许开发者更精准的选择元素</p><ul><li>后代选择器<ul><li>符号：空格</li><li>例子:<code>div p</code>将选择所有<code>&lt;div&gt;</code>元素内部的<code>&lt;p&gt;</code>元素</li></ul></li><li>子元素选择器<ul><li>符号： &gt;</li><li>例子：<code>ul&gt;li</code>将选择所有<code>ul</code>元素内部的直接子元素<code>li</code></li></ul></li><li>相邻兄弟选择器<ul><li>符号：<code>+</code></li><li>例子：<code>h2+p</code>将选择紧接在<code>&lt;h2&gt;</code>元素后面的<code>&lt;p&gt;</code>元素</li></ul></li><li>通用兄弟选择器<ul><li>符号：<code>~</code></li><li>例子：<code>h2~p</code>将选择所有与<code>&lt;h2&gt;</code>元素在同一层级的<code>&lt;p&gt;</code>元素</li></ul></li></ul><h4 id="嵌套组合器">3.2.3 嵌套组合器</h4><p>嵌套组合器允许在一个选择器的内部定义另一个选择器，以形成嵌套的样式规则</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/* 1.标签选择器和类选择器合起来使用----复合选择器 */</span></span><br><span class="language-css"><span class="hljs-selector-tag">h1</span><span class="hljs-selector-class">.aaa</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 1.标签选择器和ID选择器合起来使用----复合选择器 */</span></span><br><span class="language-css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-id">#bbb</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:blue;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 2.组合选择器 */</span></span><br><span class="language-css"><span class="hljs-selector-tag">h1</span>,<span class="hljs-selector-tag">p</span>,<span class="hljs-selector-tag">div</span>,<span class="hljs-selector-tag">span</span>,<span class="hljs-selector-class">.ccc</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>:<span class="hljs-number">30px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">background</span>:violet;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.ccc</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-weight</span>:bold;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.first</span> + <span class="hljs-selector-class">.second</span> &#123;  </span><br><span class="language-css">    <span class="hljs-attribute">color</span>: red;  </span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.first</span> ~ <span class="hljs-selector-tag">p</span> &#123;  </span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: lightblue;  </span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 3.嵌套选择器 */</span></span><br><span class="language-css"><span class="hljs-comment">/* div p&#123;</span></span><br><span class="hljs-comment"><span class="language-css">color:green;</span></span><br><span class="hljs-comment"><span class="language-css">text-decoration:underline;</span></span><br><span class="hljs-comment"><span class="language-css">&#125; */</span></span><br><span class="language-css"><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:green;</span><br><span class="language-css"><span class="hljs-attribute">text-decoration</span>:underline;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">h3</span><span class="hljs-selector-class">.ddd</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需求：只想修饰class属性为aaa的h1标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aaa&quot;</span>&gt;</span>welcome<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aaa&quot;</span>&gt;</span>css<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 我要修饰ID属性为bbb的p标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bbb&quot;</span>&gt;</span>world&lt;/p &gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>html<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bbb&quot;</span>&gt;</span>主讲：叽叽<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 给h1、p、div、span标签中的内容设置字号为30px --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>WEB开发<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ccc&quot;</span>&gt;</span>JAVA开发<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需求：修饰div内部的p标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>div内部的p标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>div内部的h3标签<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>div内部的h3内部的p标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需求：修饰div内部的class为ddd的标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>div内部的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ddd&quot;</span>&gt;</span>div内部的h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ddd&quot;</span>&gt;</span>PPPP<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ddd&quot;</span>&gt;</span>h3h3h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需求：修饰div内部class为first的标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;first&quot;</span>&gt;</span>我是第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;second&quot;</span>&gt;</span>我是相邻的段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;third&quot;</span>&gt;</span>我不是相邻的段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="伪类选择器">伪类选择器</h4><p>根据不同的状态显示不同的样式，一般用于标签</p><p>四种状态： * <code>:link</code>：未访问的链接 *<code>:visited</code>：已访问的链接 *<code>:hover</code>：鼠标悬浮在链接上，即移动在链接上 *<code>:active</code>：选定的链接，被激活</p><p><em>注意：默认超链接为：蓝色，不划线</em></p><h3 id="选择器优先级">3.3 选择器优先级</h3><h4 id="优先级">3.3.1 优先级</h4><p>行内样式 &gt; ID选择器 &gt; class选择器 &gt; 标签选择器</p><p><em>原因：首先加载标签选择器，再加载类选择器，然后加载ID选择器，最后加载行内样式</em><em>后加载会覆盖先加载的同名样式</em></p><h4 id="内外部样式加载顺序">3.3.2 内外部样式加载顺序</h4><p>就近原则<del>英语的DNA动了</del></p><p><em>原因和上诉一样，在同优先级的前提下，后加载的会覆盖先加载的同名样式，所以离得越近越优先</em></p><h4 id="important">3.3.3 !important</h4><p>可以使用<code>!important</code>使某个样式有最高的优先级</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red !important;&quot;</span>&gt;</span>这段文字是红色的，因为使用了 !important。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="常见css属性">4 常见CSS属性</h2><h3 id="字体属性">4.1 字体属性</h3><p>设置字体相关的样式</p><table><thead><tr><th style="text-align: left;">属性</th><th style="text-align: left;">含义</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr><td style="text-align: left;">font-size</td><td style="text-align: left;">大小、尺寸</td><td style="text-align: left;">可以使用多种单位</td></tr><tr><td style="text-align: left;">font-weight</td><td style="text-align: left;">粗细</td><td style="text-align: left;">取值:normal,bold,自定义</td></tr><tr><td style="text-align: left;">font-family</td><td style="text-align: left;">字体</td><td style="text-align: left;">系统中要安装指定的字体</td></tr><tr><td style="text-align: left;">font-style</td><td style="text-align: left;">样式</td><td style="text-align: left;">取值：normal,italic</td></tr><tr><td style="text-align: left;">font</td><td style="text-align: left;">简写</td><td style="text-align: left;"></td></tr></tbody></table><p>简写属性：font:font-style|font-weight|font-size|font-family必须按照次顺序书写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css"><span class="hljs-comment">/*font-size: 20px;*/</span></span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">80%</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.hello</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">62.5%</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css"><span class="hljs-comment">/*font-size: 30px;</span></span><br><span class="hljs-comment"><span class="language-css">font-weight: bold;</span></span><br><span class="hljs-comment"><span class="language-css">font-family: 华文行楷,宋体,黑体;</span></span><br><span class="hljs-comment"><span class="language-css">font-style: italic;*/</span></span><br><span class="language-css"><span class="hljs-attribute">font</span>: italic bold <span class="hljs-number">30px</span> 微软雅黑;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>CSS从入门到入土<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>我的DIV<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>CSS从入门到精通<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>嘿嘿<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="文本属性">4.2 文本属性</h3><table><thead><tr><th style="text-align: left;">属性</th><th style="text-align: left;">含义</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr><td style="text-align: left;">color</td><td style="text-align: left;">颜色</td><td style="text-align: left;"></td></tr><tr><td style="text-align: left;">line-height</td><td style="text-align: left;">行高</td><td style="text-align: left;">行之间的高度</td></tr><tr><td style="text-align: left;">text-align</td><td style="text-align: left;">水平对齐方式</td><td style="text-align: left;">取值：left、center、right</td></tr><tr><td style="text-align: left;">vertical-align</td><td style="text-align: left;">垂直对齐方式</td><td style="text-align: left;">取值：top、middle、bottom</td></tr><tr><td style="text-align: left;">text-indent</td><td style="text-align: left;">首行缩进</td><td style="text-align: left;"></td></tr><tr><td style="text-align: left;">text-decoration</td><td style="text-align: left;">文本修饰</td><tdstyle="text-align: left;">取值：underline、overline、line-through</td></tr><tr><td style="text-align: left;">text-transform</td><td style="text-align: left;">字母大小写转换</td><tdstyle="text-align: left;">取值：lowercase、uppercase、capitalize(首字母大写)</td></tr><tr><td style="text-align: left;">letter-spacing</td><td style="text-align: left;">字符间距</td><td style="text-align: left;"></td></tr><tr><td style="text-align: left;">word-spacing</td><td style="text-align: left;">单词间距</td><td style="text-align: left;">只对英文有效</td></tr><tr><td style="text-align: left;">white-space</td><td style="text-align: left;">空白的处理方法</td><tdstyle="text-align: left;">文本超出后是否换行，取值：nowrap(截断)</td></tr></tbody></table><h3 id="背景属性">4.3 背景属性</h3><table><thead><tr><th style="text-align: left;">属性</th><th style="text-align: left;">含义</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr><td style="text-align: left;">background-color</td><td style="text-align: left;">背景颜色</td><td style="text-align: left;">取值：transparent(透明)</td></tr><tr><td style="text-align: left;">background-image</td><td style="text-align: left;">背景图片</td><td style="text-align: left;">必须用url()方式指定图片的路径</td></tr><tr><td style="text-align: left;">background-repeat</td><td style="text-align: left;">背景图片的重复方式</td><td style="text-align: left;"></td></tr><tr><td style="text-align: left;">background-position</td><td style="text-align: left;">背景图片的显示位置</td><tdstyle="text-align: left;">取值：top、bottom、left、right、center、坐标(左上角(0,0)为坐标，向右为x正方向，向下为y正方向)</td></tr><tr><td style="text-align: left;">background-attachment</td><td style="text-align: left;">背景图片是否跟随滚动</td><td style="text-align: left;">取值：scroll(默认)、fixed</td></tr><tr><td style="text-align: left;">background</td><td style="text-align: left;">简写</td><td style="text-align: left;"></td></tr></tbody></table><p>简写属性：background:background-color|background-image|background-repeat|background-position</p><p>以空格隔开，书写顺序没有要求</p><h3 id="列表属性">4.4 列表属性</h3><table><thead><tr><th style="text-align: left;">属性</th><th style="text-align: left;">含义</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr><td style="text-align: left;">list-style-type</td><td style="text-align: left;">设置列表前的标记</td><tdstyle="text-align: left;">取值:none、disc、circle、square、decimal</td></tr><tr><td style="text-align: left;">list-style-image</td><td style="text-align: left;">将图片作为列表前的标记</td><td style="text-align: left;"></td></tr><tr><td style="text-align: left;">list-style-position</td><td style="text-align: left;">设置标记的位置</td><td style="text-align: left;">取值：outside(默认)、inside</td></tr><tr><td style="text-align: left;">list-style</td><td style="text-align: left;">简写</td><td style="text-align: left;"></td></tr></tbody></table><p>简写属性：list-style:list-style-type|list-style-image|list-style-position</p><p>书写顺序没有要求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/* li&#123;</span></span><br><span class="hljs-comment"><span class="language-css">list-style-type:decimal;</span></span><br><span class="hljs-comment"><span class="language-css">&#125; */</span></span><br><span class="language-css"><span class="hljs-selector-class">.first</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style-type</span>:circle;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.second</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">../images/male.gif</span>);</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.third</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style-type</span>:circle;</span><br><span class="language-css"><span class="hljs-attribute">list-style-position</span>:inside;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.fourth</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style</span>:circle <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/female.gif</span>)inside;</span><br><span class="language-css"><span class="hljs-comment">/* list-style:none; */</span></span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.nav</span>&#123;</span><br><span class="language-css"><span class="hljs-comment">/* list-style:none;</span></span><br><span class="hljs-comment"><span class="language-css">float:left; */</span></span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style</span>:none;</span><br><span class="language-css"><span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;</span><br><span class="language-css"><span class="hljs-attribute">width</span>:<span class="hljs-number">70px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;first&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;second&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;third&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fourth&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>新闻<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>小说<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>艾瑞蒂<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>政治<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学习<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="表格属性">4.5 表格属性</h3><p>border-collapse:表格中相邻的边框是否合并(折叠)为单一边框</p><p>取值：separated(默认) collapse</p><h2 id="盒子模型">5 盒子模型</h2><h3 id="简介">5.1 简介</h3><p>盒子模型是网页布局的基础，将页面中所有元素都看作是一个盒子，盒子都包含以下几个属性：</p><ul><li>width 宽度</li><li>height 高度</li><li>border 边框</li><li>padding 内边距</li><li>margin 外边距</li></ul><h3 id="盒子模型-1">5.2 盒子模型</h3><h4 id="border">5.2.1 border</h4><p>表示盒子的边框</p><p>分为四个方向： * 上top、右right、下bottom、左left *border-top、border-right、border-bottom、border-left</p><p>每个边框包含三种样式</p><pre><code class="hljs">* border-top-color,border-top-width,border-top-style* border-right-color,border-right-width,border-right-style* border-left-color,border-left-width,border-left-style* border-bottom-color,border-bottom-width,border-bottom-style</code></pre><p>style的取值： * solid 实线 * dashed 虚线 * dotted 点线 * double 双线* inset 内嵌的3D线 * outset 外嵌的3D线</p><p>简写，三种方式</p><pre><code class="hljs">* 按方向简写：    - border-top    - border-right    - border-bottom    - border-left    - 书写顺序：border-顺序:width style coloe* 按样式简写    - border-color    - border-width    - border-style    - 书写顺序：border-样式:top right bottom left    - 必须按顺时针方向书写* 终极简写：    如果四个边框样式完全相同，border:width style color</code></pre><h4 id="padding">5.2.2 padding</h4><p>表示盒子的内边距，即内容与边框之间的距离</p><p>同样也分为四个方向，也可以简写(按顺时针方向，默认上下一样，左右一样)</p><p>注意：如果上下冲突，则以上为准，左右冲突则以左为准</p><h4 id="margin">5.2.3 margin</h4><p>表示盒子的外边距，即盒子与盒子之间的距离</p><p>同样也分为四个方向，也可以简写(按顺时针方向，默认上下一样，左右一样)</p><h3 id="其他">5.3 其他</h3><h4 id="元素所占空间">5.3.1 元素所占空间</h4><p>页面中的元素实际所占的空间 *宽度＝width+左右padding＋左右border+左右margin *高度＝height+上下padding＋上下border+上下margin</p><h4 id="盒子属性默认值">5.3.2 盒子属性默认值</h4><p>不同标签的盒子属性默认值可能不同，需要自己设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">body,ul,ol,dl,li&#123;<br>    margin:0;<br>    padding:0;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="外边距的合并">5.3.3 外边距的合并</h4><p>也称为外边距的折叠，指的是两个块级元素垂直外边距相遇时它们将合并为一个外边距</p><p>两种情况： *当一个元素出现在另一个元素上面时，第一个元素的下边距与第二个元素的上边距会发生合并*当一个元素包含在另一个元素中时，并且没有内边距或边框把外边距分隔开时，两个元素的上外边距会发生合并</p><p><em>好处：更加美观</em></p><h2 id="定位方法">6 定位方法</h2><h3 id="简介-1">6.1 简介</h3><p>通过position属性实现对元素的定位，有四种定位方法</p><p>常用取值：</p><table><thead><tr><th style="text-align: left;">取值</th><th style="text-align: left;">含义</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr><td style="text-align: left;">static</td><td style="text-align: left;">默认值</td><td style="text-align: left;">按照常规文档流进行显示</td></tr><tr><td style="text-align: left;">relative</td><td style="text-align: left;">相对定位</td><td style="text-align: left;">相对于标签原来的位置进行的定位</td></tr><tr><td style="text-align: left;">absolute</td><td style="text-align: left;">绝对定位</td><tdstyle="text-align: left;">相对于第一个非static定位的父标签的定位</td></tr><tr><td style="text-align: left;">fixed</td><td style="text-align: left;">固定定位</td><td style="text-align: left;">相对于浏览器窗口进行定位</td></tr></tbody></table><p>说到这里，你可能没听懂。所以我尝试用更通俗的语言再说一遍：</p><ul><li>static<ul><li>这是元素默认的状态。元素会按照从上到下、从左到右的顺序排列在页面中。</li><li>不能使用top、right、bottom、left这些属性来移动元素的位置。</li></ul></li><li>relative<ul><li>元素仍然会占据原本的位置，但你可以通过top、right、bottom、left这些属性让它在自己的位置上“移动”一点。</li><li>元素原本的位置依然保留，占据空间不变，只是视觉上会稍微移动。</li></ul></li><li>fixed<ul><li>元素会固定在浏览器窗口的某个位置，不管你怎么滚动页面，它都不会动。</li><li>用来制作那些始终显示在某个位置的元素，比如导航栏或广告。</li></ul></li><li>absolute<ul><li>元素会相对于它的父元素进行定位，而这个父元素必须是用相对定位（relative）或绝对定位（absolute）来设置的。如果没有这样的父元素，它就会相对于整个页面定位。</li><li>元素会脱离正常的排列顺序，你可以完全控制它在页面中的位置。</li></ul></li></ul><p><em>举个例子</em> 想象你在桌子上拜访物品 *static：所有物品都按固定的顺序摆放，不能随意移动。 *relative：你可以在桌子上的原位稍微移动某个物品，但它还是在桌子上那个位置。*fixed：你把物体用绳子从天花板吊着，不管你移动桌子上的其他物品或桌子，它都不会动。*absolute：你可以把物品放在桌子上的任何位置，不考虑它原本的摆放顺序，就像你可以在桌子上任意摆放东西。</p><p>设置定位方式后，还要设置定位属性：top,bottom,left,right</p><h3 id="z-index">6.2 z-index</h3><p>设置元素定位方式后，元素会浮在页面上方，此时可以通过z-index属性设置优先级，控制元素的堆叠排序</p><p>取值为数字，值越大优先级越高，默认为auto(大多数浏览器默认为0)</p><p>注意：只能给非static定位的元素设置z-index属性</p><h2 id="其他css属性">7 其他css属性</h2><h3 id="浮动和清除">7.1 浮动和清除</h3><h4 id="浮动属性">7.1.1 浮动属性</h4><p>通过float属性来实现元素的浮动，可以让块级元素脱离常规的文档流，向左或向右移动，在同一行显示</p><p>如果一行显示不下，则会换行</p><p>常用取值： * left * right * none</p><h4 id="清除属性">7.1.2 清除属性</h4><p>通过clear属性来实现清除，设置元素的哪一侧不允许有浮动元素</p><p>常用取值： * left * right * both * none(默认取值)</p><h3 id="元素的显示和隐藏">7.2 元素的显示和隐藏</h3><h4 id="display">7.2.1 display</h4><p>通过display属性设置元素是否显示，以及是否独占一行</p><p>常用取值：</p><table><thead><tr><th style="text-align: left;">取值</th><th style="text-align: left;">含义</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr><td style="text-align: left;">none</td><td style="text-align: left;">不显示</td><td style="text-align: left;"></td></tr><tr><td style="text-align: left;">inline</td><td style="text-align: left;">显示为内联元素，行级元素的默认值</td><td style="text-align: left;">将块级元素变为行级元素，不在独占一行</td></tr><tr><td style="text-align: left;">block</td><td style="text-align: left;">显示为块级元素，块级元素的默认值</td><td style="text-align: left;">将行级元素变为块级元素，独占一行</td></tr><tr><td style="text-align: left;">inline-block</td><td style="text-align: left;">显示为内联元素，但是可以设置宽和高</td><td style="text-align: left;">在inline基础上允许设置宽度和高度</td></tr></tbody></table><h4 id="visibility">7.2.2 visibility</h4><p>常用属性</p><table><thead><tr><th style="text-align: left;">取值</th><th style="text-align: left;">含义</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr><td style="text-align: left;">visibility</td><td style="text-align: left;">显示</td><td style="text-align: left;"></td></tr><tr><td style="text-align: left;">hidden</td><td style="text-align: left;">隐藏</td><td style="text-align: left;"></td></tr></tbody></table><h4 id="区别">7.2.3 区别</h4><pre><code class="hljs">* display隐藏时不再占据页面中的空间，后面的元素会占据其位置* visibility隐藏时会占据页面中的空间，位置还保留在页面中，知识不显示</code></pre><h3 id="轮廓">7.3 轮廓</h3><h4 id="简介-2">7.3.1 简介</h4><p>轮廓outline，用于在元素周围绘制一个轮廓，位于border外围，可以突出显示元素</p><h4 id="基本用法-1">7.3.2 基本用法</h4><p>常用属性： * outline-width：轮廓宽度 * outline-color：轮廓颜色 *outline-style：轮廓样式 * outline 简写</p><p>在浏览器中，当鼠标单击或者使用<kbd>TAB<kbd>键获得焦点时，该元素会有一个轮廓outline</p><ul><li>优点：可以提高使用表单的用户体验</li><li>缺点：有时影响美观</li></ul><h2 id="页面布局">8 页面布局</h2><h3 id="简介-3">8.1 简介</h3><p>常见布局页面：<br> * 表格布局<br> * div布局</p><h3 id="表格布局">8.2 表格布局</h3><h4 id="简介-4">8.2.1 简介</h4><p>不适用于复杂布局，仅用于简单、有规则的结构</p><p>定位相对准确，与浏览器基本无关，适用于简单分割</p><h4 id="用法">8.2.2 用法</h4><p>table常用样式的属性</p><pre><code class="hljs">* border在表格外围设置边框* border-spacing设置单元格之间的距离(相当于table标签中的cellspacing属性，即间距)* border-collapse表格中相邻边框是否合并，取值：separate，collapse</code></pre><h3 id="div布局">8.3 div布局</h3><p>定位绝对准确，使用灵活，适用于复杂的布局方式</p><h4 id="简单布局">8.3.1 简单布局</h4><p>两种形式：</p><pre><code class="hljs">* 1-1-1布局</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style1.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>header<br><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>main<br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>footer<br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">* 1-2 / 3-1布局</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style2.css&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>herder<br><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>main<br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span><br>right aside<br><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>footer<br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="圣杯布局">8.3.2 圣杯布局</h4><p>页面结构，两边的边栏宽度固定，中间主体在一定范围内可自适应，并且主体优先被加载</p><p>一般防止页面缩放影响浏览，都会为页面设置一个最小宽度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style4.css&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span> <br>            header <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>main<br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span> <br>left<br><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span> <br>right<br><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span> <br>            footer <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="双飞翼布局">8.3.3 双飞翼布局</h4><p>源自淘宝的UED(用户体验设计)团队</p><p>双飞翼布局和圣杯布局要实现的效果是相同的，只是思路不同</p><p>圣杯布局和双飞翼布局的区别</p><p>双飞翼布局比圣杯布局多创建一个div</p><p>双飞翼布局不用设置内边距和相对定位，也不用设置偏移量</p><p>双飞翼布局使用的margin,圣杯布局使用的是padding</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style5.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>            header <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main-wrapper&quot;</span>&gt;</span><br>                    main <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>                left aside<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>                right aside <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>            footer <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>web前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bootstrap</title>
    <link href="/2024/05/26/Bootstrap/"/>
    <url>/2024/05/26/Bootstrap/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/Bootstrap.webp" alt="Bootstrap"></p><p>I found that many tutorials on Bootstrap are incomplete,and thetransformation is not well,thus I visited w3school and to make sure theaccuracy of this text,I decided to write it in English.</p><h2 id="introduction">1 Introduction</h2><h3 id="what-is-bootstrap">1.1 What is Bootstrap?</h3><ul><li>Bootstrap is a free front-end framework for faster and easier webdevelopment</li><li>Bootstrap includes HTML and CSS based design templates fortypography, forms, buttons, tables, navigation, modals, image carouselsand many other, as well as optional JavaScript plugins</li><li>Bootstrap also gives you the ability to easily create responsivedesigns</li></ul><p>What is Responsive Web Design? <em>Responsive web design is aboutcreating web sites which automatically adjust themselves to look good onall devices, from small phones to large desktops.</em></p><h3 id="first-web">1.2 First Web</h3><h4 id="add-tthe-html5-doctype">1.2.1 Add tthe HTML5 doctype</h4><p>Bootstrap 5 uses HTML elements and CSS properties that require theHTML5 doctype.</p><p>Always include the HTML5 doctype at the beginning of the page, alongwith the lang attribute and the correct title and character set:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap 5 Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="bootstrap-5-is-mobile-first">1.2.2 Bootstrap 5 ismobile-first</h4><p>Bootstrap 5 is designed to be responsive to mobile devices.Mobile-first styles are part of the core framework.</p><p>To ensure proper rendering and touch zooming, add the following<code>&lt;meta&gt;</code> tag inside the <code>head</code> element:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>function: * <code>width=device-width</code>:sets the width of thepage to follow the screen-width of the device (which will vary dependingon the device). * <code>initial-scale=1</code>: sets the initial zoomlevel when the page is first loaded by the browser.</p><h2 id="containers">2 Containers</h2><p>There are two main containers: * <code>.container</code> class:provides a responsive fixed with container *<code>.container-fluid</code> class:proveides a full widthcontainer,spanning the entire width of the viewport</p><h3 id="fixed-container">2.1 Fixed container</h3><p>Use the <code>.container</code> class to create aresponsive,fixed-width container.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My First Bootstrap Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is some text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="fluid-container">2.2 Fluid container</h3><p>Use the <code>.container-fluid</code> class to create a full widthcontainer,that will always span the entire width of the screen(width isalways 100%)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My First Bootstrap Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is some text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="container-padding">2.3 Container padding</h3><p>By default, containers have left and right padding, with no top orbottom padding. Therefore, we often use spacing utilities, such as extrapadding and margins to make them look even better. For example,<code>.pt-5</code> means "add a large top padding":</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container pt5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="container-border-and-color">2.4 Container border and color</h3><h3 id="responsive-containers">2.5 Responsive containers</h3><p>You can also use the <code>.container-sm|md|lg|xl</code> classes todetermine when the container should be responsive.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-sm&quot;</span>&gt;</span>.container-sm<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-md&quot;</span>&gt;</span>.container-md<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-lg&quot;</span>&gt;</span>.container-lg<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-xl&quot;</span>&gt;</span>.container-xl<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-xxl&quot;</span>&gt;</span>.container-xxl<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="grid-system">3 Grid system</h2><p>The Bootstrap 5 grid system has six classes:</p><ul><li>.col-(extra small devices - screen width &lt; 576px)</li><li>.col-sm-(small devices - screen width equal &gt;= than 576px)</li><li>.col-md-(medium devices - screen width &gt;= 768px)</li><li>.col-lg-(large devices - screen width &gt;= 992px)</li><li>.col-xl-(xlarge devices - screen width &gt;= 1200px)</li><li>.col-xxl-(xxlarge devices - screen width &gt;= 1400px)</li></ul><p>The classes above can be combined to create more dynamic and flexiblelayouts.</p><p><em>Each class scales up, so if you want to set the same widths for<code>sm</code> and <code>md</code>,you only need to specify<code>sm</code></em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Grid Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Link Bootstrap CSS --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span>//col-sm-4 specifies that on a small screen, this column will take up a quarter of the width of one of the 12 columns. On a large screen, it will remain the same width if no other class name is specified to override the style.<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-primary text-white p-3&quot;</span>&gt;</span>Column 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>//bg-primary:It is usually the most prominent colour in the page theme and is used to highlight important elements. In Bootstrap, the default primary colour is blue (#007bff).<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-secondary text-white p-3&quot;</span>&gt;</span>Column 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>//bg-secondary:Usually used to complement the primary colour and provide an extra element of colour to the page. The default secondary colour is grey (#6c757d).<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-success text-white p-3&quot;</span>&gt;</span>Column 3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>//bg-success:The colour used when indicating a successful or positive action. The default success colour is green (#28a745).<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Link Bootstrap JS (Optional) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="texttypography">4 Text/Typography</h2><h3 id="h1-to-h6">4.1 <code>&lt;h1&gt;</code> to<code>&lt;h6&gt;</code></h3><ul><li><p>Bootstrap 5 styles HTML headings (<code>&lt;h1&gt;</code> to<code>&lt;h6&gt;</code>) with a bolder font-weight and a responsivefont-size.</p></li><li><p>You can also use .h1 to .h6 classes on other elements to makethem behave as headings if you want:</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>h1 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h2&quot;</span>&gt;</span>h2 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h3&quot;</span>&gt;</span>h3 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h4&quot;</span>&gt;</span>h4 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h5&quot;</span>&gt;</span>h5 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h6&quot;</span>&gt;</span>h6 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="display-headings">4.2 Display Headings</h3><p>Display headings are used to stand out more than normal headings(larger font-size and lighter font-weight), and there are six classes tochoose from: <code>.display-1</code> to <code>.display-6</code></p><h3 id="section">4.3 <small></h3><p>In Bootstrap 5 the HTML <code>&lt;small&gt;</code> element (and the<code>.small</code> class) is used to create a smaller, secondary textin any heading:</p><h3 id="section-1">4.4 <mark></h3><p>Bootstrap 5 will style <code>&lt;mark&gt;</code> and<code>.mark</code> with a yellow background color and some padding</p><h3 id="section-2">4.5 <abbr></h3><p>Bootstrap 5 will style the HTML <code>&lt;abbr&gt;</code> elementwith a dotted border bottom and a cursor with question mark on hover</p>### 4.6<blockquote><p>Add the <code>.blockquote</code> class to a<code>&lt;blockquote&gt;</code> when quoting blocks of content fromanother source. And when naming a source, like "from WWF's website", usethe .blockquote-footer class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container mt-3&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Blockquotes<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The blockquote element is used to present content from another source:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blockquote&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>For 50 years, WWF has been protecting the future of nature. The world&#x27;s leading conservation organization, WWF works in 100 countries and is supported by 1.2 million members in the United States and close to 5 million globally.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blockquote-footer&quot;</span>&gt;</span>From WWF&#x27;s website<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>### 4.6<dl><p><code>&lt;dl&gt;</code>:describtion list</p><h3 id="section-3">4.7 <code></h3><p>Inline snippets of code should be embedded in the code element</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">p&gt;The following HTML elements: <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>section<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>, and <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> defines a section in a document.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="section-4">4.8 <kbd></h3><p>To indicate input that is typically entered via the keyboard, use thekbd element</p>### 4.9<pre><p>Text in a pre elementis displayed in a fixed-width font,and itpreserves both spaces and line breaks.</p><h3 id="more">4.10 more</h3><p><img src="/images/TypographyClass.png" alt="More Typography Classes"></p><ul><li>initialism<ul><li>Display the text inside an <code>&lt;abbr&gt;</code> element</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>  &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;<br>  &lt;link href=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>  &lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;container mt-3&quot;</span>&gt;<br>  &lt;h2&gt;Typography&lt;/h2&gt;<br>  &lt;p&gt;The &lt;abbr title=<span class="hljs-string">&quot;World Health Organization&quot;</span>&gt;WHO&lt;/abbr&gt; was founded in <span class="hljs-number">1948.</span> (normal abbr)&lt;/p&gt;      <br>  &lt;p&gt;The &lt;abbr title=<span class="hljs-string">&quot;World Health Organization&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;initialism&quot;</span>&gt;WHO&lt;/abbr&gt; was founded in <span class="hljs-number">1948.</span> (slightly smaller abbr)&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><ul><li>list-unstyled<ul><li>Removes the default list-style and left margin on list items (workson both <code>&lt;ul&gt;</code> and <code>&lt;ol&gt;</code>). This classonly applies to immediate children list items (to remove the defaultlist-style from any nested lists, apply this class to any nested listsas well)</li></ul></li><li>list-inline<ul><li>Places all list items on a single line(used together with<code>.list-inline-item</code> on each <code>&lt;li&gt;</code>elements)</li></ul></li></ul><h2 id="tables">5 Tables</h2><h3 id="basic-table">5.1 Basic Table</h3><p>The <code>.table</code> class adds basic styling to a table:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>  &lt;title&gt;Bootstrap Example&lt;/title&gt;<br>  &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>  &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;<br>  &lt;link href=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>  &lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;container mt-3&quot;</span>&gt;<br>  &lt;h2&gt;Basic Table&lt;/h2&gt;<br>  &lt;p&gt;The .table <span class="hljs-keyword">class</span> adds basic <span class="hljs-built_in">styling</span> (light padding <span class="hljs-keyword">and</span> horizontal dividers) to a table:&lt;/p&gt;            <br>  &lt;table <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;<br>    &lt;thead&gt;<br>      &lt;tr&gt;<br>        &lt;th&gt;Firstname&lt;/th&gt;<br>        &lt;th&gt;Lastname&lt;/th&gt;<br>        &lt;th&gt;Email&lt;/th&gt;<br>      &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;John&lt;/td&gt;<br>        &lt;td&gt;Doe&lt;/td&gt;<br>        &lt;td&gt;john@example.com&lt;/td&gt;<br>      &lt;/tr&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;Mary&lt;/td&gt;<br>        &lt;td&gt;Moe&lt;/td&gt;<br>        &lt;td&gt;mary@example.com&lt;/td&gt;<br>      &lt;/tr&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;July&lt;/td&gt;<br>        &lt;td&gt;Dooley&lt;/td&gt;<br>        &lt;td&gt;july@example.com&lt;/td&gt;<br>      &lt;/tr&gt;<br>    &lt;/tbody&gt;<br>  &lt;/table&gt;<br>&lt;/div&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="other-classes">Other classes</h3><p><img src="/images/Bootstrap_table.png"></p><h2 id="forms">6 Forms</h2><h3 id="bootstrap-form-layouts">6.1 Bootstrap Form layouts</h3><p>Bootstrap provides three types of form layouts: * Vertival form(thisis default) * Horizontal form * Inline form</p><p>Standard rules for all three form layouts: * Wrap labels and formcontrols in <code>&lt;div class="form-group"&gt;</code> * Add class<code>.form-control</code> to all textual<code>&lt;input&gt;</code>,<code>&lt;textarea&gt;</code>,and<code>&lt;select&gt;</code> elements</p><h3 id="vertical-form">6.2 vertical form</h3><p>Here's an example</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Vertical (basic) form<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/action_page.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span>Email:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span>Password:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember&quot;</span>&gt;</span> Remember me<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="\Bootstrap\vertical%20form.png" alt="vertical form" /><figcaption aria-hidden="true">vertical form</figcaption></figure><h3 id="inline-form">6.3 inline form</h3><p>In an inline form, all of the elements are inline,left-aligned,andthe labels are alongside.</p><p>Additional rule: * Add class <code>.form-inline</code> to the<code>&lt;form&gt;</code> element</p><p>Here's an example</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span>, <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Inline form<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Make the viewport larger than 768px wide to see that all of the form elements are inline, left aligned, and the labels are alongside.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-inline&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/action_page.php&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span>Email:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember&quot;</span>&gt;</span>Remember me<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/Bootstrap/inline%20form.png" alt="inline form" /><figcaption aria-hidden="true">inline form</figcaption></figure><h3 id="horizontal-form">6.4 Horizontal Form</h3><p>A horizontal form means that the labels are aligned next to the inputfield (horizontal) on large and medium screens. On small screens (767pxand below), it will transform to a vertical form (labels are placed ontop of each input).</p><p>Additional rules for a horizontal form: * Add class<code>.form-horizontal</code> to the <code>&lt;form&gt;</code> element *Add class <code>.control-label</code> to all <code>&lt;label&gt;</code>elements</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Horizontal form<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-horizontal&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/action_page.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;control-label col-sm-2&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span>Email:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;control-label col-sm-2&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span>Password:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span>          <br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember&quot;</span>&gt;</span> Remember me<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web前端</tag>
      
      <tag>Bootstrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery入门</title>
    <link href="/2024/05/25/jQuery/"/>
    <url>/2024/05/25/jQuery/</url>
    
    <content type="html"><![CDATA[<head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="ie=edge"><title>Document</title><script src="https://cdn.jsdelivr.net/npm/mermaid@10.6.1/dist/mermaid.min.js"></script><script>        window.onload=mermaid.initialize({"theme": "forest"});    </script></head><p>本文主要从jQuery简介、核心函数、核心对象三方面介绍jQuery</p><p>文章可能有点长，但要相信干货满满</p><p><del>而不是某Dumpling太啰嗦了</del></p><h2 id="前言">0.前言</h2><p>可能对于刚学web前端的同学(比如我)来说，学了很多东西，但是对于他们的内在联系不太清晰。所以在jQuery入门之前我想先梳理一下他们的关系</p><p>话不多说，先上图</p><div class="mermaid"><pre><code class="hljs">    graph TD;</code></pre><p>    HTML[HTML<br>网页结构] --&gt; CSS[CSS<br>网页样式];     HTML--&gt; JS[JavaScript<br>动态交互];     JS --&gt;jQuery[jQuery<br>简化JS操作];     JS --&gt;Bootstrap[Bootstrap<br>响应式设计];     CSS --&gt; Bootstrap;     jQuery--&gt; Bootstrap;     classDef someclassfill:#f9f,stroke:#333,stroke-width:2px;     classHTML,CSS,JS,jQuery,Bootstrap someclass;</p></div><ul><li><code>HTML(HyperText Markup Language)</code>:<ul><li>是用来构建网站的基础，定义网页的结构和内容。</li><li>你可以把它想象成建筑的骨架</li></ul></li><li><code>CSS(Cascading Style Sheets)</code>:<ul><li>用于设置网页布局和样式，比如字体(font)、颜色(color)和间距(padding)等。</li><li>CSS像是给网页穿上衣服，让结构更美观</li></ul></li><li><code>JavaScript</code>:<ul><li>是一种程序语言，用于添加网页的动态功能，如响应用户的点击、数据更新等。</li><li>他让网页有了动起来的能力。</li></ul></li><li><code>jQuery</code>：<ul><li>是一个<code>JavaScript</code>的库，简化<code>JavaScript</code>的编程。</li><li>比如，他让文档操作、事件处理、动画等更容易实现</li><li><code>jQuery</code>就像一个工具包，帮你更好使用<code>JavaScript</code>。</li></ul></li><li><code>BootStrap</code>:<ul><li>一个前端框架，包含了<code>HTML</code>、<code>CSS</code>和<code>JavaScript</code>的组件。</li><li>提供了一套预设的样式和功能，可以快速帮你开发响应式和移动优先的网页</li><li><code>BootStrap</code>就像一个建筑工具包，里面有各种模块和工具，让建筑(网页)更快速的搭建起来</li></ul></li></ul><h2 id="jquery简介">1 jQuery简介</h2><h3 id="jquery简介-1">1.1 jQuery简介</h3><p><del>虽然感觉不会有人喜欢看定义但还是感觉要写</del></p><ul><li><p>jQuery 是一个 JavaScript 函数库。</p></li><li><p>jQuery 是一个轻量级的"写的少，做的多"的 JavaScript 库。</p></li><li><p>jQuery 库包含以下功能：</p><ul><li>HTML 元素选取</li><li>HTML 元素操作</li><li>CSS 操作</li><li>HTML 事件函数</li><li>JavaScript 特效和动画</li><li>HTML DOM 遍历和修改</li><li>AJAX</li><li>Utilities 提示： 除此之外，jQuery 还提供了大量的插件。</li></ul></li></ul><h3 id="jquery上手">1.2 jQuery上手</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/1.9.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 请将jQuery代码书写在这里 ...</span></span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello,World!&#x27;</span>);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="jquery的双枪">1.3 jQuery的双枪</h3><p><code>jQuery</code>的双枪分别是：</p><ul><li>jQuery的核心函数：即：<code>$()</code>或<code>jQuery()</code>。jQuery定义了这个全局函数供我们使用，他既可以作为一般函数调用，且传递的参数类型不同/格式不同，功能就完全不同，也可以作为对象调用其定义好的方法<ul><li>jQuery的核心对象：即执行<code>jQuery</code>核心函数所返回的对象，<code>jQuery</code>对象内部包含的<code>dom</code>元素对象的伪数组(可能只有一个元素)，<code>jQuery</code>对象有很多属性和方法，让程序员能够方便的操纵<code>dom</code>,调用jQuery对象的任何方法后返回的还是当前jQuery对象</li></ul></li></ul><p>以上这段话你可能没看明白，但是没关系，先看完后面的内容再回过头来看</p><h2 id="jquery的核心函数">2 jQuery的核心函数</h2><h3 id="选择器">2.1 选择器</h3><h3 id="基本选择器">2.1.1 基本选择器</h3><p>写在前头：其实选择器的大部分的格式都是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;example&#x27;).css(&#x27;example1&#x27;);<br></code></pre></td></tr></table></figure><p>带着这个公式去读以下内容，你会很容易发现套路</p><h4 id="标签选择器">2.1.1.1 标签选择器</h4><p>需求：选择页面中所有的div标签，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;div&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="id选择器">2.1.1.2 id选择器</h4><p>需求：选择页面中所有id为btn的按钮，将其改为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;#btn&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="class选择器">2.1.1.3 class选择器</h4><p>需求：选择页面中所有class为red的段落，将其背景设置成红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>我会变红<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我不红了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>我又红了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;.red&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="通配符选择器">2.1.1.4 通配符选择器</h4><p>需求：将页面中class为content的div下所有元素的背景设置成红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;.content *&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="并集选择器">2.1.1.5 并集选择器</h4><p>需求：选择页面中所有段落与按钮，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是段落，我是红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>我是按钮，也是红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我不是红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;p, button&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="交集选择器">2.1.1.6 交集选择器</h4><p>需求：选择页面中所有class为红色的段落，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>我是红的<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我不是红的<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>我也不是红的<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;p.red&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h3 id="层级选择器">2.1.2 层级选择器</h3><h4 id="子代选择器">2.1.2.1 子代选择器</h4><p>需求：选择ul下所有span子元素，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span1,我是红的<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我不是红的，因为我是li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我也不是<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;ul&gt;span&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="后代选择器">2.1.2.2 后代选择器</h4><p>需求：选择ul下所有span元素，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span1,我是红的<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我不是红的，因为我是li <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>但我还是红的<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我也不是<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;ul span&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p><del>DUmpling的唠叨</del> 子代选择器和后代选择器的区别： -我觉得这很像西欧封建领主和中国封建领主的差别，西欧领主认为：我的附庸的附庸不是我的附庸(子代选择器)，但在中国，普天之下莫非王土，率土之滨莫非王臣，管你是谁，耶稣来了也不行，皇-帝说的(后代选择器)。 -子代选择器只能管一个人，所以要带<code>&gt;</code>。 -但是后代选择器却是空格。这是为什么呢？因为这不是空格，而是朕的天下</p><h4 id="兄弟选择器">2.1.2.3 兄弟选择器</h4><p>需求：选中id为box的下一个兄弟li，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是li1 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li1的span1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li2 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li2的span2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <span class="hljs-comment">&lt;!--这一行是红色的--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li3 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li3的span3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;#box+li&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p>需求：选中id为box之后所有的li，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是li1 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li1的span1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li2 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li2的span2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li3 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li3的span3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;#box~li&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h3 id="过滤选择器">2.1.3 过滤选择器</h3><h4 id="基本筛选器">2.1.3.1 基本筛选器</h4><p>需求：隔行变色，让表格奇数行背景为红色，:even代表选取下标为偶数的行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0px&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;10px&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>//我是红的<br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>//我也是红的<br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;tr:even&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p><del>Dumpling又来唠叨了</del> 为什么第1，3行是红色的？因为行数下标是从0开始取的，所以你可以理解为是第0行、第2行是红色的</p><ul><li><p>要使表格偶数行背景为红色，把:even改成:odd就行了(行的下标从0开始)</p></li><li><p>要使表格第一行背景为红色，把:even改成:first</p></li><li><p>要使表格最后一行背景为红色，把:even改成:last</p></li><li><p>要使表格第0行到第n行的下标为红色，把:even改成:lt(n)就行了(行的下标从0开始)</p></li><li><p>要使表格从第n行开始全部变成红色，把:even改成:gt(n)就行了(行的下标从0开始)</p></li><li><p>要使表格第n行的背景为红色，把:even改成:eq(n)就行了(行的下标从0开始)</p></li><li><p>要使表格除了第n行，其他行的背景为红色，把:even改成:not(eq(n))就行了(行的下标从0开始)</p></li></ul><p><del>Dumpling又双叒叕来了</del> 聪明如你，肯定发现了lt是lessthan的缩写，gt是greaterthan的缩写，eq是equal的缩写，所以这些还是很好记的</p><h4 id="内容筛选器">2.1.3.2 内容筛选器</h4><p>需求：实现让内容为"男"的单元格的背景变为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0px&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;10px&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;td:contains(&quot;男&quot;)&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p>需求：实现让内容为span标签的单元格的背景变为红色</p><p>把:contains("男")改成:has(span)就行了</p><p>需求：实现让内容为空的单元格的背景变为红色</p><p>把:contains("男")改成:empty就行了</p><p>需求：实现让内容不为空的单元格的背景变为红色</p><p>把:contains("男")改成:parent就行了</p><h4 id="属性筛选器">2.1.3.3 属性筛选器</h4><p>需求描述：查找herflang属性的标签元素，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">hreflang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>en<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">hreflang</span>=<span class="hljs-string">&quot;en-UK&quot;</span>&gt;</span>en-UK<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">hreflang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span>zh-CN<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;a[hreflang]&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p>需求：查找hreflang属性值是en的所有超链接，设置其背景为红色</p><p>把[hreflang]改成[hreflang="en"]就行了</p><p>需求：查找hreflang属性值不是en的所有超链接，设置其背景为红色</p><p>把[hreflang]改成[hreflang!="en"]就行了</p><h2 id="工具">2.2 工具</h2><h3 id="each方法">2.2.1 $.each方法</h3><p>方法描述：一个通用的迭代函数，它可以用来无缝迭代对象和数组。数组和类似数组的对象通过一个长度属性（如一个函数的参数对象）来迭代数字索引，从0到length- 1，其他对象通过其属性名进行迭代。</p><p>需求：给定一个数组，使用$.each方法进行遍历输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var arr = [10, 90, 20, 80, 30, 70, 40, 60, 50];<br>$.each(arr, function (index, element) &#123;<br>    console.log(index, element);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="trim方法">2.2.2 $.trim方法</h3><p>方法描述：去掉字符串起始和结尾的空格。(trim的中文意思是修剪)</p><p>需求：给定一个字符串，去掉该字符串的前后空格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var str = &#x27;    hello    &#x27;;<br>console.log($.trim(str));//hello<br></code></pre></td></tr></table></figure><h3 id="type方法">2.2.3 $.type方法</h3><p>方法描述：确定JavaScript 对象的类型。</p><p>需求：给定一个对象，输出该对象的类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var str = &#x27;    hello    &#x27;;<br>console.log($.type(str));//string<br></code></pre></td></tr></table></figure><h3 id="isarray方法">2.2.4 $.isArray方法</h3><p>方法描述：用来测试指定对象是否为一个数组。</p><p>需求：给定一个对象，输出该对象是不是数组类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var arr = [10, 90, 20, 80, 30, 70, 40, 60, 50];<br>console.log($.isArray(arr));//true<br></code></pre></td></tr></table></figure><h3 id="isfunction方法">2.2.5 $.isFunction方法</h3><p>方法描述：用来测试指定对象是否为一个函数。</p><p>需求：给定一个对象，输出该对象是不是函数类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var fun = function () &#123;<br>    console.log(&quot;hello&quot;);<br>&#125;;<br>console.log($.isFunction(fun));//true<br></code></pre></td></tr></table></figure><h2 id="jquery的核心对象">3 jQuery的核心对象</h2><h3 id="属性">3.1 属性</h3><h4 id="属性-1">3.1.1 属性</h4><h4 id="attr">3.1.1.1 attr()</h4><p>方法描述：专门操作属性值为非布尔值的属性，该方法读写一体。</p><p>需求：设置p标签的title属性为"我是attr修改后的段落标题"</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;我是段落标题&quot;</span>&gt;</span>我是段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;#content&#x27;).attr(&#x27;title&#x27;, &#x27;我是attr修改后的段落标题&#x27;);<br></code></pre></td></tr></table></figure><h4 id="prop">3.1.1.2 prop()</h4><p>方法描述：专门操作属性值为布尔值的属性，该方法读写一体。</p><p>需求：设置复选框的状态为选中状态</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>复选框<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;:checkbox&#x27;).prop(&#x27;checked&#x27;, &#x27;true&#x27;);<br></code></pre></td></tr></table></figure><h4 id="val">3.1.1.3 val()</h4><p>方法描述：该方法主要用于获取表单元素的值和设置表单元素的值，该方法读写一体。</p><p>需求：设置文本框的值为"123456"</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;:text&#x27;).val(&#x27;123456&#x27;)<br></code></pre></td></tr></table></figure><h3 id="样式">3.1.2 样式</h3><h4 id="css">3.1.2.1 css()</h4><p>方法描述：获取匹配元素集合中的第一个元素的样式属性的计算值或设置每个匹配元素的一个或多个CSS属性。</p><p>需求描述：设置div的背景颜色为红色，字体颜色为白色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;div&#x27;).css(&#123;<br>    &#x27;background&#x27;: &#x27;red&#x27;,<br>    &#x27;color&#x27;: &#x27;white&#x27;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="addclass">3.1.2.2 addClass()</h4><p>方法描述：为每个匹配的元素添加指定的样式类名。</p><p>需求描述：为所有的li添加样式”beauty“</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML">.beauty &#123;<br>    font-weight: bold;<br>    font-size: 18px;<br>    color: coral;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;li&#x27;).addClass(&#x27;beauty&#x27;);<br></code></pre></td></tr></table></figure><h4 id="removeclass">3.1.2.3 removeClass()</h4><p>方法描述：移除集合中每个匹配元素上一个，多个或全部样式。</p><p>需求：为所有的li移除样式”beauty“</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML">.beauty &#123;<br>    font-weight: bold;<br>    font-size: 18px;<br>    color: coral;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;beauty&quot;</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;beauty&quot;</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;beauty&quot;</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;beauty&quot;</span>&gt;</span>列表项4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;li&#x27;).removeClass(&#x27;beauty&#x27;);<br></code></pre></td></tr></table></figure><h4 id="toggleclass">3.1.2.4 toggleClass()</h4><p>方法描述：为匹配的元素集合中的每个元素上添加或删除一个或多个样式类，取决于这个样式类是否存在。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML">.hide &#123;<br>    width: 100px;<br>    height: 100px;<br>    display: none;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;button&#x27;).click(function () &#123;<br>    $(&#x27;div&#x27;).toggleClass(&#x27;hide&#x27;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="尺寸">3.1.3 尺寸</h3><h4 id="width">3.1.3.1 width()</h4><p>方法描述：获取内容元素width的值。</p><h4 id="height">3.1.3.2 height()</h4><p>方法描述：获取内容元素height的值。</p><h4 id="innerwidth">3.1.3.3 innerWidth()</h4><p>方法描述：获取内容元素width+padding的值。</p><h4 id="innerheight">3.1.3.4 innerHeight()</h4><p>方法描述：获取内容元素height+padding的值。</p><h4 id="outerwidth">3.1.3.5 outerWidth()</h4><p>方法描述：outerWidth(false/true)，获取内容元素width+padding+border的值，如果是true再加上margin的值。</p><h4 id="outerheight">3.1.3.6 outerHeight()</h4><p>方法描述：outerHeight(false/true)，获取内容元素height+padding+border的值，如果是true再加上margin的值。</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web前端</tag>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ STL</title>
    <link href="/2024/05/23/CPPSTL/"/>
    <url>/2024/05/23/CPPSTL/</url>
    
    <content type="html"><![CDATA[<h2 id="知识框架">知识框架</h2><p><img src="/images/C++STL.png"></p><h2 id="vector">1.vector</h2><h3 id="介绍">1.1 介绍</h3><p><code>vector</code>为可变长数组(我比较喜欢叫他动态数组),可以随时添加数值和删除元素</p><h3 id="初始化">1.2 初始化</h3><p><code>vector</code>分为一维初始化和二维初始化</p><h4 id="一维初始化">一维初始化</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; t1; <span class="hljs-comment">//一维数组</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">t2</span><span class="hljs-params">(n)</span></span>; <span class="hljs-comment">//定义一个长度为n的数组</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">t3</span><span class="hljs-params">(n, <span class="hljs-number">1</span>)</span></span>; <span class="hljs-comment">//定义一个长度为n的数组，t3[0]~t3[n - 1]均初始化为1</span><br>vector&lt;<span class="hljs-type">int</span>&gt; t4&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;; <span class="hljs-comment">//数组中有五个元素，数组长度就为5</span><br>vector&lt;<span class="hljs-type">int</span>&gt; t5 = t4; <span class="hljs-comment">//拷贝初始化</span><br></code></pre></td></tr></table></figure><h4 id="二维初始化">二维初始化</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; t2;<span class="hljs-comment">//二维数组</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v[<span class="hljs-number">5</span>];<span class="hljs-comment">//定义可变长二维数组</span><br><span class="hljs-comment">//注意：行不可变（只有5行）, 而列可变,可以在指定行添加元素</span><br><span class="hljs-comment">//第一维固定长度为5，第二维长度可以改变</span><br><span class="hljs-comment">//注意：[]是二维数组，()是一维数组！ ！ ！</span><br><span class="hljs-comment">//（有个大聪明因为这个debug了半个小时）</span><br></code></pre></td></tr></table></figure><h3 id="方法函数">1.3 方法函数</h3><p>话不多说，直接上</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; c;<br></code></pre></td></tr></table></figure><table><thead><tr><th>代码</th><th>含义</th><th>时间复杂度</th></tr></thead><tbody><tr><td>c.front()</td><td>返回第一个数据</td><td>O(1)</td></tr><tr><td>c.back()</td><td>返回最后一个数据</td><td>O(1)</td></tr><tr><td>c.pop_back()</td><td>删除最后一个数据</td><td>O(1)</td></tr><tr><td>c.push_back(element)</td><td>在尾部加一个数据</td><td>O(1)</td></tr><tr><td>c.emplace_back(ele)</td><td>类似c.push_back(),但有时更快</td><td>O(1)</td></tr><tr><td>c.size()</td><td>返回数据个数</td><td>O(1)</td></tr><tr><td>c.clear()</td><td>清除元素个数</td><td>O(N)</td></tr><tr><td>c.resize(n, v)</td><td>改变数组大小为n并赋值为v，如果没有则默认赋值0</td><td></td></tr><tr><td>c.insert(it, x)</td><td>向迭代器it插入元素x</td><td>O(N)</td></tr><tr><td>c.erase(first,last)</td><td>删除<code>[first, last)</code>所有元素</td><td>O(N)</td></tr><tr><td>c.begin()</td><td>返回首元素迭代器(可以通俗的理解为地址)</td><td>O(1)</td></tr><tr><td>c.end()</td><td>返回最后一个元素后一个位置的迭代器</td><td>O(1)</td></tr><tr><td>c.empty()</td><td>判断是否为空，空为真</td><td>O(1)</td></tr><tr><td>c.at(idx)</td><td>返回c[idx]的值（但还是建议用[]）</td><td></td></tr><tr><td>c.reserve(sz)</td><td>改变<code>capacity</code>的大小</td><td></td></tr><tr><td>c.assign(n, val)</td><td>讲<code>n</code>个<code>val</code>值拷贝到<code>c</code>数组中</td><td></td></tr><tr><td>c.assign(beg, end)</td><td>讲另一个容器的<code>[x.begin(), x.end()]</code>里的内容拷贝到c</td><td></td></tr></tbody></table><h3 id="访问">1.4 访问</h3><p>总共三种方法：<code>下标法</code>、<code>迭代器法</code>、<code>auto</code></p><h4 id="下标访问">1.4.1 下标访问</h4><p>和普通数组的区别是没有区别</p><h4 id="迭代器访问">1.4.2 迭代器访问</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; vi&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-comment">//迭代器访问</span><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator it;   <br><span class="hljs-comment">// 相当于声明了一个迭代器类型的变量it</span><br><span class="hljs-comment">// 通俗来说就是声明了一个指针变量</span><br></code></pre></td></tr></table></figure><ul><li>方法一</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = vi.<span class="hljs-built_in">begin</span>(); <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>cout &lt;&lt; *(it + i) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>方法二</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt;::iterator it; <span class="hljs-keyword">for</span>(it = vi.<span class="hljs-built_in">begin</span>(); it != vi.<span class="hljs-built_in">end</span>();it ++) cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>; <br><span class="hljs-comment">//vi.end()指向尾元素地址的下一个地址 </span><br><span class="hljs-comment">// 或者 </span><br><span class="hljs-keyword">auto</span> it = vi.<span class="hljs-built_in">begin</span>();<br><span class="hljs-keyword">while</span>(it != vi.<span class="hljs-built_in">end</span>())<br>&#123;<br>    cout &lt;&lt; *it &lt;&lt; endl;<br>    it++;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="智能指针">1.4.3 智能指针</h4><p>只能遍历完整个数组，如果要遍历指定内容，参考方法一、二</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 1. 输入 </span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>; <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;x: a) <br>&#123;<br>     cin &gt;&gt; x; <span class="hljs-comment">// 可以进行输入，注意加引用 </span><br>&#125; <br><br><span class="hljs-comment">// 2. 输出 </span><br>vector&lt;<span class="hljs-type">int</span>&gt; v; <br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">12</span>); <br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">241</span>); <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> val : v) <br>&#123;<br>     cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>; <span class="hljs-comment">// 12 241 </span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="stack">2 stack</h2><h3 id="介绍-1">2.1 介绍</h3><p>栈为数据结构的一种，实现先进后出(FILO)的容器</p><h3 id="初始化-1">2.2 初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><br>stack&lt;<span class="hljs-type">int</span>&gt; s1;<br>stack&lt;string&gt; s2;<br>stack&lt;node&gt; s3;<span class="hljs-comment">//node为结构体类型</span><br></code></pre></td></tr></table></figure><h3 id="方法函数-1">2.3 方法函数</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>s.push(ele)</td><td>元素<code>ele</code>入栈，增加元素</td></tr><tr><td>s.pop()</td><td>移除栈顶元素</td></tr><tr><td>s.top()</td><td>取得栈顶元素（但不删除）</td></tr><tr><td>s.empty()</td><td>检查栈内是否为空</td></tr><tr><td>s.size()</td><td>返回栈内元素的个数</td></tr></tbody></table><h3 id="栈遍历">2.4 栈遍历</h3><p>栈只能对栈顶元素进行操作，如果想要操作，只能将栈中元素一个个取出来存在数组中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CPP">stack&lt;<span class="hljs-type">int</span>&gt; st;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) st.<span class="hljs-built_in">push</span>(i);<br><br><span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())<br>&#123;<br>     <span class="hljs-type">int</span> tp = st.<span class="hljs-built_in">top</span>();<br>     st.<span class="hljs-built_in">pop</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组模拟栈进行遍历">2.5 数组模拟栈进行遍历</h3><p>优点：比<code>STL</code>的<code>stack</code>速度更快，遍历元素更方便</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> s[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> tt = <span class="hljs-number">-1</span>;<span class="hljs-comment">//tt代表栈顶指针，初始栈内无元素，tt为-1</span><br><br><span class="hljs-comment">//入栈</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">5</span>; i++)<br>&#123;<br>     s[++tt] = i;<br>&#125;<br><br><span class="hljs-comment">//出栈</span><br><span class="hljs-type">int</span> top_element = s[tt--];<br><br><span class="hljs-comment">//入栈示意图</span><br><span class="hljs-comment">//0 1 2 3 4 5</span><br><span class="hljs-comment">//          tt</span><br><span class="hljs-comment">//出栈后示意图</span><br><span class="hljs-comment">//0 1 2 3 4</span><br><span class="hljs-comment">//        tt</span><br></code></pre></td></tr></table></figure><h2 id="queue">3 queue</h2><h3 id="介绍-2">3.1 介绍</h3><p>队列是一种先进先出的数据结构(FIFO)</p><h3 id="初始化-2">3.2 初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span><span class="hljs-comment">//别忘了头文件</span></span><br><br>queue&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="方法函数-2">3.3 方法函数</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>q.front()</td><td>返回队首元素O(1)</td></tr><tr><td>q.back()</td><td>返回队尾元素O(1)</td></tr><tr><td>q.push(element)</td><td>尾部添加一个元素<code>element</code> 入队</td></tr><tr><td>q.pop()</td><td>删除第一个元素，出队O(1)</td></tr><tr><td>q.size()</td><td>返回队列中元素个数，返回值类型<code>unsigned int</code></td></tr><tr><td>q.empty()</td><td>判断是否为空</td></tr></tbody></table><h3 id="数组模拟">3.4 数组模拟</h3><p>使用<code>q[]</code>数组模拟队列</p><p><code>hh</code>表示队首元素的下标，初始为0</p><p><code>tt</code>表示队尾元素的下标，初始为-1，表示刚开始时队列为空</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br>     <span class="hljs-comment">//入队</span><br>     q[++tt] = <span class="hljs-number">1</span>;<br>     q[++tt] = <span class="hljs-number">2</span>;<br>     <span class="hljs-comment">//出队</span><br>     <span class="hljs-keyword">while</span>(hh &lt;= tt)<br>     &#123;<br>          <span class="hljs-type">int</span> t = q[hh++];<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, t);<br>     &#125;<br><br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="deque">4 deque</h2><h3 id="介绍-3">4.1 介绍</h3><p>首尾都可插入和删除的队列为双端队列<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//添加头文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><span class="hljs-comment">//初始化定义</span><br>deque&lt;<span class="hljs-type">int</span>&gt; dq;<br></code></pre></td></tr></table></figure></p><h3 id="方法函数-3">4.2 方法函数</h3><blockquote><p>注意双端队列的常数比较大</p></blockquote><table><thead><tr><th>代码</th><th>含义</th><th>时间复杂度</th></tr></thead><tbody><tr><td>push_back(x) / push_front(x)</td><td>把<code>x</code>插入队尾后/队首</td><td><span class="math inline">\(O(1)\)</span></td></tr><tr><td>back() / front()</td><td>返回队尾/队首元素</td><td><span class="math inline">\(O(1)\)</span></td></tr><tr><td>pop_back() / pop_front()</td><td>删除队尾/队首元素</td><td><span class="math inline">\(O(1)||erase(iterator it)|删除双端队列中的某一个元素|||erase(iterator first, iterator last)|删除双端队列中[first,last)中的元素|||empty()|判断deque是否为空|\)</span>O(1)<span class="math inline">\(||size()|返回deque的元素数量|\)</span>O(1)$</td></tr><tr><td>clear()</td><td>清空deque</td><td></td></tr></tbody></table><h3 id="注意点">4.3 注意点</h3><blockquote><p>deque可以进行排序 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//从小到大</span><br><span class="hljs-built_in">sort</span>(q.<span class="hljs-built_in">begin</span>(), q.<span class="hljs-built_in">end</span>());<br><span class="hljs-comment">//从大到小排列</span><br><span class="hljs-built_in">sort</span>(q.<span class="hljs-built_in">begin</span>(), q.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br></code></pre></td></tr></table></figure></p></blockquote><h2 id="priority_queue">5 priority_queue</h2><h3 id="介绍-4">5.1 介绍</h3><p>优先队列是在正常队列的基础上加了优先级，保证每次的队首元素都是优先级最大的。<br />可以实现每次从优先队列中取出的元素都是队列中优先级最大的一个。<br />它的底层是通过堆来实现的。</p><h3 id="函数方法">5.2 函数方法</h3><table><thead><tr><th>代码</th><th>含义</th><th>时间复杂度</th></tr></thead><tbody><tr><td>q.top()</td><td>访问队首元素</td><td><span class="math inline">\(O(1)\)</span></td></tr><tr><td>q.push()</td><td>入队</td><td><span class="math inline">\(O(logN)\)</span></td></tr><tr><td>q.pop()</td><td>堆顶(队首)元素出队</td><td><span class="math inline">\(O(logN)\)</span></td></tr><tr><td>q.size()</td><td>队列元素个数</td><td><span class="math inline">\(O(1)\)</span></td></tr><tr><td>q.empty()</td><td>是否为空</td><td><span class="math inline">\(O(1)\)</span></td></tr><tr><td>注意没有clear()!</td><td>不提供此方法</td><td></td></tr></tbody></table><h3 id="设置优先级">5.3 设置优先级</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CPP">priority_queue&lt;<span class="hljs-type">int</span>&gt; pq;<span class="hljs-comment">//默认大根堆，即每次取出的元素是队列中的最大值</span><br>priortiy_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; q;<span class="hljs-comment">//小根堆，每次取出的元素是队列中的最小值</span><br></code></pre></td></tr></table></figure><h2 id="map">6 map</h2><h3 id="介绍-5">6.1 介绍</h3><p>映射类似于函数的对应关系，每一个<code>x</code>对应一个<code>y</code>，而<code>map</code>是每个键对应一个值</p><h3 id="初始化-3">6.2 初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><br>map&lt;string, string&gt; mp1;<br>map&lt;string, <span class="hljs-type">int</span>&gt; mp2;<br>map&lt;<span class="hljs-type">int</span>, node&gt; mp3;<span class="hljs-comment">//node为结构体</span><br></code></pre></td></tr></table></figure><h3 id="函数方法-1">6.3 函数方法</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td><code>mp.find(key)</code></td><td>返回键围殴key的映射迭代器</td></tr><tr><td><code>mp.erase(it)</code></td><td>删除迭代器对应的键和值</td></tr><tr><td><code>mp.erase(key)</code></td><td>根据映射的键删除键和值</td></tr><tr><td><code>mp.insert(first,last)</code></td><td>删除左闭右开区间迭代器对应的键和值</td></tr><tr><td><code>mp.insert()</code></td><td>插入元素，插入时要构造键值对</td></tr><tr><td><code>mp.size()</code></td><td>返回映射的对数</td></tr><tr><td><code>mp.clear()</code></td><td>清空map中所有元素</td></tr><tr><td><code>mp.empty()</code></td><td>如果map为空，返回true，否则返回false</td></tr><tr><td><code>mp.mp.begin()</code></td><td>返回指向map第一个元素的迭代器（地址）</td></tr><tr><td><code>mp.end()</code></td><td>返回指向map尾部的迭代器（最后一个元素的下一个地址）</td></tr><tr><td><code>mp.rbegin()</code></td><td>返回指向map最后一个元素的迭代器（地址）</td></tr><tr><td><code>mp.rend()</code></td><td>返回指向map第一个元素前面(上一个）的逆向迭代器（地址）</td></tr><tr><td><code>mp.count(key)</code></td><td>查看元素是否存在，因为map中键是唯一的，所以存在返回1，不存在返回0</td></tr><tr><td><code>mp.lower_bound()</code></td><td>返回一个迭代器，指向键值&gt;= key的第一个元素</td></tr><tr><td><code>mp.upper_bound()</code></td><td>返回一个迭代器，指向键值&gt; key的第一个元素</td></tr></tbody></table><h2 id="set">7 set</h2><h3 id="介绍-6">7.1 介绍</h3><p><code>set</code>容器中的元素不会重复，当插入集合中已有的元素时不会插入进去，而且<code>set</code>容器里的元素自动从小到大排序</p><p>即：不重复，且有序</p><h3 id="初始化-4">7.2 初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><br>set&lt;<span class="hljs-type">int</span>&gt; s;<br></code></pre></td></tr></table></figure><h3 id="函数方法-2">7.3 函数方法</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td><code>s.begin()</code></td><td>返回set容器的第一个元素的地址</td></tr><tr><td><code>s.end()</code></td><td>返回set容器的最后一个元素的下一个地址</td></tr><tr><td><code>s.rbegin()</code></td><td>返回逆序迭代器，指向容器元素最后一个位置</td></tr><tr><td><code>s.rend()</code></td><td>返回逆序迭代器，指向容器第一个元素前面的位置</td></tr><tr><td><code>s.clear()</code></td><td>删除set容器中的所有的元素，返回unsigned int类型</td></tr><tr><td><code>s.empty()</code></td><td>判断set容器是否为空</td></tr><tr><td><code>s.insert()</code></td><td>插入一个元素</td></tr><tr><td><code>s.size()</code></td><td>返回当前set容器中的元素个数</td></tr><tr><td><code>erase(iterator)</code></td><td>删除定位器iterator指向的值</td></tr><tr><td><code>erase(first, second)</code></td><td>删除定位器first和second之间的值</td></tr><tr><td><code>erase(key_value)</code></td><td>删除键值为key_value的值</td></tr><tr><td>查找</td><td></td></tr><tr><td><code>s.find(element)</code></td><td>查找set中的某一元素，有则返回该元素对应的迭代器，无则返回结束迭代器</td></tr><tr><td><code>s.count(element)</code></td><td>查找set中的元素出现的个数，由于set中元素唯一，此函数相当于查询element是否出现</td></tr><tr><td><code>s.lower_bound(k)</code></td><td>返回大于等于k的第一个元素的迭代器</td></tr><tr><td><code>s.upper_bound(k)</code></td><td>返回大于k的第一个元素的迭代器</td></tr></tbody></table><h3 id="访问-1">7.4 访问</h3><ul><li>迭代器访问</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">for</span>(set&lt;<span class="hljs-type">int</span>&gt;::iterator it = s.<span class="hljs-built_in">begin</span>(); it != s.<span class="hljs-built_in">end</span>(); it++)<br>     cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>智能指针</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i : s)<br>     cout &lt;&lt; i &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="pair">8 pair</h2><h3 id="介绍-7">8.1 介绍</h3><p>pair只含有两个元素，可以看作是只有两个元素的结论体<br />应用：<br />* 代替二元结构体 * 作为map键值对进行插入<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CPP">map&lt;string,<span class="hljs-type">int</span>&gt;mp;<br>mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string,<span class="hljs-type">int</span>&gt;(<span class="hljs-string">&quot;xingmaqi&quot;</span>,<span class="hljs-number">1</span>));<br><span class="hljs-comment">// mp.insert(make_pair(&quot;xingmaqi&quot;, 1));</span><br><span class="hljs-comment">// mp.insert(&#123;&quot;xingmaqi&quot;, 1&#125;);</span><br></code></pre></td></tr></table></figure></p><h3 id="访问-2">8.2 访问</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CPP">map&lt;string,<span class="hljs-type">int</span>&gt;mp;<br>mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string,<span class="hljs-type">int</span>&gt;(<span class="hljs-string">&quot;xingmaqi&quot;</span>,<span class="hljs-number">1</span>));<br><span class="hljs-comment">// mp.insert(make_pair(&quot;xingmaqi&quot;, 1));</span><br><span class="hljs-comment">// mp.insert(&#123;&quot;xingmaqi&quot;, 1&#125;);</span><br></code></pre></td></tr></table></figure><h2 id="string">9 string</h2><h3 id="介绍-8">9.1 介绍</h3><p><code>string</code>是一个字符串类，和<code>char</code>型字符串类似</p><p>可以把<code>string</code>理解为一个字符串类型，像int一样定义</p><h3 id="初始化-5">9.2 初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br>string str1;<span class="hljs-comment">//空字符串</span><br><br><span class="hljs-function">string <span class="hljs-title">str2</span><span class="hljs-params">(<span class="hljs-string">&quot;123456&quot;</span>)</span></span>;<br><br><span class="hljs-function">string <span class="hljs-title">str3</span><span class="hljs-params">(<span class="hljs-string">&quot;12345&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>)</span></span>;<span class="hljs-comment">//结果为&quot;123&quot;</span><br><span class="hljs-comment">//从0索引开始，长度为3</span><br><br><span class="hljs-function">string <span class="hljs-title">str4</span><span class="hljs-params">(<span class="hljs-string">&quot;12345&quot;</span>, <span class="hljs-number">3</span>)</span></span>;<span class="hljs-comment">//结果为&quot;123&quot;</span><br><br><span class="hljs-function">string <span class="hljs-title">str5</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;2&#x27;</span>)</span></span>;<span class="hljs-comment">//结果为&quot;22222&quot;</span><br><br><span class="hljs-function">string <span class="hljs-title">str6</span><span class="hljs-params">(str2, <span class="hljs-number">2</span>)</span></span>;<span class="hljs-comment">//结果为&quot;345&quot;；</span><br><span class="hljs-comment">//截取第二个索引及其之后的元素</span><br></code></pre></td></tr></table></figure><h3 id="简单使用及其特性">9.3 简单使用及其特性</h3><h4 id="访问单个字符">9.3.1 访问单个字符</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     string str=<span class="hljs-string">&quot;12345&quot;</span>;<br><br>     cout &lt;&lt; str[<span class="hljs-number">2</span>] &lt;&lt; endl;<br><br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果为3。</p><p>从这个案例中就可以很直观的感受到string可以作为数组使用</p><h4 id="string特性">9.3.2 string特性</h4><ul><li>支持比较运算符<ul><li><code>string</code>字符串支持常见的比较运算符:<code>&gt;, &gt;=, &lt;, &lt;=, ==, !=</code>。</li><li>本质上是按字符顺序依次比较ASCII码</li><li>常用ASCII码：<code>A：65</code>；<code>a：97</code>；<code>1： 49</code></li><li>故而，在比较时，数字&lt;大写字母&lt;小写字母</li></ul></li><li>支持<code>+</code>运算符，代表拼接</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     string str1 = <span class="hljs-string">&quot;123&quot;</span>;<br>     string str2 = <span class="hljs-string">&quot;456&quot;</span>;<br>     string str3 = str1 + str2;<br>     cout &lt;&lt; str3 &lt;&lt; endl;<span class="hljs-comment">//输出结果为123456</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="string读入">9.3.3 string读入</h4><p>读入字符串，遇空格，回车结束</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s;<br>cin &gt;&gt; s;<br></code></pre></td></tr></table></figure><p>读入一行字符串(包括空格)，遇回车结束</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s;<br><span class="hljs-built_in">getline</span>(cin, s);<br></code></pre></td></tr></table></figure><p><em>注意：<code>getline(cin, s)</code>会获取前一个输入的换行符，需要在前面添加读取换行符的语句，如<code>getchar()</code>或<code>cin.get()</code></em></p><p>错误示例(源自某大聪明调试了一小时的bug)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n;<br>string s;<br><br>cin &gt;&gt; n;<br>cin &gt;&gt; s;<br></code></pre></td></tr></table></figure><p>正确示例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n;<br>string s;<br><br>cin &gt;&gt; n;<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-built_in">getline</span>(cin, s);<br></code></pre></td></tr></table></figure><p><em>当时偶然看见一个大佬的解释，恍然大悟：</em><br /><em><code>cin</code>输入完后，回车，<code>cin</code>遇到回车键结束，但回车还在输入流中，<code>cin</code>不会清除，导致<code>getline</code>读取回车，结束。所以后面的字符串并没有被正确输入</em></p><h3 id="函数方法-3">9.4 函数方法</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">string s <span class="hljs-operator">=</span> <span class="hljs-number">123</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><em>注意：</em> <em>it为迭代器</em></p><ul><li>插入</li></ul><table><thead><tr><th style="text-align: left;">代码</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr><td style="text-align: left;"><code>s.push_back('element')</code></td><td style="text-align: left;">在末尾插入</td></tr><tr><td style="text-align: left;"><code>s.insert(pos,'element')</code></td><td style="text-align: left;">在pos位置插入element</td></tr><tr><td style="text-align: left;">eg:s.insert(s.begin() + 2, 6)</td><td style="text-align: left;">在第二个位置插入6，结果是1263</td></tr><tr><td style="text-align: left;"><code>s.append("str")</code></td><td style="text-align: left;">在s字符串末尾添加str字符串</td></tr></tbody></table><ul><li>删除</li></ul><table><thead><tr><th style="text-align: left;">代码</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr><td style="text-align: left;"><code>erase(iterator p)</code></td><td style="text-align: left;">删除字符串中p所指字符</td></tr><tr><tdstyle="text-align: left;"><code>erase(iterator first, iterator last)</code></td><tdstyle="text-align: left;">删除字符串中迭代器区间<code>[first,last)</code>上的所有值</td></tr><tr><td style="text-align: left;"><code>erase(pos, len)</code></td><td style="text-align: left;">删除字符串中索引从pos开始的len个字符</td></tr><tr><td style="text-align: left;"><code>clear()</code></td><td style="text-align: left;">清空字符串</td></tr></tbody></table><ul><li>字符替换</li></ul><table><thead><tr><th style="text-align: left;">代码</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr><td style="text-align: left;"><code>s.replace(pos, n, str)</code></td><tdstyle="text-align: left;">把当前字符串从索引pos开始的n个字符替换成str</td></tr><tr><td style="text-align: left;"><code>s.replace(pos, n, n1, c)</code></td><tdstyle="text-align: left;">把当前字符串从pos开始n个字符替换为n1个字符c</td></tr><tr><td style="text-align: left;"><code>s.replace(it1, it2, str)</code></td><tdstyle="text-align: left;">把当前字符串<code>[it1, it2)</code>区间替换为str</td></tr></tbody></table><ul><li>大小写转换</li></ul><p>单个字符的转换：</p><table><thead><tr><th style="text-align: left;">代码</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr><td style="text-align: left;"><code>tolower(s[i])</code></td><td style="text-align: left;">转换为小写</td></tr><tr><td style="text-align: left;"><code>toupper(s[i])</code></td><td style="text-align: left;">转换为大写</td></tr></tbody></table><p>多个字符的转换：</p><table><thead><tr><th style="text-align: left;">代码</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr><tdstyle="text-align: left;"><code>transform(s.begin(), s.end(), s.begin(), ::tolower)</code></td><tdstyle="text-align: left;">转换小写。前两个参数指定容器转换起止范围，第三个参数是结果存放容器的开始位置</td></tr><tr><tdstyle="text-align: left;"><code>transform(s.begin(), s.end(), s.begin(), ::toupper)</code></td><td style="text-align: left;">转换大写</td></tr></tbody></table><ul><li>获取字符串长度</li></ul><table><thead><tr><th style="text-align: left;">代码</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr><tdstyle="text-align: left;"><code>s.size()</code>和<code>s.length()</code></td><td style="text-align: left;">返回string字符串个数。两者一个意思</td></tr><tr><td style="text-align: left;"><code>s.max_size()</code></td><td style="text-align: left;">返回string对象最多包含的字符数</td></tr><tr><td style="text-align: left;"><code>s.capcity()</code></td><tdstyle="text-align: left;">重新分配内存之前，string对象能包含的最大字符数</td></tr></tbody></table><ul><li>分割</li></ul><table><thead><tr><th style="text-align: left;">代码</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr><td style="text-align: left;">s.substr(pos, n)</td><td style="text-align: left;">截取从pos索引开始的n个字符</td></tr></tbody></table><ul><li>查找</li></ul><table><thead><tr><th style="text-align: left;">代码</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr><td style="text-align: left;">s.find(str, pos)</td><tdstyle="text-align: left;">默认从索引0开始。从索引pos开始查找子串str,返回找到位置的索引。找不到返回-1</td></tr><tr><td style="text-align: left;">s.find(c, pos)</td><td style="text-align: left;">从pos索引开始查找字符c</td></tr><tr><td style="text-align: left;">s.rfind(str, pos)</td><tdstyle="text-align: left;">从当前字符串pos索引开始，反向查找子串s</td></tr><tr><td style="text-align: left;">s.rfind(c, pos)</td><tdstyle="text-align: left;">从当前字符串pos索引开始，反向查找字符c</td></tr></tbody></table><ul><li>排序</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//按照ASCII码排序</span><br></code></pre></td></tr></table></figure><h2 id="stl-函数">STL 函数</h2><h3 id="sort">sort</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> a[N];<br><span class="hljs-comment">//对 a 数组的[1, n]位置从小到大排序：</span><br><span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n)<span class="hljs-comment">//因为 a + 1 是起始位置，a + 1 + n 是第 n + 1 个元素的指针，表示排序到第 n 个元素。</span><br><span class="hljs-comment">//对a数组的[0, n-1]位置从大到小排序</span><br><span class="hljs-built_in">sort</span>(a, a + n, <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br><span class="hljs-comment">//对a数组的[0, n-1]位置从小到大排序</span><br><span class="hljs-built_in">sort</span>(a, a + n, <span class="hljs-built_in">less</span>&lt;<span class="hljs-type">int</span>&gt;());<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">b</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>; <br><span class="hljs-built_in">sort</span>(b.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, b.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//升序</span><br><span class="hljs-built_in">sort</span>(b.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, b.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<span class="hljs-comment">//降序</span><br></code></pre></td></tr></table></figure><h3 id="unique">unique</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-built_in">unique</span>(beg, end)<br></code></pre></td></tr></table></figure><p>时间复杂度：<span class="math inline">\(O(N)\)</span></p><blockquote><p>消除重复元素，返回消除完重复元素的下一个位置的地址<br>如：<code>a[] = &#123;1, 3, 2, 3, 6&#125;</code><code>unique</code>之后<code>a</code>数组为<code>&#123;1, 2, 3, 6, 3&#125;</code>前面为无重复元素的数组，后面则是重复元素移到后面，返回a[4]位置的地址（不重复元素的尾后地址）</p></blockquote><p>消除重复元素一般需要原序列是有序序列</p>]]></content>
    
    
    <categories>
      
      <category>C++学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

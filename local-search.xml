<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>blackmyth</title>
    <link href="/2024/08/31/blackmyth/"/>
    <url>/2024/08/31/blackmyth/</url>
    
    <content type="html"><![CDATA[<h2 id="三种棍式">三种棍式</h2><h3 id="section"></h3>]]></content>
    
    
    
    <tags>
      
      <tag>黑神话</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL基础</title>
    <link href="/2024/08/28/MySQL/"/>
    <url>/2024/08/28/MySQL/</url>
    
    <content type="html"><![CDATA[<h2 id="概述">1. 概述</h2><h3 id="数据库相关概念">1.1 数据库相关概念</h3><table><thead><tr><th>名称</th><th>全称</th><th>简称</th></tr></thead><tbody><tr><td>数据库</td><td>存储数据的仓库，数据是有组织的进行存储</td><td>DataBase(DB)</td></tr><tr><td>数据库管理系统</td><td>操纵和管理数据库的大型软件</td><td>DataBase Management System(DBMS)</td></tr><tr><td>SQL</td><td>操作关系型数据库的编程语言，定义了一套操作关系型数据库统一标准</td><td>Structured Query Language(SQL)</td></tr></tbody></table><h3 id="mysql数据库">1.2 MySQL数据库</h3><ul><li><strong>启动与停止</strong><ul><li><code>win</code>+<code>r</code>，输入<code>services.msc</code>，进入服务，右击<code>MySQL80</code>，点击<code>启动</code>或<code>停止</code></li><li>在命令行中输入<code>net start mysql80</code>以<code>启动</code>，输入<code>net stop mysql80</code>以<code>停止</code>（注意，要<code>以管理员身份运行</code>进入<code>命令提示符</code>）</li></ul></li><li><strong>客户端连接</strong><ul><li>MySQL提供的客户端命令行工具<ul><li>开始菜单选择<code>MySQL 8.0 Command Line Client</code></li><li>输入密码</li></ul></li><li>系统自带的命令行工具执行指令<ul><li><code>mysql -u root -p</code></li><li>输入密码</li><li>注意：使用这种方式时，需要配置PATH环境变量</li></ul></li></ul></li><li><strong>数据模型</strong><ul><li><code>MySQL客户端</code>给<code>MySQL数据库服务器</code>发送对应的<code>SQL语句</code></li><li>在<code>MySQL服务器内部</code>有个<code>DBMS</code>数据库管理系统，<code>DBMS</code>会维护和操作数据库，它也可以创建数据库</li><li>一个<code>数据库</code>里可以维护多张表</li><li>表是最终存储数据的</li></ul></li></ul><h3 id="mysql数据模型">1.3 MySQL数据模型</h3><ul><li><strong>关系型数据库(RDBMS)</strong><ul><li><strong>概念</strong>：建立在关系模型基础上，由多张相互连接的二维表组成的数据库</li><li><strong>特点</strong>：<ul><li>使用表存储数据，格式统一，便于维护</li><li>使用SQL语言操作，标准统一，使用方便</li></ul></li></ul></li><li><strong>数据模型</strong><ul><li>我们安装完了MySQL之后，我们的计算机就成了MySQL数据库服务器</li><li>我们可以通过客户端来连接数据库管理系统<code>DBMS</code></li><li>使用<code>SQL</code>语句，通过数据库管理系统，来创建数据库</li><li>也可以通过<code>SQL</code>语句通过数据库管理系统，在指定的数据库当中来创建表</li><li>在一个数据库服务器当中可以创建多个数据库</li><li>在一个数据库当中可以创建多张表（二维表）</li><li>在表中我们可以创造一条一条记录</li></ul></li></ul><h2 id="sql">2. SQL</h2><h3 id="通用语法及分类">2.1 通用语法及分类</h3><h4 id="sql通用语法">2.1.1 SQL通用语法</h4><ol type="1"><li>SQL语句可以单行或多行书写，以分号结尾</li><li>SQL语句可以使用空格/缩进来增强语句的可读性</li><li>MySQL数据库的SQL语句不区分大小写，关键字建议使用大写</li><li>注释：<ul><li>单行注释：<code>-- 注释内容</code> 或<code># 注释内容</code>(MySQL特有)</li><li>多行注释：/<em>注释内容</em>/</li></ul></li></ol><h4 id="sql分类">2.1.2 SQL分类</h4><table><thead><tr><th>分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td>数据库定义语言，用来定义数据库对象（数据库，表，字段）</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h3 id="ddl">2.2 DDL</h3><h4 id="数据库操作">2.2.1 数据库操作</h4><p><strong>小贴士</strong></p><blockquote><ol type="1"><li>结束记得用<code>;</code></li><li>若没有输入<code>;</code>，输入完之后会出现<code>-&gt;</code>，此时输入<code>Ctrl</code>+ <code>C</code>即可退出<br /></li><li>字符集不建议使用<code>utf8</code>，而建议使用<code>utf8mb4</code>。<ul><li>理由：因为<code>utf8</code>实际上是一种不完全的<code>UTF-8</code>编码，只支持<code>UTF-8</code>前三个字节，不支持部分特殊字符，如Emoji 和一些罕见的汉字或其他符号。而<code>utf8mb4</code> 是 MySQL中真正的完整 UTF-8 编码，能够使用完整的 4 个字节表示字符，因此可以支持Unicode 中的所有字符，包括 Emoji 和其他 4 字节字符</li></ul></li></ol></blockquote><ol type="1"><li><strong>查询</strong></li></ol><p>查询所有数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure><p>查询当前数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> DATABASE();<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><strong>创建</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] 数据库名 [<span class="hljs-keyword">DEFAULT</span> CHARSET 字符集] [<span class="hljs-keyword">COLLATE</span> 排序规则];<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li><strong>删除</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE[IF <span class="hljs-keyword">EXISTS</span>]数据库名;<br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>使用</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE 数据库名;<br></code></pre></td></tr></table></figure><blockquote><p><code>USE</code>语句的分号不是必须的</p></blockquote><h4 id="表操作创建查询">2.2.2 表操作：创建&amp;查询</h4><ol type="1"><li><p><strong>查询</strong></p><ol type="1"><li>查询当前数据库所有表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> TABLES;<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>查询表结构</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DESC</span> 表名;<br></code></pre></td></tr></table></figure><blockquote><p>desc - &gt; describe</p></blockquote><ol start="3" type="1"><li>查询指定表的建表语句</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名;<br></code></pre></td></tr></table></figure></li><li><p><strong>创建</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(<br>字段<span class="hljs-number">1</span> 字段<span class="hljs-number">1</span>类型[COMMENT 字段<span class="hljs-number">1</span>注释],<br>字段<span class="hljs-number">2</span> 字段<span class="hljs-number">2</span>类型[COMMENT 字段<span class="hljs-number">2</span>注释],<br>字段<span class="hljs-number">3</span> 字段<span class="hljs-number">3</span>类型[COMMENT 字段<span class="hljs-number">3</span>注释],<br>......<br>    字段n 字段n类型[COMMENT 字段n注释]<br>)[COMMENT 表注释];<br></code></pre></td></tr></table></figure><p><strong>小贴士</strong></p><blockquote><p>[...]为可选参数，最后一个字段后面没有逗号</p></blockquote></li></ol><h4 id="数据类型">2.2.3 数据类型</h4><p>数据类型主要分为三类：<code>数值类型</code>，<code>字符串类型</code>，<code>日期时间类型</code>。</p><ol type="1"><li><strong>数值类型</strong></li></ol><table style="width:100%;"><thead><tr><th>分类</th><th>类型</th><th>大小</th><th>有符号(SIGNED)范围</th><th>无符号(UNSIGNED)范围</th><th>描述</th></tr></thead><tbody><tr><td>数值类型</td><td><code>tinyint</code></td><td>1 byte</td><td><span class="math inline">\((-2^7,2^7-1)\)</span></td><td>(<span class="math inline">\(0,2^8-1\)</span>)</td><td>小整数值</td></tr><tr><td>数值类型</td><td><code>smallint</code></td><td>2 bytes</td><td><span class="math inline">\((-2^{15},2^{15}-1)\)</span></td><td><span class="math inline">\((0,2^{16}-1)\)</span></td><td>大整数值</td></tr><tr><td>数值类型</td><td><code>mediumint</code></td><td>3 bytes</td><td><span class="math inline">\((-2^{23},2^{23}-1)\)</span></td><td><span class="math inline">\((0,2^{24}-1)\)</span></td><td>大整数值</td></tr><tr><td>数值类型</td><td><code>int/integer</code></td><td>4 bytes</td><td><span class="math inline">\((-2^{31},2^{31}-1)\)</span></td><td><span class="math inline">\((0,2^{32}-1)\)</span></td><td>大整数值</td></tr><tr><td>数值类型</td><td><code>bigint</code></td><td>8 bytes</td><td><span class="math inline">\((-2^{63},2^{63}-1)\)</span></td><td><span class="math inline">\((0,2^{64}-1)\)</span></td><td>极大整数值</td></tr><tr><td>数值类型</td><td><code>float</code></td><td>4 bytes</td><td><span class="math inline">\((-3,4028 E+38, 3.4028E+38)\)</span></td><td>0和<span class="math inline">\((1.17549 E-308, 1.79769E+308)\)</span></td><td>单精度浮点数值</td></tr><tr><td>数值类型</td><td><code>double</code></td><td>8 bytes</td><td><span class="math inline">\((-1.79769 E+308, 1.79769E+308)\)</span></td><td>0和<span class="math inline">\((2.2250738585 E-308,1.79769E+308)\)</span></td><td>双精度浮点数</td></tr><tr><td>数值类型</td><td><code>decimal</code></td><td></td><td>依赖于M(精度)和D（标度）的值</td><td>依赖于M(精度)和D（标度）的值</td><td>小数值（精确定点数）</td></tr></tbody></table><p>​ <strong>小贴士</strong></p><blockquote><ol type="1"><li><strong>M(精度)和D(标度)</strong>:比如123.45，总共有五位，所以精度是5，小数点后有两位，所以标度是2</li><li><strong>无符号表示</strong>：比如年龄，可以写为：<code>age TINYINT UNSIGNED</code></li><li><strong>位数</strong>：比如我们想输入分数，总共有四位，其中一位是小数，则用<code>score double(4,1)</code></li></ol></blockquote><ol start="2" type="1"><li><strong>字符串类型</strong></li></ol><table><thead><tr><th>分类</th><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>字符串类型</td><td>CHAR</td><td>0~255 bytes</td><td>定长字符串</td></tr><tr><td>字符串类型</td><td>VARCHAR</td><td><span class="math inline">\(0\)</span>~<spanclass="math inline">\(2^{16}-1\)</span> bytes</td><td>变长字符串</td></tr><tr><td>字符串类型</td><td>TINYBLOB</td><td>0~255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>字符串类型</td><td>TINYTEXT</td><td>0~255 bytes</td><td>短文本字符串</td></tr><tr><td>字符串类型</td><td>BLOB</td><td><span class="math inline">\(0\)</span>~<spanclass="math inline">\(2^{16}-1\)</span> bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>字符串类型</td><td>TEXT</td><td><span class="math inline">\(0\)</span>~<spanclass="math inline">\(2^{16}-1\)</span> bytes</td><td>长文本数据</td></tr><tr><td>字符串类型</td><td>MEDIUMBLOB</td><td>0~<span class="math inline">\(2^{24}-1\)</span> bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>字符串类型</td><td>MEDIUMTEXT</td><td>0~<span class="math inline">\(2^{24}-1\)</span> bytes</td><td>中等长度文本数据</td></tr><tr><td>字符串类型</td><td>LONGBLOB</td><td>0~<span class="math inline">\(2^{32}-1\)</span></td><td>二进制形式的极大文本数据</td></tr><tr><td>字符串类型</td><td>LONGTEXT</td><td>0~<span class="math inline">\(2^{32}-1\)</span></td><td>极大长文本数据</td></tr></tbody></table><p>​ <strong>小贴士</strong></p><blockquote><ol type="1"><li><code>BLOB</code>:<code>Binary Large Object</code>，二进制大对象文本类型，用于存储如图片、音频、视频文件、压缩文件或其他非文本数据<br /></li><li><code>TEXT</code>:存储文本数据</li></ol></blockquote><ol start="3" type="1"><li><strong>日期类型</strong></li></ol><table><thead><tr><th>分类</th><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>日期类型</td><td>DATE</td><td>3</td><td><code>1000-01-01</code>至<code>9999-12-31</code></td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>日期类型</td><td>TIME</td><td>3</td><td><code>-838:59:59</code>至<code>838:59:59</code></td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>日期类型</td><td>YEAR</td><td>1</td><td><code>1901</code>至<code>2155</code></td><td>YYYY</td><td>年份值</td></tr><tr><td>日期类型</td><td>DATATIME</td><td>8</td><td><code>1000-01-01 00:00:00</code>至<code>9999-12-31 23:59:59</code></td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>日期类型</td><td>TIMESTAMP</td><td>4</td><td><code>1970-01-01 00:00:01</code>至<code>2038-01-19 03:14:07</code></td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><h4 id="表操作修改删除">2.2.4 表操作：修改&amp;删除</h4><ol type="1"><li><strong>修改</strong></li></ol><p>添加字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> 字段名 类型(长度) [COMMENT 注释] [约束];<br></code></pre></td></tr></table></figure><p>修改数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY 字段名 新数据类型(长度);<br></code></pre></td></tr></table></figure><p>修改字段名和字段类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];<br></code></pre></td></tr></table></figure><p>删除字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> 字段名;<br></code></pre></td></tr></table></figure><p>修改表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 RENAME <span class="hljs-keyword">TO</span> 新表名;<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><strong>删除</strong></li></ol><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">EXISTS</span>] 表名<br></code></pre></td></tr></table></figure><p>删除指定表，并重新创建该表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> 表名;<br></code></pre></td></tr></table></figure><h4 id="小结">2.2.5 小结</h4><ol type="1"><li><strong>DDL-数据库操作</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br><span class="hljs-keyword">CREATE</span> DATABASE 数据库名;<br>USE 数据库名;<br><span class="hljs-keyword">SELECT</span> 数据库名;<br><span class="hljs-keyword">DROP</span> DATABASE 数据库名;<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><strong>DDL-表操作</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> TABLES;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(字段 字段类型,字段 字段类型);<br><span class="hljs-keyword">DESC</span> 表名;<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span><span class="hljs-operator">/</span>MODIFY<span class="hljs-operator">/</span>CHANGE<span class="hljs-operator">/</span><span class="hljs-keyword">DROP</span><span class="hljs-operator">/</span>RENAME TO...;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> 表名;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>概率论与数理统计</title>
    <link href="/2024/08/26/probability/"/>
    <url>/2024/08/26/probability/</url>
    
    <content type="html"><![CDATA[<h2 id="第一章-随机事件及其概率">第一章 随机事件及其概率</h2><h3 id="第一节-随机试验与随机事件">第一节 随机试验与随机事件</h3><h4 id="随机试验">1. 随机试验</h4><ul><li><strong>可重复性</strong>：试验可以在相同的条件下重复进行</li><li><strong>多结果性</strong>：每次试验都有多个可能的结果（不唯一），并且在试验之前能够明确所有可能的结果</li><li><strong>不确定性（随机性）</strong>：每次实验之前不能确定哪一个结果会出现</li></ul><p>满足上诉三个特点的试验称为<code>随机试验</code>（简称<code>试验</code>），用<code>E</code>表示</p><h4 id="样本空间">2. 样本空间</h4><p>试验E的所有可能结果组成的集合称为E的<code>样本空间</code>，记为<spanclass="math inline">\(\Omega\)</span>（或S），样本空间的元素（即E的每个结果），称为<code>样本点</code>，记作<spanclass="math inline">\(\omega\)</span>。</p><h4 id="随机事件">3. 随机事件</h4><ul><li><code>随机事件（简称事件）</code>：试验E的样本空间<spanclass="math inline">\(\Omega\)</span>的子集称为E的随机事件，通常用A，B，C等表示<br /></li><li><code>事件A发生</code>：属于事件A的任一样本点出现<br /></li><li><code>基本事件</code>：由一个样本点组成的单点集<spanclass="math inline">\(\Leftrightarrow\)</span>试验E的最基本可能的结果<br /></li><li><code>必然事件</code>：样本空间<spanclass="math inline">\(\Omega\)</span>（全集）<spanclass="math inline">\(\Leftrightarrow\)</span>每次试验都必然发生的事件<br /></li><li><code>不可能事件</code>：空集<spanclass="math inline">\(\Phi\)</span>（不包含任何样本点）<spanclass="math inline">\(\Leftrightarrow\)</span>每次试验都不发生</li></ul><p>且<span class="math inline">\(\Phi\)</span><spanclass="math inline">\(\subset\)</span>A<spanclass="math inline">\(\subset\)</span><spanclass="math inline">\(\Omega\)</span></p><h4 id="事件之间的关系与事件的运算">4. 事件之间的关系与事件的运算</h4><p>必然事件与集合的对应关系如下：</p><ul><li>必然事件<spanclass="math inline">\(\leftrightarrow\)</span>样本空间<spanclass="math inline">\(\Omega\)</span>（全集）；</li><li>基本事件<spanclass="math inline">\(\leftrightarrow\)</span>样本事件<spanclass="math inline">\(\omega\)</span>（单点集）；</li><li>随机事件<span class="math inline">\(\leftrightarrow\)</span><spanclass="math inline">\(\Omega\)</span>的子集；</li><li>不可能事件<spanclass="math inline">\(\leftrightarrow\)</span>空集<spanclass="math inline">\(\Phi\)</span>​</li></ul><p><strong>定义</strong></p><ol type="1"><li><p><code>包含</code>：A<spanclass="math inline">\(\subset\)</span>B<spanclass="math inline">\(\Leftrightarrow\)</span>事件A发生必然导致B发生</p></li><li><p><code>事件的并（和）</code>：A<spanclass="math inline">\(\cup\)</span>B(A+B)<spanclass="math inline">\(\Leftrightarrow\)</span>​A,B至少发生一个</p></li><li><p><code>事件的交（积）</code>：A<spanclass="math inline">\(\cap\)</span>B(AB)<spanclass="math inline">\(\Leftrightarrow\)</span>A,B同时发生</p></li><li><p><code>事件的差</code>A-B<spanclass="math inline">\(\Leftrightarrow\)</span>A发生而B不发生</p><ul><li><span class="math inline">\(A-B=A-AB=A\overline{B}\)</span></li></ul></li><li><p><code>互不相容（或互斥）</code>：AB=<spanclass="math inline">\(\Phi\)</span><spanclass="math inline">\(\Leftrightarrow\)</span>A与B不能同时发生</p></li><li><p><code>对立事件（或逆事件）</code>：A<spanclass="math inline">\(\cup\)</span>B=<spanclass="math inline">\(\Omega\)</span>且A<spanclass="math inline">\(\cap\)</span>B=<spanclass="math inline">\(\Phi\)</span><spanclass="math inline">\(\Leftrightarrow\)</span>A与B护卫对立事件</p></li><li><p><code>完备事件组</code>：<spanclass="math inline">\(A_1\)</span>,<spanclass="math inline">\(A_2\)</span>,<spanclass="math inline">\(\dots\)</span>,<spanclass="math inline">\(A_n\)</span>满足 <span class="math display">\[\begin{cases}A_i\cap A_j=\Phi,\forall i \neq j,\\\sum_{i=1}^n A_i=\Omega\end{cases}\]</span></p></li></ol><p>则称<spanclass="math inline">\(A_1,A_2,\dots,A_n\)</span>构成完备事件组，也称<spanclass="math inline">\(A_1\)</span>,<spanclass="math inline">\(A_2\)</span>,<spanclass="math inline">\(\dots\)</span>,<spanclass="math inline">\(A_n\)</span>是样本空间的一个划分</p><p><strong>事件的交换律</strong></p><ol type="1"><li><strong>交换律</strong>：<span class="math inline">\(A\cup B=B\cupA\)</span>;<span class="math inline">\(A\cap B=B\cap A\)</span></li><li><strong>结合律</strong>：<span class="math inline">\((A\cup B)\cupC=A\cup (B\cup C)\)</span>;<span class="math inline">\((A\cap B)\capC=A\cap (B\cap C)\)</span></li><li><strong>分配律</strong>：<span class="math inline">\((A\cup B)\cap C= (A\cap C)\cup (B\cap C)\)</span>;<span class="math inline">\((A\capB)\cup C=(A\cup C)\cap (B\cup C)\)</span></li><li><strong>自反律</strong>：<spanclass="math inline">\(\overline{\overline{A}}=A\)</span></li><li><strong>对偶律</strong>：<span class="math inline">\(\overline{A\cupB}=\overline{A}\cap \overline{B}\)</span>;<spanclass="math inline">\(\overline{A\capB}=\overline{A}\cup\overline{B}\)</span></li></ol><h3 id="第二节-频率与概率">第二节 频率与概率</h3><h4 id="频率">1. 频率</h4><p><strong>定义</strong>：在相同的条件下，进行<spanclass="math inline">\(n\)</span>次试验，其中事件<spanclass="math inline">\(A\)</span>发生了<spanclass="math inline">\(n_A\)</span>次，则<spanclass="math inline">\(A\)</span>发生的频率定义为： <spanclass="math display">\[f_n(A)=\frac{n_A}{n}\]</span> <strong>性质</strong>： <span class="math display">\[\begin{cases}(1) 0\leq f_n(A)\leq 1;\\(2) f_n(\Omega)=1;\\(3)A_1,A_2,\dots ,A_k两两互斥\Rightarrowf_n(\sum\limits_{i=1}^{k}A_i)=\sum\limits_{i=1}^kf_n(A_i)\end{cases}\]</span> <strong>频率的稳定性</strong>：随着试验次数<spanclass="math inline">\(n\)</span>增大，频率<spanclass="math inline">\(f_n(A)\)</span>逐渐稳定于某个常数<spanclass="math inline">\(p\)</span>，这种“频率的稳定性”，即通常所说的统计规律性，频率的稳定值<spanclass="math inline">\(p\)</span>为事件<spanclass="math inline">\(A\)</span>的概率，此即概率的统计定义</p><h4 id="概率">2. 概率</h4><p><strong>定义</strong>：设E是随机事件，，<spanclass="math inline">\(\Omega\)</span>是其样本空间，对于E的每一事件<spanclass="math inline">\(A\)</span>赋予一个实数，记作<spanclass="math inline">\(P(A)\)</span>，称为事件A的概率，且集合函数<spanclass="math inline">\(P(·)\)</span>满足 以下条件： <spanclass="math display">\[三公理\begin{cases}(1)非负性：对于每一个事件A，P(A)\geq 0;\\(2)规范性：对于必然事件\Omega ,P(\Omega)=1;\\(3)可列可加性：A_1,A_2,\dots,A_n,\dots两两互不相容，有P(\sum\limits_{i=1}^{\infty}A_i)=\sum\limits_{i=1}^{\infty}P(A_i)\\\end{cases}\]</span> <strong>性质</strong>：</p><ol type="1"><li><p><spanclass="math inline">\(P(\Phi)=0\)</span>.反之不成立，即<spanclass="math inline">\(P(A)=0\nRightarrow A=\Phi\)</span></p></li><li><p>（有限可加性）<span class="math inline">\(A_1,A_2,\dots,A_n,\dots两两互不相容\RightarrowP(\sum\limits_{i=1}^{\infty}A_i)=\sum\limits_{i=1}^{\infty}P(A_i)\)</span></p><p><span class="math inline">\(A\)</span>与<spanclass="math inline">\(B\)</span>互不相容<spanclass="math inline">\(\Rightarrow\)</span><spanclass="math inline">\(P(A+B)=P(A)+P(B)\)</span></p></li><li><p>对于任一事件A，有<spanclass="math inline">\(P(\overline{A})=1-p(A)\)</span>或<spanclass="math inline">\(P(A)+P(\overline{A})=1\)</span></p></li><li><p><span class="math inline">\(P(A-B)=P(A)-P(AB)\)</span></p></li><li><p><span class="math inline">\(P(A\cupB)=P(A)+P(B)-P(AB)\)</span></p></li><li><p><spanclass="math inline">\(P(\overline{A}\cup\overline{B})=P(\overline{AB})\)</span></p></li><li><p><spanclass="math inline">\(C_n^m=\frac{P_n^m}{m!}=\frac{n!}{m!(n-m)!}\)</span></p></li><li><p><span class="math inline">\(C_n^m=C_n^{n-m}\)</span></p></li></ol><h3 id="第三节-古典概型和几何概型">第三节 古典概型和几何概型</h3><h4 id="古典概型等可能模型">1. 古典概型（等可能模型）</h4><p><span class="math display">\[特征=\begin{cases}有限性\\等可能性\\\end{cases}\]</span></p><p><span class="math inline">\(P(A)=\frac{m}{n}\)</span></p><h4 id="几何概型">2. 几何概型</h4><p><span class="math display">\[\mu (\Omega)=\begin{cases}长度(一维线段)\\面积(二维平面区域)\\体积(三维空间立体)\\\end{cases}\]</span></p><h3 id="第四节-条件概率与乘法公式">第四节 条件概率与乘法公式</h3><h4 id="条件概率">1. 条件概率</h4><p><strong>定义1</strong>：<spanclass="math inline">\(A\)</span>发生时<spanclass="math inline">\(B\)</span>再发生：<spanclass="math inline">\(P(B\mid A)\)</span></p><p><strong>定义2</strong>：<span class="math inline">\(P(B\midA)=\frac{P(AB)}{P(A)}\)</span></p><p><strong>性质1</strong>：<span class="math inline">\(P(\Phi\midA)=0\)</span></p><p><strong>性质2</strong>：<span class="math inline">\(P(B_1\cup B_2\midA)=P(B_1\mid A)+P(B_2\mid A)-P(B_1B_2\mid A)\)</span>​</p><p><strong>性质3</strong>：<span class="math inline">\(P(B\midA)+P(\overline{B}\mid A)=1\)</span></p><h4 id="乘法公式">2. 乘法公式</h4><p><strong>定理</strong>：设<spanclass="math inline">\(A\)</span>、<spanclass="math inline">\(B\)</span>为两事件，则<spanclass="math inline">\(P(AB)=P(A)P(B\mid A) P(A&gt;0)\)</span>或<spanclass="math inline">\(P(AB)=P(B)P(A\mid B)\)</span></p><h3 id="第五节-全概率公式与贝叶斯公式">第五节全概率公式与贝叶斯公式</h3><h4 id="全概率公式">1. 全概率公式</h4><p><span class="math display">\[\boxed{P(B)=P(A_1)P(B|A_1)+P(A_2)P(B|A_2)+P(A_3)(B|A_3)+\dots+P(A_n)P(B|A_n)}\]</span></p><p><strong>定理1</strong>：设事件<spanclass="math inline">\(A_1,A_2,\dots,A_n\)</span>是试验E的一个完备事件组（也叫样本空间<spanclass="math inline">\(\Omega\)</span>的一个划分），且<spanclass="math inline">\(P(A_i)&gt;0(i=1,2,\dots,n)\)</span>​,则对于E的任意事件B，有： <span class="math display">\[P(B)=P(A_1)P(B|A_1)+P(A_2)P(B|A_2)+P(A_3)(B|A_3)+\dots +P(A_n)P(B|A_n)\\    =\sum\limits_{i=1}^n A_iP(B|A_i)\]</span></p><h4 id="贝叶斯公式">2. 贝叶斯公式</h4><p><strong>定理2</strong>：设<span class="math inline">\(A_1,A_2,\dots,A_n\)</span>为试验E的一个完备事件组，B为E的任一事件，且<spanclass="math inline">\(P(A_i)&gt;0(i=1,2,\dots ,n)\)</span>，<spanclass="math inline">\(P(B)&gt;0\)</span>，则 <spanclass="math display">\[P(A_k|B)=\frac{P(A_k)P(B|A_k)}{\sum\limits_{i=1}^{n}P(A_i)P(B|A_i)}=\frac{P(A_kB)}{P(B)},k=1,2,\dots,n\]</span></p><h3 id="第六节-事件的独立性与伯努利概型">第六节事件的独立性与伯努利概型</h3><h4 id="事件的独立性">1. 事件的独立性</h4><p><strong>定义1</strong>：设<spanclass="math inline">\(A,B\)</span>是试验E的两个事件，若<spanclass="math inline">\(P(B|A)=P(B)(P(A)&gt;0)\)</span>，则称事件B对于事件A独立 <spanclass="math inline">\(\stackrel{若P(B)&gt;0)}{\Rightarrow}\)</span>事件A对于事件B独立<span class="math inline">\(\Leftrightarrow\)</span><span class="math inline">\(P(A|B)=P(A)\)</span></p><p>由<spanclass="math inline">\(P(B|A)=P(B)\stackrel{P(A)&gt;0}\Leftrightarrow\frac{P(AB)}{P(A)}=P(B)\Leftrightarrow P(AB)=P(A)*P(B)\)</span></p><p><strong>定义2</strong>：设<spanclass="math inline">\(A,B\)</span>是两事件，若<spanclass="math inline">\(P(A|B)=P(A)P(B)\)</span>，则称事件A与事件B相互独立</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>markdown语法整理</title>
    <link href="/2024/08/25/markdown/"/>
    <url>/2024/08/25/markdown/</url>
    
    <content type="html"><![CDATA[<h2 id="引用公式">1. 引用公式</h2><ul><li><strong>行内公式</strong>：使用<code>$</code>包裹公式。例如：</li></ul><p><code>$n = p_1^&#123;k_1&#125; p_2^&#123;k_2&#125; \dots p_r^&#123;k_r&#125;$</code></p><p><span class="math inline">\(n = p_1^{k_1} p_2^{k_2} \dotsp_r^{k_r}\)</span></p><ul><li><p><strong>独立公式</strong>：使用<code>$$</code>包裹公式<br /><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">$$  <br>n = p_1^&#123;k_1&#125; p_2^&#123;k_2&#125; \dots p_r^&#123;k_r&#125;  <br>$$<br></code></pre></td></tr></table></figure> <span class="math display">\[n = p_1^{k_1} p_2^{k_2} \dots p_r^{k_r}\]</span></p></li><li><p>公式加边框：<code>\boxed</code>命令修饰</p></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">$$  <br>\boxed&#123;n = p_1^&#123;k_1&#125; p_2^&#123;k_2&#125; \dots p_r^&#123;k_r&#125;&#125;  <br>$$<br></code></pre></td></tr></table></figure><p><span class="math display">\[\boxed{n = p_1^{k_1} p_2^{k_2} \dots p_r^{k_r}}  \]</span></p><h2 id="特殊转义字符">2. 特殊转义字符</h2><p><code># $ &amp; ~ _ ^ \ &#123; &#125; %</code>这些字符在<code>MaarkDown</code>中有特殊的意义，在需要使用这些字符时需要进行转义，即在前加上<code>\</code>。例如：<br />* <code>\#</code> -&gt; #<br />* <code>\~</code> -&gt; ~</p><h2 id="希腊字母">3. 希腊字母</h2><table><thead><tr><th>名称</th><th>大写</th><th>TeX</th><th>小写</th><th>TeX</th></tr></thead><tbody><tr><td>alpha</td><td><span class="math inline">\(A\)</span></td><td><code>$A$</code></td><td><span class="math inline">\(\alpha\)</span></td><td><code>$\alpha$</code></td></tr><tr><td>beta</td><td><span class="math inline">\(B\)</span></td><td><code>$B$</code></td><td><span class="math inline">\(\beta\)</span></td><td><code>$\beta$</code></td></tr><tr><td>gamma</td><td><span class="math inline">\(\Gamma\)</span></td><td><code>$\Gamma$</code></td><td><span class="math inline">\(\gamma\)</span></td><td><code>$\gamma$</code></td></tr><tr><td>delta</td><td><span class="math inline">\(\Delta\)</span></td><td><code>$\Delta$</code></td><td><span class="math inline">\(\delta\)</span></td><td><code>\delta</code></td></tr><tr><td>epsilon</td><td><span class="math inline">\(E\)</span></td><td><code>$\Epsilon$</code></td><td><span class="math inline">\(\epsilon\)</span></td><td><code>$\epsilon$</code></td></tr><tr><td>zeta</td><td><span class="math inline">\(Z\)</span></td><td><code>$Z$</code></td><td><span class="math inline">\(\zeta\)</span></td><td><code>\zeta</code></td></tr><tr><td>eta</td><td><span class="math inline">\(H\)</span></td><td><code>$H$</code></td><td><span class="math inline">\(\eta\)</span></td><td><code>$\eta$</code></td></tr><tr><td>theta</td><td><span class="math inline">\(\Theta\)</span></td><td><code>$\Theta$</code></td><td><span class="math inline">\(\theta\)</span></td><td><code>$\theta$</code></td></tr><tr><td>iota</td><td><span class="math inline">\(I\)</span></td><td><code>$I$</code></td><td><span class="math inline">\(\iota\)</span></td><td><code>$\iota$</code></td></tr><tr><td>kappa</td><td><span class="math inline">\(K\)</span></td><td><code>$K$</code></td><td><span class="math inline">\(\kappa\)</span></td><td><code>$\kappa$</code></td></tr><tr><td>lambda</td><td><span class="math inline">\(\Lambda\)</span></td><td><code>$\Lambda$</code></td><td><span class="math inline">\(\lambda\)</span></td><td><code>$\lambda$</code></td></tr><tr><td>mu</td><td><span class="math inline">\(M\)</span></td><td><code>$M$</code></td><td><span class="math inline">\(\mu\)</span></td><td><code>$\mu$</code></td></tr><tr><td>nu</td><td><span class="math inline">\(N\)</span></td><td><code>$N$</code></td><td><span class="math inline">\(\nu\)</span></td><td><code>$\nu$</code></td></tr><tr><td>xi</td><td><span class="math inline">\(\Xi\)</span></td><td><code>$\Xi$</code></td><td><span class="math inline">\(\xi\)</span></td><td><code>$\xi$</code></td></tr><tr><td>omicron</td><td><span class="math inline">\(O\)</span></td><td><code>$O$</code></td><td><span class="math inline">\(\omicron\)</span></td><td><code>$\omicron$</code></td></tr><tr><td>pi</td><td><span class="math inline">\(\Pi\)</span></td><td><code>$\Pi$</code></td><td><span class="math inline">\(\pi\)</span></td><td><code>$\pi$</code></td></tr><tr><td>rho</td><td><span class="math inline">\(P\)</span></td><td><code>$P$</code></td><td><span class="math inline">\(\rho\)</span></td><td><code>$\rho</code></td></tr><tr><td>sigma</td><td><span class="math inline">\(\Sigma\)</span></td><td><code>$\Sigma$</code></td><td><span class="math inline">\(\sigma\)</span></td><td><code>$\sigma$</code></td></tr><tr><td>tau</td><td><span class="math inline">\(T\)</span></td><td><code>$T$</code></td><td><span class="math inline">\(\tau\)</span></td><td><code>$\tau$</code></td></tr><tr><td>upsilon</td><td><span class="math inline">\(\Upsilon\)</span></td><td><code>$\Upsilon$</code></td><td><span class="math inline">\(\upsilon\)</span></td><td><code>$\upsilon$</code></td></tr><tr><td>phi</td><td><span class="math inline">\(\Phi\)</span></td><td><code>$\Phi$</code></td><td><span class="math inline">\(\phi\)</span></td><td><code>$\phi$</code></td></tr><tr><td>chi</td><td><span class="math inline">\(X\)</span></td><td><code>$X$</code></td><td><span class="math inline">\(\chi\)</span></td><td><code>$\chi$</code></td></tr><tr><td>psi</td><td><span class="math inline">\(\Psi\)</span></td><td><code>$\Psi$</code></td><td><span class="math inline">\(\psi\)</span></td><td><code>$\psi$</code></td></tr><tr><td>omega</td><td><span class="math inline">\(\Omega\)</span></td><td><code>$\Omega$</code></td><td><span class="math inline">\(\omega\)</span></td><td><code>$\omega$</code></td></tr></tbody></table><h2 id="上下标">4. 上下标</h2><p>上下标分别用<code>^</code>和<code>_</code>表示。例如：<br />* <code>$x^2$</code> - &gt; <spanclass="math inline">\(x^2\)</span><br />* <code>$x_2$</code> - &gt; <span class="math inline">\(x_2\)</span></p><p>默认情况下，<strong>上下标符号只对下一个组起作用</strong>。一个组即<strong>单个字符</strong>或<strong>使用<code>&#123;&#125;</code>包裹起来的内容</strong>。例如：<br />* <code>$10^10$</code> - &gt; <spanclass="math inline">\(10^10\)</span><br />* <code>$10^&#123;10&#125;$</code> - &gt; <spanclass="math inline">\(10^{10}\)</span><br />大括号还能消除二义性，如<code>$x^5^6$</code>会显示错误，必须要用大括号来界定<code>^</code>的结合性。例如：<br />* <code>$&#123;x^5&#125;^6$</code> - &gt; <spanclass="math inline">\({x^5}^6\)</span><br />* <code>$x^&#123;5^6&#125;$</code> - &gt; <spanclass="math inline">\(x^{5^6}\)</span><br />* <code>$x_i^2$</code> - &gt; <spanclass="math inline">\(x_i^2\)</span><br />* <code>$x_&#123;i^2&#125;$</code> - &gt; <spanclass="math inline">\(x_{i^2}\)</span></p><h2 id="根号分数括号">5. 根号、分数、括号</h2><h3 id="根号">5.1 根号</h3><p>通用表达方式为<code>$\sqrt[a]&#123;b&#125;$</code> - &gt; <spanclass="math inline">\(\sqrt[a]{b}\)</span><br />*<code>[]</code>内的<code>a</code>表示开<code>a</code>次方。若省略则表示开平方。如：<code>$\sqrt[]&#123;b&#125;$</code>- &gt; <span class="math inline">\(\sqrt[]{b}\)</span> *如果被开方的是单个字符，<code>&#123;&#125;</code>可以省略，<code>$\sqrt[a]b$</code>- &gt; <span class="math inline">\(\sqrt[a]b\)</span></p><h3 id="分数">5.2 分数</h3><p>分数有两种表示方法<br />* 第一种是使用<code>$\frac &#123;a&#125;&#123;b&#125;$</code> - &gt; <spanclass="math inline">\(\frac {a}{b}\)</span><br />*第二种是使用<code>$\over$</code>来分割一个组的前后两部分。<code>$a+1 \over b+1$</code>- &gt; <span class="math inline">\(a+1 \over b+1\)</span></p><h3 id="括号">5.3 括号</h3><ul><li><strong>小括号和方括号</strong>：使用原始的<code>()</code>和<code>[]</code>即可。<code>$(2+3)[4+4]$</code>- &gt; <span class="math inline">\((2+3)[4+4]\)</span></li><li><strong>大括号</strong>：由于<code>&#123;&#125;</code>用来分组，因此需要用<code>\&#123;</code>和<code>\&#125;</code>来进行转移表示大括号。也可以使用<code>\lbrace</code>和<code>\rbrace</code>来表示。如<code>$\&#123;a*b\&#125;$</code>和<code>$\lbrace a*b \rbrace$</code>都会显示为<spanclass="math inline">\(\lbrace a*b \rbrace\)</span></li><li><strong>尖括号</strong>：使用<code>\langle</code>和<code>\rangle</code>分别表示左尖括号和右尖括号。<code>$\langle x \rangle$</code>- &gt; <span class="math inline">\(\langle x \rangle\)</span></li><li><strong>向上取整</strong>：使用<code>\lceil</code>和<code>\rceil</code>表示。<code>$\lceil x \rceil$</code>- &gt; <span class="math inline">\(\lceil x \rceil\)</span></li><li><strong>向下取整</strong>：使用<code>\lfloor</code>和<code>\rfloor</code>表示。<code>$\lfloor x \rfloor$</code>- &gt; <span class="math inline">\(\lfloor x \rfloor\)</span></li></ul><h2 id="数学运算符与数学符号">6. 数学运算符与数学符号</h2><h3 id="常规使用">6.1 常规使用</h3><p><code>+ - * / =</code>这五个直接输入即可</p><h3 id="特殊形式的数学运算符与数学符号">6.2特殊形式的数学运算符与数学符号</h3><table style="width:100%;"><thead><tr><th>符号</th><th>TeX</th><th>符号</th><th>TeX</th><th>符号</th><th>TeX</th></tr></thead><tbody><tr><td><span class="math inline">\(\pm\)</span></td><td><code>$\pm$</code></td><td><span class="math inline">\(\mp\)</span></td><td><code>$\mp$</code></td><td><span class="math inline">\(\cdot\)</span></td><td><code>$\cdot$</code></td></tr><tr><td><span class="math inline">\(\times\)</span></td><td><code>$\times$</code></td><td><span class="math inline">\(\div\)</span></td><td><code>$\div$</code></td><td><span class="math inline">\(\star\)</span></td><td><code>$\star$</code></td></tr><tr><td><span class="math inline">\(\ast\)</span></td><td><code>$\ast$</code></td><td><span class="math inline">\(\cup\)</span></td><td><code>$\cup$</code></td><td><span class="math inline">\(\cap\)</span></td><td><code>$\cap$</code></td></tr><tr><td><span class="math inline">\(\vee\)</span></td><td><code>$\vee$</code>或<code>$\lor$</code></td><td><span class="math inline">\(\wedge\)</span></td><td><code>$\wedge$</code>或<code>$\land$</code></td><td><span class="math inline">\(\simeq\)</span></td><td><code>$\simwq$</code></td></tr><tr><td><span class="math inline">\(\oplus\)</span></td><td><code>$\oplus$</code></td><td><span class="math inline">\(\otimes\)</span></td><td><code>$\otimes$</code></td><td><span class="math inline">\(\sim\)</span></td><td><code>$\sim$</code></td></tr><tr><td><span class="math inline">\(\circ\)</span></td><td><code>$\circ$</code></td><td><span class="math inline">\(\bullet\)</span></td><td><code>$\bullet$</code></td><td><span class="math inline">\(\subset\)</span></td><td><code>$\subset$</code></td></tr><tr><td><span class="math inline">\(\bigtriangleup\)</span></td><td><code>$\bigtriangleup$</code></td><td><span class="math inline">\(\bigtriangledown\)</span></td><td><code>$\bigtriangledown$</code></td><td><span class="math inline">\(\supset\)</span></td><td><code>$\supset$</code></td></tr><tr><td><span class="math inline">\(\nabla\)</span></td><td><code>$\nabla$</code></td><td><span class="math inline">\(\exists\)</span></td><td><code>$\exists$</code></td><td><span class="math inline">\(\subseteq\)</span></td><td><code>$\subseteq$</code></td></tr><tr><td><span class="math inline">\(\partial\)</span></td><td><code>$\partial$</code></td><td><span class="math inline">\(\infty\)</span></td><td><code>$\infty$</code></td><td><span class="math inline">\(\subseteq\)</span></td><td><code>$\subseteq$</code></td></tr><tr><td><span class="math inline">\(\forall\)</span></td><td><code>$\forall$</code></td><td><span class="math inline">\(\surd\)</span></td><td><code>$\surd$</code></td><td><span class="math inline">\(\in\)</span></td><td><code>$\in$</code></td></tr><tr><td><span class="math inline">\(\angle\)</span></td><td><code>\angle</code></td><td><span class="math inline">\(\bot\)</span></td><td><code>$\bot$</code></td><td><span class="math inline">\(\ni\)</span></td><td><code>$\ni$</code>或者<code>$\owns$</code></td></tr><tr><td><span class="math inline">\(\leq\)</span></td><td><code>\leq</code>或者<code>\le</code></td><td><span class="math inline">\(\geq\)</span></td><td><code>$\geq$</code>或者<code>$\ge$</code></td><td><span class="math inline">\(\notin\)</span></td><td><code>$\notin$</code></td></tr><tr><td><span class="math inline">\(\equiv\)</span></td><td><code>$\equiv$</code></td><td><span class="math inline">\(\approx\)</span></td><td><code>$\approx$</code></td><td><span class="math inline">\(\neq\)</span></td><td><code>\neq</code>或者<code>\ne</code></td></tr><tr><td><span class="math inline">\(\lll\)</span></td><td><code>$\lll$</code></td><td><span class="math inline">\(\ggg\)</span></td><td><code>$\ggg$</code></td><td></td><td><code>\cong</code></td></tr><tr><td><span class="math inline">\(\propto\)</span></td><td><code>$\propto$</code></td><td><span class="math inline">\(\varsubsetneqq\)</span></td><td><code>$\varsubsetneqq$</code></td><td><span class="math inline">\(\varsupsetneqq\)</span></td><td><code>$\varsupsetneqq$</code></td></tr><tr><td><span class="math inline">\(\mid\)</span></td><td><code>$\mid$</code></td><td><span class="math inline">\(\Rrightarrow\)</span></td><td><code>$Rrightarrow$</code></td><td><span class="math inline">\(\Lleftarrow\)</span></td><td><code>$Lleftarrow$</code></td></tr><tr><td><span class="math inline">\(\parallel\)</span></td><td><code>$\parallel$</code></td><td><span class="math inline">\(\upharpoonright\)</span></td><td><code>$upharpoonright$</code></td><td><span class="math inline">\(\downharpoonright\)</span></td><td><code>$downharpoonright$</code></td></tr><tr><td><span class="math inline">\(\because\)</span></td><td><code>$\because$</code></td><td><span class="math inline">\(\therefore\)</span></td><td><code>$\therefore$</code></td><td></td><td></td></tr></tbody></table><h2 id="省略号空白间隔分界符">7. 省略号、空白间隔、分界符</h2><h3 id="省略号">7.1 省略号</h3><p>省略号用<code>\dots \cdots \vdots \ddots</code>表示<br />* <code>$\dots$</code> - &gt; <spanclass="math inline">\(\dots\)</span>，位置比较低 <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">$$<br>x_1, x_2, \dots, x_n<br>$$<br></code></pre></td></tr></table></figure> <spanclass="math display">\[x_1, x_2, \dots, x_n\]</span> * <code>$\cdots$</code> - &gt; <spanclass="math inline">\(\cdots\)</span>，位置居中 <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">$$<br>1, 2, \cdots, n<br>$$<br></code></pre></td></tr></table></figure> <spanclass="math display">\[1, 2, \cdots, n\]</span> * <code>$\vdots$</code> - &gt; <spanclass="math inline">\(\vdots\)</span>，竖直省略号<br />* <code>$\ddots$</code> - &gt; <spanclass="math inline">\(\ddots\)</span>，45°方向省略号</p><h3 id="空白间隔">7.2 空白间隔</h3><p><code>$\quad$</code> - &gt; <spanclass="math inline">\(\quad\)</span><br /><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">$\,$ 3/18em   <br>$\:$  4/18em  <br>$\;$ 5/18em <br>$\quad$ 1em <br>$\qquad$ 2m <br>$\!$ -3/18em<br></code></pre></td></tr></table></figure> <span class="math inline">\(\,\)</span> 3/18em<br /><span class="math inline">\(\:\)</span> 4/18em<br /><span class="math inline">\(\;\)</span> 5/18em<br /><span class="math inline">\(\quad\)</span> 1em<br /><span class="math inline">\(\qquad\)</span> 2m<br /><span class="math inline">\(\!\)</span> -3/18em</p><h3 id="分界符">7.3 分界符</h3><table><thead><tr><th>符号</th><th>TeX</th><th>符号</th><th>TeX</th></tr></thead><tbody><tr><td><span class="math inline">\(\lgroup\)</span></td><td><code>$\lgroup$</code></td><td><span class="math inline">\(\rgroup\)</span></td><td><code>$\group$</code></td></tr><tr><td><span class="math inline">\(\lmoustache\)</span></td><td><code>$\lmoustache$</code></td><td><span class="math inline">\(\rmoustache\)</span></td><td><code>$\rmoustache$</code></td></tr></tbody></table><h2 id="分段函数">8. 分段函数</h2><p><code>&amp;</code>表示对齐，<code>\\</code>表示换行，<code>\qquad</code>可以表示空格<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">$$<br>函数名=\begin&#123;cases&#125;<br>公式1 &amp; 条件1 \\<br>公式2 &amp; 条件2 \\<br>公式3 &amp; 条件3 \\<br>\end&#123;cases&#125;<br>$$<br></code></pre></td></tr></table></figure> <span class="math display">\[函数名=\begin{cases}公式1 &amp; 条件1 \\公式2 &amp; 条件2 \\公式3 &amp; 条件3 \\\end{cases}\]</span></p><h2 id="大型数学运算符">9. 大型数学运算符</h2><table><thead><tr><th>运算符</th><th>TeX</th><th>运算符</th><th>TeX</th></tr></thead><tbody><tr><td><span class="math inline">\(\sum\)</span></td><td><code>$\sum$</code></td><td><span class="math inline">\(\int\)</span></td><td><code>$\int$</code></td></tr><tr><td><span class="math inline">\(\prod\)</span></td><td><code>$\prod$</code></td><td><span class="math inline">\(\iint\)</span></td><td><code>$\iint$</code></td></tr><tr><td><span class="math inline">\(\coprod\)</span></td><td><code>$\coprod$</code></td><td><span class="math inline">\(\iiint\)</span></td><td><code>$\iiint$</code></td></tr><tr><td><span class="math inline">\(\bigvee\)</span></td><td><code>$\bigvee$</code></td><td><span class="math inline">\(\bigwedge\)</span></td><td><code>$\bigwedge$</code></td></tr><tr><td><span class="math inline">\(\bigoplus\)</span></td><td><code>$\bigoplus$</code></td><td><span class="math inline">\(\bigotimes\)</span></td><td><code>$\bigotimes$</code></td></tr><tr><td><span class="math inline">\(\bigcup\)</span></td><td><code>$\bigcup$</code></td><td><span class="math inline">\(\lim\)</span></td><td><code>$\lim$</code></td></tr></tbody></table><h3 id="使用上标和下标分别表示运算符号的上下限">9.1使用上标和下标分别表示运算符号的上下限</h3><p><code>$\sum_0^\infty$</code> - &gt; <spanclass="math inline">\(\sum_0^\infty\)</span><br /><code>$\int_&#123;-\infty&#125;^&#123;\infty&#125;$</code> - &gt; <spanclass="math inline">\(\int_{-\infty}^{\infty}\)</span><br /><code>$\lim_&#123;x\to0&#125; &#123;sinx \over x&#125;$</code> - &gt; <spanclass="math inline">\(\lim_{x\to0}{sinx \over x}\)</span></p><h3 id="使用to表示趋近于的箭头">9.2使用<code>\to</code>表示趋近于的箭头</h3><p><code>$x\to0$</code> - &gt; <spanclass="math inline">\(x\to0\)</span></p><h3 id="和积极限积分等运算符">9.3 和、积、极限、积分等运算符</h3><p>用<code>\sum</code>,<code>\prod</code>,<code>\lim</code>,<code>\int</code>，这些公式在行内公式被压缩，以适应行高，可以通过<code>\limits</code>和<code>\nolimits</code>命令显示是否压缩<br /><code>$\int\limits_&#123;-\infty&#125;^&#123;\infty&#125; \frac &#123;sinx&#125;xdx$</code> - &gt;<span class="math inline">\(\int\limits_{-\infty}^{\infty} \frac{sinx}xdx\)</span><br /><code>$\int\nolimits_&#123;-\infty&#125;^&#123;\infty&#125; \frac &#123;sinx&#125;xdx$</code> - &gt;<span class="math inline">\(\int\limits_{-\infty}^{\infty} \frac{sinx}xdx\)</span><br /><code>$\lim\limits_&#123;n\to&#123;+\infty&#125;&#125; \frac&#123;n-1&#125;&#123;n(n+1)(n+2)&#125;$</code> -&gt; <span class="math inline">\(\lim\limits_{n\to{+\infty}}\frac{n-1}{n(n+1)(n+2)}\)</span><br /><code>$\lim\nolimits_&#123;n\to&#123;+\infty&#125;&#125; \frac&#123;n-1&#125;&#123;n(n+1)(n+2)&#125;$</code> -&gt; <span class="math inline">\(\lim\nolimits_{n\to{+\infty}}\frac{n-1}{n(n+1)(n+2)}\)</span>​</p><h2 id="加入上划线中划线下划线">10. 加入上划线、中划线、下划线</h2><h3 id="上划线">10.1 上划线</h3><p><code>$\overline&#123;text&#125;$</code>- &gt;<spanclass="math inline">\(\overline{text}\)</span></p><h3 id="中划线">10.2 中划线</h3><p><code>~~text~~</code> - &gt; <del>text</del></p><h3 id="下划线">10.3 下划线</h3><p><code>$\underline&#123;text&#125;$</code> - &gt; <spanclass="math inline">\(\underline{text}\)</span></p>]]></content>
    
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>crawler</title>
    <link href="/2024/08/21/crawler/"/>
    <url>/2024/08/21/crawler/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">0. 前言</h2><p>爬虫其实就像是一个自动化的网络助手，它能够像人一样浏览网页，但是速度更快，效率更高。简单来说，爬虫就是一个程序，它可以自动访问网页，读取网页上的内容，并把你想要的信息提取出来。</p><p>举个例子：想象一下，你想了解某个商品的价格，通常你会打开网站，搜索这个商品，然后手动记录下它的价格。爬虫可以帮你做这件事，程序会自动打开网页，搜索商品，并把价格信息提取出来，甚至可以保存到一个文件里，这样你就不用自己一个一个去查找了。</p><p>爬虫可以用于很多场景，比如从多个网站上收集商品信息，追踪新闻动态，甚至是抓取社交媒体上的数据。总之，爬虫就是一个帮你自动从互联网上获取数据的工具。</p><p>我们平时都说Python爬虫，其实这里可能有个误解，爬虫并不是Python独有的，可以做爬虫的语言有很多例如：PHP,JAVA,C#,C++,Python，选择Python做爬虫是因为Python相对来说比较简单，而且功能比较齐全。</p><p>本文使用的语言为python，IDE为pycharm</p><h2 id="框架">1. 框架</h2><p>本文使用的是<strong>Requests +Beautifulsoup</strong>组合作为框架，这也是一个非常经典的组合</p><p>他的原理是这样的：</p><ul><li><strong>Requests</strong>发送HTTP请求，比如获取网页的HTML内容</li><li><strong>Beautifulsoup</strong>用于解析HTML并从中提取所需的数据</li></ul><h2 id="基础知识介绍">2. 基础知识介绍</h2><h3 id="requests">2.1 Requests</h3><p><strong>什么是requests库</strong></p><p><code>requests</code> 库主要用于与 Web服务进行通信。发送请求后服务器返回的响应会包含很多信息。<code>requests</code>库可以处理响应和管理对话</p><p>**如何使用</p><p>首先，我们要安装<code>Requests</code>库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install requests<br></code></pre></td></tr></table></figure><p>下面案例是<code>Requests</code>库中<code>get()</code>方法发送一个get请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入requests库</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># 发送一个get请求并得到响应</span><br>r = requests.get(<span class="hljs-string">&#x27;http://crazythursdayv50tome.cn&#x27;</span>)<br><span class="hljs-comment"># 查看响应对象的类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(r))<br><span class="hljs-comment"># 查看响应状态码</span><br><span class="hljs-built_in">print</span>(r.status_code)<br><span class="hljs-comment"># 查看响应内容的类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(r.text))<br><span class="hljs-comment"># 查看cookies</span><br><span class="hljs-built_in">print</span>(r.cookies)<br></code></pre></td></tr></table></figure><p>运行效果</p><figure><img src="/images/屏幕截图%202024-08-21%20121042.png" alt="运行效果" /><figcaption aria-hidden="true">运行效果</figcaption></figure><p>查看响应的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><figure><img src="/images/屏幕截图%202024-08-21%20121337.png" alt="运行效果" /><figcaption aria-hidden="true">运行效果</figcaption></figure><p><strong>小贴士</strong></p><blockquote><ol type="1"><li><p>常见的状态码包括：</p><ol type="1"><li><code>200 OK</code>:请求成功，服务器返回了所请求的资源</li><li><code>404 Not Found</code>:服务器找不到请求的资源</li><li><code>500 INternal Server Error</code>:服务器内部错误</li></ol></li><li><p>常见方法内容类型包括：</p><ol type="1"><li><code>text/html</code>:表示内容是HTML文档</li><li><code>application/json</code>:表示内容是JSON数据</li><li><code>image/png</code>:表示内容是啥PNG图片</li></ol><ul><li>用途：<ul><li>如果是HTML，你可以用<code>BeautifulSoup</code>解析</li><li>如果是JSON，你可以用python的<code>json</code>模块解析</li><li>如果是图片或文件，你可以保存他们</li></ul></li></ul></li><li><p>Cookies</p><ol type="1"><li>Cookies是由服务器生成并发送到客户端（通常是浏览器）的小数据片段，这些数据会被浏览器存储并在随后的请求中发送回服务器。Cookies通常用于以下目的：<ul><li><strong>会话管理</strong>：比如登陆状态、购物车内容等</li><li><strong>个性化设置</strong>：比如用户的语言偏好、主题颜色等</li><li><strong>用户跟踪</strong>：比如统计用户的访问行为，广告投放等</li></ul></li><li><code>&lt;RequestsCookieJar[]&gt;</code> 时，这表示当前<code>RequestsCookieJar</code> 对象是空的，即没有任何 Cookies存储在其中。</li></ol></li></ol></blockquote><p>其他类型的请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 当你需要向服务器发送数据以创建新的资源或提交表单时</span><br>r = requests.post(<span class="hljs-string">&#x27;crazythursdayv50tome.cn&#x27;</span>)<br><span class="hljs-comment"># 当你需要更新或替换服务器上的现有资源时</span><br>r = requests.put(<span class="hljs-string">&#x27;crazythursdayv50tome.cn&#x27;</span>)<br><span class="hljs-comment"># 当你需要删除服务器上的资源时</span><br>r = requests.delete(<span class="hljs-string">&#x27;crazythursdayv50tome.cn&#x27;</span>)<br><span class="hljs-comment"># 当你只需要检查资源的存在性或获取元数据时</span><br>r = requests.head(<span class="hljs-string">&#x27;crazythursdayv50tome.cn&#x27;</span>)<br><span class="hljs-comment"># 当你需要了解服务器支持哪些 HTTP 方法或进行 CORS 预检时</span><br>r = requests.options(<span class="hljs-string">&#x27;crazythursdayv50tome.cn&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="beautifulsoup库">2.2 BeautifulSoup库</h3><p><strong>什么是BeautifulSoup库？</strong></p><p><code>BeautifulSoup</code> 是一个用于解析 HTML 和 XML 文档的 Python库。它可以把复杂的 HTML 文档转换成一个复杂的树形结构，其中每个节点都是Python 对象，表示 HTML 文档中的一部分，比如标签、属性、文本等。</p><p><code>BeautifulSoup</code>使得从网页中提取数据变得非常简单。你可以通过标签名、属性、CSS选择器等方式来查找和操作网页内容。</p><p><strong>原理：</strong>实例化一个<code>BeautifulSoup</code>对象，并且将页面源码数据加载到该对象中。之后通过调用<code>BeautifulSoup</code>对象中相关的属性或者方法进行标签定位和数据提取</p><p><strong>使用BeautifulSoup库</strong></p><p>首先，我们要安装<code>BeautifulSoup</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install beautifulsoup4<br></code></pre></td></tr></table></figure><p>接着，导入从<code>bs4</code>包中导入<code>BeautifulSoup</code>类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br></code></pre></td></tr></table></figure><p>要使用<code>BeautifulSoup</code>解析HTML文档，我们要先获取HTML文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>url = <span class="hljs-string">&quot;https://crazythursdayv50tome.cn&quot;</span><br>response = requests.get(url)<br>html_content = response.text<br><br>soup = BeautifulSoup(html_content,<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br></code></pre></td></tr></table></figure><p>下面是一些常见操作：</p><ol type="1"><li><p><strong>查找元素</strong></p><ol type="1"><li><strong>按标签名查找单个元素</strong></li></ol><p><code>find()</code>：返回第一个匹配的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">title_tag = soup.find(<span class="hljs-string">&#x27;title&#x27;</span>)<br><span class="hljs-built_in">print</span>(title_tag) <span class="hljs-comment"># 输出&lt;title&gt;Dumpling&lt;/title&gt;</span><br><span class="hljs-built_in">print</span>(title_tag.string) <span class="hljs-comment"># 输出Dumpling</span><br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><strong>按标签名查找所有元素</strong></li></ol><p><code>find_all()</code>:返回所有匹配的元素，返回一个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">all_headers = soup.find_all(<span class="hljs-string">&#x27;h2&#x27;</span>, class_=<span class="hljs-string">&quot;index-header&quot;</span>)<br><br><span class="hljs-keyword">for</span> header <span class="hljs-keyword">in</span> all_headers:<br>    content = header.find(<span class="hljs-string">&#x27;a&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;content.text.strip()&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li><strong>按标签名和属性查找元素</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><br></code></pre></td></tr></table></figure></li></ol><h2 id="实例">3. 实例</h2>]]></content>
    
    
    
    <tags>
      
      <tag>web前端</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程常用缩写</title>
    <link href="/2024/08/15/abbr/"/>
    <url>/2024/08/15/abbr/</url>
    
    <content type="html"><![CDATA[<p>最近在复现代码的时候，遇到了很多工具类、辅助函数或通用组件的模块命名缩写，遂记录下来</p><ol type="1"><li><code>lib</code> -<code>Library（库）</code>：通常包含一系列可重用的代码模块或函数集合。</li><li><code>helper</code> -<code>Helper（助手）</code>：这类文件或模块提供一些辅助性的功能函数。</li><li><code>common</code> -<code>Common（公共）</code>：存放项目中多个部分都会用到的通用函数或组件。</li><li><code>aux</code> 或 <code>auxiliary</code> -<code>辅助</code>，与helper类似，指辅助性代码模块。</li><li><code>funcs / functions</code> -<code>函数集</code>：用来存储独立、非特定业务逻辑的函数。</li><li><code>services</code> -<code>服务层</code>：在某些架构中，这一层封装了应用程序的核心业务逻辑和数据处理操作。</li><li><code>consts / constants</code> -<code>常量</code>：存放程序中不会改变的值。</li><li><code>models</code> -<code>模型</code>：在MVC（Model-View-Controller）架构或其他框架中，模型通常代表数据结构及相关的业务逻辑。</li><li><code>middlewares</code> -<code>中间件</code>：在像Express.js这样的Node.js框架中，中间件是指处理HTTP请求的函数序列。</li><li><code>io</code> -<code>Input/Output（输入/输出）</code>：与数据读取、写入等I/O操作相关的模块。</li><li><code>config</code> -<code>配置</code>：存放应用程序配置信息的模块或文件夹。</li><li><code>logger / logging</code> -<code>日志记录</code>：用于处理日志生成和管理的模块。</li><li><code>cache</code> -<code>缓存</code>：提供缓存功能，如数据缓存、HTTP请求缓存等的模块。</li><li><code>validators / validation</code> -<code>校验器/验证</code>：包含数据校验逻辑的模块。</li><li><code>exceptions</code> -<code>异常处理</code>：用来定义和处理自定义异常的模块。</li><li><code>tasks / jobs</code> -<code>任务/作业</code>：用于定时任务或其他异步工作流程的模块。</li><li><code>enums</code> - <code>枚举</code>：存储枚举类型的模块。</li><li><code>templates / views</code> -<code>模板/视图</code>：在Web开发中，存放HTML模板或其他类型视图文件的目录。</li><li><code>db / database</code> -<code>数据库</code>：封装数据库操作相关代码的模块。</li><li><code>extensions / ext</code> -<code>扩展方法</code>：扩展已有对象或类型的额外功能函数。</li><li><code>primitives</code> -<code>基础工具</code>：包含一些基础且常用的处理数据、字符串等的基础方法。</li><li><code>tools</code> -<code>工具集</code>：各种杂项但实用的功能函数合集。</li><li><code>commons</code> -<code>公共组件/方法</code>：项目中多个部分都会用到的通用逻辑和功能。</li><li><code>utils</code> -<code>Utility的缩写，全称为Utilities</code>。在编程中，我们通常将一些常用、通用的功能函数或工具类放置在一个名为utils的模块或者文件夹中，这些函数和类可以被多个其他模块调用，以提供诸如数据处理、格式转换、错误处理等实用功能。</li><li><code>utilities（完整形式）</code>-<code>同样指代工具函数</code>，与utils含义一致。</li><li><code>support</code> -<code>支持模块</code>：为其它主要模块提供支持性功能的代码块。</li><li><code>services_utils</code> -<code>服务层工具</code>：在服务层内部使用的通用功能模块。</li><li><code>core_utils</code> -<code>核心工具</code>：专用于项目核心模块的一组工具方法。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python学习</title>
    <link href="/2024/08/10/pythonStudy/"/>
    <url>/2024/08/10/pythonStudy/</url>
    
    <content type="html"><![CDATA[<h2 id="python基础教程">1. python基础教程</h2><h3 id="python关键字和标识符">1.1 python关键字和标识符</h3><h4 id="python关键字">1.1.1 python关键字</h4><p>关键字是Python中的保留字。</p><p>我们不能将关键字用作变量名，函数名或任何其他标识符。它们用于定义Python语言的语法和结构。</p><p>在Python中，关键字区分大小写。</p><p>Python 3.7中有 33 个关键字。该数字在一段时间内可能会略有变化。</p><p>所有关键字必须是小写的，其中 True，False 和 None除外。下面列出了所有关键字。</p><blockquote><p>python中的关键字</p></blockquote><table><thead><tr><th style="text-align: center;">False</th><th>await</th><th>else</th><th>import</th><th>pass</th></tr></thead><tbody><tr><td style="text-align: center;">None</td><td>break</td><td>except</td><td>in</td><td>raise</td></tr><tr><td style="text-align: center;">True</td><td>class</td><td>finally</td><td>is</td><td>return</td></tr><tr><td style="text-align: center;">and</td><td>continue</td><td>for</td><td>lambda</td><td>try</td></tr><tr><td style="text-align: center;">as</td><td>def</td><td>from</td><td>nonlocal</td><td>while</td></tr><tr><td style="text-align: center;">assert</td><td>del</td><td>global</td><td>not</td><td>with</td></tr><tr><td style="text-align: center;">async</td><td>elif</td><td>if</td><td>or</td><td>yield</td></tr></tbody></table><h4 id="python标识符">1.1.2 python标识符</h4><p>标识符是给诸如类，函数，变量等实体的名称。它有助于将一个实体与另一个实体区分开。</p><p>编写标识符的规则：</p><ol type="1"><li>标识符可以是小写字母<strong>（a 至 z）</strong>或大写字母<strong>（A至 Z）</strong>或数字<strong>（0 至9）</strong>或下划线(_)的组合。myClass，var_1，var_name_1,print_this_to_screen 都是有效的。</li><li>标识符不能以数字开头。1variable 是无效的，但 variable1是有效的。</li><li>关键字不能用作标识符。</li><li>我们不能使用像<strong>！。</strong>，**<span class="citation"data-cites="*">@*</span>*，<strong>#</strong>，<strong>$</strong>，<strong>％</strong>等这样的特殊符号。</li><li>标识符可以是任意长度</li></ol><p>注意：</p><blockquote><p>Python 是 <strong>区分大小写</strong> 的语言。这意味着 Variable 和variable是两个不同的变量。同时，也建议大家，在实际编程中，始终命名有意义的标识符。</p><p>虽然，c = 10 也是有效的。但是使用 count = 10看起来会更有意义，并且即使您在经过一段长时间的间隔之后查看代码，也更容易弄清楚它的作用和它所代表的意义。</p></blockquote><h3 id="python语句缩进和注释">1.2 python语句，缩进和注释</h3><h4 id="python语句">1.2.1 python语句</h4><p>Python解释器可以执行的指令称为语句。例如，a = 1 是一个赋值语句。if语句，for 语句，while 语句等是其他种类的语句，将在后面讨论。</p><p><strong>多行语句</strong></p><p>在Python中，语句的结尾用换行符标记。但是我们可以使一条语句扩展到具有多行连续字符（）的多行。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span> + <span class="hljs-number">2</span> + <span class="hljs-number">3</span> + \<br><span class="hljs-number">4</span> + <span class="hljs-number">5</span> + <span class="hljs-number">6</span> + \<br><span class="hljs-number">7</span> + <span class="hljs-number">8</span> + <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>这是显式的行继续。在Python中，在圆括号()，方括号[]和花括号{}中暗含换行符。例如，我们可以将上述多行语句实现为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = (<span class="hljs-number">1</span> + <span class="hljs-number">2</span> + <span class="hljs-number">3</span> +<br>    <span class="hljs-number">4</span> + <span class="hljs-number">5</span> + <span class="hljs-number">6</span> +<br>    <span class="hljs-number">7</span> + <span class="hljs-number">8</span> + <span class="hljs-number">9</span>)<br></code></pre></td></tr></table></figure><p>在此。周围的括号()隐式地进行了行连续。[]和{}也是如此。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">colors = [<span class="hljs-string">&#x27;red&#x27;</span>,<br>          <span class="hljs-string">&#x27;blue&#x27;</span>,<br>          <span class="hljs-string">&#x27;green&#x27;</span>]<br></code></pre></td></tr></table></figure><p>我们还可以使用分号将多个语句放在一行中，如下所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span>; b = <span class="hljs-number">2</span>; c = <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="python缩进">1.2.2 python缩进</h4><p>大多数编程语言（例如C，C++，Java）都使用大括号{}来定义代码块。<strong>而Python使用缩进</strong>。</p><p>代码块（<ahref="https://www.cainiaojc.com/python/python-function.html">函数的</a>主体，<ahref="https://www.cainiaojc.com/python/python-for-loop.html">循环的</a>主体等）以缩进开始，以第一条未缩进的行结束。缩进量取决于您，但是在整个块中缩进量必须保持一致。</p><p>通常，四个空格用于缩进，并且优先于制表符。下面是一个示例。</p><p>Python中缩进的实现使代码看起来整洁干净。这导致看起来相似且一致的Python程序。</p><p>缩进可以在连续行中忽略。始终缩进是个好习惯。它使代码更具可读性。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br>    a = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>: <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>); a = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>两者都是有效的并且做同样的事情。但是前一种风格更加清晰。</p><p>缩进不正确将导致IndentationError。</p><h4 id="python注释">1.2.3 python注释</h4><p>编写程序时，注释非常重要。它描述了程序内部正在发生的事情，这样，查看源代码的人就不会很费解。您可能会忘记一个月前刚编写的程序的关键细节。因此，花时间以注释的形式解释这些概念总是很有意义的。</p><p>在Python中，我们使用井号（#）开始编写注释。</p><p>它扩展到换行符。注释供程序员使用，以更好地理解程序。Python解释器忽略注释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#这是一个注释</span><br><span class="hljs-comment">#打印输出 Hello</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>多行注释</strong></p><p>如果我们有扩展多行的注释，一种方法是在每行的开头使用哈希（#）。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#这是一个长注释</span><br><span class="hljs-comment">#它延伸</span><br><span class="hljs-comment">#到多行</span><br></code></pre></td></tr></table></figure><p>这样做的另一种方法是使用三引号，''' 或者 """。</p><p>这些三引号通常用于多行字符串。但是它们也可以用作多行注释。除非它们不是文档字符串，否则它们不会生成任何额外的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;这也是一个</span><br><span class="hljs-string">完美的示例</span><br><span class="hljs-string">多行注释&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>python中的文档字符串</strong></p><h3 id="python中的文档字符串">Python中的文档字符串</h3><p>Docstring是文档字符串的缩写。</p><p>它是一个<ahref="https://www.cainiaojc.com/python/python-string.html">字符串</a>，作为模块，函数，类或方法定义中的第一条语句出现。我们必须在文档字符串中写出函数/类的作用。</p><p>编写文档字符串时使用三引号。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">double</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;函数使值翻倍&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*num<br></code></pre></td></tr></table></figure><p>Docstring作为__doc__函数的属性可供我们使用。运行上面的程序后，在shell中发出以下代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">double</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;函数使值翻倍&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*num<br><span class="hljs-built_in">print</span>(double.__doc__)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">函数使值翻倍<br></code></pre></td></tr></table></figure><h2 id="python变量常量和字面量">1.3 python变量，常量和字面量</h2><h3 id="python变量">1.3.1 python变量</h3><p>变量是用于在内存中存储数据的命名位置。可以将变量视为保存数据的容器，这些数据可以在后面程序中进行更改。例如，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">number = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>在这里，我们创建了一个名为number的变量。我们已将值 10 分配给变量number。</p><p>您可以将变量视为用于存储书籍的袋子，并且可以随时替换里面的书籍。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">number = <span class="hljs-number">10</span><br>number = <span class="hljs-number">1.1</span><br></code></pre></td></tr></table></figure><p>最初，它等于10。后来，它被更改为1.1。</p><p><strong>注意</strong>：在Python中，我们实际上并未为变量分配值。相反，Python将对象（值）的引用提供给变量。</p><h3 id="在python中为变量赋值">1.3.2 在python中为变量赋值</h3><p>从上面的示例中可以看到，可以使用赋值运算符 = 为变量赋值。</p><p><strong>示例1：声明和分配值给变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">website = <span class="hljs-string">&quot;apple.com&quot;</span><br><span class="hljs-built_in">print</span>(website)<br></code></pre></td></tr></table></figure><p>运行该程序时，输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">apple.com<br></code></pre></td></tr></table></figure><p>在以上程序中，我们为变量website分配了一个值 apple.com。然后，我们打印出分配给website的值，即 apple.com</p><p><strong>注意</strong>：Python是一种类型推断语言，因此您不必显式定义变量类型。它会自动知道这apple.com 是一个字符串，并将website变量声明为字符串。</p><p><strong>示例2：更改变量的值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">website = <span class="hljs-string">&quot;apple.com&quot;</span><br><span class="hljs-built_in">print</span>(website)<br><br><span class="hljs-comment"># 为website变量赋新值 </span><br>website = <span class="hljs-string">&quot;(cainiaojc.com)&quot;</span><br><br><span class="hljs-built_in">print</span>(website)<br></code></pre></td></tr></table></figure><p>运行该程序时，输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">apple.com<br>(cainiaojc.com)<br></code></pre></td></tr></table></figure><p>在上述程序中，我们最初已分配 apple.com给website变量。然后，将值更改为 (cainiaojc.com)。</p><p><strong>示例3：将多个值分配给多个变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a, b, c = <span class="hljs-number">5</span>, <span class="hljs-number">3.2</span>, <span class="hljs-string">&quot;Hello&quot;</span><br><br><span class="hljs-built_in">print</span> (a)<br><span class="hljs-built_in">print</span> (b)<br><span class="hljs-built_in">print</span> (c)<br></code></pre></td></tr></table></figure><p>如果我们想一次将相同的值分配给多个变量，我们可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x = y = z = <span class="hljs-string">&quot;same&quot;</span><br><br><span class="hljs-built_in">print</span> (x)<br><span class="hljs-built_in">print</span> (y)<br><span class="hljs-built_in">print</span> (z)<br></code></pre></td></tr></table></figure><p>第二个程序将字符串 same 同时分配给三个变量x，y和z。</p><p><strong>常量</strong></p><p>常量也是一种变量，只是其值一旦赋予后无法更改。可以将常量视为保存了以后无法更改的信息的容器。</p><p>您可以将常量视为一个用于存储一些书籍的袋子，这些书籍一旦放入袋子中就无法替换为别的书籍。</p><h3 id="在python中为常量赋值">1.3.3 在python中为常量赋值</h3><p>在Python中，常量通常是在模块中声明和分配的。在这里，模块是一个包含变量，函数等的新文件，该文件被导入到主文件中。在模块内部，用所有大写字母写的常量和下划线将单词分开。</p><p><strong>示例3：声明值并将其分配给常量</strong></p><p>创建一个<strong>constant.py</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">PI = <span class="hljs-number">3.14</span><br>GRAVITY = <span class="hljs-number">9.8</span><br></code></pre></td></tr></table></figure><p>创建一个<strong>main.py</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> constant<br><br><span class="hljs-built_in">print</span>(constant.PI)<br><span class="hljs-built_in">print</span>(constant.GRAVITY)<br></code></pre></td></tr></table></figure><p>运行该程序时，输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">3.14</span><br><span class="hljs-number">9.8</span><br></code></pre></td></tr></table></figure><p>在上面的程序中，我们创建一个 <strong>constant.py</strong>模块文件。然后，将常量值分配给PI和GRAVITY。之后，我们创建一个<strong>main.py</strong> 文件并导入constant模块。最后，我们打印常数值。</p><p><strong>注意</strong>：实际上，我们不在Python中使用常量。用大写字母命名它们是一种将其与普通变量分开的一种约定，但是，实际上并不能阻止重新分配。</p><h3 id="变量和常量的规则和命名约定">1.3.4变量和常量的规则和命名约定</h3><ol type="1"><li>常量和变量名称应由小写字母（a 到 z）或大写字母（<strong>A 到Z</strong>）或数字（<strong>0 到9</strong>）或下划线（**_**）组成。例如：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">snake_case<br>MACRO_CASE<br>camelCase<br>CapWords<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>创建一个有意义的名称，例如，vowel比v更有意义</li><li>如果要创建具有两个单词的变量名，请使用下划线将它们分开。例如：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">my_name<br>current_salary<br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>使用可能的大写字母声明一个常量。例如：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">PI<br>G<br>MASS<br>SPEED_OF_LIGHT<br>TEMP<br></code></pre></td></tr></table></figure><ol start="5" type="1"><li>切勿使用！，@，#，$，％等特殊符号。</li><li>不要用数字开头的变量名</li></ol><h3 id="字面量">1.3.5 字面量</h3><p>字面量是以变量或常量给出的原始数据。在python中，有多种类型的字面量。如下所示：</p><ol type="1"><li><strong>数字字面量</strong></li></ol><p>数字字面量是不可变的（不可更改）。数字字面量可以属于3种不同的数值类型：Integer，Float和 Complex。</p><p><strong>示例4：如何在python中使用数字字面量？</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">0b1010</span> <span class="hljs-comment">#二进制字面量</span><br>b = <span class="hljs-number">100</span> <span class="hljs-comment">#十进制字面量</span><br>c = <span class="hljs-number">0o310</span> <span class="hljs-comment">#八进制字面量</span><br>d = <span class="hljs-number">0x12c</span> <span class="hljs-comment">#十六进制字面量</span><br><br><span class="hljs-comment">#Float 字面量</span><br>float_1 = <span class="hljs-number">10.5</span> <br>float_2 = <span class="hljs-number">1.5e2</span><br><br><span class="hljs-comment">#Complex 字面量</span><br>x = <span class="hljs-number">3.14j</span><br><br><span class="hljs-built_in">print</span>(a, b, c, d)<br><span class="hljs-built_in">print</span>(float_1, float_2)<br><span class="hljs-built_in">print</span>(x, x.imag, x.real)<br></code></pre></td></tr></table></figure><p>运行该程序时，输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">10</span> <span class="hljs-number">100</span> <span class="hljs-number">200</span> <span class="hljs-number">300</span><br><span class="hljs-number">10.5</span> <span class="hljs-number">150.0</span><br><span class="hljs-number">3.14j</span> <span class="hljs-number">3.14</span> <span class="hljs-number">0.0</span><br></code></pre></td></tr></table></figure><p>在上面的程序中：</p><ul><li>我们将整数字面量分配给不同的变量。在这里，a是二进制字面量，b是十进制字面量，c是八进制字面量，d是十六进制字面量。</li><li>当我们打印变量时，所有字面量 都将转换为 十进制值。</li><li>10.5 和 1.5e2 是浮点字面量。1.5e2 用指数表示，等于 1.5 * 102。</li><li>我们为变量x分配了一个复数字面量 3.14j。然后，我们使用<strong>虚数</strong>字面量(x.imag) 和<strong>实数</strong>字面量(x.real)来创建复数的虚部和实部。</li></ul><ol start="2" type="1"><li><strong>字符串字面量</strong></li></ol><p>字符串字面量是由引号括起来的一系列字符。我们可以对字符串使用单引号，双引号或 三引号。并且，字符字面量是用单引号或双引号引起来的单个字符。</p><p><strong>示例7：如何在python中使用字符串字面量？</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">strings = <span class="hljs-string">&quot;This is Python&quot;</span><br>char = <span class="hljs-string">&quot;C&quot;</span><br>multiline_str = <span class="hljs-string">&quot;&quot;&quot;This is a multiline string with more than one line code.&quot;&quot;&quot;</span><br>unicode = <span class="hljs-string">u&quot;\u00dcnic\u00f6de&quot;</span><br>raw_str = <span class="hljs-string">r&quot;raw \n string&quot;</span><br><br><span class="hljs-built_in">print</span>(strings)<br><span class="hljs-built_in">print</span>(char)<br><span class="hljs-built_in">print</span>(multiline_str)<br><span class="hljs-built_in">print</span>(unicode)<br><span class="hljs-built_in">print</span>(raw_str)<br></code></pre></td></tr></table></figure><p>运行该程序时，输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">This <span class="hljs-keyword">is</span> Python<br>C<br>This <span class="hljs-keyword">is</span> a multiline string <span class="hljs-keyword">with</span> more than one line code.<br>Ünicöde<br>raw \n string<br></code></pre></td></tr></table></figure><p>在上述程序中，This is Python 是字符串字面量 和 C是char字符字面量。在multiline_str中分配的带有三引号"""的值是多行字符串字面量。而u"0dcnic0f6de" 是一个Unicode文本支持英语以外的字符，r"raw string"是原始字符串字面量。</p><ol start="3" type="1"><li><strong>布尔字面量</strong></li></ol><p>布尔字面量可以具有两个值中的任何一个：True 或 False。</p><p><strong>示例8：如何在python中使用布尔字面量？</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">x = (<span class="hljs-number">1</span> == <span class="hljs-literal">True</span>)<br>y = (<span class="hljs-number">1</span> == <span class="hljs-literal">False</span>)<br>a = <span class="hljs-literal">True</span> + <span class="hljs-number">4</span><br>b = <span class="hljs-literal">False</span> + <span class="hljs-number">10</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x is&quot;</span>, x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;y is&quot;</span>, y)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a:&quot;</span>, a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b:&quot;</span>, b)<br></code></pre></td></tr></table></figure><p>运行该程序时，输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x <span class="hljs-keyword">is</span> <span class="hljs-literal">True</span><br>y <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span><br>a: <span class="hljs-number">5</span><br>b: <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>在上面的程序中，我们使用了布尔字面量 True 和 False。在Python中，True表示值为1,False 表示值为0。x的值为真，因为1 等于 True。y 的值为False，因为1 不等于 False。类似地，我们可以使用数值表达式中的 True 和False 作为值。a 的值是 5，因为我们加上True，它的值是 1 加 4。类似地，b等于 10，因为我们把 0 和 10 相加。</p><ol start="4" type="1"><li><strong>特殊字面量</strong></li></ol><p>Python包含一个特殊字面量，即None。我们使用它来指定尚未创建的字段。</p><p><strong>示例9：如何在python中使用特殊字面量？</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">drink = <span class="hljs-string">&quot;Available&quot;</span><br>food = <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> x == drink:<br>        <span class="hljs-built_in">print</span>(drink)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(food)<br><br>        <br>menu(drink)<br>menu(food)<br></code></pre></td></tr></table></figure><p>运行该程序时，输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">Available<br><span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>在上面的程序中，我们定义了一个 menu 函数。在 menu内部，当我们将参数设置为 drink 时，它将显示 Available。并且，当参数为时food，将显示 None。</p><ol start="5" type="1"><li><strong>字面量集</strong></li></ol><p>有四种不同的字面量集合：列表字面量，元组字面量，字典字面量 和集合字面量。</p><p><strong>示例10：如何在python中使用字面量集合？</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;mango&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>] <span class="hljs-comment">#列表</span><br>numbers = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">#元组</span><br>alphabets = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-string">&#x27;ball&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-string">&#x27;cat&#x27;</span>&#125; <span class="hljs-comment">#字典</span><br>vowels = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span> , <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>&#125; <span class="hljs-comment">#集合</span><br><br><span class="hljs-built_in">print</span>(fruits)<br><span class="hljs-built_in">print</span>(numbers)<br><span class="hljs-built_in">print</span>(alphabets)<br><span class="hljs-built_in">print</span>(vowels)<br></code></pre></td></tr></table></figure><p>运行该程序时。输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;mango&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>]<br>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-string">&#x27;ball&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-string">&#x27;cat&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>在上面的程序中，我们创建了一个 fruits 列表，一个numbers元组，一个alphabets 字典，alphabets字典的值带有为每个值指定的键，以及vowels元音字母的集合。</p><h3 id="python数据类型">1.4 python数据类型</h3><h4 id="python中的数据类型">1.4.1 python中的数据类型</h4><p>Python中的每个值都有一个数据类型。由于在Python编程中一切都是对象，因此数据类型实际上是类，而变量是这些类的示例（对象）。</p><p>Python中有多种数据类型。下面列出了一些重要的类型。</p><h4 id="python数字number">1.4.2 python数字(Number)</h4><p>整数、浮点数和复数都属于Python数字的范畴。在Python中，它们被定义为int、float 和 complex类。</p><p>我们可以使用type()函数来判断一个变量或值属于哪个类。同样地，isinstance()函数用于检查对象是否属于特定的类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(a, <span class="hljs-string">&quot;的类型是  &quot;</span>, <span class="hljs-built_in">type</span>(a))<br><br>a = <span class="hljs-number">2.0</span><br><span class="hljs-built_in">print</span>(a, <span class="hljs-string">&quot;的类型是  &quot;</span>, <span class="hljs-built_in">type</span>(a))<br><br>a = <span class="hljs-number">1</span>+<span class="hljs-number">2j</span><br><span class="hljs-built_in">print</span>(a, <span class="hljs-string">&quot;是复数吗?&quot;</span>, <span class="hljs-built_in">isinstance</span>(<span class="hljs-number">1</span>+<span class="hljs-number">2j</span>,<span class="hljs-built_in">complex</span>))<br></code></pre></td></tr></table></figure><p>输出量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">5</span> 的类型是  &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<br><span class="hljs-number">2.0</span> 的类型是  &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt;<br>(<span class="hljs-number">1</span>+<span class="hljs-number">2j</span>) 是复数吗? <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>整数可以是任意长度，但受可用内存的限制。</p><p>浮点数最多可精确到 15 个小数位。整数 和 浮点由小数点分隔。1是整数，1.0 是浮点数。</p><p>复数以 x + yj 形式书写，其中x是实部，y是虚部。这里有些示例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">1234567890123456789</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">1234567890123456789</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b = <span class="hljs-number">0.1234567890123456789</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b<br><span class="hljs-number">0.12345678901234568</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c = <span class="hljs-number">1</span>+<span class="hljs-number">2j</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c<br>(<span class="hljs-number">1</span>+<span class="hljs-number">2j</span>)<br></code></pre></td></tr></table></figure><p>注意，float变量b被截断了。</p><h4 id="python列表list">1.4.3 python列表(List)</h4><p>列表是项目的有序序列。它是Python中最常用的数据类型之一，非常灵活。列表中的项目允许不是同一类型。</p><p>声明列表非常简单。用逗号分隔的项目放在方括号内[ ]。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-string">&#x27;python&#x27;</span>]<br></code></pre></td></tr></table></figure><p>我们可以使用切片运算符 [ ] 从列表中提取一个项目 或一系列项目。注意，在Python中，索引从 0 开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">20</span>,<span class="hljs-number">25</span>,<span class="hljs-number">30</span>,<span class="hljs-number">35</span>,<span class="hljs-number">40</span>]<br><br><span class="hljs-comment"># a[2] = 15</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a[2] = &quot;</span>, a[<span class="hljs-number">2</span>])<br><br><span class="hljs-comment"># a[0:3] = [5, 10, 15]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a[0:3] = &quot;</span>, a[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])<br><br><span class="hljs-comment"># a[5:] = [30, 35, 40]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a[5:] = &quot;</span>, a[<span class="hljs-number">5</span>:])<br></code></pre></td></tr></table></figure><p>输出量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a[<span class="hljs-number">2</span>] =  <span class="hljs-number">15</span><br>a[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>] =  [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>]<br>a[<span class="hljs-number">5</span>:] =  [<span class="hljs-number">30</span>, <span class="hljs-number">35</span>, <span class="hljs-number">40</span>]<br></code></pre></td></tr></table></figure><p>列表是可变的，也就是说，列表元素的值可以更改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>a[<span class="hljs-number">2</span>] = <span class="hljs-number">4</span><br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><p>输出量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><h4 id="python元组tuple">1.4.4 python元组(Tuple)</h4><p>元组(Tuple)是项目的有序序列，与列表(List)相同。唯一的区别是元组是<strong>不可变</strong>的。元组一旦创建就不能修改。</p><p>元组用于写保护数据，通常比列表快，因为它们不能动态更改。</p><p>它在括号内 () 定义，其中各项之间用逗号分隔。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">t = (<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;program&#x27;</span>, <span class="hljs-number">1</span>+<span class="hljs-number">3j</span>)<br></code></pre></td></tr></table></figure><p>我们可以使用切片运算符[]提取项目，但不能更改其值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">t = (<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;program&#x27;</span>, <span class="hljs-number">1</span>+<span class="hljs-number">3j</span>)<br><br><span class="hljs-comment"># t[1] = &#x27;program&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;t[1] = &quot;</span>, t[<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># t[0:3] = (5, &#x27;program&#x27;, (1+3j))</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;t[0:3] = &quot;</span>, t[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])<br><br><span class="hljs-comment">#产生错误</span><br><span class="hljs-comment">#元组是不可变的</span><br>t[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>输出量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">t[<span class="hljs-number">1</span>] =  program<br>t[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>] =  (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;program&#x27;</span>, (<span class="hljs-number">1</span>+<span class="hljs-number">3j</span>))<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;test.py&quot;</span>, line <span class="hljs-number">11</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    t[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span><br>TypeError: <span class="hljs-string">&#x27;tuple&#x27;</span> <span class="hljs-built_in">object</span> does <span class="hljs-keyword">not</span> support item assignment<br></code></pre></td></tr></table></figure><h4 id="python字符串">1.4.5 python字符串</h4><p>字符串是Unicode字符的序列。我们可以使用单引号或双引号来表示字符串。可以使用三引号''' 或 """ 来表示多行字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;This is a string&quot;</span><br><span class="hljs-built_in">print</span>(s)<br>s = <span class="hljs-string">&#x27;&#x27;&#x27;A multiline</span><br><span class="hljs-string">string&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><p>输出量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">This <span class="hljs-keyword">is</span> a string<br>A multiline<br>string<br></code></pre></td></tr></table></figure><p>就像列表和元组一样，切片运算符 [ ]可以与字符串一起使用。但是，字符串是不可变的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;Hello world!&#x27;</span><br><br><span class="hljs-comment"># s[4] = &#x27;o&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;s[4] = &quot;</span>, s[<span class="hljs-number">4</span>])<br><br><span class="hljs-comment"># s[6:11] = &#x27;world&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;s[6:11] = &quot;</span>, s[<span class="hljs-number">6</span>:<span class="hljs-number">11</span>])<br><br><span class="hljs-comment">#发生错误</span><br><span class="hljs-comment">#字符串在Python中是不可变的</span><br>s[<span class="hljs-number">5</span>] =<span class="hljs-string">&#x27;d&#x27;</span><br></code></pre></td></tr></table></figure><p>输出量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s[<span class="hljs-number">4</span>] =  o<br>s[<span class="hljs-number">6</span>:<span class="hljs-number">11</span>] =  world<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;string&gt;&quot;</span>, line <span class="hljs-number">11</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: <span class="hljs-string">&#x27;str&#x27;</span> <span class="hljs-built_in">object</span> does <span class="hljs-keyword">not</span> support item assignment<br></code></pre></td></tr></table></figure><h4 id="python集合set">1.4.6 python集合(set)</h4><p>set是唯一项的无序集合。Set 由用大括号 { }括起来，并由逗号分隔的值的集合。集合中的项目是无序的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>&#125;<br><br><span class="hljs-comment"># 输出set集变量</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a = &quot;</span>, a)<br><br><span class="hljs-comment"># 输出a的数据类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))<br></code></pre></td></tr></table></figure><p>输出量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a =  &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;set&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>我们可以在两个集合上执行集合操作，例如并集，交集。集具有唯一值。他们消除重复。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>&#125;<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><p>输出量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><p>由于 set 是无序集合，因此索引没有意义。因此，切片运算符 []不起作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>a[<span class="hljs-number">1</span>]<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;string&gt;&quot;</span>, line <span class="hljs-number">301</span>, <span class="hljs-keyword">in</span> runcode<br>  File <span class="hljs-string">&quot;&lt;interactive input&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: <span class="hljs-string">&#x27;set&#x27;</span> <span class="hljs-built_in">object</span> does <span class="hljs-keyword">not</span> support indexing<br></code></pre></td></tr></table></figure><h4 id="python字典">1.4.7 python字典</h4><p>字典是 键值对 的无序集合。</p><p>当我们拥有大量数据时，通常使用它。字典针对检索数据进行了优化。我们必须知道检索值的密钥。</p><p>在Python中，大括号 {} 内定义了字典，每一项都是形式为 key:value 。键和 值 可以是任何类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>d = &#123;<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;value&#x27;</span>,<span class="hljs-string">&#x27;key&#x27;</span>:<span class="hljs-number">2</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(d)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>我们可以使用键来检索相应的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">d = &#123;<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;value&#x27;</span>,<span class="hljs-string">&#x27;key&#x27;</span>:<span class="hljs-number">2</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(d))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d[1] = &quot;</span>, d[<span class="hljs-number">1</span>]);<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d[&#x27;key&#x27;] = &quot;</span>, d[<span class="hljs-string">&#x27;key&#x27;</span>]);<br><br><span class="hljs-comment">#产生错误</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d[2] = &quot;</span>, d[<span class="hljs-number">2</span>]);<br></code></pre></td></tr></table></figure><p>输出量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br>d[<span class="hljs-number">1</span>] =  value<br>d[<span class="hljs-string">&#x27;key&#x27;</span>] =  <span class="hljs-number">2</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;string&gt;&quot;</span>, line <span class="hljs-number">9</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>KeyError: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="数据类型转换">1.4.8 数据类型转换</h4><p>我们可以通过使用不同类型的转换功能，例如不同的数据类型之间进行转换int()，float()，str() 等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">float</span>(<span class="hljs-number">5</span>)<br><span class="hljs-number">5.0</span><br></code></pre></td></tr></table></figure><p>从float 到 int的转换将截断该值（使其接近零）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-number">10.6</span>)<br><span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(-<span class="hljs-number">10.6</span>)<br>-<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>字符串之间的转换必须包含兼容的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;2.5&#x27;</span>)<br><span class="hljs-number">2.5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>(<span class="hljs-number">25</span>)<br><span class="hljs-string">&#x27;25&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;1p&#x27;</span>)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;string&gt;&quot;</span>, line <span class="hljs-number">301</span>, <span class="hljs-keyword">in</span> runcode<br>  File <span class="hljs-string">&quot;&lt;interactive input&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>ValueError: invalid literal <span class="hljs-keyword">for</span> <span class="hljs-built_in">int</span>() <span class="hljs-keyword">with</span> base <span class="hljs-number">10</span>: <span class="hljs-string">&#x27;1p&#x27;</span><br></code></pre></td></tr></table></figure><p>我们甚至可以将一个序列转换为另一序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">tuple</span>(&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;)<br>(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>[<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>]<br></code></pre></td></tr></table></figure><p>要转换为字典，每个元素必须成对：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span>([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]])<br>&#123;<span class="hljs-number">1</span>: <span class="hljs-number">2</span>, <span class="hljs-number">3</span>: <span class="hljs-number">4</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span>([(<span class="hljs-number">3</span>,<span class="hljs-number">26</span>),(<span class="hljs-number">4</span>,<span class="hljs-number">44</span>)])<br>&#123;<span class="hljs-number">3</span>: <span class="hljs-number">26</span>, <span class="hljs-number">4</span>: <span class="hljs-number">44</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="python类型转换">1.5 python类型转换</h3><h4 id="类型转换">1.5.1 类型转换</h4><p>将一种数据类型（整数，字符串，浮点数等）的值转换为另一种数据类型的过程称为类型转换。Python有两种类型的类型转换。</p><ol type="1"><li>隐式类型转换</li><li>显示类型转换</li></ol><h4 id="隐式类型转换">1.5.2 隐式类型转换</h4><p>在隐式类型转换中，Python自动将一种数据类型转换为另一种数据类型。此过程不需要任何用户参与。</p><p>让我们看一个示例，其中Python促进将较低数据类型（整数）转换为较高数据类型（浮点数）以避免数据丢失。</p><p><strong>示例1：将整数转换为浮点数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">num_int = <span class="hljs-number">123</span><br>num_flo = <span class="hljs-number">1.23</span><br><br>num_new = num_int + num_flo<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;num_int的数据类型:&quot;</span>,<span class="hljs-built_in">type</span>(num_int))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;num_flo的数据类型:&quot;</span>,<span class="hljs-built_in">type</span>(num_flo))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;num_new的值:&quot;</span>,num_new)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;num_new的数据类型:&quot;</span>,<span class="hljs-built_in">type</span>(num_new))<br></code></pre></td></tr></table></figure><p>当我们运行上面的程序时，输出将是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">num_int的数据类型: &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<br>num_flo的数据类型: &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt;<br><br>num_new的值: <span class="hljs-number">124.23</span><br>num_new的数据类型: &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>在上面的程序中</p><ul><li>我们将两个变量num_int和num_flo 相加，并将值存储在变量num_new中。</li><li>我们分别查看所有三个对象的数据类型。</li><li>在输出中，我们可以看到num_int的数据类型是integer，num_flo的数据类型是一个float。</li><li>另外，我们可以看到num_new具有float数据类型，因为 Python总是将较小的数据类型转换为较大的数据类型，以避免数据丢失。</li></ul><p>现在，让我们尝试 一个字符串 和 一个整数相加，并查看Python如何处理它。</p><p><strong>示例2：字符串(较高)数据类型和整数(较低)数据类型的加法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">num_int = <span class="hljs-number">123</span><br>num_str = <span class="hljs-string">&quot;456&quot;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;num_int的数据类型:&quot;</span>,<span class="hljs-built_in">type</span>(num_int))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;num_str的数据类型:&quot;</span>,<span class="hljs-built_in">type</span>(num_str))<br><br><span class="hljs-built_in">print</span>(num_int+num_str)<br></code></pre></td></tr></table></figure><p>当我们运行上面的程序时，输出将是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">num_int的数据类型: &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<br>num_str的数据类型: &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><br>Traceback (most recent call last): <br>  File <span class="hljs-string">&quot;python&quot;</span>, line <span class="hljs-number">7</span>, <span class="hljs-keyword">in</span> &lt;module&gt; <br>TypeError: unsupported operand <span class="hljs-built_in">type</span>(s) <span class="hljs-keyword">for</span> +: <span class="hljs-string">&#x27;int&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;str&#x27;</span><br></code></pre></td></tr></table></figure><p>在上面的程序中</p><ul><li>我们两个变量num_int 和num_str相加。</li><li>从输出中可以看到，我们得到了TypeError。在这种情况下，Python无法使用隐式转换。</li><li>但是，Python针对此类情况提供了一种解决方案，称为“<strong>显式转换</strong>”。</li></ul><h4 id="显式类型转换">1.5.3 显式类型转换</h4><p>在“<strong>显式类型转换</strong>”中，用户将对象的数据类型转换为所需的数据类型。我们使用像预定义函数int()，float()，str()等进行显式类型转换。</p><p>这种转换类型也称为类型转换，因为用户强制转换（更改）对象的数据类型。</p><p>语法 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;required_datatype&gt;(expression)<br></code></pre></td></tr></table></figure><p>可以通过将所需的数据类型函数分配给表达式来完成类型转换。</p><p><strong>示例3：使用显式转换将字符串和整数相加</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">num_int = <span class="hljs-number">123</span><br>num_str = <span class="hljs-string">&quot;456&quot;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;num_int的数据类型:&quot;</span>,<span class="hljs-built_in">type</span>(num_int))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;类型转换之前num str的数据类型:&quot;</span>,<span class="hljs-built_in">type</span>(num_str))<br><br>num_str = <span class="hljs-built_in">int</span>(num_str)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;类型转换后的num str的数据类型:&quot;</span>,<span class="hljs-built_in">type</span>(num_str))<br><br>num_sum = num_int + num_str<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;num_int与num_str的和:&quot;</span>,num_sum)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sum的数据类型:&quot;</span>,<span class="hljs-built_in">type</span>(num_sum))<br></code></pre></td></tr></table></figure><p>当我们运行上面的程序时，输出将是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">num_int的数据类型: &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<br><br>类型转换之前num <span class="hljs-built_in">str</span>的数据类型: &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br>类型转换后的num <span class="hljs-built_in">str</span>的数据类型: &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<br><br>num_int与num_str的和: <span class="hljs-number">579</span><br><span class="hljs-built_in">sum</span>的数据类型: &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>在上面的程序中</p><ul><li>我们num_str和num_int变量相加。</li><li>我们使用 int() 函数将num_str从 string（高）转换为integer（低）类型来执行加法。</li><li>将num_str转换为整数后，Python可以对这两个变量进行相加。</li><li>最后，我们得到num_sum值 和 以及该值得数据类型为整数。</li></ul><h4 id="要记住的要点">1.5.4 要记住的要点</h4><ol type="1"><li>类型转换是对象从一种数据类型到另一种数据类型的转换。</li><li>隐式类型转换由Python解释器自动执行。</li><li>Python避免了隐式类型转换中的数据丢失。</li><li>显式类型转换也称为类型转换，用户使用预定义的函数转换对象的数据类型。</li><li>在类型转换中，当我们将对象强制为特定数据类型时，可能会发生数据丢失。</li></ol><h3 id="python输入输出和导入">1.6 python输入，输出和导入</h3><p>python提供了许多内置函数，这些函数可以在python提示符下随时使用</p><p>内置的函数例如 input() 和 print()分别广泛用于标准输入和输出操作。让我们首先查看输出部分。</p><h4 id="python使用print函数输出">1.6.1 python使用print()函数输出</h4><p>我们使用print()函数将数据输出到标准输出设备（屏幕）。我们也可以将数据输出到文件中，这将在后面讨论</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这句话输出到屏幕&#x27;</span>)<br></code></pre></td></tr></table></figure><p>输出量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">这句话输出到屏幕<br></code></pre></td></tr></table></figure><p>下面给出另一个示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a的值为&#x27;</span>, a)<br></code></pre></td></tr></table></figure><p>输出量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a的值为<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>在第二个print()语句中，我们可以注意到在字符串和变量a的值之间添加了空格。这是默认设置，但是我们可以更改它。</p><p>print()函数的实际语法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(*objects, sep=<span class="hljs-string">&#x27; &#x27;</span>, end=<span class="hljs-string">&#x27;\n&#x27;</span>, file=sys.stdout, flush=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>此处objects是要打印的值。</p><p>sep是值之间的分隔符。默认为空格字符。</p><p>在打印所有值之后，end 将被打印。默认为新行。</p><p>file 是打印值的对象，其默认值为 sys.stdout（屏幕）。这是一个示例来说明这一点。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, sep=<span class="hljs-string">&#x27;*&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, sep=<span class="hljs-string">&#x27;#&#x27;</span>, end=<span class="hljs-string">&#x27;&amp;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>输出量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-number">1</span>*<span class="hljs-number">2</span>*<span class="hljs-number">3</span>*<span class="hljs-number">4</span><br><span class="hljs-number">1</span><span class="hljs-comment">#2#3#4&amp;</span><br></code></pre></td></tr></table></figure><h4 id="输出格式">1.6.2 输出格式</h4><p>有时我们想格式化输出，使其看起来更方便阅读查看。这可以通过使用str.format() 方法来完成。该方法对任何字符串对象都是可见的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>x = <span class="hljs-number">5</span>; y = <span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x的值为&#123;&#125;，y的值为&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x,y))<br>x的值为<span class="hljs-number">5</span>，y的值为<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>在这里，花括号{}用作占位符。我们可以使用数字（元组索引）指定它们的打印顺序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;I love &#123;0&#125; and &#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;bread&#x27;</span>,<span class="hljs-string">&#x27;butter&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;I love &#123;1&#125; and &#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;bread&#x27;</span>,<span class="hljs-string">&#x27;butter&#x27;</span>))<br></code></pre></td></tr></table></figure><p>输出量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">I love bread <span class="hljs-keyword">and</span> butter<br>I love butter <span class="hljs-keyword">and</span> bread<br></code></pre></td></tr></table></figure><p>我们甚至可以使用关键字参数来格式化字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello &#123;name&#125;, &#123;greeting&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(greeting = <span class="hljs-string">&#x27;Goodmorning&#x27;</span>, name = <span class="hljs-string">&#x27;John&#x27;</span>))<br>Hello John, Goodmorning<br></code></pre></td></tr></table></figure><p>我们还可以像在C编程语言中使用 sprintf()的旧样式一样格式化字符串。我们使用 % 运算符来完成此任务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>x = <span class="hljs-number">12.3456789</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x的值为 %3.2f&#x27;</span> %x)<br>x的值为 <span class="hljs-number">12.35</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x的值为 %3.4f&#x27;</span> %x)<br>x的值为 <span class="hljs-number">12.3457</span><br></code></pre></td></tr></table></figure><h4 id="python输入">1.6.3 python输入</h4><p>到目前为止，我们的程序是静态的。变量的值已定义或硬编码到源代码中。</p><p>为了提供灵活性，我们可能希望从用户那里获取输入。在Python中，我们具有input()允许此功能的功能。的语法为input()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>([prompt])<br></code></pre></td></tr></table></figure><p>prompt我们希望在屏幕上显示的字符串在哪里。它是可选的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter a number: &#x27;</span>)<br>Enter a number: <span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num<br><span class="hljs-string">&#x27;10&#x27;</span><br></code></pre></td></tr></table></figure><p>在这里，我们可以看到输入的值10是一个字符串，而不是数字。要将其转换为数字，我们可以使用int()或float()函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;10&#x27;</span>)<br><span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;10&#x27;</span>)<br><span class="hljs-number">10.0</span><br></code></pre></td></tr></table></figure><p>使用该eval()功能可以执行相同的操作。但是要eval进一步。如果输入是字符串，它甚至可以计算表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;2+3&#x27;</span>)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&quot;</span>, line <span class="hljs-number">301</span>, <span class="hljs-keyword">in</span> runcode<br>  File <span class="hljs-string">&quot;&quot;</span>, line <span class="hljs-number">1</span>, inValueError: invalid literal <span class="hljs-keyword">for</span> <span class="hljs-built_in">int</span>() <span class="hljs-keyword">with</span> base <span class="hljs-number">10</span>: <span class="hljs-string">&#x27;2+3&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;2+3&#x27;</span>)<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id="python的导入">1.6.4 python的导入</h4><p>当我们的程序变得更大时，将其分解为不同的模块是一个好主意。</p><p>模块是包含Python定义和语句的文件。python模块具有文件名，并以扩展名.py 结尾。</p><p>可以将模块内部的定义导入另一个模块 或Python中的交互式解释器。我们使用 <strong>import</strong>关键字来做到这一点。</p><p>例如，我们可以通过输入以下行来导入模块 math：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br></code></pre></td></tr></table></figure><p>我们可以通过以下方式使用该模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-built_in">print</span>(math.pi)<br></code></pre></td></tr></table></figure><p>输出量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">3.141592653589793</span><br></code></pre></td></tr></table></figure><p>现在，math模块内的所有定义都可以在我们的范围内使用。我们还可以使用from关键字仅导入一些特定的属性和函数。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> pi<br><span class="hljs-meta">&gt;&gt;&gt; </span>pi<br><span class="hljs-number">3.141592653589793</span><br></code></pre></td></tr></table></figure><p>导入模块时，Python中使用sys.path会查看中定义的多个位置。它是目录位置的列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pyhon">&gt;&gt;&gt; import sys<br>&gt;&gt;&gt; sys.path<br>[&#x27;&#x27;, <br> &#x27;C:\\Python33\\Lib\\idlelib&#x27;, <br> &#x27;C:\\Windows\\system32\\python33.zip&#x27;, <br> &#x27;C:\\Python33\\DLLs&#x27;, <br> &#x27;C:\\Python33\\lib&#x27;, <br> &#x27;C:\\Python33&#x27;, <br> &#x27;C:\\Python33\\lib\\site-packages&#x27;]<br></code></pre></td></tr></table></figure><p>我们也可以将自己的位置添加到此列表中。</p><h3 id="python运算符">1.7 python运算符</h3><h4 id="python中的运算符是什么">1.7.1 python中的运算符是什么</h4><p>运算符是Python中执行算术或逻辑计算的特殊符号。运算符所操作的值称为操作数。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">2</span>+<span class="hljs-number">3</span><br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>在这里，+是执行加法的运算符。2和3是操作数，5是操作的输出。</p><h4 id="算数运算符">1.7.2 算数运算符</h4><p>算术运算符用于执行数学运算，例如加法，减法，乘法等。</p><table><thead><tr><th style="text-align: left;">操作符</th><th style="text-align: left;">含义</th><th style="text-align: left;">例</th></tr></thead><tbody><tr><td style="text-align: left;">+</td><td style="text-align: left;">加 - 两个操作数相加或一元加</td><td style="text-align: left;">x + y + 2</td></tr><tr><td style="text-align: left;">-</td><td style="text-align: left;">减 - 从左侧或一元减号，减去右侧操作数</td><td style="text-align: left;">x-y- 2</td></tr><tr><td style="text-align: left;">*</td><td style="text-align: left;">乘 -将两个操作数相乘</td><td style="text-align: left;">x * y</td></tr><tr><td style="text-align: left;">/</td><td style="text-align: left;">除 -将左边操作数除以右边操作数（结果总是为float）</td><td style="text-align: left;">x / y</td></tr><tr><td style="text-align: left;">%</td><td style="text-align: left;">求模 -左操作数除以右操作数的余数</td><td style="text-align: left;">x％y（x / y的余数）</td></tr><tr><td style="text-align: left;">//</td><td style="text-align: left;">取整除 - 返回商的整数部分（向下取整）</td><td style="text-align: left;">x // y</td></tr><tr><td style="text-align: left;">**</td><td style="text-align: left;">幂 - 返回x的y次幂</td><td style="text-align: left;">x ** y（x的y次幂）</td></tr></tbody></table><p><strong>示例1：Python中的算术运算符</strong></p><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">15</span><br>y = <span class="hljs-number">4</span><br><br><span class="hljs-comment"># 输出: x + y = 19</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x + y =&#x27;</span>,x+y)<br><br><span class="hljs-comment"># 输出: x - y = 11</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x - y =&#x27;</span>,x-y)<br><br><span class="hljs-comment"># 输出: x * y = 60</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x * y =&#x27;</span>,x*y)<br><br><span class="hljs-comment"># 输出: x / y = 3.75</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x / y =&#x27;</span>,x/y)<br><br><span class="hljs-comment"># 输出: x // y = 3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x // y =&#x27;</span>,x//y)<br><br><span class="hljs-comment"># 输出: x ** y = 50625</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x ** y =&#x27;</span>,x**y)<br></code></pre></td></tr></table></figure><p>运行该程序时，输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x + y = <span class="hljs-number">19</span><br>x - y = <span class="hljs-number">11</span><br>x * y = <span class="hljs-number">60</span><br>x / y = <span class="hljs-number">3.75</span><br>x // y = <span class="hljs-number">3</span><br>x ** y = <span class="hljs-number">50625</span><br></code></pre></td></tr></table></figure><h4 id="比较运算符">1.7.3 比较运算符</h4><p>比较运算符用于比较值。它返回True或False根据条件返回。</p><table><thead><tr><th style="text-align: left;">操作符</th><th style="text-align: left;">含义</th><th style="text-align: left;">例</th></tr></thead><tbody><tr><td style="text-align: left;">&gt;</td><tdstyle="text-align: left;">大于-如果左操作数大于右操作数，则为True</td><td style="text-align: left;">x&gt; y</td></tr><tr><td style="text-align: left;">&lt;</td><tdstyle="text-align: left;">小于-如果左操作数小于右操作数，则为True</td><td style="text-align: left;">x &lt;y</td></tr><tr><td style="text-align: left;">==</td><td style="text-align: left;">等于-如果两个操作数相等，则为True</td><td style="text-align: left;">x == y</td></tr><tr><td style="text-align: left;">!=</td><td style="text-align: left;">不等于-如果操作数不相等则为True</td><td style="text-align: left;">x！= y</td></tr><tr><td style="text-align: left;">&gt;=</td><tdstyle="text-align: left;">大于或等于-如果左操作数大于或等于右，则为True</td><td style="text-align: left;">x&gt; = y</td></tr><tr><td style="text-align: left;">&lt;=</td><tdstyle="text-align: left;">小于或等于-如果左操作数小于或等于右，则为True</td><td style="text-align: left;">x &lt;= y</td></tr></tbody></table><p><strong>示例2：Python中的比较运算符</strong></p><p>示例</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">x = 10<br>y = 12<br><br><span class="hljs-comment"># 输出: x &gt; y 是 False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x &gt; y 是 &#x27;</span>,x&gt;y)<br><br><span class="hljs-comment"># 输出: x &lt; y 是 True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x &lt; y 是 &#x27;</span>,x&lt;y)<br><br><span class="hljs-comment"># 输出: x == y 是 False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x == y 是 &#x27;</span>,<span class="hljs-attribute">x</span>==y)<br><br><span class="hljs-comment"># 输出: x != y 是 True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x != y 是 &#x27;</span>,x!=y)<br><br><span class="hljs-comment"># 输出: x &gt;= y 是 False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x &gt;= y 是 &#x27;</span>,x&gt;=y)<br><br><span class="hljs-comment"># 输出: x &lt;= y 是 True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x &lt;= y 是 &#x27;</span>,x&lt;=y)<br></code></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">x</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">y</span> <span class="hljs-string">是</span> <span class="hljs-literal">False</span><br><span class="hljs-string">x</span> <span class="hljs-string">&lt;</span> <span class="hljs-string">y</span> <span class="hljs-string">是</span> <span class="hljs-literal">True</span><br><span class="hljs-string">x</span> <span class="hljs-string">==</span> <span class="hljs-string">y</span> <span class="hljs-string">是</span> <span class="hljs-literal">False</span><br><span class="hljs-string">x</span> <span class="hljs-type">!=</span> <span class="hljs-string">y</span> <span class="hljs-string">是</span> <span class="hljs-literal">True</span><br><span class="hljs-string">x</span> <span class="hljs-string">&gt;=</span> <span class="hljs-string">y</span> <span class="hljs-string">是</span> <span class="hljs-literal">False</span><br><span class="hljs-string">x</span> <span class="hljs-string">&lt;=</span> <span class="hljs-string">y</span> <span class="hljs-string">是</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h4 id="逻辑运算符">1.7.4 逻辑运算符</h4><p>逻辑运算符是and，or，not运营商。</p><table><thead><tr><th style="text-align: left;">操作符</th><th style="text-align: left;">含义</th><th style="text-align: left;">例</th></tr></thead><tbody><tr><td style="text-align: left;">and</td><td style="text-align: left;">如果两个操作数都为真，则为真</td><td style="text-align: left;">x和y</td></tr><tr><td style="text-align: left;">or</td><td style="text-align: left;">如果任何一个操作数为真，则为真</td><td style="text-align: left;">x或y</td></tr><tr><td style="text-align: left;">not</td><tdstyle="text-align: left;">如果操作数为false，则为True（对操作数进行补充）</td><td style="text-align: left;">不是x</td></tr></tbody></table><p><strong>示例3：Python中的逻辑运算符</strong></p><p>示例</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">x = True<br>y = False<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;x and y 是 &#x27;</span>,x and y)</span></span><br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;x or y 是 &#x27;</span>,x or y)</span></span><br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;not x 是 &#x27;</span>,not x)</span></span><br></code></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">x <span class="hljs-keyword">and</span> y 是 <span class="hljs-literal">False</span><br>x <span class="hljs-keyword">or</span> y 是 <span class="hljs-literal">True</span><br><span class="hljs-keyword">not</span> x 是 <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>这是这些运算符的<ahref="https://www.cainiaojc.com/python/python-keyword-list.html#and_or_not">真值表</a>。</p><h4 id="位运算符">1.7.5 位运算符</h4><p>按位运算符作用于操作数，就好像它们是二进制数字的字符串一样。它们一点一点地运行，因此得名。</p><p>例如，2是10二进制，7是111。</p><p><strong>在下表中：</strong>令x= 10（0000 1010二进制）和y= 4（00000100二进制）</p><table><thead><tr><th style="text-align: left;">操作符</th><th style="text-align: left;">含义</th><th style="text-align: left;">例</th></tr></thead><tbody><tr><td style="text-align: left;">&amp;</td><td style="text-align: left;">按位与</td><td style="text-align: left;">x＆y = 0（0000 0000）</td></tr><tr><td style="text-align: left;">|</td><td style="text-align: left;">按位或</td><td style="text-align: left;">x | y = 14（0000 1110）</td></tr><tr><td style="text-align: left;">~</td><td style="text-align: left;">按位非</td><td style="text-align: left;">〜x = -11（1111 0101）</td></tr><tr><td style="text-align: left;">^</td><td style="text-align: left;">按位异或</td><td style="text-align: left;">x ^ y = 14（0000 1110）</td></tr><tr><td style="text-align: left;">&gt;&gt;</td><td style="text-align: left;">按位右移</td><td style="text-align: left;">x &gt;&gt; 2 = 2（0000 0010）</td></tr><tr><td style="text-align: left;">&lt;&lt;</td><td style="text-align: left;">按位左移</td><td style="text-align: left;">x &lt;&lt; 2 = 40（0010 1000）</td></tr></tbody></table><h4 id="赋值运算符">1.7.6 赋值运算符</h4><p>在Python中使用赋值运算符为变量赋值。</p><p>a = 5是一个简单的赋值运算符，它将右边的值5分配给左边的变量a。</p><p>Python中有许多类似的复合运算符，a +=5它们会添加到变量中，然后再分配给它们。等同于a = a + 5。</p><table><thead><tr><th style="text-align: left;">操作符</th><th style="text-align: left;">示例</th><th style="text-align: left;">等同</th></tr></thead><tbody><tr><td style="text-align: left;">=</td><td style="text-align: left;">x = 5</td><td style="text-align: left;">x = 5</td></tr><tr><td style="text-align: left;">+=</td><td style="text-align: left;">x + = 5</td><td style="text-align: left;">x = x + 5</td></tr><tr><td style="text-align: left;">-=</td><td style="text-align: left;">x-= 5</td><td style="text-align: left;">x = x-5</td></tr><tr><td style="text-align: left;">*=</td><td style="text-align: left;">x * = 5</td><td style="text-align: left;">x = x * 5</td></tr><tr><td style="text-align: left;">/=</td><td style="text-align: left;">x / = 5</td><td style="text-align: left;">x = x / 5</td></tr><tr><td style="text-align: left;">%=</td><td style="text-align: left;">x％= 5</td><td style="text-align: left;">x = x％5</td></tr><tr><td style="text-align: left;">//=</td><td style="text-align: left;">x // = 5</td><td style="text-align: left;">x = x // 5</td></tr><tr><td style="text-align: left;">**=</td><td style="text-align: left;">x ** = 5</td><td style="text-align: left;">x = x ** 5</td></tr><tr><td style="text-align: left;">&amp;=</td><td style="text-align: left;">x＆= 5</td><td style="text-align: left;">x = x＆5</td></tr><tr><td style="text-align: left;">|=</td><td style="text-align: left;">x | = 5</td><td style="text-align: left;">x = x | 5</td></tr><tr><td style="text-align: left;">^=</td><td style="text-align: left;">x ^ = 5</td><td style="text-align: left;">x = x ^ 5</td></tr><tr><td style="text-align: left;">&gt;&gt;=</td><td style="text-align: left;">x &gt;&gt; = 5</td><td style="text-align: left;">x = x &gt;&gt; 5</td></tr><tr><td style="text-align: left;">&lt;&lt;=</td><td style="text-align: left;">x &lt;&lt; = 5</td><td style="text-align: left;">x = x &lt;&lt; 5</td></tr></tbody></table><h4 id="特殊运算符">1.7.7 特殊运算符</h4><p>Python语言提供了一些特殊类型的运算符，例如身份运算符或成员资格运算符。下面通过示例对其进行描述。</p><p><strong>身份运算符</strong></p><p>is和is not是Python中的身份运算符。它们用于检查两个值（或变量）是否位于内存的同一部分。两个相等的变量并不意味着它们是相同的。</p><table><thead><tr><th style="text-align: left;">操作符</th><th style="text-align: left;">含义</th><th style="text-align: left;">例</th></tr></thead><tbody><tr><td style="text-align: left;">is</td><tdstyle="text-align: left;">如果操作数相同，则为真（引用同一对象）</td><td style="text-align: left;">x为真</td></tr><tr><td style="text-align: left;">is not</td><tdstyle="text-align: left;">如果操作数不相同，则为真（不引用同一对象）</td><td style="text-align: left;">x不是真</td></tr></tbody></table><p><strong>示例4：Python中的身份运算符</strong></p><p>示例</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs axapta">x1 = <span class="hljs-number">5</span><br>y1 = <span class="hljs-number">5</span><br>x2 = <span class="hljs-string">&#x27;Hello&#x27;</span><br>y2 = <span class="hljs-string">&#x27;Hello&#x27;</span><br>x3 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>y3 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><br><span class="hljs-meta"># 输出: False</span><br><span class="hljs-keyword">print</span>(x1 <span class="hljs-keyword">is</span> not y1)<br><br><span class="hljs-meta"># 输出: True</span><br><span class="hljs-keyword">print</span>(x2 <span class="hljs-keyword">is</span> y2)<br><br><span class="hljs-meta"># 输出: False</span><br><span class="hljs-keyword">print</span>(x3 <span class="hljs-keyword">is</span> y3)<br></code></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-literal">False</span><br><span class="hljs-literal">True</span><br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>在这里，我们看到x1和y1是相同值的整数，因此它们既相等又相同。x2和y2（字符串）的情况相同。</p><p>但是x3和y3是列表。它们是相等的但不相同。这是因为尽管它们相等，但解释器还是将它们分别定位在内存中。</p><h4 id="成员运算符">1.7.8 成员运算符</h4><p>in和not in是Python中的成员操作符。它们用于测试在序列（<ahref="https://www.cainiaojc.com/python/python-string.html">字符串</a>，<ahref="https://www.cainiaojc.com/python/python-list.html">列表</a>，<ahref="https://www.cainiaojc.com/python/python-tuple.html">元组</a>，<ahref="https://www.cainiaojc.com/python/python-set.html">集合</a>和<ahref="https://www.cainiaojc.com/python/python-dictionary.html">字典</a>）中是否找到值或变量。</p><p>在字典中，我们只能测试键的存在，而不是值。</p><table><thead><tr><th style="text-align: left;">操作员</th><th style="text-align: left;">含义</th><th style="text-align: left;">例</th></tr></thead><tbody><tr><td style="text-align: left;">in</td><td style="text-align: left;">如果在序列中找到值/变量，则为真</td><td style="text-align: left;">5 in x</td></tr><tr><td style="text-align: left;">not in</td><td style="text-align: left;">如果在序列中未找到值/变量，则为真</td><td style="text-align: left;">5 not in x</td></tr></tbody></table><p><strong>示例5：Python中的成员资格运算符</strong></p><p>示例</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">x = <span class="hljs-string">&#x27;Hello world&#x27;</span><br>y = &#123;1:<span class="hljs-string">&#x27;a&#x27;</span>,2:<span class="hljs-string">&#x27;b&#x27;</span>&#125;<br><br><span class="hljs-comment"># 输出: True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;H&#x27;</span> <span class="hljs-keyword">in</span> x)<br><br><span class="hljs-comment"># 输出: True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> x)<br><br><span class="hljs-comment"># 输出: True</span><br><span class="hljs-built_in">print</span>(1 <span class="hljs-keyword">in</span> y)<br><br><span class="hljs-comment"># 输出: False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">in</span> y)<br></code></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-literal">True</span><br><span class="hljs-literal">True</span><br><span class="hljs-literal">True</span><br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>这里，'H'在x中，但'hello'在x中不存在(请记住，Python是区分大小写的)。类似地，1是键值，而a是字典y中的值，因此y中的a返回False。</p><h2 id="python流程控制">2. python流程控制</h2><h3 id="python-if...else语句">2.1 python if...else语句</h3><h4 id="python-if语句语法">2.1.1 python if语句语法</h4><p><strong>python语句语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> test expression:<br>    statement(s)<br></code></pre></td></tr></table></figure><p>如果文本表达式为False，则不执行该语句。</p><p>在Python中，if语句的主体由缩进指示。主体以缩进开始，直到第一条未缩进的语句时结束。</p><p>Python将非零值作为True。None 和 0 被视作为False。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#如果数字是正数，我们打印适当的消息</span><br><br>num = <span class="hljs-number">3</span><br><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(num, <span class="hljs-string">&quot;这是一个正数.&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我始终会打印输出.&quot;</span>)<br><br>num = -<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(num, <span class="hljs-string">&quot;这是一个负数.&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我也始终会打印输出.&quot;</span>)<br></code></pre></td></tr></table></figure><p>运行该程序时，输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">3</span> 这是一个正数.<br>我始终会打印输出.<br>我也始终会打印输出.<br></code></pre></td></tr></table></figure><p>在上面的示例中，num &gt; 0 是测试表达式。</p><p>if语句中，仅当其值为True时才执行的主体。</p><p>当变量num等于 3 时，测试表达式为 true，将执行 if主体内部 的语句。</p><p>如果变量num等于-1，则测试表达式为false，将跳过 if主体内部的语句。</p><p>print()语句位于if块之外（未缩进）。因此，无论测试表达式如何，都将执行它。</p><h4 id="python-if-...-else-语句">2.1.2 python if ... else 语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> test expression:<br>    <span class="hljs-keyword">if</span>代码块主体<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">else</span>代码块主体<br></code></pre></td></tr></table></figure><p>if ... else语句评估 test expression 并且if语句仅在测试条件为 True时才执行主体。</p><p>如果条件为 False，则执行 else的主体。缩进用于分隔块。</p><p>if ... else 的示例</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#程序检查数字是正数还是负数</span><br><span class="hljs-comment">#并显示适当的消息</span><br><br>num = <span class="hljs-number">3</span><br><br><span class="hljs-comment">#尝试这两个值。</span><br><span class="hljs-comment"># num = -5</span><br><span class="hljs-comment"># num = 0</span><br><br><span class="hljs-keyword">if</span> num &gt;= <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0或正数&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;负数&quot;</span>)<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0</span>或正数<br></code></pre></td></tr></table></figure><p>在上面的示例中，当 num 等于3时，测试表达式为true，并且if的主体被执行，else的主体被跳过。</p><p>如果num等于-5，则测试表达式为false，执行else的主体，并且跳过if的主体。</p><p>如果num等于0，则测试表达式为true，if的主体被执行，else的主体被跳过。</p><h4 id="python-if-...-elif-...-else语句">2.1.3 python if ... elif ...else语句</h4><p>if ... elif ... else的语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> test expression:<br>    Body of <span class="hljs-keyword">if</span><br><span class="hljs-keyword">elif</span> test expression:<br>    Body of <span class="hljs-keyword">elif</span><br><span class="hljs-keyword">else</span>: <br>    Body of <span class="hljs-keyword">else</span><br></code></pre></td></tr></table></figure><p>elif是elseif的缩写。它允许我们检查多个表达式。如果If的条件为False，则检查下一个elif块的条件，依此类推。</p><p>如果所有条件都为False，则执行else的主体。</p><p>if...elif...else根据条件，在几个块中仅执行一个块。</p><p>if块只能有一个else块。但是它可以有多个elif块。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;在这个程序中</span><br><span class="hljs-string">我们检查数字是否为正或</span><br><span class="hljs-string">负数或零且</span><br><span class="hljs-string">显示适当的消息&#x27;&#x27;&#x27;</span><br><br>num = <span class="hljs-number">3.4</span><br><br><span class="hljs-comment"># 试试这两个变化:</span><br><span class="hljs-comment"># num = 0</span><br><span class="hljs-comment"># num = -4.5</span><br><br><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正数&quot;</span>)<br><span class="hljs-keyword">elif</span> num == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;负数&quot;</span>)<br></code></pre></td></tr></table></figure><p>当变量num为正时，输出：正数 。</p><p>如果num等于0，输出：零 。</p><p>如果num为负数，输出：负数 。</p><h4 id="python嵌套if语句">2.1.4 python嵌套if语句</h4><p>我们可以在另一个if...elif...else语句中包含一个if...elif...else语句。这在计算机编程中称为嵌套。</p><p>这些语句中的任何数目都可以彼此嵌套。缩进是弄清楚嵌套级别的唯一方法。它们可能会造成混淆，因此除非有必要，否则必须避免使用它们。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;在这个程序中，我们输入一个数字</span><br><span class="hljs-string">检查数字是否为正或</span><br><span class="hljs-string">负数或零并显示</span><br><span class="hljs-string">适当的信息</span><br><span class="hljs-string">这次我们使用嵌套的if语句&#x27;&#x27;&#x27;</span><br><br>num = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入数字: &quot;</span>))<br><span class="hljs-keyword">if</span> num &gt;= <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">if</span> num == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;零&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正数&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    prin<br></code></pre></td></tr></table></figure><p>输出1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">输入数字: <span class="hljs-number">5</span><br>正数<br></code></pre></td></tr></table></figure><p>输出2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">输入数字: -<span class="hljs-number">1</span><br>负数<br></code></pre></td></tr></table></figure><p>输出3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">输入数字: <span class="hljs-number">0</span><br>零<br></code></pre></td></tr></table></figure><h3 id="python-for循环">2.2 python for循环</h3><h4 id="什么是python中的for循环">2.2.1 什么是Python中的for循环？</h4><p>Python中的for循环用于迭代序列（<ahref="https://www.cainiaojc.com/python/python-list.html">list</a>，<ahref="https://www.cainiaojc.com/python/python-tuple.html">tuple</a>，<ahref="https://www.cainiaojc.com/python/python-string.html">string</a>）或其他可迭代对象。在序列上进行迭代称为遍历。</p><p><strong>for循环的语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> sequence:<br>Body of <span class="hljs-keyword">for</span><br></code></pre></td></tr></table></figure><p>在此，val是在每次迭代中获取序列内项目值的变量。</p><p>循环继续直到我们到达序列中的最后一项。使用缩进将for循环的主体与其余代码分开。</p><p><strong>示例：Python for循环</strong></p><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#程序查找列表中存储的所有数字的总和</span><br><span class="hljs-comment">#数字清单</span><br><br>numbers = [<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>]<br><br><span class="hljs-comment"># 用于存储总和的变量</span><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><br><span class="hljs-comment"># 遍历列表</span><br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> numbers:<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span>+val<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;总和是&quot;</span>, <span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><p>当您运行程序时，输出将是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">总和是 <span class="hljs-number">48</span><br></code></pre></td></tr></table></figure><h4 id="range函数">2.2.2 range函数</h4><p>我们可以使用range()函数生成数字序列。range(10)会产生0到9之间的数字（10个数字）。</p><p>我们还可以将开始，停止和步长定义为range(start,stop,step_size)。如果未提供，则step_size默认为1。</p><p>range对象在某种意义上是“惰性的”，因为它不会在我们创建它时生成它“包含”的所有数字。但是它不是迭代器，它支持in、len和getitem操作。</p><p>此函数不将所有值存储在内存中;这将是低效的。因此，它会记住开始、停止、步长，并在运行中生成下一个数字。</p><p>要强制此函数输出所有项目，可以使用函数list()。</p><p>以下示例将演示了这一点。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">8</span>)))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">3</span>)))<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>[<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">17</span>]<br></code></pre></td></tr></table></figure><p>我们可以在for循环中使用 range()函数来迭代数字序列。它可以与len()函数结合使用索引来遍历序列。这是一个示例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用索引遍历列表的程序</span><br><br>genre = [<span class="hljs-string">&#x27;pop&#x27;</span>, <span class="hljs-string">&#x27;rock&#x27;</span>, <span class="hljs-string">&#x27;jazz&#x27;</span>]<br><br><span class="hljs-comment"># 使用索引遍历列表</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(genre))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I like&quot;</span>, genre[i])<br></code></pre></td></tr></table></figure><p>运行该程序时，输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">I like pop<br>I like rock<br>I like jazz<br></code></pre></td></tr></table></figure><h4 id="带有else的循环">2.2.3 带有else的循环</h4><p>for循环也可以有一个可选的else块。</p><p>如果for循环中使用的序列中的项耗尽，则执行else部分。</p><p>break关键字可用于停止for循环。在这种情况下，else部分将被忽略。</p><p>因此，如果没有发生中断，则运行for循环的else部分。</p><p>这是一个示例来说明这一点。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">digits = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> digits:<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有剩余的项目&quot;</span>)<br></code></pre></td></tr></table></figure><p>运行该程序时，输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">5</span><br>没有剩余的项目<br></code></pre></td></tr></table></figure><p>在这里，for循环将打印列表中的项目，直到循环用尽。当for循环用尽时，它执行else代码块并输出"没有剩余的项目"。</p><p>for...else语句可与break关键字一起使用，以便仅在未执行break关键字时运行else块。让我们举个示例：</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 显示记录中学生成绩的程序</span><br>student_name = <span class="hljs-string">&#x27;Soyuj&#x27;</span><br><br>marks = &#123;<span class="hljs-string">&#x27;James&#x27;</span>: <span class="hljs-number">90</span>, <span class="hljs-string">&#x27;Jules&#x27;</span>: <span class="hljs-number">55</span>, <span class="hljs-string">&#x27;Arthur&#x27;</span>: <span class="hljs-number">77</span>&#125;<br><br><span class="hljs-keyword">for</span> student <span class="hljs-keyword">in</span> marks:<br>    <span class="hljs-keyword">if</span> student == student_name:<br>        <span class="hljs-built_in">print</span>(marks[student])<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;没有找到该名称的条目.&#x27;</span>)<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">没有找到该名称的条目<br></code></pre></td></tr></table></figure><h3 id="python-while循环">2.3 python while循环</h3><h4 id="python中while循环的语法">2.3.1 python中while循环的语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> test_expression:<br>    Body of <span class="hljs-keyword">while</span><br></code></pre></td></tr></table></figure><p>在while循环中，首先检查测试表达式。仅当test_expression计算结果为True时，才输入循环的主体。一次迭代后，再次检查测试表达式。这个过程一直持续到test_expression评估结果为False为止。</p><p>在Python中，while循环的主体是通过缩进确定的。</p><p>主体以缩进开始，第一条未缩进的线标记结束。</p><p>Python将任何非零值解释为True。None并且0被解释为False。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 添加自然数的程序</span><br><span class="hljs-comment"># 数字最多</span><br><span class="hljs-comment"># sum = 1 + 2 + 3 ... + n</span><br><br><span class="hljs-comment"># 从用户那里获取输入</span><br><span class="hljs-comment"># n = int(input(&quot;Enter n: &quot;))</span><br><br>n = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment"># 初始化sum和计数器</span><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>i = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">while</span> i &lt;= n:<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + i<br>    i = i + <span class="hljs-number">1</span> <span class="hljs-comment"># 更新 counter</span><br>    <br><span class="hljs-comment"># 打印sum</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sum的值&quot;</span>, <span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><p>运行该程序时，输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">Enter n: <span class="hljs-number">10</span><br><span class="hljs-built_in">sum</span>的值 <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><p>在上面的程序中，只要我们的计数器变量i小于或等于n（在我们的程序中为10），则测试表达式为True。</p><p>我们需要在循环体内增加计数器变量的值。这是非常重要的（<strong>千万不要忘记</strong>）。否则，将导致无限循环（永无止境的循环）。</p><p>最后，显示结果。</p><h4 id="while-与-else循环">2.3.2 while 与 else循环</h4><p>与for循环相同，而while循环也可以具有可选else块</p><p>如果while循环中的条件求值为False，则执行else该部分</p><p>while循环可以使用break语句终止。在这种情况下，该else语句将被忽略。因此，如果没有break中断并且条件为False，则while循环的else语句将运行</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;举例说明</span><br><span class="hljs-string">使用else语句</span><br><span class="hljs-string">与while循环&#x27;&#x27;&#x27;</span><br><br>counter = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span> counter &lt; <span class="hljs-number">3</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;内部循环&quot;</span>)<br>    counter = counter + <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;else语句&quot;</span>)<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">内部循环<br>内部循环<br>内部循环<br><span class="hljs-keyword">else</span>语句<br></code></pre></td></tr></table></figure><p>在这里，我们使用计数器变量来打印字符串 内部循环 三次。</p><p>在第四次迭代中，while中条件变为False。因此，该else部分会被执行。</p><h3 id="python-break和continue">2.4 python break和continue</h3><h4 id="python中break和continue的作用是什么">2.4.1python中break和continue的作用是什么</h4><p>在Python中，break和continue语句可以更改常规循环的流程。</p><p>循环遍历代码块，直到测试表达式为假，但有时我们希望在不检查测试表达式的情况下终止当前迭代甚至整个循环，那么break和continue语句在这些情况下就可以使用。</p><h4 id="python-break语句">2.4.2 python break语句</h4><p>break语句终止包含它的循环。程序的控制权在循环体之后立即传递到该语句。</p><p>如果该break语句在嵌套循环内（另一个循环内的循环），则该break语句将终止最里面的循环。</p><p><strong>break语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在循环中使用break语句</span><br><br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;string&quot;</span>:<br>    <span class="hljs-keyword">if</span> val = <span class="hljs-string">&quot;i&quot;</span>:<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(val)<br>    <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;末尾&quot;</span>)<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s<br>t<br>r<br>末尾<br></code></pre></td></tr></table></figure><p>在这个程序中，我们遍历“string”序列。我们检查这个字母是不是i，这样我们就可以跳出循环。因此，我们在输出中看到，直到我打印出来的所有字母。之后，循环终止。</p><h4 id="python-continue语句">2.4.3 python continue语句</h4><p>continue语句仅在当前迭代时用于跳过循环内的其余代码。循环不会终止，但会继续进行下一个迭代。</p><p><strong>continue语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#该程序显示在循环内使用continue语句的程序</span><br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;string&quot;</span>:<br>    <span class="hljs-keyword">if</span> val == <span class="hljs-string">&quot;i&quot;</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(val)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;末尾&quot;</span>)<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">s<br>t<br>r<br>n<br>g<br>末尾<br></code></pre></td></tr></table></figure><p>这个程序与上面的示例相同，只是将break语句替换为continue。我们继续循环，如果字符串是i，则不执行其余的块。因此，我们在输出中看到除了i之外的所有字母都被打印出来了。</p><h3 id="python-pass语句">2.5 python pass语句</h3><h4 id="什么是python中的pass语句">2.5.1 什么是python中的pass语句</h4><p>在Python编程中，pass语句为空语句。在Python中，注释和pass语句之间的区别在于，尽管解释器完全忽略注释，而pass不会被忽略</p><p>但是，执行传递时没有任何反应。结果为无操作(NOP)</p><p><strong>pass语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>我们通常将其用作占位符。</p><p>假设我们有一个尚未实现的循环或函数，但我们想在将来执行实现它。他们不能有一个空的主体，解释器将给出错误。因此，我们使用该pass语句构造一个不执行任何操作的主体</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;pass只是一个占位符，</span><br><span class="hljs-string">用于以后添加功能。&#x27;&#x27;&#x27;</span><br>sequence = &#123;<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> sequence:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>我们也可以在空函数或类中执行相同的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">function</span>(<span class="hljs-params">args</span>):<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span>:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h2 id="python函数">3 python函数</h2><h3 id="python函数-1">3.1 python函数</h3><h4 id="python中的函数是什么">3.1.1 python中的函数是什么</h4><p>在Python中，函数是一组执行特定任务的相关语句。</p><p>函数有助于将我们的程序分解为较小的模块。随着我们的项目越来越大，函数使其变得更加有组织和易于管理。</p><p>此外，它避免了重复写相同的代码，函数使代码可重复使用。</p><p><strong>函数语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">function_name</span>(<span class="hljs-params">parameters</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;docstring&quot;&quot;&quot;</span><br>    statement(s)<br></code></pre></td></tr></table></figure><p>上面显示的是由以下组件组成的函数定义。</p><ol type="1"><li>def标记函数头开始的关键字。</li><li>用于唯一标识函数的函数名称。函数命名遵循<ahref="https://www.cainiaojc.com/python/python-keywords-identifier.html#rules">在Python中编写标识符</a>的相同<ahref="https://www.cainiaojc.com/python/python-keywords-identifier.html#rules">规则</a>。</li><li>通过其将值传递给函数的参数。它们是可选的。</li><li>冒号（:)标记函数头的结尾。</li><li>可选的文档字符串（docstring），用于描述函数的函数。</li><li>组成函数体的一个或多个有效python语句。语句必须具有相同的缩进级别（通常为4个空格）。</li><li>可选的return语句，用于从函数返回值。</li></ol><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    这是一个打招呼的函数</span><br><span class="hljs-string">    通过name参数传递</span><br><span class="hljs-string">    要打招呼的人名</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, &quot;</span> + name + <span class="hljs-string">&quot;.Good morning!&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>如何在python中调用函数？</strong></p><p>定义函数后，我们可以从另一个函数，程序甚至Python提示符中调用它。要调用函数，我们只需键入带有适当参数的函数名称即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>greet(<span class="hljs-string">&#x27;Paul&#x27;</span>)<br>Hello, Paul.Good morning!<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：尝试在带有函数定义的python程序中运行以上代码，以查看输出</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    这是一个打招呼的函数，</span><br><span class="hljs-string">    通过name参数传递，</span><br><span class="hljs-string">    要打招呼的人名</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, &quot;</span> + name + <span class="hljs-string">&quot;. Good morning!&quot;</span>)<br><br>greet(<span class="hljs-string">&#x27;Paul&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="docstrings文档字符串">3.1.2 Docstrings(文档字符串)</h4><p>函数头之后的第一个字符串称为docstring，是文档字符串的缩写。简要说明了函数的作用。</p><p>尽管是可选的，但文档是一种良好的编程习惯。除非您记得去年今天的晚餐时间和晚餐吃什么，否则请务必记录注释您的代码。</p><p>在上面的示例中，我们在函数标头的正下方有一个文档字符串。我们通常使用三引号将文档字符串扩展为多行。该字符串可作为__doc__函数的属性供我们使用。</p><p><strong>例如</strong>：</p><p>尝试将以下内容运行到Python shell中以查看输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(greet.__doc__)<br><br>    这是一个打招呼的函数，<br>    通过name参数传递，<br>    要打招呼的人名<br></code></pre></td></tr></table></figure><h4 id="return语句">3.1.3 return语句</h4><p>return语句用于退出函数并返回到调用函数的位置。</p><p><strong>返回语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> [expression_list]<br></code></pre></td></tr></table></figure><p>该语句可以包含一个表达式，该表达式将被求值并返回值。如果该语句中没有表达式，或者return语句本身不存在于函数中，则该函数将返回None对象。</p><p><strong>例如</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(greet(<span class="hljs-string">&quot;May&quot;</span>))<br>Hello, May. Good morning!<br><span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p><strong>return示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">absolute_value</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;这个函数返回输入数字的绝对值&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">if</span> num &gt;= <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> num<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> -num<br><br><br><span class="hljs-built_in">print</span>(absolute_value(<span class="hljs-number">2</span>))<br><br><span class="hljs-built_in">print</span>(absolute_value(-<span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">2</span><br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h4 id="变量的作用域和生命周期">3.1.4 变量的作用域和生命周期</h4><p>变量的作用域是程序中可以识别该变量的部分。从函数外部看不到在函数内部定义的参数和变量。因此，它们具有本地作用域。</p><p>变量的生命周期是变量在内存中退出的时间。函数内部变量的生命周期与函数执行的时间一样长。</p><p>一旦我们从函数返回，它们就会被销毁。因此，函数无法记住其先前调用中的变量值。</p><p>这是一个示例，用于说明函数内部变量的生命周期。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_fuc</span>():<br>    x = <span class="hljs-number">10</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;函数内部值:&quot;</span>, x)<br>    <br>x = <span class="hljs-number">20</span><br>my_func()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;函数外部值:&quot;</span>, x)<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">函数内部值: <span class="hljs-number">10</span><br>函数外部值: <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>在这里，我们可以看到x的初始值为20。即使函数my_func()将x的值更改为10，它也不会影响函数外部的值。</p><p>这是因为函数内部的变量x与函数外部的x变量不同。尽管它们具有相同的名称，<strong>但是它们是两个具有不同作用域的不同变量</strong>。</p><p>另一方面，从外部可以看到函数外部的变量。它们具有全局作用域，也就是函数内外部都可以使用该全局变量。</p><p>我们可以从函数内部读取这些值，但不能更改（写入）它们。如果要在函数外部修改变量的值，必须使用关键字global，将它们声明为全局变量。</p><h3 id="匿名函数lambda函数">3.2 匿名函数(Lambda函数)</h3><h4 id="什么是python中的lambda函数">3.2.1什么是python中的lambda函数</h4><p>在Python中，匿名函数是没有定义名称的函数</p><p>虽然def在Python中使用关键字定义了普通函数，但使用关键字定义了匿名函数lambda。</p><p>因此，匿名函数也称为lambda函数。</p><h4 id="如何在python中使用lambda函数">3.2.2如何在python中使用lambda函数</h4><ol type="1"><li><strong>python中lambda函数语法</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span> arguments: expression<br></code></pre></td></tr></table></figure><p>Lambda函数可以具有任意数量的参数，但只能有一个表达式。表达式被求值并返回。Lambda函数可在需要函数对象的任何地方使用。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 程序展示lambda函数的使用</span><br>double = <span class="hljs-keyword">lambda</span> x: x * <span class="hljs-number">2</span><br><br><span class="hljs-built_in">print</span>(double(<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>在上面的程序中，lambda x: x * 2是lambda函数。这里x是参数，x *2是求值和返回的表达式。</p><p>这个函数没有名字。它返回一个函数对象，该对象被分配给标识符double。我们现在可以把它叫做普通函数。下面声明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">double = <span class="hljs-keyword">lambda</span> x: x * <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">double</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x * <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><strong>在python中使用lambda函数</strong></li></ol><p>当我们临时需要匿名函数时，我们使用lambda函数。</p><p>在Python中，我们通常将其用作高阶函数的参数（该函数将其他函数作为arguments)。lambda函数可以与filter(),map()等内置函数一起使用</p><p><strong>lambda与filer()一起使用的示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 程序从列表中过滤出偶数项</span><br>my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>]<br><br>new_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: (x%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>), my_list))<br><br><span class="hljs-built_in">print</span>(new_list)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>]<br></code></pre></td></tr></table></figure><p><strong>lambda与map()一起使用的示例</strong></p><p>在Python中的map()函数接受一个函数和一个列表。</p><p>使用列表中的所有项调用该函数，并返回一个新列表，其中包含该函数为每个项返回的项。</p><p>这是使用map()函数将列表中所有项目翻倍的示例。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用map()将列表中的每个项加倍</span><br><br>my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>]<br><br>new_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x * <span class="hljs-number">2</span>, my_list))<br><br><span class="hljs-built_in">print</span>(new_list)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">16</span>, <span class="hljs-number">22</span>, <span class="hljs-number">6</span>, <span class="hljs-number">24</span>]<br></code></pre></td></tr></table></figure><h3 id="python全局局部和非局部变量">3.3python全局，局部和非局部变量</h3><h4 id="全局变量">3.3.1 全局变量</h4><p>在Python中，在函数外部或全局范围内声明的变量称为全局变量。这意味着可以在函数内部或外部访问全局变量。</p><p>让我们看一下如何在Python中创建全局变量的示例。</p><p><strong>示例1：创建一个全局变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-string">&quot;global&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;内部 x:&quot;</span>, x)<br>    <br>foo()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;外部 x:&quot;</span> x)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">内部 x: <span class="hljs-keyword">global</span><br>外部 x: <span class="hljs-keyword">global</span><br></code></pre></td></tr></table></figure><p>在上面的代码中，我们将x创建为全局变量，并定义了foo()来打印全局变量x。最后，我们调用foo()将打印x值的。</p><p>如果要在函数内更改x的值怎么办？</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-string">&quot;global&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br> x = x * <span class="hljs-number">2</span><br> <span class="hljs-built_in">print</span>(x)<br>foo()<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">UnboundLocalError: local variable <span class="hljs-string">&#x27;x&#x27;</span> referenced before assignment<br></code></pre></td></tr></table></figure><p>输出显示了一个错误，因为Python将x视为一个局部变量，并且x也没有在foo()中定义。</p><h4 id="局部变量">3.3.2 局部变量</h4><p>在函数体内或局部范围内声明的变量称为局部变量</p><p><strong>示例2：访问范围外的局部变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    y = <span class="hljs-string">&quot;local&quot;</span><br>    <br>foo()<br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">NameError: name <span class="hljs-string">&#x27;y&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br></code></pre></td></tr></table></figure><p>输出显示一个错误，因为我们试图在全局范围内访问一个局部变量y，而局部变量只在foo()或局部范围内工作。</p><p>让我们看一个有关如何在Python中创建局部变量的示例。</p><p><strong>示例3：创建局部变量</strong></p><p>通常，我们在函数内部声明一个变量以创建局部变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    y = <span class="hljs-string">&quot;local&quot;</span><br>    <span class="hljs-built_in">print</span>(y)<br>    <br>foo()<br></code></pre></td></tr></table></figure><p>当我们运行代码时，它将输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">local<br></code></pre></td></tr></table></figure><h4 id="全局和局部变量">3.3.3 全局和局部变量</h4><p><strong>示例4：在同一代码中使用全局变量和局部变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-string">&quot;global&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br> <span class="hljs-keyword">global</span> x<br> y = <span class="hljs-string">&quot;local&quot;</span><br> x = x * <span class="hljs-number">2</span><br> <span class="hljs-built_in">print</span>(x)<br> <span class="hljs-built_in">print</span>(y)<br> <br>foo()<br></code></pre></td></tr></table></figure><p>将输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">global</span> <span class="hljs-keyword">global</span><br>local<br></code></pre></td></tr></table></figure><p>在上面的代码中，我们将x声明为全局变量，将y声明为foo()中的局部变量。然后，我们使用乘法运算符*来修改全局变量x，并同时输出x和y。</p><p>在调用foo()之后，x的值就变成了global global，因为我们使用x *2来打印两次global。然后，我们打印局部变量y的值，即局部变量。</p><p><strong>示例5：具有相同名称的全局变量和局部变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">5</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    x = <span class="hljs-number">10</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;local x:&quot;</span>, x)<br>    <br>foo()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;global x:&quot;</span>, x)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">local x:<span class="hljs-number">10</span><br><span class="hljs-keyword">global</span> x；<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>在上面的代码中，我们对全局变量和局部变量使用了相同的名称x。当我们打印相同的变量时，会得到不同的结果，因为变量是在两个作用域中声明的，即foo()内的局部作用域和foo()外的全局作用域。</p><p>当我们在foo()中打印变量时，它输出的是local x:10。这称为变量的局部作用域。</p><p>同样，当我们在foo()外部打印变量时，它会输出global x:5。这称为变量的全局范围。</p><h4 id="非局部变量">3.3.4 非局部变量</h4><p>非局部变量用于未定义局部作用域的嵌套函数。这意味着该变量既不能在局部范围内，也不能在全局范围内。</p><p>让我们看一下如何在Python中创建全局变量的示例。</p><p>我们使用nonlocal关键字创建非局部变量。</p><p><strong>示例6：创建一个非局部变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>():<br>    x = <span class="hljs-string">&quot;local&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-keyword">nonlocal</span> x<br>        x = <span class="hljs-string">&quot;nonlocal&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;inner:&quot;</span>, x)<br><br>    inner()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;outer:&quot;</span>, x)<br><br><br>outer()<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">inner:<span class="hljs-keyword">nonlocal</span><br>outer:<span class="hljs-keyword">nonlocal</span><br></code></pre></td></tr></table></figure><p>在上面的代码中，有一个嵌套函数inner()。我们使用nonlocal关键字创建一个非局部变量。inner()函数在另一个函数external()的范围内定义。</p><h3 id="python模块">3.4 python模块</h3><h4 id="python中的模块是什么">3.4.1 python中的模块是什么</h4><p>模块是指包含Python语句和定义的文件。</p><p>包含Python代码的文件，例如：example.py，称为模块，其模块名称为example。</p><p>我们使用模块将大型程序分解为可管理的小型文件。此外，模块提供了代码的可重用性。</p><p>我们可以在模块中定义最常用的函数并将其导入，而不是将其定义复制到其他程序中。</p><p>让我们创建一个模块。输入以下内容并将其另存为example.py。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python模块示例</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;这个程序两个数字相加</span><br><span class="hljs-string">    并返回相加的结果&quot;&quot;&quot;</span><br>    <br>result = a + b<br>    <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p>这里，我们在一个名为example的模块中定义了一个add()函数。该函数接受两个数字并返回他们的和</p><h4 id="如何在python中导入模块">3.4.2 如何在python中导入模块</h4><p>我们可以将模块内部的定义导入另一个模块或Python中的交互式解释器。</p><p>我们使用import关键字来做到这一点。要导入我们先前定义的模块，example我们在Python提示符下键入以下内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> example<br></code></pre></td></tr></table></figure><p>这不会example直接在当前符号表中输入定义的功能名称。它仅在example此处输入模块名称。</p><p>使用模块名称，我们可以使用点. 运算符访问函数。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>example.add(<span class="hljs-number">4</span>,<span class="hljs-number">5.5</span>)<br><span class="hljs-number">9.5</span><br></code></pre></td></tr></table></figure><p>Python有大量可用的标准模块。这些文件位于Python安装位置内的Lib目录中。</p><p>可以像导入用户定义的模块一样导入标准模块。</p><p>有多种导入模块的方法。它们列出如下。</p><ol type="1"><li><strong>python导入语句</strong></li></ol><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入语句示例</span><br><span class="hljs-comment"># 导入标准模块教学</span><br><br><span class="hljs-keyword">import</span> math<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;π的值&quot;</span>, math.pi)<br></code></pre></td></tr></table></figure><p>运行该程序时，输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">π的值 <span class="hljs-number">3.141592653589793</span><br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><strong>重命名导入</strong></li></ol><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 通过重命名导入模块</span><br><br><span class="hljs-keyword">import</span> math <span class="hljs-keyword">as</span> m<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;π的值&quot;</span>, m.pi)<br></code></pre></td></tr></table></figure><p>我们已将math模块重命名为m。在某些情况下，这可以节省我们的书写时间。</p><p>请注意，该名称math在我们的范围内无法识别。因此，math.pi无效的，而m.pi是正确的使用方式。</p><ol start="3" type="1"><li><strong>python from ... import语句</strong></li></ol><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从数学模块仅导入pi</span><br><br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> pi<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;π的值&quot;</span>, pi)<br></code></pre></td></tr></table></figure><p>我们仅从模块导入属性pi。</p><p>在这种情况下，我们不使用点运算符。我们可以如下导入多个属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> pi, e<br><span class="hljs-meta">&gt;&gt;&gt; </span>pi<br><span class="hljs-number">3.141592653589793</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>e<br><span class="hljs-number">2.718281828459045</span><br></code></pre></td></tr></table></figure><ol start="4" type="1"><li><strong>导入所有名称</strong></li></ol><p>我们可以使用以下构造从模块导入所有名称(定义)</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从标准模块math中导入所有名称</span><br><br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> *<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pi的值&quot;</span>, pi)<br></code></pre></td></tr></table></figure><p>我们从数学模块中导入了所有定义。这使得除带下划线的beginnig之外的所有名称在我们的范围内可见。</p><p>导入带有星号（*）符号的所有内容都不是一种好的编程习惯。这可能导致标识符重复定义。这也会影响我们代码的可读性。</p><ol start="5" type="1"><li><strong>python模块搜索路径</strong></li></ol><p>导入模块时，Python会在多个位置进行检查。解释器首先寻找一个内置模块，然后（如果找不到）进入定义的目录列表sys.path。搜索按此顺序进行。</p><ol type="1"><li><p>当前目录。</p></li><li><p>PYTHONPATH （带有目录列表的环境变量）。</p></li><li><p>与安装有关的默认目录。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> sys<br><span class="hljs-meta">&gt;&gt;&gt; </span>sys.path<br>[<span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-string">&#x27;C:\\Python33\\Lib\\idlelib&#x27;</span>,<br><span class="hljs-string">&#x27;C:\\Windows\\system32\\python33.zip&#x27;</span>,<br><span class="hljs-string">&#x27;C:\\Python33\\DLLs&#x27;</span>,<br><span class="hljs-string">&#x27;C:\\Python33\\lib&#x27;</span>,<br><span class="hljs-string">&#x27;C:\\Python33&#x27;</span>,<br><span class="hljs-string">&#x27;C:\\Python33\\lib\\site-packages&#x27;</span>]<br></code></pre></td></tr></table></figure><ol start="6" type="1"><li><strong>重新加载模块</strong></li></ol><p>Python解释器在会话期间仅导入一次模块。这使事情更有效率。这是一个示例，说明其工作原理。</p><p>假设在名为的模块中有以下代码my_module。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 该模块显示了</span><br><span class="hljs-comment"># 多个导入并重新加</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这段代码被执行了&quot;</span>)<br></code></pre></td></tr></table></figure><p>现在我们看到了多次导入的效果</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">import</span> my_module</span><br>这段代码被执行了<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">import</span> my_module</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">import</span> my_module</span><br></code></pre></td></tr></table></figure><p>我们可以看到我们的代码只执行了一次。这说明我们的模块仅导入了一次。</p><p>现在，如果我们的模块在程序执行过程中发生了变化，我们将不得不重新加载它。一种方法是重启解释器。但这并没有太大帮助。</p><p>Python提供了一种简洁的方法。我们可以使用模块reload()内部的函数imp来重新加载模块。这是怎么做的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> imp<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> my_module<br>这段代码被执行了<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> my_module<br><span class="hljs-meta">&gt;&gt;&gt; </span>imp.reload(my_module)<br>这段代码被执行了<br>&lt;module <span class="hljs-string">&#x27;my_module&#x27;</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;.\\my_module.py&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><ol start="7" type="1"><li><strong>dir()内置函数</strong></li></ol><p>我们可以使用dir()函数找出在模块内部定义的名称。</p><p>例如，我们在开始的模块example中定义了一个add()函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dir</span>(example)<br>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>,<br><span class="hljs-string">&#x27;__cached__&#x27;</span>,<br><span class="hljs-string">&#x27;__doc__&#x27;</span>,<br><span class="hljs-string">&#x27;__file__&#x27;</span>,<br><span class="hljs-string">&#x27;__initializing__&#x27;</span>,<br><span class="hljs-string">&#x27;__loader__&#x27;</span>,<br><span class="hljs-string">&#x27;__name__&#x27;</span>,<br><span class="hljs-string">&#x27;__package__&#x27;</span>,<br><span class="hljs-string">&#x27;add&#x27;</span>]<br></code></pre></td></tr></table></figure><p>在这里，我们可以看到一个已排序的名称列表(以及add)。以下划线开头的所有其他名称都是与模块关联的默认Python属性(我们自己没有定义它们)。</p><p>例如，__name__属性包含模块的名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> example<br><span class="hljs-meta">&gt;&gt;&gt; </span>example.__name__<br><span class="hljs-string">&#x27;example&#x27;</span><br></code></pre></td></tr></table></figure><p>可以使用不带任何参数的dir()函数找出当前名称空间中定义的所有名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> math<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dir</span>()<br>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;__name__&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;math&#x27;</span>, <span class="hljs-string">&#x27;pyscripter&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="python包package">3.5 python包(package)</h3><h4 id="什么是包package">3.5.1 什么是包(package)?</h4><p>我们通常不会把所有的文件都存储在同一个地方。我们使用一个组织良好的目录层次结构，以方便访问。</p><p>相似的文件保存在同一目录中，例如，我们可以将所有歌曲保留在“music”目录中。与此类似，Python具有用于目录的软件包和用于文件的模块。</p><p>随着我们的应用程序规模越来越大，带有许多模块，我们将相似的模块放在一个包中，而将不同的模块放在不同的包中。这使项目（程序）易于管理且概念清晰。</p><p>类似地，由于目录可以包含子目录和文件，因此Python程序包可以具有子程序包和模块。</p><p>目录必须包含一个名为 <strong>init</strong>.py的文件，Python才能将其视为一个包。该文件可以保留为空，但是我们通常将该程序包的初始化代码放入此文件中。</p><p>这是一个实例。假设我们正在开发一个游戏，则可能的包和模块组织如下图所示。</p><figure><img src="/images/PackageModuleStructure.jpg" alt="示意图" /><figcaption aria-hidden="true">示意图</figcaption></figure><h4 id="从包中导入模块">3.5.2 从包中导入模块</h4><p>我们可以使用点(.)运算符从包中导入模块。</p><p>例如，如果要在上面的示例中导入 start 模块，请按以下步骤完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> Game.Level.start<br></code></pre></td></tr></table></figure><p>现在，如果该模块包含名为select_difficulty()的函数，我们必须使用全名来引用她</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Game.Level.start.select_difficulty(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>如果这个构造看起来很冗长，我们可以按以下方式导入不带包前缀的模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Game.Level <span class="hljs-keyword">import</span> start<br></code></pre></td></tr></table></figure><p>现在，我们可以简单地如下调用该函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">start.select_difficulty(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>仅将所需的函数（或类 或变量）从包中的模块中导入的另一种方法如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Game.Level.start <span class="hljs-keyword">import</span> select_difficulty<br></code></pre></td></tr></table></figure><p>现在我们可以直接调用此函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">select_difficulty(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>尽管比较简单，但不建议使用此方法。使用完整的命名空间可避免混淆，并防止两个相同的标识符名称冲突</p><h2 id="python文件操作">4 python文件操作</h2><h3 id="python文件io">4.1 python文件I/O</h3><h4 id="什么是文件">4.1.1 什么是文件</h4><p>文件是磁盘上用于存储相关信息的命名位置。它用于将数据永久存储在非易失性存储器（例如硬盘）中。</p><p>由于随机存取存储器（RAM）易失，当计算机关闭时会丢失其数据，因此我们将文件用于将来的数据使用。</p><p>当我们要读取或写入文件时，我们需要先打开它。完成后，需要将其关闭，以便释放与文件绑定的资源。</p><p>因此，在Python中，文件操作按以下顺序进行。</p><ol type="1"><li><p>打开文件</p></li><li><p>读取或写入（执行操作）</p></li><li><p>关闭文件</p></li></ol><h4 id="如何打开文件">4.1.2 如何打开文件</h4><p>python具有内置函数open()来打开文件。此函数返回文件对象，也称为句柄，因为它用于相应的读取或修改文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>) <span class="hljs-comment"># 打开当前目录中的文件</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C:/Python33/README.txt&quot;</span>) <span class="hljs-comment"># 指定完整路径</span><br></code></pre></td></tr></table></figure><p>我们可以在打开文件时指定模式。在模式下，我们指定是要读取'r'，写入'w'还是追加'a'到文件。我们还指定是否要以文本模式或二进制模式打开文件。</p><p>默认设置是在文本模式下阅读。在这种模式下，当从文件中读取时，我们会得到字符串。</p><p>另一方面，二进制模式返回字节，这是处理非文本文件（如图像或exe文件）时要使用的模式。</p><p><strong>python文件模式</strong></p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>'r'</td><td>打开文件进行读取。(默认)</td></tr><tr><td>'w'</td><td>打开文件进行写入。如果不存在则创建一个新文件，或者如果存在将其截断</td></tr><tr><td>'x'</td><td>打开文件以进行独占创建。如果文件已经存在，则操作失败。</td></tr><tr><td>'a'</td><td>打开以在文件末尾追加而不截断。如果不存在，则创建一个新文件</td></tr><tr><td>'t'</td><td>以文本模式打开。(默认)</td></tr><tr><td>'b'</td><td>以二进制模式打开</td></tr><tr><td>'+'</td><td>打开文件进行更新(读取和写入)</td></tr></tbody></table><blockquote><p>截断：清空文件内容，从头开始写入</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>) <span class="hljs-comment"># 等同于&quot;r&quot;或&quot;rt&quot;</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-comment"># 文本模式写入</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;img.bmp&quot;</span>, <span class="hljs-string">&#x27;r+b&#x27;</span>) <span class="hljs-comment"># 以二进制模式读取和写入</span><br></code></pre></td></tr></table></figure><p>与其他语言不同，该字符'a'在使用ASCII（或其他等效编码）进行编码之前不会暗示数字97。</p><p>此外，默认编码取决于平台。在Windows中，'cp1252'但是'utf-8'在Linux中。</p><p>因此，我们也不能依赖默认编码，否则我们的代码在不同平台上的行为会有所不同。</p><p>因此，在以文本模式处理文件时，强烈建议指定编码类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, mode = <span class="hljs-string">&#x27;r&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="如何使用python关闭文件">4.1.3 如何使用python关闭文件</h4><p>完成对文件的操作后，我们需要正确关闭文件</p><p>关闭文件将释放与该文件绑定的资源，并且使用close()方法完成 。</p><p>Python有一个垃圾收集器来清理未引用的对象，但是，我们绝对不能依靠它来关闭文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-comment"># 执行文件操作</span><br>f.close()<br></code></pre></td></tr></table></figure><p>这种方法并不完全安全。如果对文件执行某些操作时发生异常，则代码将退出而不关闭文件。</p><p>一种更安全的方法是使用<code>try ... finally</code>块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-comment"># 执行文件操作</span><br><span class="hljs-keyword">finally</span>:<br>    f.close()<br></code></pre></td></tr></table></figure><p>这样，我们可以保证即使引发异常也可以正确关闭文件，从而导致程序流停止。</p><p>最好的方法是使用with语句。这样可以确保在with退出内部块时关闭文件。</p><p>我们不需要显式调用该close()方法。它是在内部完成的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-comment"># 执行文件操作</span><br></code></pre></td></tr></table></figure><h4 id="如何在python中读取文件">4.1.4 如何在python中读取文件</h4><p>要使用Python读取文件，我们必须以读取模式打开文件。</p><p>有多种方法可用于此目的。我们可以使用该read(size)方法读取大小数据。如果未指定size参数，它将读取并返回到文件末尾。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>f.read(<span class="hljs-number">4</span>)    <span class="hljs-comment"># 读取前4个数据</span><br><span class="hljs-string">&#x27;This&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>f.read(<span class="hljs-number">4</span>)    <span class="hljs-comment"># 读取接下来的4个数据</span><br><span class="hljs-string">&#x27; is &#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>f.read()     <span class="hljs-comment"># 读取其余部分，直到文件末尾</span><br><span class="hljs-string">&#x27;my first file\nThis file\ncontains three lines\n&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>f.read()  <span class="hljs-comment"># 进一步读取返回空字符串</span><br><span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>我们可以看到，read()方法将换行符返回为''。到达文件末尾后，我们将在进一步阅读时得到空字符串。</p><p>我们可以使用seek()方法更改当前文件的光标（位置）。同样，tell()方法返回我们的当前位置（以字节数为单位）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>f.tell()    <span class="hljs-comment"># 获取当前文件位置</span><br><span class="hljs-number">56</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>f.seek(<span class="hljs-number">0</span>)   <span class="hljs-comment"># 将文件光标移到初始位置</span><br><span class="hljs-number">0</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(f.read())  <span class="hljs-comment"># 读取整个文件</span><br>This <span class="hljs-keyword">is</span> my first file<br>This file<br>contains three lines<br></code></pre></td></tr></table></figure><p>我们可以使用for循环逐行读取文件。这既高效又快速</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(line, end = <span class="hljs-string">&#x27;&#x27;</span>)<br>...<br>This <span class="hljs-keyword">is</span> my first file<br>This file<br>contains three lines<br></code></pre></td></tr></table></figure><p>文件本身的行具有换行符''。</p><p>此外，print()结束参数在打印时避免了两行换行。</p><p>或者，我们可以使用readline()方法读取文件的各个行。此方法读取文件，直到换行符为止，包括换行符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>f.readline()<br><span class="hljs-string">&#x27;This is my first file\n&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>f.readline()<br><span class="hljs-string">&#x27;This file\n&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>f.readline()<br><span class="hljs-string">&#x27;contains three lines\n&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>f.readline()<br><span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>最后，该readlines()方法返回整个文件的其余行的列表。当到达文件结尾（EOF）时，所有这些读取方法都将返回空值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>f.readlines()<br>[<span class="hljs-string">&#x27;This is my first file\n&#x27;</span>, <span class="hljs-string">&#x27;This file\n&#x27;</span>, <span class="hljs-string">&#x27;contains three lines\n&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="python文件方法">4.1.5Python文件方法</h4><p>文件对象有多种可用方法。其中一些已在以上示例中使用。</p><p>这是文本模式下方法的完整列表，并带有简要说明。</p><p>python文件方法</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>close()</code></td><td>关闭文件</td></tr><tr><td><code>detach()</code></td><td>从缓冲区返回分离的原始流(raw stream)</td></tr><tr><td><code>fileno()</code></td><td>从操作系统的角度返回表示流的数字</td></tr><tr><td><code>flush()</code></td><td>刷新内部缓冲区</td></tr><tr><td><code>isatty()</code></td><td>返回文件流是否是交互式</td></tr><tr><td><code>read()</code></td><td>返回文件内容</td></tr><tr><td><code>readable()</code></td><td>返回是否能够读取文件流</td></tr><tr><td><code>readline()</code></td><td>返回文件中的一行</td></tr><tr><td><code>readlines()</code></td><td>返回文件中的行列表</td></tr><tr><td><code>seek()</code></td><td>更改文件位置</td></tr><tr><td><code>seekable()</code></td><td>返回文件是否允许我们更改文件位置</td></tr><tr><td><code>tell()</code></td><td>返回当前文件位置</td></tr><tr><td><code>truncate()</code></td><td>把文件调整为指定的大小</td></tr><tr><td><code>writeable()</code></td><td>返回是否能够写入文件</td></tr><tr><td><code>write()</code></td><td>把指定的字符串写入文件</td></tr><tr><td><code>writelines()</code></td><td>把字符串列表写入文件</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习</title>
    <link href="/2024/08/07/MachineLearning/"/>
    <url>/2024/08/07/MachineLearning/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">0. 前言</h2><p>机器学习是人工智能的重要技术基础，涉及的内容十分广泛。本文章涵盖了机器学习的基础知识，主要包括机器学习的概述、回归、分类、聚类、神经网络、文本分析、图像分析、深度学习等经典的机器学习基础知识，还包括深度学习入门等拔高内容。</p><h2 id="机器学习概述">1. 机器学习概述</h2><p>介绍机器学习的基础概念和知识，包括机器学习简史、主要流派、与人工智能、数据挖掘的关系、应用领域、算法、一般流程等。</p><h3 id="机器学习简介">1.1机器学习简介</h3><h4 id="机器学习背景">1.1.1机器学习背景</h4><p>伴随着计算机计算能力的不断提升以及大数据时代的迅发展人工智能也取得了前所未有的进步。</p><p>很多企业均开始使用机器学习的相关技术于大部分行业中，以此获得更为强大的洞察力，也为企业的日常生活和企业运营带来了很大的帮助，从而提高了整个产品的服务质量。</p><p>机器学习的典型应用领域有：搜索引擎、自动驾驶、量化投资、计算机视觉、信用卡欺诈检测、游戏、数据挖掘、电子商务、图像识别、自然语言处理、医学诊断、证券金融市场分析以及机器人等相关领域，故在一定程度上，机器学习相关技术的进步也提升了人工智能领域发展的速度。</p><h4 id="机器学习简介-1">1.1.2机器学习简介</h4><p>机器学习(MachineLearning)，作为计算机科学的子领域，是人工智能领域的重要分支和实现方式。</p><p>机器学习的思想：计算机程序随着经验的积累，能够实现性能的提高。对于某一类任务T及其性能度量P，若一个计算机程序在T上以P衡量的性能随着经验E而自我完善，那么就称这个计算机程序在从经验E学习。</p><p>主要的基础理论：数理统计，数学分析，概率论，线性代数，优化理论，数值逼近、计算复杂性理论。</p><p>机器学习的核心元素：算法、数据以及模型。</p><h4 id="机器学习简史">1.1.3机器学习简史</h4><p>作为一门不断发展的学科，机器学习尽管在最近几年才发展成为一门独立的学科。</p><p>起源于20世纪50年代以来人工智能的逻辑推理、启发式搜索、专家系统、符号演算、自动机模型、模糊数学以及神经网络的反向传播BP算法等。如今作为机器学习重要的基础理论。</p><figure><img src="/images/机器学习简史.png" alt="机器学习简史" /><figcaption aria-hidden="true">机器学习简史</figcaption></figure><p>在1950年代，已经有了机器学习的相关研究。代表工作主要是F.Rosenblatt基于神经感觉科学提出的计算机神经网络，即感知器。随后十年，用于浅层学习的神经网络风靡一时，尤其是MarvinMinsky提出了著名的XOR问题和感知器线性度不可分割的问题。</p><p>局限：由于计算机的计算能力有限，因此很难训练多层网络。通常使用仅具有一个隐藏层的浅层模型。尽管已经陆续提出了各种浅层机器学习模型，但理论分析和应用方面都已产生。但是，理论分析和训练方法的难度要求大量的经验和技能。而随着最近邻算法和其他算法的相继提出，在模型理解，准确性和模型训练方面已经超越了浅层模型。机器学习的发展几乎停滞不前。</p><p>在2006年，希尔顿（Hinton）发表了一篇关于深度信念网络的论文，Bengio等人发表了关于“深度网络的贪婪分层明智训练”的论文，而LeCun团队发表了基于能量模型的“稀疏表示的有效学习”。</p><p>这些事件标志着人工智能正式进入深度网络的实践阶段。同时，云计算和GPU并行计算为深度学习的发展提供了基本保证，尤其是近年来，机器学习它在各个领域都实现了快速发展。新的机器学习算法面临的主要问题更加复杂。机器学习的应用领域已从广度发展到深度，这对模型的训练和应用提出了更高的要求。</p><p>随着人工智能的发展，冯·诺依曼有限状态机的理论基础变得越来越难以满足当前神经网络中层数的要求。这些都给机器学习带来了挑战。</p><h4 id="机器学习主要流派">1.1.4 机器学习主要流派</h4><p>在人工智能的发展中，随着人们对智能的理解和对实际问题的解决方案的发展，机器学习大致出现了符号主义、贝叶斯、联结主义、进化主义、行为类推主义五大流派。</p><p>符号主义起源于逻辑和哲学，其实现方法是利用符号来表达知识并使用规则进行逻辑推理。专家系统和知识工程是该理论的代表。符号主义学派认为，知识是信息符号的表示，是人工智能的基础。这些符号被输入到计算机中进行仿真和推理，以实现人工智能。</p><p>贝叶斯定理是概率论中的一个定理，其中P（A|B）是事件B发生时事件A发生的概率（条件概率）。贝叶斯学习已被应用于许多领域。例如，自然语言中的情感分类，自动驾驶和垃圾邮件过滤。</p><p>联结主义起源于神经科学，主要算法是神经网络，它由一定结构中的大量神经元组成。神经元是一种看起来像树的细胞，它由细胞主体和细胞突起组成，长轴突被鞘覆盖以形成神经纤维，在其末端的小分支称为神经末梢。每个神经元可以具有一个或多个树突，这些树突可以接受刺激并将兴奋转移到细胞体内。每个神经元只有一个轴突，它可以将兴奋从细胞体传递到另一个神经元或其他组织，神经元相互连接，从而形成一个大型的神经网络，人类所学到的几乎所有知识都存在其中，如下图所示：<img src="/images/联结主义.png" alt="联结主义" /></p><p>在神经网络中，将n个连接的神经元的输出用作当前神经元的输入，进行加权计算，并添加一个偏置值（Bias）以通过激活函数实现变换，激活功能的功能是在一定范围内输出控制。以Sigmoid函数为例，输入是从负无穷大到正无穷大，并在激活后映射到（0，1）间隔。</p><p>人工神经网络是分层(Layer)组织的，每层包含多个神经元，这些层通过某种结构连接，神经网络训练的目的是找到网络中的每个突触连接的权重和偏差值。作为一种监督学习算法，神经网络的训练过程是通过不断反馈当前网络计算结果与训练数据之间的误差来校正网络权重，使得误差足够小，这就是反向传播算法。</p><p>1850年，达尔文提出进化论。进化过程是适者生存的过程，个体生物在其中适应环境。智能需要适应不断变化的环境，并通过对进化过程进行建模来生成智能行为。</p><p>进化算法（EA）是基于“自然选择，适者生存”和迭代优化的原理，在计算机上模拟进化过程，直到找到最佳结果。进化算法包括基本操作，例如基因编码，群体初始化和交叉变异算子。它是一种相对成熟的全局优化方法，具有广泛的适用性。它具有自组织，自适应和自学习的特征，可以有效地处理传统优化。用算法难以解决的复杂问题（例如NP硬优化问题）。</p><p>遗传算法的优化应根据具体情况选择算法，也可以与其他算法结合进行补充。对于动态数据，可能难以使用遗传算法来找到最佳解，并且种群可能会过早收敛。</p><p>根据约束条件优化功能，行为类比主义者倾向于通过类比推理获得知识和理论，并在未知情况和已知情况之间建立相应的关系。在实际应用中，是计算它们之间的相似度，然后定义关联关系。</p><h3 id="机器学习人工智能和数据挖掘">1.2机器学习、人工智能和数据挖掘</h3><p>机器学习与其他领域之间的关系如下图所示：</p><p>数据挖掘：通过处理各种数据来促进人们的决策</p><p>机器学习：使机器模仿人类的学习来获取知识</p><p>人工智能：使用机器学习和推理来最终形成特定的智能行为</p><figure><img src="/images/机器学习与其他领域的关系.png"alt="机器学习与其他领域的关系" /><figcaption aria-hidden="true">机器学习与其他领域的关系</figcaption></figure><h4 id="什么是人工智能">1.2.1 什么是人工智能</h4><p>人工智能是为了使机器的行为看起来像人类所表现出的智能行为。麻省理工学院的约翰·麦卡锡（JohnMcCarthy）于1956年在达特茅斯会议上提出。</p><p>人工智能的先驱者希望机器具有与人类相似的功能：感知，语言，思维，学习，动作等。</p><p>近年来，人们发现机器在感知（图像识别）和学习方面具有某些功能，所以人工智能在世界范围内开始普及。</p><p>人工智能的现阶段仍处于“弱人工智能”(NarrowAI)阶段</p><p>人类不需要大量的数据来进行反复的迭代学习以获取知识和进行推理。他们只需要看一下自行车的照片就可以粗略地区分各种自行车。即目前对人脑中信息的存储和处理尚未得到清晰的研究，与当前主流的深度学习理论有很大的基本差异。</p><p>因此，人工智能距离“强人工智能”(GeneralAI)阶段还有很长的路要走。</p><p>典型的人工智能系统包括以下方面：</p><p>（1）博弈游戏（如深蓝、AlphaGo、AlphaZero等）。</p><p>（2）机器人相关控制理论（运动规划、控制机器人行走等）。</p><p>（3）机器翻译。</p><p>（4）语音识别。</p><p>（5）计算机视觉系统。</p><p>（6）自然语言处理（自动程序）。</p><h4 id="什么是数据挖掘">1.2.2 什么是数据挖掘</h4><p>数据挖掘使用诸如机器学习，统计和数据库之类的方法来发现相对大量的数据集中的模式和知识，涉及数据预处理，模型和推理，可视化等。</p><p>数据挖掘包括以下类型的常见任务：</p><ol type="1"><li><strong>异常检测(anomalydetection)</strong>：识别不符合预期模式的样本和事件。异常也称为离群值，偏差和异常。异常检测通常用于入侵检测，银行欺诈，疾病检测，故障检测等。</li><li><strong>关联规则学习(Associationrulelearning)</strong>：发现数据库中变量之间的关系（强规则）。例如，在购物篮分析中，发现规则{面包，牛奶}→{酸奶}表示如果客户同时购买面包和牛奶，他们很有可能也会购买酸奶，这些规则可以用于市场营销。</li><li><strong>聚类</strong>：一种探索性分析，在数据结构未知的情况下，根据相似度将样本划分为不同的群集或子集，不同聚类的样本有很大的差异，以便发现数据的类别和结构。</li><li><strong>分类</strong>：根据已知样本的某些特征确定新样本所属的类别。通过特征选择和学习，建立判别函数以对样本进行分类。</li><li><strong>回归</strong>：一种统计分析方法，用于了解两个或多个变量之间的相关性，回归的目标是找到误差最小的拟合函数作为模型，并使用特定的自变量来预测因变量的值。</li></ol><p>随着数据存储（非关系NoSQL数据库），分布式数据计算（Hadoop/Spark等），数据可视化和其他技术的发展，数据挖掘具有越来越多的了解事务的能力，但相对也增加了算法的要求。因此，一方面，数据挖掘必须获取尽可能多，更有价值和更全面的数据，另一方面要从这些数据中提取价值。</p><p>数据挖掘在商业智能中有许多应用，特别是在决策辅助、流程优化和精确营销中。例如：</p><p>广告公司可以使用用户的浏览历史记录、访问记录、点击记录和购买信息来准确地宣传广告。采用舆论分析，尤其是情感分析，可以提取舆论来驱动市场决策。例如，在电影宣传期间监视社会评论，寻找与目标观众产生共鸣的元素，然后调整媒体宣传策略以迎合观众的口味并吸引更多人。</p><h4 id="机器学习人工智能">1.2.3 机器学习、人工智能</h4><p>数据挖掘是从大量业务数据中挖掘隐藏的、有用的以及正确的知识，以促进决策的执行。</p><p>数据挖掘的许多算法都来自机器学习和统计。机器学习中的某些算法利用统计理论，并在实际应用中对其进行优化以实现数据挖掘的目标。</p><p>近年来，机器学习的演化计算深度学习等方法也逐渐跳出实验室，从实际数据中学习模式并解决实际问题。数据挖掘与机器学习的交集越来越大，机器学习已成为数据挖掘的重要支撑技术。</p><p>机器学习是人工智能的一个分支，作为人工智能的核心技术和实现方法，机器学习方法被用来解决人工智能面临的问题。机器学习是使用一些算法，这些算法允许计算机自动“学习”，分析数据并从中获取规则，然后使用这些规则来预测新样本。</p><p>机器学习是人工智能的重要支持技术，而深度学习就是其中一个重要分支。深度学习的典型应用是选择数据来训练模型，然后使用该模型进行预测。例如，博弈游戏系统（DeepBlue）专注于探索和优化未来的解决方案空间（SolutionSpace），而深度学习则为开发游戏算法（例如AlphaGo）付出了艰辛的努力，并已享誉全球成就。### 1.3 典型机器学习应用领域</p><p>机器学习可以显著提高企业的智能水平并增强其竞争力，对各个行业的影响越来越大。</p><p>机器学习应用程序的典型领域包括：</p><p>网络安全，搜索引擎，产品推荐，自动驾驶，图像识别，语音识别，量化投资，自然语言处理等。</p><p>随着海量数据的积累和硬件计算能力的提高，机器学习的应用领域仍在迅速扩展中。</p><h3 id="机器学习算法分类">1.4 机器学习算法分类</h3><p>算法定义：自动分析数据并从中获取模式（规律），之后使用模式预测未知数据的方法。</p><p>算法分类：监督学习，非监督学习和半监督学习。</p><h4 id="监督学习">1.4.1 监督学习</h4><ul><li>监督学习是从标记的训练数据中学习并建立模型，然后基于该模型预测未知的样本。其中，模型的输入是某个样本数据的特征，而函数的输出是与该样本相对应的标签。</li><li>常见的监督学习算法：回归分析、统计分析和分类。</li><li>监督学习分类：分类：包括逻辑回归，决策树，KNN，随机森林，支持向量机，朴素贝叶斯等机器学习算法；预测：包括线性回归，KNN，GradientBoosting和AdaBoost等机器学习算法。机器学习算法分类---监督学习</li></ul><h4 id="非监督学习">1.4.2 非监督学习</h4><ul><li>非监督学习也称为无监督学习，该类算法的输入样本不需要标记，而是自动地从样本中学习这种特征以实现预测。</li><li>常见的无（非）监督学习算法：聚类和关联分析</li><li>在人工神经网络中，自组织映射（SOM）和适应性共振理论（ART）是最常见的无监督学习算法。</li></ul><h4 id="半监督学习">1.4.3 半监督学习</h4><ul><li>半监督学习只有少量的标记数据，完全靠这些不完全标记的数据不可能训练好一个模型，依靠大量的无监督数据来提高算法性能。因此，只有选择半监督学习来使数据的价值达到最大化，使机器学习模型能够从庞大的数据集中挖掘出其隐藏规律。</li><li>经过研究人员的不懈努力和长期坚持，半监督学习的发展取得了一定的成效，提出了不少半监督学习方法，也应用到了不少实际领域当中。</li><li>半监督学习的研究仍然存在许多待解决的问题，未来的研究大门正等着大家去开启。</li></ul><p>机器学习可以分为三种常见的机器学习任务：回归，分类和聚类。</p><p>某些机器学习算法可能同时属于不同的类别，例如，某些深度学习算法可能存在于监督学习中，也可能存在于半监督学习中。在具体的实践过程中，可以根据实际需要进行具体地选择。</p><h2 id="机器学习的python常用库">2. 机器学习的Python常用库</h2><h3 id="numpy简介及基本使用">2.1 Numpy简介及基本使用</h3><h4 id="如何创建">2.1.1 如何创建</h4><ol type="1"><li>导入Numpy库，并命名为np</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>查看版本</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np._vision_<br></code></pre></td></tr></table></figure><p>创建数组</p><p>NumPy 的主要对象是多维数组 Ndarray。在 NumPy 中维度 Dimensions 叫做轴Axes，轴的个数叫做秩 Rank。注意，numpy.array 和 Python 标准库array.array 并不相同，前者更为强大，这也就是我们学习 NumPy的重要原因之一。</p><ol start="3" type="1"><li>通过列表创建一维数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><p>上方数组是一个秩为 1 的数组，因为它只有一个轴，而轴的长度为 3。</p><ol start="4" type="1"><li>通过列表创建二维数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.array([(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)])<br></code></pre></td></tr></table></figure><ol start="5" type="1"><li>创建全为0的二维数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.zeros((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><blockquote><p>array([[0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]])</p></blockquote><ol start="6" type="1"><li>创建全为1的三维数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.ones((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><blockquote><p>array([[[1., 1., 1., 1.], [1., 1., 1., 1.], [1., 1., 1., 1.]], [[1.,1., 1., 1.], [1., 1., 1., 1.], [1., 1., 1., 1.]]])</p></blockquote><p><strong>full函数</strong>，创建任意大小的数组并填充任意数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.full((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>), <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><ol start="7" type="1"><li>创建一维等差数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.arrange(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>array([0, 1, 2, 3, 4])</p><ol start="8" type="1"><li>创建二维等差数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.arange(<span class="hljs-number">6</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><ol start="9" type="1"><li>创建单位矩阵(二维数组)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.eye(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><blockquote><p>array([[1., 0., 0.],    [0., 1., 0.],    [0., 0., 1.]])</p></blockquote><ol start="10" type="1"><li>创建二位随机数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.random.rand(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><blockquote><p>array([[0.38257919, 0.63590106, 0.64884528],    [0.09064574,0.32850939, 0.94661844]])</p></blockquote><ol start="11" type="1"><li>创建二维数组整数数组(数值小于5)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.random.randint(<span class="hljs-number">5</span>, size = (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><blockquote><p>array([[2, 3, 4],    [3, 2, 4]])</p></blockquote><h4 id="数组运算">2.1.2 数组运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>])<br>b = np.arange(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)<br>a, b<br></code></pre></td></tr></table></figure><blockquote><p>(array([10, 20, 30, 40, 50]), array([1, 2, 3, 4, 5]))</p></blockquote><ol type="1"><li>sum</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],<br>              [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<br>np.<span class="hljs-built_in">sum</span>(a)<br></code></pre></td></tr></table></figure><blockquote><p>10</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.<span class="hljs-built_in">sum</span>(a, axis=<span class="hljs-number">0</span>) <span class="hljs-comment"># axis=0 表示对每一列求和</span><br></code></pre></td></tr></table></figure><blockquote><p>array([4, 6])</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.<span class="hljs-built_in">sum</span>(a, axis=<span class="hljs-number">1</span>) <span class="hljs-comment"># axis=0 表示对每一行求和</span><br></code></pre></td></tr></table></figure><blockquote><p>array([3, 7])</p></blockquote><ol start="2" type="1"><li>mean</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.mean(a) <span class="hljs-comment"># 求取平均值</span><br></code></pre></td></tr></table></figure><blockquote><p>2.5</p></blockquote><ol start="3" type="1"><li>tile</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a<br></code></pre></td></tr></table></figure><blockquote><p>array([[1, 2],<br />   [3, 4]])</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.tile(a, (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)) <span class="hljs-comment"># 将数组a变成一行俩列</span><br></code></pre></td></tr></table></figure><blockquote><p>array([[1, 2, 1, 2],<br />   [3, 4, 3, 4]])</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.tile(a, (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><blockquote><p>array([[1, 2],<br />   [3, 4],<br />   [1, 2],<br />   [3, 4]])</p></blockquote><ol start="4" type="1"><li>argsort</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([[<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>],<br>              [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>]])<br>a.argsort() <span class="hljs-comment"># 将元素按照行从小到大排序，返回对应位置元素的下标</span><br></code></pre></td></tr></table></figure><blockquote><p>array([[0, 2, 1, 3],<br />   [2, 3, 0, 1]], dtype=int64)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 按照列排序</span><br>a.argsort(axis=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><blockquote><p>array([[0, 0, 1, 1],<br />   [1, 1, 0, 0]], dtype=int64)</p></blockquote><ol start="12" type="1"><li>一维数组加法运算</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a + b<br></code></pre></td></tr></table></figure><blockquote><p>array([11, 22, 33, 44, 55])</p></blockquote><ol start="13" type="1"><li>一维数组减法运算</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a - b<br></code></pre></td></tr></table></figure><blockquote><p>array([ 9, 18, 27, 36, 45])</p></blockquote><ol start="14" type="1"><li>一维数组乘法运算</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a * b<br></code></pre></td></tr></table></figure><blockquote><p>array([ 10, 40, 90, 160, 250])</p></blockquote><ol start="15" type="1"><li>一维数组除法运算</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a / b<br></code></pre></td></tr></table></figure><blockquote><p>array([10., 10., 10., 10., 10.])</p></blockquote><ol start="16" type="1"><li>二维数组的运算，相应位置上＋， -， *， /</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">A = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],<br>              [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<br>B = np.array([[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>],<br>              [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<br>A * B<br></code></pre></td></tr></table></figure><blockquote><p>array([[ 5, 12],<br />   [21, 32]])</p></blockquote><ol start="17" type="1"><li>矩阵乘法运算</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.dot(A, B)<br></code></pre></td></tr></table></figure><blockquote><p>array([[19, 22],<br />   [43, 50]])</p></blockquote><ol start="18" type="1"><li>如果使用np.mat将二维数组准确定义为矩阵，就可以直接使用 *完成矩阵乘法运算</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.mat(A) * np.mat(B)<br></code></pre></td></tr></table></figure><blockquote><p>matrix([[19, 22],<br />   [43, 50]])</p></blockquote><p>广播</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>             [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],<br>             [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]])<br>b = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在a的每一行都加上b</span><br>a + np.tile(b, (<span class="hljs-number">3</span>, <span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><blockquote><p>array([[ 2, 4, 6],<br />   [ 5, 7, 9],<br />   [ 8, 10, 12]])</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-comment"># 可直接简写为a+ b, numpy自动实现广播功能，当参与运算的操作数的维度不一样时</span><br>a + b<br></code></pre></td></tr></table></figure><blockquote><p>array([[ 2, 4, 6],<br />   [ 5, 7, 9],<br />   [ 8, 10, 12]])</p></blockquote><h4 id="索引的作用">2.1.3 索引的作用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>             [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>],<br>             [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])<br></code></pre></td></tr></table></figure><ol type="1"><li>取出某个确定的值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 表示第二行，第三列的数， 逗号前表示一维，逗号后表示二维，以此类推</span><br>a[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><blockquote><p>7</p></blockquote><ol start="2" type="1"><li>取出某个范围的值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 冒号表示所取的范围，跟列表的索引用法一样，</span><br><span class="hljs-comment"># 逗号用来区分每个维度，下面的代码表示[取倒数第二行到最后一行, 第二列到第三列</span><br>a[-<span class="hljs-number">2</span>:, <span class="hljs-number">1</span>:<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><blockquote><p>array([[ 6, 7],    [10, 11]])</p></blockquote><ol start="3" type="1"><li>给某个范围的数进行运算</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 给a数组的第二列上的每个数加上10</span><br>a[np.arange(<span class="hljs-number">3</span>), <span class="hljs-number">1</span>] += <span class="hljs-number">10</span><br>a<br></code></pre></td></tr></table></figure><blockquote><p>array([[ 1, 12, 3, 4],    [ 5, 16, 7, 8],    [ 9, 20, 11, 12]])</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.arange(<span class="hljs-number">10</span>) <span class="hljs-comment"># 从0开始生成10个数</span><br></code></pre></td></tr></table></figure><blockquote><p>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.arange(<span class="hljs-number">3</span>, <span class="hljs-number">7</span>) <span class="hljs-comment"># 还可以生成特定范围的数</span><br></code></pre></td></tr></table></figure><blockquote><p>array([3, 4, 5, 6])</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 还可以这样写, 相当于，一个行对应一个列</span><br>a[[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]] += <span class="hljs-number">10</span><br>a<br></code></pre></td></tr></table></figure><blockquote><p>array([[ 1, 22, 3, 4],<br />   [ 5, 26, 7, 8],<br />   [ 9, 30, 11, 12]])</p></blockquote><ol start="4" type="1"><li>获取数组中大于或小于某个确定值的数值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">result_index = a &gt; <span class="hljs-number">10</span><br>result_index<br></code></pre></td></tr></table></figure><blockquote><p>array([[False, False, False, False],<br />   [False, False, False, False],<br />   [False, False, True, True]])</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a[result_index]<br></code></pre></td></tr></table></figure><blockquote><p>array([11, 12])</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 这样写即可</span><br>a[a &gt; <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><blockquote><p>array([11, 12])</p></blockquote><h4 id="元素数据类型">2.1.4 元素数据类型</h4><ol type="1"><li>使用dtype函数查看数组的数据类型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a.dtype<br></code></pre></td></tr></table></figure><blockquote><p>dtype('int32')</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([<span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>])<br>a.dtype<br></code></pre></td></tr></table></figure><blockquote><p>dtype('float64')</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">1.2</span>])<br>a.dtype<br></code></pre></td></tr></table></figure><blockquote><p>dtype('float64')</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([<span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>], dtype = np.int64) <span class="hljs-comment"># 将数据类型转换为整数，直接去掉小数部分</span><br>a<br></code></pre></td></tr></table></figure><blockquote><p>array([1, 2], dtype=int64)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a.dtype<br></code></pre></td></tr></table></figure><blockquote><p>dtype('int64')</p></blockquote><ol start="2" type="1"><li>使用astype转换数据类型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([<span class="hljs-string">&#x27;1.2&#x27;</span>, <span class="hljs-string">&#x27;1.3&#x27;</span>, <span class="hljs-string">&#x27;1.4&#x27;</span>], dtype = np.string_)<br>a<br></code></pre></td></tr></table></figure><blockquote><p>array([b'1.2', b'1.3', b'1.4'], dtype='|S3')</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a.astype(np.<span class="hljs-built_in">float</span>)<br></code></pre></td></tr></table></figure><blockquote><p>array([1.2, 1.3, 1.4])</p></blockquote><h3 id="pandas库">2.2 Pandas库</h3><h4 id="什么是pandas库">2.2.1 什么是Pandas库</h4><p>Pandas是基于Numpy的专业数据分析工具, 可以灵活高效的处理各种数据集</p><p>它提供了的数据结构有DataFrame和Series等</p><p>我们可以简单粗的把DataFrame理解为Excel里面的一张表，而Series就是表中的某一列</p><h4 id="dataframe创建和存储">2.2.2 DataFrame创建和存储</h4><ol start="0" type="1"><li><strong>函数</strong></li></ol><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>DataFrame(data = 数据， index = 行标题， columns = 列标题, copy =是否深拷贝)</td><td>创建DataFrame对象</td></tr><tr><td>read_csv(filepath_or_buffer = 文件路径, delimiter = 分隔符, header =是否第一行为列标题, engine = 引擎, encoding = 编码)</td><td>读取.csv文件创建DataFrame对象</td></tr><tr><td>read_excel(路径, header = 指定哪一行为标题, names = 指定列标题)</td><td>读取.xlsx文件创建DataFrame对象</td></tr><tr><td>.to_csv(路径)</td><td>保存为.csv文件</td></tr><tr><td>.to_excel(路径)</td><td>保存为.xlsx文件</td></tr></tbody></table><ol type="1"><li><strong>使用DataFrame构造函数</strong></li></ol><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>DataFrame(data = 数据, index = 行标题, columns = 列标题, dtype =类型, copy = 是否深拷贝)</td><td>创建DataFrame对象</td></tr></tbody></table><p>创建时不指定index，系统会自动生成从0开始的索引, 即行标题从0开始</p><ol type="1"><li><strong>使用列表创建</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>data = [<br>        [<span class="hljs-number">60</span>, <span class="hljs-number">78</span>, <span class="hljs-number">92</span>, <span class="hljs-number">85</span>],<br>        [<span class="hljs-number">70</span>, <span class="hljs-number">68</span>, <span class="hljs-number">95</span>, <span class="hljs-number">76</span>],<br>        [<span class="hljs-number">88</span>, <span class="hljs-number">98</span>, <span class="hljs-number">83</span>, <span class="hljs-number">87</span>]<br>    ],<br>index = [<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-string">&#x27;小红&#x27;</span>,<span class="hljs-string">&#x27;小强&#x27;</span>], <span class="hljs-comment"># 指定每行的索引</span><br>    columns = [<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;数学&#x27;</span>, <span class="hljs-string">&#x27;英语&#x27;</span>, <span class="hljs-string">&#x27;化学&#x27;</span>], <span class="hljs-comment"># 指定每列的索引</span><br>    dtype = <span class="hljs-built_in">float</span>, <span class="hljs-comment"># 指定数据类型为`float`,即成绩将以浮点数的形式存储</span><br>    copy = <span class="hljs-literal">True</span> <br>    <span class="hljs-comment"># `pandas`会创建数据的副本，即使原始数据被修改，数据框中的数据也不会受到影响。</span><br>    <span class="hljs-comment"># 如果是`false`,如果数据来源是可变的（例如列表或其他数组），并且你在创建 DataFrame 后修改了原始数据</span><br>    <span class="hljs-comment"># 那么这些修改可能会影响到 DataFrame 中的数据。</span><br>)<br><span class="hljs-built_in">print</span>(dataFrame)<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><strong>使用字典创建</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>data = &#123;<br>        <span class="hljs-string">&#x27;语文&#x27;</span>: [<span class="hljs-number">60</span>, <span class="hljs-number">78</span>, <span class="hljs-number">92</span>, <span class="hljs-number">85</span>],<br>        <span class="hljs-string">&#x27;数学&#x27;</span>: [<span class="hljs-number">70</span>, <span class="hljs-number">68</span>, <span class="hljs-number">95</span>, <span class="hljs-number">76</span>],<br>        <span class="hljs-string">&#x27;英语&#x27;</span>: [<span class="hljs-number">88</span>, <span class="hljs-number">98</span>, <span class="hljs-number">83</span>, <span class="hljs-number">87</span>],<br>    &#125;,<br>index = [<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, <span class="hljs-string">&#x27;小美&#x27;</span>],<br>dtype = <span class="hljs-built_in">float</span>,<br>copy = <span class="hljs-literal">True</span><br>)<br><span class="hljs-built_in">print</span>(dataFrame)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">      语文    数学    英语<br>小明  <span class="hljs-number">60.0</span>  <span class="hljs-number">70.0</span>  <span class="hljs-number">88.0</span><br>小红  <span class="hljs-number">78.0</span>  <span class="hljs-number">68.0</span>  <span class="hljs-number">98.0</span><br>小强  <span class="hljs-number">92.0</span>  <span class="hljs-number">95.0</span>  <span class="hljs-number">83.0</span><br>小美  <span class="hljs-number">85.0</span>  <span class="hljs-number">76.0</span>  <span class="hljs-number">87.0</span><br></code></pre></td></tr></table></figure><p>列名称是字典中键的名称, 字典中的元素是该列的值</p><p>index是每一条记录的名称,index的长度与字典中某一个键值对的值的长度一样</p><ol start="3" type="1"><li><strong>从另一个DataFrame对象创建</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>data = [<br>        [<span class="hljs-number">60</span>, <span class="hljs-number">78</span>, <span class="hljs-number">92</span>, <span class="hljs-number">85</span>],<br>        [<span class="hljs-number">70</span>, <span class="hljs-number">68</span>, <span class="hljs-number">95</span>, <span class="hljs-number">76</span>],<br>        [<span class="hljs-number">88</span>, <span class="hljs-number">98</span>, <span class="hljs-number">83</span>, <span class="hljs-number">87</span>]<br>    ],<br>index = [<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>],<br>columns = [<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;数学&#x27;</span>, <span class="hljs-string">&#x27;英语&#x27;</span>, <span class="hljs-string">&#x27;化学&#x27;</span>],<br>dtype = <span class="hljs-built_in">float</span>,<br>copy = <span class="hljs-literal">False</span><br>)<br><br>dataFrame2 = pandas.DataFrame(dataFrame, copy = <span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(dataFrame2)<br>dataFrame2[<span class="hljs-string">&#x27;语文&#x27;</span>] = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(dataFrame)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">      语文    数学    英语    化学<br>小明  <span class="hljs-number">60.0</span>  <span class="hljs-number">78.0</span>  <span class="hljs-number">92.0</span>  <span class="hljs-number">85.0</span><br>小红  <span class="hljs-number">70.0</span>  <span class="hljs-number">68.0</span>  <span class="hljs-number">95.0</span>  <span class="hljs-number">76.0</span><br>小强  <span class="hljs-number">88.0</span>  <span class="hljs-number">98.0</span>  <span class="hljs-number">83.0</span>  <span class="hljs-number">87.0</span><br>    语文    数学    英语    化学<br>小明   <span class="hljs-number">0</span>  <span class="hljs-number">78.0</span>  <span class="hljs-number">92.0</span>  <span class="hljs-number">85.0</span><br>小红   <span class="hljs-number">0</span>  <span class="hljs-number">68.0</span>  <span class="hljs-number">95.0</span>  <span class="hljs-number">76.0</span><br>小强   <span class="hljs-number">0</span>  <span class="hljs-number">98.0</span>  <span class="hljs-number">83.0</span>  <span class="hljs-number">87.0</span><br></code></pre></td></tr></table></figure><p>从已有的DataFrame创建, copy参数可以指定深拷贝还是浅拷贝。</p><p>当copy = False是浅拷贝</p><ol start="2" type="1"><li><strong>从文件读取</strong></li></ol><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>read_csv(filepath_or_buffer = 文件路径, delimiter = 分隔符, header =是否第一行为列标题, engine = 引擎, encoding = 编码)</td><td>读取.csv文件创建DataFrame对象</td></tr><tr><td>read_excel(路径, header = 指定哪一行为标题, names = 指定列标题)</td><td>读取.xlsx文件创建DataFrame对象</td></tr></tbody></table><ol type="1"><li><strong>从.csv文件读取</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.read_csv(<span class="hljs-string">&#x27;../数据/test.csv&#x27;</span>)<br><span class="hljs-built_in">print</span>(dataFrame)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">   姓名    语文    数学     英语<br><span class="hljs-number">0</span>  小明  <span class="hljs-number">62.0</span>  <span class="hljs-number">66.0</span>   <span class="hljs-number">86.0</span><br><span class="hljs-number">1</span>  小红  <span class="hljs-number">86.0</span>  <span class="hljs-number">97.5</span>  <span class="hljs-number">100.0</span><br></code></pre></td></tr></table></figure><p>默认分隔符以","逗号分割, 可以指定分割类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.read_csv(<br>    <span class="hljs-string">&#x27;../数据/test.csv&#x27;</span>,<br>    delimiter = <span class="hljs-string">&#x27;|&#x27;</span><br>)<br><span class="hljs-built_in">print</span>(dataFrame)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">   姓名    语文    数学     英语<br><span class="hljs-number">0</span>  小明  <span class="hljs-number">62.0</span>  <span class="hljs-number">66.0</span>   <span class="hljs-number">86.0</span><br><span class="hljs-number">1</span>  小红  <span class="hljs-number">86.0</span>  <span class="hljs-number">97.5</span>  <span class="hljs-number">100.0</span><br></code></pre></td></tr></table></figure><p>默认以第一行作为列标题, 可以不知道列标题, 这样第一行也变成了数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.read_csv(<br>    filepath_or_buffer = <span class="hljs-string">&#x27;../数据/test.csv&#x27;</span>,<br>    delimiter = <span class="hljs-string">&#x27;|&#x27;</span>,<br>    header = <span class="hljs-literal">None</span>,<br>    engine = <span class="hljs-string">&#x27;python&#x27;</span>,<br>    encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br>)<br><span class="hljs-built_in">print</span>(dataFrame)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span><br><span class="hljs-number">0</span>  姓名   语文    数学    英语<br><span class="hljs-number">1</span>  小明  <span class="hljs-number">62.</span>   <span class="hljs-number">66.</span>   <span class="hljs-number">86.</span><br><span class="hljs-number">2</span>  小红  <span class="hljs-number">86.</span>  <span class="hljs-number">97.5</span>  <span class="hljs-number">100.</span><br></code></pre></td></tr></table></figure><p>engine是使用的分析引擎，读取csv文件一般指定python避免中文和编码造成的报错</p><p>encoding是编码格式</p><ol start="2" type="1"><li><strong>从excel文件读取</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.read_excel(<br>    <span class="hljs-string">&#x27;../数据/test.XLSX&#x27;</span>,<br>    header = <span class="hljs-literal">None</span><br>)<br><span class="hljs-built_in">print</span>(dataFrame)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span><br><span class="hljs-number">0</span>  姓名    语文    数学<br><span class="hljs-number">1</span>  小明  <span class="hljs-number">66.5</span>    <span class="hljs-number">86</span><br><span class="hljs-number">2</span>  小红    <span class="hljs-number">89</span>  <span class="hljs-number">99.5</span><br></code></pre></td></tr></table></figure><ol start="3" type="1"><li><strong>存储</strong></li></ol><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>.to_csv(路径)</td><td>保存为.csv文件</td></tr><tr><td>.to_excel(路径)</td><td>保存为.xlsx文件</td></tr></tbody></table><h4 id="dataframe-查看数据">2.2.3 DataFrame 查看数据</h4><p>函数</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><code>.head(n = 5)</code></td><td>查看数据前n行</td></tr><tr><td><code>.tail(n = 5)</code></td><td>查看数据后n行</td></tr><tr><td><code>.info()</code></td><td>查看数据信息</td></tr><tr><td><code>.describe()</code></td><td>查看数据统计信息</td></tr></tbody></table><ol type="1"><li><strong>查看前几行</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><br>itis = datasets.load_iris()<br>dataFrame = pandas.DataFrame(iris.data)<br><span class="hljs-built_in">print</span>(dataFrame.head(<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">     <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">2</span>    <span class="hljs-number">3</span><br><span class="hljs-number">0</span>  <span class="hljs-number">5.1</span>  <span class="hljs-number">3.5</span>  <span class="hljs-number">1.4</span>  <span class="hljs-number">0.2</span><br><span class="hljs-number">1</span>  <span class="hljs-number">4.9</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">1.4</span>  <span class="hljs-number">0.2</span><br><span class="hljs-number">2</span>  <span class="hljs-number">4.7</span>  <span class="hljs-number">3.2</span>  <span class="hljs-number">1.3</span>  <span class="hljs-number">0.2</span><br><span class="hljs-number">3</span>  <span class="hljs-number">4.6</span>  <span class="hljs-number">3.1</span>  <span class="hljs-number">1.5</span>  <span class="hljs-number">0.2</span><br><span class="hljs-number">4</span>  <span class="hljs-number">5.0</span>  <span class="hljs-number">3.6</span>  <span class="hljs-number">1.4</span>  <span class="hljs-number">0.2</span><br><span class="hljs-number">5</span>  <span class="hljs-number">5.4</span>  <span class="hljs-number">3.9</span>  <span class="hljs-number">1.7</span>  <span class="hljs-number">0.4</span><br><span class="hljs-number">6</span>  <span class="hljs-number">4.6</span>  <span class="hljs-number">3.4</span>  <span class="hljs-number">1.4</span>  <span class="hljs-number">0.3</span><br><span class="hljs-number">7</span>  <span class="hljs-number">5.0</span>  <span class="hljs-number">3.4</span>  <span class="hljs-number">1.5</span>  <span class="hljs-number">0.2</span><br><span class="hljs-number">8</span>  <span class="hljs-number">4.4</span>  <span class="hljs-number">2.9</span>  <span class="hljs-number">1.4</span>  <span class="hljs-number">0.2</span><br><span class="hljs-number">9</span>  <span class="hljs-number">4.9</span>  <span class="hljs-number">3.1</span>  <span class="hljs-number">1.5</span>  <span class="hljs-number">0.1</span><br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><strong>查看后几行</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><br>iris = datasets.load_iris()<br>dataFrame = pandas.DataFrame(iris.data)<br><span class="hljs-built_in">print</span>(dataFrame.tail())<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">       <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">2</span>    <span class="hljs-number">3</span><br><span class="hljs-number">145</span>  <span class="hljs-number">6.7</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">5.2</span>  <span class="hljs-number">2.3</span><br><span class="hljs-number">146</span>  <span class="hljs-number">6.3</span>  <span class="hljs-number">2.5</span>  <span class="hljs-number">5.0</span>  <span class="hljs-number">1.9</span><br><span class="hljs-number">147</span>  <span class="hljs-number">6.5</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">5.2</span>  <span class="hljs-number">2.0</span><br><span class="hljs-number">148</span>  <span class="hljs-number">6.2</span>  <span class="hljs-number">3.4</span>  <span class="hljs-number">5.4</span>  <span class="hljs-number">2.3</span><br><span class="hljs-number">149</span>  <span class="hljs-number">5.9</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">5.1</span>  <span class="hljs-number">1.8</span><br></code></pre></td></tr></table></figure><ol start="3" type="1"><li><strong>格式查看</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><br>iris = datasets.load_iris()<br>dataFrame = pandas.DataFrame(iris.data)<br><span class="hljs-built_in">print</span>(dataFrame.info())<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 对象的类型</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;pandas.core.frame.DataFrame&#x27;</span>&gt;<br><span class="hljs-comment"># 数据范围, 一共150个, 从0 - 149</span><br>RangeIndex: <span class="hljs-number">150</span> entries, <span class="hljs-number">0</span> to <span class="hljs-number">149</span><br><span class="hljs-comment"># 数据一共4列</span><br>Data columns (total <span class="hljs-number">4</span> columns):<br> <span class="hljs-comment">#   Column  Non-Null Count  Dtype  </span><br>---  ------  --------------  -----  <br> <span class="hljs-number">0</span>   <span class="hljs-number">0</span>       <span class="hljs-number">150</span> non-null    float64<br> <span class="hljs-number">1</span>   <span class="hljs-number">1</span>       <span class="hljs-number">150</span> non-null    float64<br> <span class="hljs-number">2</span>   <span class="hljs-number">2</span>       <span class="hljs-number">150</span> non-null    float64<br> <span class="hljs-number">3</span>   <span class="hljs-number">3</span>       <span class="hljs-number">150</span> non-null    float64<br>dtypes: float64(<span class="hljs-number">4</span>)<br>memory usage: <span class="hljs-number">4.8</span> KB<br><span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><ol start="4" type="1"><li><strong>查看统计信息</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><br>iris = datasets.load_iris()<br>dataFrame = pandas.DataFrame(iris.data)<br><span class="hljs-built_in">print</span>(dataFrame.describe())<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">                <span class="hljs-number">0</span>           <span class="hljs-number">1</span>           <span class="hljs-number">2</span>           <span class="hljs-number">3</span><br>count  <span class="hljs-number">150.000000</span>  <span class="hljs-number">150.000000</span>  <span class="hljs-number">150.000000</span>  <span class="hljs-number">150.000000</span><br>mean     <span class="hljs-number">5.843333</span>    <span class="hljs-number">3.057333</span>    <span class="hljs-number">3.758000</span>    <span class="hljs-number">1.199333</span><br>std      <span class="hljs-number">0.828066</span>    <span class="hljs-number">0.435866</span>    <span class="hljs-number">1.765298</span>    <span class="hljs-number">0.762238</span><br><span class="hljs-built_in">min</span>      <span class="hljs-number">4.300000</span>    <span class="hljs-number">2.000000</span>    <span class="hljs-number">1.000000</span>    <span class="hljs-number">0.100000</span><br><span class="hljs-number">25</span>%      <span class="hljs-number">5.100000</span>    <span class="hljs-number">2.800000</span>    <span class="hljs-number">1.600000</span>    <span class="hljs-number">0.300000</span><br><span class="hljs-number">50</span>%      <span class="hljs-number">5.800000</span>    <span class="hljs-number">3.000000</span>    <span class="hljs-number">4.350000</span>    <span class="hljs-number">1.300000</span><br><span class="hljs-number">75</span>%      <span class="hljs-number">6.400000</span>    <span class="hljs-number">3.300000</span>    <span class="hljs-number">5.100000</span>    <span class="hljs-number">1.800000</span><br><span class="hljs-built_in">max</span>      <span class="hljs-number">7.900000</span>    <span class="hljs-number">4.400000</span>    <span class="hljs-number">6.900000</span>    <span class="hljs-number">2.500000</span><br></code></pre></td></tr></table></figure><h4 id="dataframe-列操作">2.2.4 DataFrame 列操作</h4><p>函数</p><p>函数</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><code>.drop(列名, axis = 1, inplace = True)</code></td><td>查看数据前n行</td></tr></tbody></table><ol type="1"><li>增加列</li></ol><p>增加一列，用dataFrame[‘新列名’] = 新列值的形式,在原数据基础上赋值即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-number">60</span>, <span class="hljs-number">78</span>, <span class="hljs-number">92</span>, <span class="hljs-number">85</span>],<br>        [<span class="hljs-number">70</span>, <span class="hljs-number">68</span>, <span class="hljs-number">95</span>, <span class="hljs-number">76</span>],<br>        [<span class="hljs-number">88</span>, <span class="hljs-number">98</span>, <span class="hljs-number">83</span>, <span class="hljs-number">87</span>]<br>    ],<br>    index = [<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, ],<br>    columns = [<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;数学&#x27;</span>, <span class="hljs-string">&#x27;英语&#x27;</span>, <span class="hljs-string">&#x27;化学&#x27;</span>],<br>    dtype = <span class="hljs-built_in">float</span><br>)<br><span class="hljs-built_in">print</span>(dataFrame)<br>dataFrame[<span class="hljs-string">&#x27;生物&#x27;</span>] = [<span class="hljs-number">96</span>, <span class="hljs-number">86</span>, <span class="hljs-number">88</span>]<br><span class="hljs-built_in">print</span>(dataFrame)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">      语文    数学    英语    化学<br>小明  <span class="hljs-number">60.0</span>  <span class="hljs-number">78.0</span>  <span class="hljs-number">92.0</span>  <span class="hljs-number">85.0</span><br>小红  <span class="hljs-number">70.0</span>  <span class="hljs-number">68.0</span>  <span class="hljs-number">95.0</span>  <span class="hljs-number">76.0</span><br>小强  <span class="hljs-number">88.0</span>  <span class="hljs-number">98.0</span>  <span class="hljs-number">83.0</span>  <span class="hljs-number">87.0</span><br>      语文    数学    英语    化学  生物<br>小明  <span class="hljs-number">60.0</span>  <span class="hljs-number">78.0</span>  <span class="hljs-number">92.0</span>  <span class="hljs-number">85.0</span>  <span class="hljs-number">96</span><br>小红  <span class="hljs-number">70.0</span>  <span class="hljs-number">68.0</span>  <span class="hljs-number">95.0</span>  <span class="hljs-number">76.0</span>  <span class="hljs-number">86</span><br>小强  <span class="hljs-number">88.0</span>  <span class="hljs-number">98.0</span>  <span class="hljs-number">83.0</span>  <span class="hljs-number">87.0</span>  <span class="hljs-number">88</span><br></code></pre></td></tr></table></figure><p>将其他的数据列增加过来, 即横向合并</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame1 = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-string">&#x27;一级&#x27;</span>, <span class="hljs-string">&#x27;读书&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">176</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-number">178</span>],<br>        [<span class="hljs-string">&#x27;三级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">185</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">182</span>],<br>    ],<br>    columns=[<span class="hljs-string">&#x27;等级&#x27;</span>, <span class="hljs-string">&#x27;爱好&#x27;</span>, <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-string">&#x27;身高&#x27;</span>],<br>    index = [<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, <span class="hljs-string">&#x27;小于&#x27;</span>]<br>)<br><span class="hljs-built_in">print</span>(dataFrame1)<br>dataFrame2 = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-string">&#x27;学士&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>],<br>        [<span class="hljs-string">&#x27;学士&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>],<br>        [<span class="hljs-string">&#x27;博士&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>],<br>        [<span class="hljs-string">&#x27;院士&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>],<br>    ],<br>    columns=[<span class="hljs-string">&#x27;学位&#x27;</span>, <span class="hljs-string">&#x27;血型&#x27;</span>],<br>    index = [<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, <span class="hljs-string">&#x27;小于&#x27;</span>]<br>)<br><span class="hljs-built_in">print</span>(dataFrame2)<br>r = pandas.merge(<br>    left = dataFrame1,<br>    right = dataFrame2,<br>    left_index = <span class="hljs-literal">True</span>,<br>    right_index = <span class="hljs-literal">True</span>,<br>    how = <span class="hljs-string">&#x27;inner&#x27;</span><br>)<br><span class="hljs-built_in">print</span>(r)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">    等级  爱好  年龄   身高<br>小明  一级  读书  <span class="hljs-number">21</span>  <span class="hljs-number">176</span><br>小红  二级  游泳  <span class="hljs-number">22</span>  <span class="hljs-number">178</span><br>小强  三级  游泳  <span class="hljs-number">21</span>  <span class="hljs-number">185</span><br>小于  二级  游泳  <span class="hljs-number">19</span>  <span class="hljs-number">182</span><br>    学位 血型<br>小明  学士  O<br>小红  学士  A<br>小强  博士  A<br>小于  院士  B<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>删除列</li></ol><p>使用, axis = 0表示对行操作, axis = 1表示针对列的操作, inplace为True,则直接在源数据上进行修改, 否则源数据会保持原样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-number">60</span>, <span class="hljs-number">78</span>, <span class="hljs-number">92</span>, <span class="hljs-number">85</span>],<br>        [<span class="hljs-number">70</span>, <span class="hljs-number">68</span>, <span class="hljs-number">95</span>, <span class="hljs-number">76</span>],<br>        [<span class="hljs-number">88</span>, <span class="hljs-number">98</span>, <span class="hljs-number">83</span>, <span class="hljs-number">87</span>]<br>    ],<br>    index = [<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, ],<br>    columns = [<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;数学&#x27;</span>, <span class="hljs-string">&#x27;英语&#x27;</span>, <span class="hljs-string">&#x27;化学&#x27;</span>],<br>    dtype = <span class="hljs-built_in">float</span><br>)<br>dataFrame[<span class="hljs-string">&#x27;生物&#x27;</span>] = [<span class="hljs-number">96</span>, <span class="hljs-number">86</span>, <span class="hljs-number">88</span>]<br><span class="hljs-built_in">print</span>(dataFrame)<br>dataFrame.drop(<span class="hljs-string">&#x27;化学&#x27;</span>, axis = <span class="hljs-number">1</span>, inplace = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(dataFrame)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">      语文    数学    英语    化学  生物<br>小明  <span class="hljs-number">60.0</span>  <span class="hljs-number">78.0</span>  <span class="hljs-number">92.0</span>  <span class="hljs-number">85.0</span>  <span class="hljs-number">96</span><br>小红  <span class="hljs-number">70.0</span>  <span class="hljs-number">68.0</span>  <span class="hljs-number">95.0</span>  <span class="hljs-number">76.0</span>  <span class="hljs-number">86</span><br>小强  <span class="hljs-number">88.0</span>  <span class="hljs-number">98.0</span>  <span class="hljs-number">83.0</span>  <span class="hljs-number">87.0</span>  <span class="hljs-number">88</span><br>      语文    数学    英语  生物<br>小明  <span class="hljs-number">60.0</span>  <span class="hljs-number">78.0</span>  <span class="hljs-number">92.0</span>  <span class="hljs-number">96</span><br>小红  <span class="hljs-number">70.0</span>  <span class="hljs-number">68.0</span>  <span class="hljs-number">95.0</span>  <span class="hljs-number">86</span><br>小强  <span class="hljs-number">88.0</span>  <span class="hljs-number">98.0</span>  <span class="hljs-number">83.0</span>  <span class="hljs-number">88</span><br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>选择列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br>dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-number">60</span>, <span class="hljs-number">78</span>, <span class="hljs-number">92</span>, <span class="hljs-number">85</span>],<br>        [<span class="hljs-number">70</span>, <span class="hljs-number">68</span>, <span class="hljs-number">95</span>, <span class="hljs-number">76</span>],<br>        [<span class="hljs-number">88</span>, <span class="hljs-number">98</span>, <span class="hljs-number">83</span>, <span class="hljs-number">87</span>]<br>    ],<br>    index=[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, ],<br>    columns=[<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;数学&#x27;</span>, <span class="hljs-string">&#x27;英语&#x27;</span>, <span class="hljs-string">&#x27;化学&#x27;</span>],<br>    dtype=<span class="hljs-built_in">float</span><br>)<br><span class="hljs-built_in">print</span>(dataFrame[<span class="hljs-string">&#x27;语文&#x27;</span>])<br><span class="hljs-built_in">print</span>(dataFrame[[<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;化学&#x27;</span>]])<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">小明    <span class="hljs-number">60.0</span><br>小红    <span class="hljs-number">70.0</span><br>小强    <span class="hljs-number">88.0</span><br>Name: 语文, dtype: float64<br>      语文    化学<br>小明  <span class="hljs-number">60.0</span>  <span class="hljs-number">85.0</span><br>小红  <span class="hljs-number">70.0</span>  <span class="hljs-number">76.0</span><br>小强  <span class="hljs-number">88.0</span>  <span class="hljs-number">87.0</span><br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>修改列</li></ol><p>全部修改为同一个值</p><p>指定修改的列的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br>dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-number">60</span>, <span class="hljs-number">78</span>, <span class="hljs-number">92</span>, <span class="hljs-number">85</span>],<br>        [<span class="hljs-number">70</span>, <span class="hljs-number">68</span>, <span class="hljs-number">95</span>, <span class="hljs-number">76</span>],<br>        [<span class="hljs-number">88</span>, <span class="hljs-number">98</span>, <span class="hljs-number">83</span>, <span class="hljs-number">87</span>]<br>    ],<br>    index=[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, ],<br>    columns=[<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;数学&#x27;</span>, <span class="hljs-string">&#x27;英语&#x27;</span>, <span class="hljs-string">&#x27;化学&#x27;</span>],<br>    dtype=<span class="hljs-built_in">float</span><br>)<br>dataFrame[<span class="hljs-string">&#x27;语文&#x27;</span>] = <span class="hljs-number">1</span><br>dataFrame[<span class="hljs-string">&#x27;化学&#x27;</span>] = [<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100.0</span>]<br><span class="hljs-built_in">print</span>(dataFrame)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">    语文    数学    英语     化学<br>小明   <span class="hljs-number">1</span>  <span class="hljs-number">78.0</span>  <span class="hljs-number">92.0</span>  <span class="hljs-number">100.0</span><br>小红   <span class="hljs-number">1</span>  <span class="hljs-number">68.0</span>  <span class="hljs-number">95.0</span>  <span class="hljs-number">100.0</span><br>小强   <span class="hljs-number">1</span>  <span class="hljs-number">98.0</span>  <span class="hljs-number">83.0</span>  <span class="hljs-number">100.0</span><br></code></pre></td></tr></table></figure><h4 id="dataframe索引">2.2.5 DataFrame索引</h4><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td><code>iloc[ , ]</code></td><td>对数据操作，允许整数，整数的列表，切片，布尔数组</td></tr><tr><td><code>loc[ , ]</code></td><td>对数据操作，允许标签和布尔</td></tr><tr><td><code>isin(数据列表)</code></td><td>处于数据列表</td></tr></tbody></table><ol type="1"><li><strong>数字索引</strong></li></ol><p>dataFrame[行索引, 列索引]</p><p>取出数据中 3×3的零</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-number">60</span>, <span class="hljs-number">78</span>, <span class="hljs-number">92</span>, <span class="hljs-number">85</span>],<br>        [<span class="hljs-number">70</span>, <span class="hljs-number">68</span>, <span class="hljs-number">95</span>, <span class="hljs-number">76</span>],<br>        [<span class="hljs-number">88</span>, <span class="hljs-number">98</span>, <span class="hljs-number">83</span>, <span class="hljs-number">87</span>],<br>        [<span class="hljs-number">60</span>, <span class="hljs-number">78</span>, <span class="hljs-number">92</span>, <span class="hljs-number">85</span>],<br>        [<span class="hljs-number">70</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>        [<span class="hljs-number">88</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>        [<span class="hljs-number">60</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>        [<span class="hljs-number">70</span>, <span class="hljs-number">68</span>, <span class="hljs-number">95</span>, <span class="hljs-number">76</span>],<br>        [<span class="hljs-number">88</span>, <span class="hljs-number">98</span>, <span class="hljs-number">83</span>, <span class="hljs-number">87</span>]<br>    ],<br>    dtype = <span class="hljs-built_in">float</span>,<br>    columns = [<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;数学&#x27;</span>, <span class="hljs-string">&#x27;英语&#x27;</span>, <span class="hljs-string">&#x27;化学&#x27;</span>]<br>)<br>a = dataFrame.iloc[<span class="hljs-number">4</span>:<span class="hljs-number">7</span>, <span class="hljs-number">1</span>:]<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">    数学   英语   化学<br><span class="hljs-number">4</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span><br><span class="hljs-number">5</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span><br><span class="hljs-number">6</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span><br></code></pre></td></tr></table></figure><p>取出数据中 2 × 2的零</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-number">60</span>, <span class="hljs-number">78</span>, <span class="hljs-number">92</span>, <span class="hljs-number">85</span>],<br>        [<span class="hljs-number">70</span>, <span class="hljs-number">68</span>, <span class="hljs-number">95</span>, <span class="hljs-number">76</span>],<br>        [<span class="hljs-number">88</span>, <span class="hljs-number">98</span>, <span class="hljs-number">83</span>, <span class="hljs-number">87</span>],<br>        [<span class="hljs-number">60</span>, <span class="hljs-number">78</span>, <span class="hljs-number">92</span>, <span class="hljs-number">85</span>],<br>        [<span class="hljs-number">70</span>, <span class="hljs-number">0</span>, <span class="hljs-number">92</span>, <span class="hljs-number">0</span>],<br>        [<span class="hljs-number">60</span>, <span class="hljs-number">78</span>, <span class="hljs-number">92</span>, <span class="hljs-number">85</span>],<br>        [<span class="hljs-number">60</span>, <span class="hljs-number">0</span>, <span class="hljs-number">92</span>, <span class="hljs-number">0</span>],<br>        [<span class="hljs-number">70</span>, <span class="hljs-number">68</span>, <span class="hljs-number">95</span>, <span class="hljs-number">76</span>],<br>        [<span class="hljs-number">88</span>, <span class="hljs-number">98</span>, <span class="hljs-number">83</span>, <span class="hljs-number">87</span>]<br>    ],<br>    dtype = <span class="hljs-built_in">float</span>,<br>    columns = [<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;数学&#x27;</span>, <span class="hljs-string">&#x27;英语&#x27;</span>, <span class="hljs-string">&#x27;化学&#x27;</span>]<br>)<br>a = dataFrame.iloc[<span class="hljs-number">4</span>:<span class="hljs-number">7</span>:<span class="hljs-number">2</span>, <span class="hljs-number">1</span>:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><strong>布尔索引</strong></li></ol><p>dataFrame[行索引, 列索引]</p><p>行索引和列索引可以是布尔数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-string">&#x27;一级&#x27;</span>, <span class="hljs-string">&#x27;读书&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">176</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-number">178</span>],<br>        [<span class="hljs-string">&#x27;三级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">185</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">182</span>],<br>    ],<br>    columns = [<span class="hljs-string">&#x27;等级&#x27;</span>, <span class="hljs-string">&#x27;爱好&#x27;</span>, <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-string">&#x27;身高&#x27;</span>]<br>)<br>b = [<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>]<br>a = dataFrame.iloc[b, :]<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">   等级  爱好  年龄   身高<br><span class="hljs-number">0</span>  一级  读书  <span class="hljs-number">21</span>  <span class="hljs-number">176</span><br><span class="hljs-number">3</span>  二级  游泳  <span class="hljs-number">19</span>  <span class="hljs-number">182</span><br></code></pre></td></tr></table></figure><p>iloc()函数参数允许:</p><ul><li><p>整数</p></li><li><p>整数的列表</p></li><li><p>切片</p></li><li><p>布尔数组</p></li></ul><ol start="3" type="1"><li><strong>标签索引</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-string">&#x27;一级&#x27;</span>, <span class="hljs-string">&#x27;读书&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">176</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-number">178</span>],<br>        [<span class="hljs-string">&#x27;三级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">185</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">182</span>],<br>    ],<br>    columns=[<span class="hljs-string">&#x27;等级&#x27;</span>, <span class="hljs-string">&#x27;爱好&#x27;</span>, <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-string">&#x27;身高&#x27;</span>]<br>)<br><span class="hljs-comment"># 找出等级为一的全部数据</span><br>b = (dataFrame[<span class="hljs-string">&#x27;等级&#x27;</span>] == <span class="hljs-string">&#x27;一级&#x27;</span>) &amp; (dataFrame[<span class="hljs-string">&#x27;年龄&#x27;</span>] == <span class="hljs-number">21</span>)<br>r = dataFrame.loc[b, :]<br><span class="hljs-built_in">print</span>(r)<br>r = dataFrame.loc[:, [<span class="hljs-string">&#x27;年龄&#x27;</span>]]<br><span class="hljs-built_in">print</span>(r)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">   等级  爱好  年龄   身高<br><span class="hljs-number">0</span>  一级  读书  <span class="hljs-number">21</span>  <span class="hljs-number">176</span><br>   年龄<br><span class="hljs-number">0</span>  <span class="hljs-number">21</span><br><span class="hljs-number">1</span>  <span class="hljs-number">22</span><br><span class="hljs-number">2</span>  <span class="hljs-number">21</span><br><span class="hljs-number">3</span>  <span class="hljs-number">19</span><br></code></pre></td></tr></table></figure><p>找出等级在是二和三的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-string">&#x27;一级&#x27;</span>, <span class="hljs-string">&#x27;读书&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">176</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-number">178</span>],<br>        [<span class="hljs-string">&#x27;三级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">185</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">182</span>],<br>    ],<br>    columns=[<span class="hljs-string">&#x27;等级&#x27;</span>, <span class="hljs-string">&#x27;爱好&#x27;</span>, <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-string">&#x27;身高&#x27;</span>]<br>)<br>b = dataFrame[<span class="hljs-string">&#x27;等级&#x27;</span>].isin([<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;三级&#x27;</span>])<br>r = dataFrame.loc[b, :]<br><span class="hljs-built_in">print</span>(r)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">   等级  爱好  年龄   身高<br><span class="hljs-number">1</span>  二级  游泳  <span class="hljs-number">22</span>  <span class="hljs-number">178</span><br><span class="hljs-number">2</span>  三级  游泳  <span class="hljs-number">21</span>  <span class="hljs-number">185</span><br><span class="hljs-number">3</span>  二级  游泳  <span class="hljs-number">19</span>  <span class="hljs-number">182</span><br></code></pre></td></tr></table></figure><h4 id="dataframe操作">2.2.6 DataFrame操作</h4><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><code>concat(dataFrame列表)</code></td><td>将这些dataFrame的数据纵向叠加</td></tr><tr><td><code>merge()(left = 左表, right = 右表, left_index, right_index, how = 连接方式)</code></td><td>按照指定连接方式将两个表合并</td></tr><tr><td><code>.dropna(subset = 列名列表)</code></td><td>只要一行中任意一个字段为空，就会被删除</td></tr><tr><td><code>.isnull()</code></td><td>返回布尔DataFrame对象</td></tr><tr><td><code>.fillna(值)</code></td><td>用值填充空填</td></tr><tr><td><code>dropduplicates(subset = 列名列表, keep = 'first' 或 'last')</code></td><td>删除完全重复行，可指定某字段重复时删除，默认保留第一个，后面重复的会删掉</td></tr><tr><td><code>.sort_value(by = 列名, ascending = 是否升降)</code></td><td>对指定列排序</td></tr><tr><td><code>.groupby('列名')</code></td><td>对指定列分组，就是把该列值一样的分成一组</td></tr><tr><td><code>cut(x = 切分数据, bins = 切分方式, right = 是否包含右区间, labels = 分割后每段的名字列表)</code></td><td>对一个数组进行分段</td></tr></tbody></table><ol type="1"><li><strong>纵向合并</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame1 = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-string">&#x27;一级&#x27;</span>, <span class="hljs-string">&#x27;读书&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">176</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-number">178</span>],<br>        [<span class="hljs-string">&#x27;三级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">185</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">182</span>],<br>    ],<br>    columns=[<span class="hljs-string">&#x27;等级&#x27;</span>, <span class="hljs-string">&#x27;爱好&#x27;</span>, <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-string">&#x27;身高&#x27;</span>],<br>    index = [<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, <span class="hljs-string">&#x27;小于&#x27;</span>]<br>)<br>r = pandas.concat([dataFrame1, dataFrame1])<br><span class="hljs-built_in">print</span>(r)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">    等级  爱好  年龄   身高<br>小明  一级  读书  <span class="hljs-number">21</span>  <span class="hljs-number">176</span><br>小红  二级  游泳  <span class="hljs-number">22</span>  <span class="hljs-number">178</span><br>小强  三级  游泳  <span class="hljs-number">21</span>  <span class="hljs-number">185</span><br>小于  二级  游泳  <span class="hljs-number">19</span>  <span class="hljs-number">182</span><br>小明  一级  读书  <span class="hljs-number">21</span>  <span class="hljs-number">176</span><br>小红  二级  游泳  <span class="hljs-number">22</span>  <span class="hljs-number">178</span><br>小强  三级  游泳  <span class="hljs-number">21</span>  <span class="hljs-number">185</span><br>小于  二级  游泳  <span class="hljs-number">19</span>  <span class="hljs-number">182</span><br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><strong>横向合并</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame1 = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-string">&#x27;一级&#x27;</span>, <span class="hljs-string">&#x27;读书&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">176</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-number">178</span>],<br>        [<span class="hljs-string">&#x27;三级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">185</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">182</span>],<br>    ],<br>    columns=[<span class="hljs-string">&#x27;等级&#x27;</span>, <span class="hljs-string">&#x27;爱好&#x27;</span>, <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-string">&#x27;身高&#x27;</span>],<br>    index=[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, <span class="hljs-string">&#x27;小于&#x27;</span>]<br>)<br><span class="hljs-built_in">print</span>(dataFrame1)<br>dataFrame2 = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-string">&#x27;学士&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>],<br>        [<span class="hljs-string">&#x27;学士&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>],<br>        [<span class="hljs-string">&#x27;博士&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>],<br>        [<span class="hljs-string">&#x27;院士&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>],<br>    ],<br>    columns=[<span class="hljs-string">&#x27;学位&#x27;</span>, <span class="hljs-string">&#x27;血型&#x27;</span>],<br>    index=[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, <span class="hljs-string">&#x27;小于&#x27;</span>]<br>)<br><span class="hljs-built_in">print</span>(dataFrame2)<br>r = pandas.merge(<br>    left=dataFrame1,<br>    right=dataFrame2,<br>    left_index=<span class="hljs-literal">True</span>,<br>    right_index=<span class="hljs-literal">True</span>,<br>    how=<span class="hljs-string">&#x27;inner&#x27;</span><br>)<br><span class="hljs-built_in">print</span>(r)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">    等级  爱好  年龄   身高<br>小明  一级  读书  <span class="hljs-number">21</span>  <span class="hljs-number">176</span><br>小红  二级  游泳  <span class="hljs-number">22</span>  <span class="hljs-number">178</span><br>小强  三级  游泳  <span class="hljs-number">21</span>  <span class="hljs-number">185</span><br>小于  二级  游泳  <span class="hljs-number">19</span>  <span class="hljs-number">182</span><br>小明  一级  读书  <span class="hljs-number">21</span>  <span class="hljs-number">176</span><br>小红  二级  游泳  <span class="hljs-number">22</span>  <span class="hljs-number">178</span><br>小强  三级  游泳  <span class="hljs-number">21</span>  <span class="hljs-number">185</span><br>小于  二级  游泳  <span class="hljs-number">19</span>  <span class="hljs-number">182</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>left</code></td><td>左表名</td></tr><tr><td><code>right</code></td><td>右表名</td></tr><tr><td><code>left_index</code></td><td>左表按照索引连接</td></tr><tr><td><code>right_index</code></td><td>右表按照索引连接</td></tr><tr><td><code>how</code></td><td>连接方式, inner, left, right, outer</td></tr></tbody></table><p>左连接左表数据不改变, 连接时没有的字段为空</p><p>右连接右表数据不改变, 连接时没有的字段为空</p><p>外连接是两个表的数据都不变, 没有的字段为空</p><ol start="3" type="1"><li><strong>空值处理</strong></li></ol><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><code>.dropna(subset = 列名列表)</code></td><td>只要一行中任意一个字段为空，就会被删除</td></tr><tr><td><code>.isnull()</code></td><td>返回布尔DataFrame对象</td></tr></tbody></table><ol type="1"><li>判断空值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-string">&#x27;一级&#x27;</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">21</span>, <span class="hljs-number">176</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">178</span>],<br>        [<span class="hljs-string">&#x27;三级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">185</span>],<br>        [<span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-literal">None</span>],<br>    ],<br>    columns=[<span class="hljs-string">&#x27;等级&#x27;</span>, <span class="hljs-string">&#x27;爱好&#x27;</span>, <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-string">&#x27;身高&#x27;</span>],<br>    index=[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, <span class="hljs-string">&#x27;小于&#x27;</span>]<br>)<br><span class="hljs-built_in">print</span>(dataFrame)<br><span class="hljs-built_in">print</span>(dataFrame.isnull())<br><span class="hljs-built_in">print</span>(dataFrame[<span class="hljs-string">&#x27;等级&#x27;</span>].isnull())<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">      等级    爱好    年龄     身高<br>小明    一级  <span class="hljs-literal">None</span>  <span class="hljs-number">21.0</span>  <span class="hljs-number">176.0</span><br>小红    二级    游泳   NaN  <span class="hljs-number">178.0</span><br>小强    三级    游泳  <span class="hljs-number">21.0</span>  <span class="hljs-number">185.0</span><br>小于  <span class="hljs-literal">None</span>    游泳  <span class="hljs-number">19.0</span>    NaN<br>       等级     爱好     年龄     身高<br>小明  <span class="hljs-literal">False</span>   <span class="hljs-literal">True</span>  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span><br>小红  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>   <span class="hljs-literal">True</span>  <span class="hljs-literal">False</span><br>小强  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span><br>小于   <span class="hljs-literal">True</span>  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>   <span class="hljs-literal">True</span><br>小明    <span class="hljs-literal">False</span><br>小红    <span class="hljs-literal">False</span><br>小强    <span class="hljs-literal">False</span><br>小于     <span class="hljs-literal">True</span><br>Name: 等级, dtype: <span class="hljs-built_in">bool</span><br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>计算空值个数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-string">&#x27;一级&#x27;</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">21</span>, <span class="hljs-number">176</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">178</span>],<br>        [<span class="hljs-string">&#x27;三级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">185</span>],<br>        [<span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-literal">None</span>],<br>    ],<br>    columns=[<span class="hljs-string">&#x27;等级&#x27;</span>, <span class="hljs-string">&#x27;爱好&#x27;</span>, <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-string">&#x27;身高&#x27;</span>],<br>    index=[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, <span class="hljs-string">&#x27;小于&#x27;</span>]<br>)<br><span class="hljs-built_in">print</span>(dataFrame)<br><span class="hljs-built_in">print</span>(dataFrame.isnull().<span class="hljs-built_in">sum</span>())<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">      等级    爱好    年龄     身高<br>小明    一级  <span class="hljs-literal">None</span>  <span class="hljs-number">21.0</span>  <span class="hljs-number">176.0</span><br>小红    二级    游泳   NaN  <span class="hljs-number">178.0</span><br>小强    三级    游泳  <span class="hljs-number">21.0</span>  <span class="hljs-number">185.0</span><br>小于  <span class="hljs-literal">None</span>    游泳  <span class="hljs-number">19.0</span>    NaN<br>等级    <span class="hljs-number">1</span><br>爱好    <span class="hljs-number">1</span><br>年龄    <span class="hljs-number">1</span><br>身高    <span class="hljs-number">1</span><br>dtype: int64<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>删除空值</li></ol><p>dropna()函数, 只要一行中任意一个字段为空，就会被删除</p><p>dropna(subset = [‘列名’]), 指定当某列出现空值才删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-string">&#x27;一级&#x27;</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">21</span>, <span class="hljs-number">176</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">178</span>],<br>        [<span class="hljs-string">&#x27;三级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">185</span>],<br>        [<span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-literal">None</span>],<br>    ],<br>    columns=[<span class="hljs-string">&#x27;等级&#x27;</span>, <span class="hljs-string">&#x27;爱好&#x27;</span>, <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-string">&#x27;身高&#x27;</span>],<br>    index=[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, <span class="hljs-string">&#x27;小于&#x27;</span>]<br>)<br><span class="hljs-built_in">print</span>(dataFrame)<br><span class="hljs-built_in">print</span>(dataFrame.dropna())<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">      等级    爱好    年龄     身高<br>小明    一级  <span class="hljs-literal">None</span>  <span class="hljs-number">21.0</span>  <span class="hljs-number">176.0</span><br>小红    二级    游泳   NaN  <span class="hljs-number">178.0</span><br>小强    三级    游泳  <span class="hljs-number">21.0</span>  <span class="hljs-number">185.0</span><br>小于  <span class="hljs-literal">None</span>    游泳  <span class="hljs-number">19.0</span>    NaN<br>    等级  爱好    年龄     身高<br>小强  三级  游泳  <span class="hljs-number">21.0</span>  <span class="hljs-number">185.0</span><br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>填充空值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-string">&#x27;一级&#x27;</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">21</span>, <span class="hljs-number">176</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">178</span>],<br>        [<span class="hljs-string">&#x27;三级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">185</span>],<br>        [<span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-literal">None</span>],<br>    ],<br>    columns=[<span class="hljs-string">&#x27;等级&#x27;</span>, <span class="hljs-string">&#x27;爱好&#x27;</span>, <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-string">&#x27;身高&#x27;</span>],<br>    index=[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, <span class="hljs-string">&#x27;小于&#x27;</span>]<br>)<br><span class="hljs-built_in">print</span>(dataFrame)<br>dataFrame[<span class="hljs-string">&#x27;年龄&#x27;</span>] = dataFrame[<span class="hljs-string">&#x27;年龄&#x27;</span>].fillna(<span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(dataFrame)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">小明    一级  <span class="hljs-literal">None</span>  <span class="hljs-number">21.0</span>  <span class="hljs-number">176.0</span><br>小红    二级    游泳   NaN  <span class="hljs-number">178.0</span><br>小强    三级    游泳  <span class="hljs-number">21.0</span>  <span class="hljs-number">185.0</span><br>小于  <span class="hljs-literal">None</span>    游泳  <span class="hljs-number">19.0</span>    NaN<br>      等级    爱好    年龄     身高<br>小明    一级  <span class="hljs-literal">None</span>  <span class="hljs-number">21.0</span>  <span class="hljs-number">176.0</span><br>小红    二级    游泳  <span class="hljs-number">20.0</span>  <span class="hljs-number">178.0</span><br>小强    三级    游泳  <span class="hljs-number">21.0</span>  <span class="hljs-number">185.0</span><br>小于  <span class="hljs-literal">None</span>    游泳  <span class="hljs-number">19.0</span>    NaN<br></code></pre></td></tr></table></figure><ol start="4" type="1"><li><strong>去重</strong></li></ol><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><code>.dropduplicates(subset = 列名列表, keep = 'first' 或 'last')</code></td><td>删除完全重复行, 可指定某字段重复时删除, 默认保留第一个,后面重复的会删掉</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-string">&#x27;一级&#x27;</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">21</span>, <span class="hljs-number">176</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">178</span>],<br>        [<span class="hljs-string">&#x27;三级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">185</span>],<br>        [<span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-literal">None</span>],<br>    ],<br>    columns=[<span class="hljs-string">&#x27;等级&#x27;</span>, <span class="hljs-string">&#x27;爱好&#x27;</span>, <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-string">&#x27;身高&#x27;</span>],<br>    index=[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, <span class="hljs-string">&#x27;小于&#x27;</span>]<br>)<br><span class="hljs-built_in">print</span>(dataFrame)<br><span class="hljs-built_in">print</span>(dataFrame.drop_duplicates(subset = [<span class="hljs-string">&#x27;爱好&#x27;</span>], keep = <span class="hljs-string">&#x27;first&#x27;</span>))<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">      等级    爱好    年龄     身高<br>小明    一级  <span class="hljs-literal">None</span>  <span class="hljs-number">21.0</span>  <span class="hljs-number">176.0</span><br>小红    二级    游泳   NaN  <span class="hljs-number">178.0</span><br>小强    三级    游泳  <span class="hljs-number">21.0</span>  <span class="hljs-number">185.0</span><br>小于  <span class="hljs-literal">None</span>    游泳  <span class="hljs-number">19.0</span>    NaN<br>    等级    爱好    年龄     身高<br>小明  一级  <span class="hljs-literal">None</span>  <span class="hljs-number">21.0</span>  <span class="hljs-number">176.0</span><br>小红  二级    游泳   NaN  <span class="hljs-number">178.0</span><br></code></pre></td></tr></table></figure><ol start="5" type="1"><li><strong>排序</strong></li></ol><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><code>.sort_values(by = 列名, ascending = 是否升序)</code></td><td>对某列排序</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-string">&#x27;一级&#x27;</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">21</span>, <span class="hljs-number">176</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">178</span>],<br>        [<span class="hljs-string">&#x27;三级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">185</span>],<br>        [<span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-literal">None</span>],<br>    ],<br>    columns=[<span class="hljs-string">&#x27;等级&#x27;</span>, <span class="hljs-string">&#x27;爱好&#x27;</span>, <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-string">&#x27;身高&#x27;</span>],<br>    index=[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, <span class="hljs-string">&#x27;小于&#x27;</span>]<br>)<br><span class="hljs-built_in">print</span>(dataFrame)<br>dataFrame = dataFrame.sort_values(by = <span class="hljs-string">&#x27;等级&#x27;</span>, ascending = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(dataFrame)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">      等级    爱好    年龄     身高<br>小明    一级  <span class="hljs-literal">None</span>  <span class="hljs-number">21.0</span>  <span class="hljs-number">176.0</span><br>小红    二级    游泳   NaN  <span class="hljs-number">178.0</span><br>小强    三级    游泳  <span class="hljs-number">21.0</span>  <span class="hljs-number">185.0</span><br>小于  <span class="hljs-literal">None</span>    游泳  <span class="hljs-number">19.0</span>    NaN<br>      等级    爱好    年龄     身高<br>小明    一级  <span class="hljs-literal">None</span>  <span class="hljs-number">21.0</span>  <span class="hljs-number">176.0</span><br>小强    三级    游泳  <span class="hljs-number">21.0</span>  <span class="hljs-number">185.0</span><br>小红    二级    游泳   NaN  <span class="hljs-number">178.0</span><br>小于  <span class="hljs-literal">None</span>    游泳  <span class="hljs-number">19.0</span>    NaN<br></code></pre></td></tr></table></figure><ol start="6" type="1"><li><strong>分组</strong></li></ol><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><code>.groupby('列名')</code></td><td>对指定列分组, 就是把该列值一样的分成一组</td></tr></tbody></table><table><thead><tr><th>计算值函数</th><th>作用</th></tr></thead><tbody><tr><td><code>sum()</code></td><td>组内求和</td></tr><tr><td><code>max()</code></td><td>组内求最大值</td></tr><tr><td><code>min()</code></td><td>组内求最小值</td></tr><tr><td><code>std()</code></td><td>组内求标准差</td></tr><tr><td><code>mean()</code></td><td>组内求平均数</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-string">&#x27;一级&#x27;</span>, <span class="hljs-string">&#x27;读书&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">176</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">178</span>],<br>        [<span class="hljs-string">&#x27;三级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">185</span>],<br>        [<span class="hljs-string">&#x27;四级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">177</span>],<br>    ],<br>    columns=[<span class="hljs-string">&#x27;等级&#x27;</span>, <span class="hljs-string">&#x27;爱好&#x27;</span>, <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-string">&#x27;身高&#x27;</span>],<br>    index=[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, <span class="hljs-string">&#x27;小于&#x27;</span>]<br>)<br><span class="hljs-built_in">print</span>(dataFrame)<br>groupData = dataFrame.groupby(<span class="hljs-string">&#x27;年龄&#x27;</span>)<br><span class="hljs-built_in">print</span>(groupData)<br><span class="hljs-built_in">print</span>(groupData.<span class="hljs-built_in">sum</span>())<br><span class="hljs-built_in">print</span>(groupData.<span class="hljs-built_in">max</span>())<br><span class="hljs-built_in">print</span>(groupData.<span class="hljs-built_in">min</span>())<br><span class="hljs-built_in">print</span>(groupData.std())<br><span class="hljs-built_in">print</span>(groupData.mean())<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">    等级  爱好  年龄   身高<br>小明  一级  读书  <span class="hljs-number">21</span>  <span class="hljs-number">176</span><br>小红  二级  游泳  <span class="hljs-number">20</span>  <span class="hljs-number">178</span><br>小强  三级  游泳  <span class="hljs-number">21</span>  <span class="hljs-number">185</span><br>小于  四级  游泳  <span class="hljs-number">19</span>  <span class="hljs-number">177</span><br>&lt;pandas.core.groupby.generic.DataFrameGroupBy <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001E4FB3E4730</span>&gt;<br>     身高<br>年龄     <br><span class="hljs-number">19</span>  <span class="hljs-number">177</span><br><span class="hljs-number">20</span>  <span class="hljs-number">178</span><br><span class="hljs-number">21</span>  <span class="hljs-number">361</span><br>    等级  爱好   身高<br>年龄             <br><span class="hljs-number">19</span>  四级  游泳  <span class="hljs-number">177</span><br><span class="hljs-number">20</span>  二级  游泳  <span class="hljs-number">178</span><br><span class="hljs-number">21</span>  三级  读书  <span class="hljs-number">185</span><br>    等级  爱好   身高<br>年龄             <br><span class="hljs-number">19</span>  四级  游泳  <span class="hljs-number">177</span><br><span class="hljs-number">20</span>  二级  游泳  <span class="hljs-number">178</span><br><span class="hljs-number">21</span>  一级  游泳  <span class="hljs-number">176</span><br>          身高<br>年龄          <br><span class="hljs-number">19</span>       NaN<br><span class="hljs-number">20</span>       NaN<br><span class="hljs-number">21</span>  <span class="hljs-number">6.363961</span><br>       身高<br>年龄       <br><span class="hljs-number">19</span>  <span class="hljs-number">177.0</span><br><span class="hljs-number">20</span>  <span class="hljs-number">178.0</span><br><span class="hljs-number">21</span>  <span class="hljs-number">180.5</span><br></code></pre></td></tr></table></figure><p>可以指定分组后的数据的列进行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-string">&#x27;一级&#x27;</span>, <span class="hljs-string">&#x27;读书&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">176</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">178</span>],<br>        [<span class="hljs-string">&#x27;三级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">185</span>],<br>        [<span class="hljs-string">&#x27;四级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">177</span>],<br>        [<span class="hljs-string">&#x27;四级&#x27;</span>, <span class="hljs-string">&#x27;读书&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">165</span>],<br>        [<span class="hljs-string">&#x27;四级&#x27;</span>, <span class="hljs-string">&#x27;读书&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">190</span>],<br>    ],<br>    columns=[<span class="hljs-string">&#x27;等级&#x27;</span>, <span class="hljs-string">&#x27;爱好&#x27;</span>, <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-string">&#x27;身高&#x27;</span>],<br>    index=[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, <span class="hljs-string">&#x27;小于&#x27;</span>, <span class="hljs-string">&#x27;小兰&#x27;</span>, <span class="hljs-string">&#x27;小智&#x27;</span>]<br>)<br><span class="hljs-built_in">print</span>(dataFrame)<br>groupData = dataFrame.groupby(<span class="hljs-string">&#x27;年龄&#x27;</span>)<br>groupData = groupData[<span class="hljs-string">&#x27;身高&#x27;</span>]<br><span class="hljs-built_in">print</span>(groupData.<span class="hljs-built_in">sum</span>())<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">    等级  爱好  年龄   身高<br>小明  一级  读书  <span class="hljs-number">21</span>  <span class="hljs-number">176</span><br>小红  二级  游泳  <span class="hljs-number">20</span>  <span class="hljs-number">178</span><br>小强  三级  游泳  <span class="hljs-number">21</span>  <span class="hljs-number">185</span><br>小于  四级  游泳  <span class="hljs-number">19</span>  <span class="hljs-number">177</span><br>小兰  四级  读书  <span class="hljs-number">19</span>  <span class="hljs-number">165</span><br>小智  四级  读书  <span class="hljs-number">19</span>  <span class="hljs-number">190</span><br>年龄<br><span class="hljs-number">19</span>    <span class="hljs-number">532</span><br><span class="hljs-number">20</span>    <span class="hljs-number">178</span><br><span class="hljs-number">21</span>    <span class="hljs-number">361</span><br>Name: 身高, dtype: int64<br></code></pre></td></tr></table></figure><ol start="7" type="1"><li><strong>分段</strong></li></ol><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><code>cut(x = 切分数据, bins = 切分方式, right = 是否包含右区间, labels = 分割后每段的名字列表)</code></td><td>对一个数组进行分段</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas<br><br>dataFrame = pandas.DataFrame(<br>    data=[<br>        [<span class="hljs-string">&#x27;一级&#x27;</span>, <span class="hljs-string">&#x27;读书&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">176</span>],<br>        [<span class="hljs-string">&#x27;二级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">178</span>],<br>        [<span class="hljs-string">&#x27;三级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">185</span>],<br>        [<span class="hljs-string">&#x27;四级&#x27;</span>, <span class="hljs-string">&#x27;游泳&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">177</span>],<br>        [<span class="hljs-string">&#x27;四级&#x27;</span>, <span class="hljs-string">&#x27;读书&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">165</span>],<br>        [<span class="hljs-string">&#x27;四级&#x27;</span>, <span class="hljs-string">&#x27;读书&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">190</span>],<br>    ],<br>    columns=[<span class="hljs-string">&#x27;等级&#x27;</span>, <span class="hljs-string">&#x27;爱好&#x27;</span>, <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-string">&#x27;身高&#x27;</span>],<br>    index=[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小强&#x27;</span>, <span class="hljs-string">&#x27;小于&#x27;</span>, <span class="hljs-string">&#x27;小兰&#x27;</span>, <span class="hljs-string">&#x27;小智&#x27;</span>]<br>)<br>r = pandas.cut(x = dataFrame[<span class="hljs-string">&#x27;身高&#x27;</span>], bins = [<span class="hljs-number">160</span>, <span class="hljs-number">170</span>, <span class="hljs-number">180</span>, <span class="hljs-number">190</span>, <span class="hljs-number">200</span>], right = <span class="hljs-literal">False</span>, labels = [<span class="hljs-string">&#x27;中等身高&#x27;</span>, <span class="hljs-string">&#x27;身高较高&#x27;</span>, <span class="hljs-string">&#x27;身高很高&#x27;</span>, <span class="hljs-string">&#x27;身高太高&#x27;</span>])<br><span class="hljs-built_in">print</span>(r, end = <span class="hljs-string">&#x27;\n&#x27;</span>)<br>r = pandas.cut(x=dataFrame[<span class="hljs-string">&#x27;身高&#x27;</span>], bins = <span class="hljs-number">4</span>, right=<span class="hljs-literal">False</span>, labels=[<span class="hljs-string">&#x27;中等身高&#x27;</span>, <span class="hljs-string">&#x27;身高较高&#x27;</span>, <span class="hljs-string">&#x27;身高很高&#x27;</span>, <span class="hljs-string">&#x27;身高太高&#x27;</span>])<br><span class="hljs-built_in">print</span>(r)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">小明    身高较高<br>小红    身高较高<br>小强    身高很高<br>小于    身高较高<br>小兰    中等身高<br>小智    身高太高<br>Name: 身高, dtype: category<br>Categories (<span class="hljs-number">4</span>, <span class="hljs-built_in">object</span>): [<span class="hljs-string">&#x27;中等身高&#x27;</span> &lt; <span class="hljs-string">&#x27;身高较高&#x27;</span> &lt; <span class="hljs-string">&#x27;身高很高&#x27;</span> &lt; <span class="hljs-string">&#x27;身高太高&#x27;</span>]<br>小明    身高较高<br>小红    身高很高<br>小强    身高太高<br>小于    身高较高<br>小兰    中等身高<br>小智    身高太高<br>Name: 身高, dtype: category<br>Categories (<span class="hljs-number">4</span>, <span class="hljs-built_in">object</span>): [<span class="hljs-string">&#x27;中等身高&#x27;</span> &lt; <span class="hljs-string">&#x27;身高较高&#x27;</span> &lt; <span class="hljs-string">&#x27;身高很高&#x27;</span> &lt; <span class="hljs-string">&#x27;身高太高&#x27;</span>]<br></code></pre></td></tr></table></figure><h2 id="回归算法与应用">3. 回归算法与应用</h2><h3 id="回归分析">3.1 回归分析</h3><p><strong>回归分析（regressionanalysis）</strong>是确定两种或两种以上变量间相互依赖定量关系的一种统计分析方法，是应用极其广泛的数据分析方法之一。作为一种预测模型，它基于观测数据建立变量间适当的依赖关系，以分析数据内在规律，并用于预测、控制等问题。</p><p><strong>例1:假设我们想要一个能够预测二手车价格的系统。</strong></p><p>系统输入：品牌、年龄、发动机性能、里程等我们认为会影响车价的属性信息。</p><p>输出：车的价格。</p><p>这种输出为数值的问题是回归问题。</p><p>现假设x表示车的属性，y表示车的价格。我们通过调查以往的交易情况，能够收集训练数据。而机器学习中的线性回归方法能够构造出一个函数来拟合这些数据，从而得到关于x的函数y。如下图所示，其中w和w0为待拟合的参数值，拟合函数具有如下表达式：</p><p>y=wx+w0</p><p><strong>例2：移动机器人的导航。如自动汽车导航。</strong></p><p>输出：每次转动的角度，使得汽车前进而不会撞到障碍物或偏离车道</p><p>输入的数值：由汽车上的传感器（如视频相机、GPS等）提供。训练数据可以通过监视和记录驾驶员的动作收集。</p><p><strong>例3:假设要制造一个焙炒咖啡的机器。</strong></p><p>输入数值为各种温度、时间、咖啡豆种类等配置。针对不同的输入配置进行大量实验，并检测咖啡的品质。</p><p>例如，可根据消费者的满意度测量咖啡的品质。</p><p>为寻求最优配置，我们可以先拟合一个回归模型，并在当前模型的最优样本附近选择一些新的点，来检测咖啡的品质，再将他们加入训练数据，并拟合新的模型。</p><p>预测问题可以划分为回归和分类这两大类，前者的输出为连续值，后者的输出为离散值。由于这两类问题具有不同的特点，需要使用不同的分析方法。本节将对回归问题进行讨论。</p><h3 id="常见数据集">3.2 常见数据集</h3><p>1、波士顿房价数据集</p><p>波士顿房价数据集（BostonHousePriceDataset）包含对房价的预测，以千美元计，给定的条件是房屋及其相邻房屋的详细信息。该数据集是一个回归问题。每个类的观察值数量是均等的，共有506个观察值，13个输入变量和1个输出变量。部分变量名如下：</p><p>CRIM：表示城镇人均犯罪率；</p><p>ZN：表示住宅用地超过25000英寸的比例；</p><p>INDUS：表示城镇中非商业用地的所占比例；</p><p>CHAS：表示查尔斯河虚拟变量，用于回归分析；</p><p>NOX：表示环保指数；</p><p>RM：表示每栋住宅平均房间数；</p><p>AGE：表示1940年以前建成的自住单位的比例；</p><p>DIS：表示距离五个波士顿就业中心的加权距离；</p><p>RAD：表示辐射性公路的接近指数；</p><p>TAX：表示每一万美元的不动产税率。</p><p>2、温室气体观测网络数据集</p><p>该数据集根据天气模型模拟给出的综合观测值和示踪剂的时间序列，来监测加利福尼亚的温室气体（GHG）排放得到。该数据集包含使用化学方法对天气研究和预报模型（WRF-Chem）模拟创建的加利福尼亚州2921个网格单元的温室气体（GHG）浓度的时间序列。</p><p>利用这些数据：</p><p>（1）使用逆方法来确定与合成观测值最匹配的15个示踪剂的加权总和中的权重的最佳值；</p><p>（2）使用优化方法来确定要观测的最佳位置。</p><p>数据集中的每个文件都标记为ghg.gid.siteWXYZ.dat，其中WXYZ是网格单元的位置ID。每个网格单元文件中（GHG浓度以万亿分之一为单位）：</p><p>第1-15行：从区域1-15排放的示踪剂的温室气体浓度第16行：综合观测值的温室气体浓度第1-327列：自2010年5月10日至2010年7月31日，每6个小时的温室气体浓度。</p><p><ahref="http://archive.ics.uci.edu/ml/datasets/Greenhouse+Gas+Observing+Network">数据集下载</a></p><p>3、葡萄酒质量数据集</p><p>包括来自葡萄牙北部的两个与红色和白色vinhoverde葡萄酒样品有关的数据集。目标是根据理化测试对葡萄酒质量进行建模。这两个数据集与葡萄牙“VinhoVerde”葡萄酒的红色和白色变体有关。由于隐私和物流问题，只有理化变量特征是可以进行使用的（例如，数据集中没有关于葡萄品种、葡萄酒品牌、葡萄酒销售价格等的数据）。此数据集可以视为分类或回归任务。本数据集有4898个观察值，11个输入变量和一个输出变量。变量名如下：</p><p>输入变量（基于理化测试）：</p><p>1-固定酸度；2-挥发性酸度；3-柠檬酸；</p><p>4-残留糖；5-氯化物；6-游离二氧化硫；</p><p>7-总二氧化硫；8-密度；9-pH；</p><p>10-硫酸盐；11-醇；</p><p>输出变量（基于感官数据）：</p><p>12-质量（得分在0到10之间）。</p><p><ahref="http://archive.ics.uci.edu/ml/datasets/Wine+Quality">数据集下载</a></p><h3 id="线性回归">3.3 线性回归</h3><p>原理与应用场景</p><p>当两个或多个变量间存在线性相关关系时，常常希望在变量间建立定量关系，相关变量间的定量关系的表达即是线性回归。</p><p>给定由d个属性描述的示例x=(x1,x2,⋯,xd)，其中xi是x在第i个属性上的取值，线性模型就是通过属性的线性组合构造预测的函数，即</p><p><span class="math inline">\(f(x) = w^1 \times x_1+ w^2 \times x^2 +... + w^d \ times x^d + b\)</span></p><p>一般用向量形式写成：</p><p><span class="math inline">\(f(x) = w^Tx + b\)</span></p><p>其中w=(w1,w2,⋯,wd)。得到参数w和b之后，模型就得以确定，即线性回归模型。</p><p>特点：</p><p>形式简单、易于建模，但蕴含着机器学习中一些重要的基本思想，许多功能更为强大的非线性模型可在线性模型的基础上通过引入层级结构或高维映射获得。此外，由于푤直观表达了各属性在预测中的重要性，因此线性模型有很好的解释性。</p>]]></content>
    
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>ai</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/2024/08/06/ComputerNetwork/"/>
    <url>/2024/08/06/ComputerNetwork/</url>
    
    <content type="html"><![CDATA[<h2 id="前言如果让你来设计网络">0. 前言：如果让你来设计网络？</h2><h3 id="物理层">0.1 物理层</h3><p>假如你是一台电脑，你的名字叫<code>A</code>。</p><p>在很久很久以前，你不和任何电脑相连接，孤苦伶仃。</p><p>直到有一天，你希望与另一台电脑<code>B</code>建立联系</p><p>于是你们各开了一个网口，用一根网线连接了起来</p><p>有一天，一个新伙伴<code>C</code>加入了</p><p>但聪明的你们很快发现，可以每个人各开两个网口</p><p>用一共三根网线相连</p><p>随着越来越多电脑的加入，你发现身上开的网口实在太多了</p><p>（实际上根本不能开多网口）</p><p>而且网线密密麻麻，混乱不堪</p><p>于是你们发明了一个中间设备</p><p><img src="/images/image-182.png" /></p><p>你们将网线都插在这个设备上，由这个设备做转发</p><p>就可以彼此之间通信了</p><p>本质上和原来一样，只不过网口的数量和网线的数量减少了</p><p>你给他取名叫</p><p><strong>集线器(hub)</strong></p><p>集线器仅仅是无脑将电信号转发到所有出口，不做任何处理</p><p>你觉得他是没有智商的</p><p>因此把人家定性在了</p><p><strong>物理层</strong></p><p>由于转发到了所有出口</p><p>那和集线器相连的<code>B</code>,<code>C</code>,<code>D</code>，<code>E</code>四台机器怎么知道数据包是不是发送给自己的呢？</p><p>首先，你要给所有连接到集线器的设备都取个名字</p><p>原来你们叫<code>A</code>,<code>B</code>,<code>C</code>,<code>D</code></p><p>但现在需要一个更专业的、全局唯一的名字作为标志</p><p>你把这个更高端的名字称为</p><p><strong>Mac地址</strong></p><p>例如，你的Mac地址是<code>AAA</code></p><p>而你的伙伴的Mac地址是<code>BBB</code></p><p>以此类推，确保每个Mac地址都是独一无二的</p><p>这样，只要<code>A</code>在发送数据包给<code>B</code>时，只要在头部拼接一个这样的结构的数据就可以了：</p><p><img src="/images/屏幕截图%202024-08-19%20185555.png" /></p><p><code>B</code>在收到数据包后</p><p>根据头部的目标Mac地址信息</p><p>判断这个数据包的确是发给自己的</p><p>于是就收下了</p><p>其他的<code>B</code>,<code>C</code>,<code>D</code>,<code>E</code>收到数据包后</p><p>根据头部的目标Mac地址信息</p><p>判断这个数据包并不是发给自己的</p><p>于是便丢弃</p><p>虽然集线器使整个布局干净不少</p><p>但原来我只需要发送给电脑<code>B</code>的消息</p><p>现在却要发送给集线器中所有的电脑</p><p>这样既不安全，也不节省网络资源</p><h3 id="数据链路层">0.2 数据链路层</h3><p>如果把集线器弄得更智能一些</p><p>只发给目标Mac地址指向的那台电脑就好了</p><p>虽然只比集线器多了一点点区别</p><p>但看起来似乎更智能了</p><p>你把这东西叫做</p><p><strong>交换机(Switch)</strong></p><figure><img src="/images/v2-4220b11946b4edcbea586cd9d2bf1509_r.jpg"alt="交换机" /><figcaption aria-hidden="true">交换机</figcaption></figure><p>也正因为这一点点智能，你把他放在了另一个场景</p><p><strong>数据链路层</strong></p><p>交换机内部维护一张Mac地址表</p><p>记录着每一个Mac地址的设备，连接在其哪一个端口上</p><table><thead><tr><th>Mac地址</th><th>端口</th></tr></thead><tbody><tr><td>bb-bb-bb-bb-bb-bb</td><td>1</td></tr><tr><td>cc-cc-cc-cc-cc-cc</td><td>2</td></tr><tr><td>aa-aa-aa-aa-aa-aa</td><td>3</td></tr><tr><td>dd-dd-dd-dd-dd-dd</td><td>4</td></tr></tbody></table><p>假如你仍然发送给<code>B</code>一个数据包，</p><p>构造了这样的数据结构从网口发出</p><p><img src="/images/屏幕截图%202024-08-19%20185555.png" /></p><p>当数据到达交换机时</p><p>交换机内部通过自己维护的Mac地址表</p><p>发现目标机器<code>B</code>的Mac地址映射到了端口<code>1</code>上</p><p>于是把数据从1号端口发送给了<code>B</code></p><p>你给这样传输方式而组成的小范围网络，叫做</p><p><strong>以太网</strong></p><p>当然，最开始的时候Mac地址表是空的</p><p>是怎么逐步建立起来的呢</p><p>假如在Mac地址表为空时</p><p>你给<code>B</code>发送了数据</p><p>这个包从端口<code>3</code>进入的交换机</p><p>所以此时交换机就可以在Mac地址表记录第一条数据</p><table><thead><tr><th>Mac地址</th><th>端口</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td>aa-aa-aa-aa-aa-aa</td><td>3</td></tr><tr><td></td><td></td></tr></tbody></table><p>交换机看目标Mac地址在Mac表中并没有映射关系</p><p>于是将此包发给了所有端口，也就是所有机器</p><p>之后只有机器<code>B</code>收到了确实是发给自己的包</p><p>于是做出响应</p><p>响应数据从端口<code>1</code>进入交换机</p><p>于是交换机此时在地址表中更新了第二条数据</p><table><thead><tr><th>Mac地址</th><th>端口</th></tr></thead><tbody><tr><td>bb-bb-bb-bb-bb-bb</td><td>1</td></tr><tr><td></td><td></td></tr><tr><td>aa-aa-aa-aa-aa-aa</td><td>3</td></tr><tr><td></td><td></td></tr></tbody></table><p>经过该网络中的机器不断的通信</p><p>交换机最终将Mac地址表建立完毕</p><p>随着机器越来越多，交换机的端口也不够了</p><p>但聪明的你发现</p><p>只要将多个交换机连接起来</p><p>这个问题就可以轻而易举的搞定了</p><p>你不需要设计任何额外的东西</p><p>只需要按照之前的设计和规则来操作</p><p>就可以实现所有电脑的互联</p><p>不过需要注意的是，两个交换机相连的线</p><p>在Mac地址表中并不是一条记录</p><p>而是要将另一台交换机连接的四台机器与该端口的记录</p><p>全都记录在表中</p><p>最终两个交换机将分别记录从<code>A</code>到<code>H</code>所有机器的映射关系</p><p>比如：</p><table><thead><tr><th>Mac地址</th><th>端口</th></tr></thead><tbody><tr><td>bb-bb-bb-bb-bb-bb</td><td>1</td></tr><tr><td>cc-cc-cc-cc-cc-cc</td><td>2</td></tr><tr><td>aa-aa-aa-aa-aa-aa</td><td>3</td></tr><tr><td>dd-dd-dd-dd-dd-dd</td><td>4</td></tr><tr><td>ee-ee-ee-ee-ee-ee</td><td>5</td></tr><tr><td>ff-ff-ff-ff-ff-ff</td><td>5</td></tr><tr><td>gg-gg-gg-gg-gg-gg</td><td>5</td></tr><tr><td>hh-hh-hh-hh-hh-hh</td><td>5</td></tr></tbody></table><table><thead><tr><th>Mac地址</th><th>端口</th></tr></thead><tbody><tr><td>bb-bb-bb-bb-bb-bb</td><td>1</td></tr><tr><td>cc-cc-cc-cc-cc-cc</td><td>1</td></tr><tr><td>aa-aa-aa-aa-aa-aa</td><td>1</td></tr><tr><td>dd-dd-dd-dd-dd-dd</td><td>1</td></tr><tr><td>ee-ee-ee-ee-ee-ee</td><td>2</td></tr><tr><td>ff-ff-ff-ff-ff-ff</td><td>3</td></tr><tr><td>gg-gg-gg-gg-gg-gg</td><td>4</td></tr><tr><td>hh-hh-hh-hh-hh-hh</td><td>5</td></tr></tbody></table><p>这在只有8台甚至只有几百台电脑的时候都还好</p><p>所以这种交换机的交换方式已经足够支持一阵子了</p><p>但很快，电脑的数量发展到几万、几十万甚至更多</p><p>​</p><h3 id="网络层">0.3 网络层</h3><p>交换机已经无法支撑如此庞大的数据关系了</p><p>此时你动了歪脑筋</p><p>你发现了问题的关键在于</p><p>连接其他交换机的那根网线</p><p>后面不知道有多少个设备在源源不断的连接起来</p><p>从而使得地址表越来越大</p><p>那我能不能把这根网线接入到一个新的设备</p><p>这个设备就跟电脑一样</p><p>有自己独立的Mac地址</p><p>而且同时还能帮我把数据包做一次转发呢？</p><p>这个设备就是</p><p><strong>路由器(Router)</strong></p><p>作为一个独立的拥有Mac地址的设备</p><p>并且可以帮我把数据包做一次转发</p><p>你把他定在了</p><p><strong>网络层</strong></p><p>好了，现在交换机的Mac地址表中</p><p>只需要多出一条<code>ABAB</code>与其端口的映射关系</p><p>又可以成功将数据包转交给路由器了</p><p><img src="/images/微信图片_20240823195754.jpg" /></p><p>那如何做到把<code>A</code>发送给<code>C</code>和<code>D</code></p><p>甚至是<code>E</code>,<code>F</code>,<code>G</code>,<code>H</code>的数据包，统统先发送给路由器呢？</p><p>不难想到这样一个点子：</p><p>假如电脑<code>C</code>和<code>D</code>拥有共同的前缀</p><blockquote><p>C的Mac地址：FFFF-FFFF-CCCC</p><p>D的Mac地址：FFFF-FFFF-DDDD</p></blockquote><p>那我们就可以说，将目标地址<code>FFFF-FFFF-?</code>开头的</p><p>统统先发送给路由器这样是否可行呢？</p><p>答案是不行的</p><p>我们先从现实中的Mac地址入手</p><p>Mac地址也叫物理地址、硬件地址</p><p>长度为48位</p><p>比如：<code>00-16-EA-AR-3C-40</code></p><p>他是由网络设备制造商生产时烧录在网卡的一种闪存芯片</p><p>前24位：<code>00-16-EA</code>代表网络硬件制造商的编号</p><p>后24位<code>AE-3C-40</code>是该厂家自己分配的，一般具有系列号</p><p>Mac地址就如同身份证上的身份证一样，具有唯一性</p><p>于是你发明了一个新的地址</p><p>给每一台机器一个32位的编号</p><p><code>11000000101010000000000000000001</code></p><p>你觉得这有些不清晰</p><p>于是把它分成四个部分，中间用点相连</p><p>你还觉得不清晰，于是转换为十进制</p><p><code>192.168.0.1</code></p><p>最后，你给了这个地址一个响亮的名字：</p><p><strong>IP地址</strong></p><p>现在每一台电脑都既有自己的Mac地址，又有自己的IP地址</p><p>只不过IP地址是软件层面上的</p><p>可以随时修改</p><p>Mac地址一般是无法修改的</p><p>假如我想把数据包发送给<code>A</code>,<code>B</code>,<code>C</code>,<code>D</code>中的一台设备</p><p>无论是哪一台，我都可以这样描述：</p><blockquote><p>将IP地址为192.168.0开头的全部发送给路由器，之后再怎么发，交给他！</p></blockquote><p>那交给路由器之后，路由器又是怎么把数据包准确转发给其他设备的呢？</p><p>我们先给所有的电脑加上自己的IP地址</p><p>现在两个设备之间进行传输</p><p>除了加上数据链路层的头部之外</p><p>还要再增加一个网络层的头部</p><p>假如<code>A</code>给<code>B</code>发送数据</p><p>由于他们直接连着交换机</p><p>所以<code>A</code>直接发出如下数据包即可：</p><p><img src="/images/屏幕截图%202024-08-23%20201835.png" /></p><p>其实网络层并没有发挥作用</p><p>但如果<code>A</code>给<code>C</code>发送数据</p><p><code>A</code>就需要先转交给路由器然后再有路由器转发给<code>C</code></p><p><img src="/images/屏幕截图%202024-08-23%20202944.png" /></p><p>由于这个过程仍然需要以太网</p><p>所以这个数据包是分成两段：</p><p><code>A-路由器</code>这段的包和<code>路由器-C</code>这段的包</p><p>那<code>A</code>给<code>C</code>发数据包，怎么知道是否要经过路由器转发呢？</p><p>经过一番思考，你发明了</p><p><strong>子网</strong></p><p>如果源IP与目的IP处于一个子网，直接将包通过交换机发出去</p><p>如果源IP与目的IP不处于一个子网，就交给路由器去处理</p><p>现在，只需要解决什么叫处于一个子网就好了</p><p>你规定如下：</p><blockquote><p>192.168.0.1和192.168.0.2处于一个子网</p><p>192.168.0.1和192.168.1.1不处于一个子网</p></blockquote><p>即你想表示，对于<code>192.168.0.1</code>来说,<code>192.168.0</code>开头的就算是在一个子网</p><p>否则就是在不同的子网</p><p>那对于其他计算机兄弟来说，怎么表达这个意思呢？</p><p>于是你们发明了</p><p><strong>子网掩码</strong></p><p>假如某台机器的子网掩码定为<code>255.255.255.0</code></p><p>这表示将源IP与目的IP分别与这个子网掩码进行与运算</p><p>相等则是在一个子网</p><p>不相等则不是在一个子网</p><p>例如</p><blockquote><p>A电脑：<span class="math inline">\(192.168.0.1 \&amp; 255.255.255.0 =192.168.0.0\)</span></p></blockquote><p>至此，经过物理层、数据链路层、网络层这前三层的协议</p><p>以及根据这些协议设计的各种网络设备</p><p>网线、集线器、交换机、路由器</p><p>理论上只要有对方的IP地址</p><p>就可以将地球上的任意位置的两个节点</p><h3 id="传输层">0.4 传输层</h3><p>前三层协议只能将数据从一台主机传输到另外一台主机</p><p>但是，到了目的地之后</p><p>数据包具体交给哪个程序呢？</p><p>所以，你需要将通信的进程区分开来</p><p>于是就给每个进程分配一个数字编号</p><p>你给他起了一个响亮的名字:</p><p><strong>端口号</strong></p><p>然后你在需要发送的包上，增加了传输层的头部、源端口号和目标端口号</p><p><img src="/images/屏幕截图%202024-08-23%20205843.png" /></p><p>这样，你将原本<strong>主机到主机</strong>的通信</p><p>升级为了<strong>进程和进程</strong>之间的通信</p><p>你没有意识到，你不知不觉实现了</p><p><strong>UDP协议</strong></p><p>就这样，你用UDP协议无忧无虑的同B进行着通信，一直没发生什么问题</p><p>但很快，你发现事情变得非常复杂</p><p><strong>丢包问题</strong></p><p>由于网络的不可靠，数据包可能在半路丢失，而<code>A</code>和<code>B</code>却无法察觉</p><p>对于丢包问题，只需要解决两个事就好了：</p><blockquote><p>A怎么知道包丢了？</p><p>丢了的包怎么办?</p></blockquote><p>于是你设计了一个方案：</p><p><code>A</code>每发送一个包，都必须收到来自<code>B</code>的确认(ACK)</p><p>再发下一个</p><p>否则在一定时间内没有收到确认，就重传这个包</p><p>你管他叫</p><p><strong>停止等待协议</strong></p><p>只要按照这个协议来，虽然<code>A</code>无法保证<code>B</code>一定能收到包，但<code>A</code>能确认<code>B</code>是否收到了包</p><p>收不到就重试</p><p>尽最大努力让这个通信变得可靠</p><p>于是你们现在的通信有了一个新的特征：</p><p><strong>可靠交付</strong></p><p>但很快，你又发现了一个问题</p><p><strong>效率问题</strong></p><p>停止等待虽然能解决问题，但是效率太低了</p><p><code>A</code>本来能在发完第一个数据包之后立刻发第二个数据包</p><p>但由于停止等待协议</p><p><code>A</code>必须等数据到达了<code>B</code>，且<code>B</code>的确认包又回到了<code>A</code></p><p>才可以继续发第二个数据包</p><p>这差的可不是一星半点</p><p>于是你对这个过程进行了改进</p><p>采用<strong>流水线</strong>的方式，不再傻傻的等</p><p><strong>顺序问题</strong></p><p>网络是复杂的、不可靠的</p><p>有的时候<code>A</code>发出去的数据包</p><p>分别走了不同的路由到达<code>B</code></p><p>可能无法保证和发送数据包时一样的顺序</p><p>这时，你想到一个好方法：</p><p><code>A</code>在发送的<code>数据包</code>中增加一个<strong>序号(seq)</strong></p><p>同时<code>B</code>要在<code>ACK包</code>上增加一个<strong>确认号(ack)</strong></p><p>这样不但解决了停止等待协议的效率问题</p><p>也通过这样标序号的方式解决了顺序问题</p><p>而<code>B</code>这个确认号意义非凡</p><p>比如<code>B</code>发了一个确认号为<code>3</code></p><p>它不仅仅表示<code>A</code>发送的序号为<code>2</code>的包收到了</p><p>还表示<code>2</code>之前的数据包都收到了</p><p>这种方式叫做</p><p><strong>累计确认</strong>或<strong>累计应答</strong></p><blockquote><p>注意：实际上<code>ack</code>的号是收到的最后一个数据包的序号<code>seq</code>+ 1,也就是告诉对方下一个应该发的序号是多少</p></blockquote><p>有的时候，<code>A</code>发送数据包的速度太快，而<code>B</code>的接收能力不够但<code>B</code>却没有告知<code>A</code>这种情况</p><p>那怎么办呢？</p><p>很简单，<code>B</code>告诉<code>A</code>自己的接收能力</p><p><code>A</code>根据<code>B</code>的接收能力相应控制自己的发送速率就好了</p><p>于是<code>B</code>决定，每次发送数据包给<code>A</code>时，顺带传过来一个值</p><p>叫<strong>窗口大小(win)</strong></p><p>这个值就表示<code>B</code>的接收能力</p><p>同理，每次<code>A</code>给<code>B</code>发包时也带上自己的窗口大小</p><p>表示<code>A</code>的接收能力</p><p><strong>拥塞问题</strong></p><p>但有的时候，不是<code>B</code>的接收能力不够</p><p>而是网络不太好，造成了网络拥塞</p><p>拥塞控制与流量控制有些像</p><p>但流量控制是受<code>B</code>的接收能力影响</p><p>而拥塞控制是受网络环境的影响</p><p>拥塞问题的解决仍然是通过控制窗口的大小</p><p>只不过，流量控制的窗口大小是<code>B</code>直接告诉<code>A</code>的</p><p>而拥塞控制的窗口大小按理说就应该是网络环境主动告诉<code>A</code></p><p>这明显不现实</p><p>所以只能通过<code>A</code>不断单方面的试探</p><p>不断感知网络环境的好坏</p><p>进而确定自己的拥塞窗口的大小</p><p>有的时候，<code>B</code>主机的相应进程还没准备好或者是挂掉了</p><p><code>A</code>就发送了数据包</p><p>导致了浪费</p><p>这个问题在于，<code>A</code>在跟<code>B</code>通信之前</p><p>没有事先确认<code>B</code>是否已经准备好</p><p>就开始发了一连串的信息</p><p>就好比你跟一个人打电话</p><p>你还没有“喂”一下确认对方有没有在听</p><p>你就巴拉巴拉说了一堆</p><p>这个问题该怎么解决呢？</p><p>地球人都知道，三次握手嘛</p><p><code>A</code>与<code>B</code>各自在内存中维护着自己的状态变量</p><p>三次握手之后，双方的状态都变成了连接已建立</p><blockquote><p>第一次握手：<code>A</code>给<code>B</code>发送<code>SYN</code></p><p>第二次握手：<code>B</code>给<code>A</code>发送<code>ACK</code>与<code>SYN</code></p><p>第三次握手：<code>A</code>给<code>B</code>发送<code>ACK</code></p></blockquote><p>虽然只发了三次数据包，并且在各自的内存中维护了状态变量</p><p>但这么说总觉得太low</p><p>你看这个过程相当于双方建立连接的过程</p><p>于是你灵机一动，就叫他</p><p><strong>面向连接</strong></p><p>但凡事有始有终</p><p>有了连接的过程</p><p>就要考虑释放连接的过程：四次握手</p><blockquote><p>A：再见，我要关闭了(FIN)</p><p>B：我知道了(ACK)</p><p>B：再见，我要关闭了(FIN)</p><p>A：我知道了(ACK)</p></blockquote><p>以上阐述的，就是<strong>TCP协议</strong>的主要内容</p><blockquote><p>TCP协议是面向连接的、可靠的、基于字节流的传输层通信协议</p></blockquote><p>面向连接的、可靠的我们通过上文已经理解。</p><p>那如何理解基于字节流呢？</p><p>很简单，TCP在建立连接时</p><p>需要告诉对方最大报文段大小</p><p>也就是说，如果需要发送的数据很大</p><p>在TCP层是需要按照最大报文段大小来切割成一个个的TCP报文段的</p><p>切割的时候不用管原来的数据是什么意思、需要在哪里断句</p><p>只需要切割的时候标上序号</p><p>接收方再根据这个序号拼成最终想要的完整数据就行了</p><p>在TCP传输这里</p><p>就把他当作一个个的字节</p><p>也就是基于字节的含义了</p><figure><img src="/images/计算机网络知识框架.png" alt="计算机网络知识框架" /><figcaption aria-hidden="true">计算机网络知识框架</figcaption></figure><h2 id="计算机网络概述">1. 计算机网络概述</h2><figure><img src="/images/计算机网络概述.png" alt="计算机网络概述知识框架" /><figcaption aria-hidden="true">计算机网络概述知识框架</figcaption></figure><h3 id="互联网的构成">1.1 互联网的构成</h3><ul><li><strong>网络边缘(NetworkEdge)</strong>：网络边缘是指直接与终端用户相连接的部分，包括用户的计算机、智能手机、平板电脑等设备，以及家庭网络、办公室网络等。网络边缘的主要功能包括：<ul><li><strong>终端设备</strong>：用户使用的各种设备，如计算机、手机、平板等，这些设备通过网络接口（如以太网、Wi-Fi等）连接到互联网。<br /></li><li><strong>接入网络</strong>：用于将终端设备连接到互联网的网络，如家庭宽带、移动网络、企业局域网（LAN）等。接入网络可以是有线的（如DSL、光纤）或无线的（如Wi-Fi、4G、5G）。<br /></li><li><strong>边缘路由器</strong>：位于网络边缘的路由器，负责将用户的流量发送到互联网，并将来自互联网的流量转发给用户设备。</li></ul></li></ul><p>​</p><ul><li><strong>网络核心(NetworkCore)</strong>：网络核心是指连接各个网络边缘并提供高速数据传输的部分。它由一组高性能的核心路由器和交换机组成，形成一个高带宽、低延迟的网络骨干。网络核心的主要功能包括：<ul><li><strong>高速传输</strong>：核心网络设备通常具有非常高的带宽，能够支持大规模的数据传输，确保不同网络边缘之间的通信高效且可靠。<br /></li><li><strong>路由选择</strong>：核心路由器根据预定义的路由协议，选择最佳路径将数据包从源传送到目的地。<br /></li><li><strong>数据中继</strong>：核心网络设备负责将来自不同边缘网络的数据包中继传输，通过多个中继节点确保数据能够正确到达目的地。</li></ul></li><li><strong>二者的差别</strong><ul><li><strong>网络边缘</strong>更关注用户接入和服务质量，通常需要处理较低的带宽需求和较高的服务多样性。<br /></li><li><strong>网络核心</strong>更关注高效的数据传输和网络可靠性，通常需要处理巨大的数据流量和复杂的路由决策。</li></ul></li></ul><h3 id="网络分类">1.2 网络分类</h3><ul><li><p><strong>个域网(PAN, Personal Area Network)</strong>:</p><ul><li>能在便携式消费电器与通信设备之间进行短距离通信的网络<br /></li><li>覆盖范围一般在10米半径以内，如蓝牙耳机等</li></ul></li><li><p><strong>局域网(LAN, Local Area Network)</strong>:</p><ul><li>局部地区形成的区域网络，如企业网络<br /></li><li>分布地形有限，可大可小，大到一栋建筑，小到办公室内的组网<br /></li><li>电脑WLAN接入，打印机共享等等</li></ul></li><li><p><strong>城域网(MAN, Metropolitan Area Network)</strong>:</p><ul><li>范围覆盖一个城市的网络</li></ul></li><li><p><strong>广域网(WAN, Wide Area Network)</strong>:</p><ul><li>覆盖很大地理区域，乃至覆盖地区和国家</li></ul></li></ul><h3 id="接入网">1.3 接入网</h3><h4 id="接入网的用途">1.3.1 接入网的用途</h4><ul><li>接入网的用途是将主机连接到边缘路由器上<br /></li><li>边缘路由器是端系统Host去往任何其他远程端系统的路径上的第一台路由器</li></ul><h4 id="各种异构网络通过边缘路由器接入">1.3.2各种异构网络通过边缘路由器接入</h4><p><strong>异构网络（HeterogeneousNetworks）</strong>是指由不同类型的网络组成的整体。这些网络可能在技术标准、传输介质、网络协议、拓扑结构等方面存在差异。常见的异构网络包括：</p><ul><li><strong>有线网络</strong>：如以太网（Ethernet）、光纤网络。<br /></li><li><strong>无线网络</strong>：如Wi-Fi、蜂窝网络（4G、5G）、蓝牙。<br /></li><li><strong>局域网（LAN）</strong>：企业内部或家庭内部的网络。<br /></li><li><strong>广域网（WAN）</strong>：覆盖更大地理范围的网络，如互联网。</li></ul><h4 id="接入网分类">1.3.3 接入网分类</h4><ul><li><p><strong>光纤到户(FTTH, Fiber to theHome)</strong>:是一种将光纤直接铺设到用户家庭的接入技术。它的特点和优势包括：</p><ul><li><strong>高速宽带</strong>：光纤能够提供极高的带宽，支持数百兆比特甚至数千兆比特的传输速率。<br /></li><li><strong>稳定性和可靠性</strong>：光纤不受电磁干扰，数据传输稳定，可靠性高。<br /></li><li><strong>长距离传输</strong>：光纤信号可以在没有中继的情况下传输更远的距离，适合覆盖广泛的地理区域。<br /></li><li><strong>未来发展</strong>：随着技术进步，光纤网络能够支持更高的速率和更先进的服务（如4K/8K视频、虚拟现实等）。</li></ul></li><li><p><strong>数字用户线(Digital Subscriber Line,DSL)</strong>:利用现有的电话线提供宽带接入服务。</p></li><li><p><strong>同轴电缆</strong>:广泛用于有线电视（CATV）网络，也可以用于宽带接入。</p></li><li><p><strong>无线接入(WirelessAccess)</strong>:包括多种技术，如Wi-Fi、蜂窝网络（4G、5G）和固定无线接入（FWA）。其特点如下：</p><ul><li><strong>灵活性和便捷性</strong>：无线接入无需铺设有线，部署灵活，适合用户移动和临时需求。<br /></li><li><strong>覆盖范围</strong>：Wi-Fi适合家庭和小范围覆盖，蜂窝网络适合广域覆盖（城市、乡村），FWA适合偏远地区固定宽带接入。<br /></li><li><strong>速率</strong>：Wi-Fi和蜂窝网络速率不断提高，5G网络可以提供极高的传输速率，适合高清视频、AR/VR等高带宽应用。<br /></li><li><strong>易受干扰</strong>：无线信号易受干扰，传输质量受环境和距离影响较大。</li></ul></li><li><p><strong>企业和家庭网络</strong>:<strong>企业和家庭网络</strong>是指企业内部或家庭内部的局域网（LAN），通过各种接入技术连接到互联网。其特点包括：</p><ul><li><strong>局域网（LAN）</strong>：企业和家庭内部通常通过有线（以太网）或无线（Wi-Fi）组成局域网，连接各种终端设备（电脑、手机、打印机等）。<br /></li><li><strong>网络设备</strong>：使用交换机、路由器和无线接入点（AP）等设备构建内部网络，并通过边缘路由器连接到ISP的接入网。<br /></li><li><strong>安全性</strong>：企业网络通常需要更高的安全性，部署防火墙、VPN等安全措施，家庭网络则注重便捷性和易用性。<br /></li><li><strong>管理和维护</strong>：企业网络通常由专业的IT人员管理和维护，家庭网络则由用户自行管理或由ISP提供技术支持。</li></ul></li></ul><h3 id="网络核心的两大功能">1.4 网络核心的两大功能</h3><ol type="1"><li><strong>路由</strong>：确定数据分组从源到目标所使用的路径(全局操作)<br /></li><li><strong>转发</strong>：路由器或交换机将接收到的数据分组转发出去(即移动到该设备的某个输出接口)(本地操作)</li></ol><h3 id="网络分层">1.5 网络分层</h3><h4 id="osi-7层模型">1.5.1 OSI 7层模型</h4><p><strong>OSI七层模型（Open Systems InterconnectionModel）</strong>是国际标准化组织（ISO）提出的网络通信参考模型。它将网络通信的功能分成七个层次，从低到高分别是：<code>物理层</code>、<code>数据链路层</code>、<code>网络层</code>、<code>传输层</code>、<code>会话层</code>、<code>表示层</code>和<code>应用层</code>。每一层都有特定的功能和协议</p><ol type="1"><li><strong>物理层(Physical Layer)</strong>：<ol type="1"><li><strong>功能</strong>：<ol type="1"><li>物理层负责网络设备之间的实际传输介质的连接和数据传输。</li><li>涉及到电缆、光纤、无线电波等传输介质，以及电压、电流、信号频率等传输方式。</li></ol></li><li><strong>协议和设备</strong>：<ol type="1"><li>常见的协议和标准包括：以太网（Ethernet）、USB、光纤（FiberOptics）。</li><li>相关设备包括：集线器（Hub）、网卡（NIC）、传输介质（电缆、光纤）。</li></ol></li></ol></li><li><strong>数据链路层(Data Link Layer)</strong>:<ol type="1"><li><strong>功能</strong>：<ol type="1"><li>数据链路层负责节点间的可靠传输，包括错误检测、纠正和流量控制。</li><li>它将数据封装成帧（Frame），在同一网络段内进行传输。</li></ol></li><li><strong>协议和设备</strong>：<ol type="1"><li>常见的协议有：以太网（Ethernet）、点对点协议（PPP）、帧中继（FrameRelay）。</li><li>相关设备包括：交换机（Switch）、网桥（Bridge）。</li></ol></li></ol></li><li><strong>网络层(Network Layer)</strong>:<ol type="1"><li><strong>功能</strong>：<ol type="1"><li>网络层负责数据包（Packet）在不同网络之间的路由选择和转发。</li><li>它处理逻辑地址（如IP地址），并确定数据包的传输路径。</li></ol></li><li><strong>协议和设备</strong>：<ol type="1"><li>常见的协议有：互联网协议（IP）、互联网控制报文协议（ICMP）、路由协议（如OSPF、BGP）。</li><li>相关设备包括：路由器（Router）。</li></ol></li></ol></li><li><strong>传输层(Transport Layer)</strong>:<ol type="1"><li><strong>功能</strong>：<ol type="1"><li>传输层负责端到端的通信，确保数据可靠传输。</li><li>它提供数据分段、传输控制、错误校验和恢复功能。</li></ol></li><li><strong>协议和设备</strong>：<ol type="1"><li>常见的协议有：传输控制协议（TCP）、用户数据报协议（UDP）。</li><li>传输层的功能主要由操作系统的网络栈实现。</li></ol></li></ol></li><li><strong>会话层(Session Layer)</strong>:<ol type="1"><li><strong>功能</strong>：<ol type="1"><li>会话层负责建立、管理和终止应用程序之间的会话。</li><li>它处理会话控制、同步和对话管理。</li></ol></li><li><strong>协议和设备</strong>：<ol type="1"><li>常见的协议有：远程过程调用（RPC）、会话初始协议（SIP）。</li></ol></li></ol></li><li><strong>表示层(Presentation Layer)</strong>:<ol type="1"><li><strong>功能</strong>：<ol type="1"><li>表示层负责数据格式的转换、加密和解密、数据压缩等。</li><li>它确保发送方和接收方以一致的方式解释数据。</li></ol></li><li><strong>协议和设备</strong>：<ol type="1"><li>常见的标准和协议有：数据表示标准（如ASCII、JPEG、MPEG）、加密协议（如SSL/TLS）。</li></ol></li></ol></li><li><strong>应用层(Application Layer)</strong>:<ol type="1"><li><strong>功能</strong>：<ol type="1"><li>应用层是OSI模型的最高层，直接为用户提供各种网络服务。</li><li>它负责处理应用程序的网络功能，如文件传输、电子邮件、远程登录等。</li></ol></li><li><strong>协议和设备</strong>：<ol type="1"><li>常见的协议有：超文本传输协议（HTTP）、文件传输协议（FTP）、简单邮件传输协议（SMTP）、域名系统（DNS）。</li><li>应用程序软件和服务运行在应用层上。</li></ol></li></ol></li></ol><ul><li>想象你要寄送一个包裹：<ul><li><strong>物理层</strong>是你用来运输包裹的卡车、火车或飞机。</li><li><strong>数据链路层</strong>是你在包裹上写详细地址和贴上邮票，确保包裹在一个城市内递送正确。</li><li><strong>网络层</strong>是邮局选择最佳路线，把包裹从一个城市送到另一个城市。</li><li><strong>传输层</strong>是快递公司确保包裹从你家门口送到收件人家门口，过程中不会丢失或损坏。</li><li><strong>会话层</strong>是确保在电话通话中，你和对方的声音能顺利传输，即使中断也能恢复。</li><li><strong>表示层</strong>是把包裹的内容翻译成收件人能理解的语言，或者加密包裹以保护隐私。</li><li><strong>应用层</strong>是包裹里的实际内容，如信件、礼物，或你在网上购买的商品。</li></ul></li></ul><h4 id="tcp-ip-4层模型">1.5.2 TCP / IP 4层模型</h4><p><strong>TCP/IP四层模型</strong>是互联网的核心协议套件模型，它将网络通信功能分为四个层次，从低到高分别是：<code>网络接口层</code>、<code>互联网层</code>、<code>传输层</code>和<code>应用层</code>。每一层都有特定的功能和协议。</p><ol type="1"><li><strong>网络接口层(Network Interface Layer)</strong>:<ol type="1"><li><strong>功能</strong>：<ol type="1"><li>负责管理设备和物理传输介质之间的通信。</li><li>包括数据链路层和物理层的功能，处理实际的硬件和网络介质。</li></ol></li><li><strong>协议和设备</strong>：<ol type="1"><li>常见的协议有：以太网（Ethernet）、Wi-Fi、点对点协议（PPP）。</li><li>相关设备包括：网卡（NIC）、交换机（Switch）、集线器（Hub）。</li></ol></li></ol></li><li><strong>互联网层(Internet Layer)</strong>:<ol type="1"><li><strong>功能</strong>；<ol type="1"><li>负责数据包的路由和转发，确保数据在不同网络之间的传输。</li><li>提供逻辑寻址和路由选择，处理数据包的封装和解封装。</li></ol></li><li><strong>协议和设备</strong>：<ol type="1"><li>常见的协议有：互联网协议（IP，包括IPv4和IPv6）、互联网控制报文协议（ICMP）、地址解析协议（ARP）。</li><li>相关设备包括：路由器（Router）。</li></ol></li></ol></li><li><strong>传输层(Transport Layer)</strong>:<ol type="1"><li><strong>功能</strong>：<ol type="1"><li>提供端到端的通信服务，确保数据可靠传输。</li><li>负责数据分段、传输控制、错误校验和恢复。</li></ol></li><li><strong>协议和设备</strong>：<ol type="1"><li>常见的协议有：传输控制协议（TCP）、用户数据报协议（UDP）。</li><li>TCP提供可靠的、面向连接的服务，确保数据顺序无误地传输。</li><li>UDP提供不可靠的、无连接的服务，适用于需要快速传输但不需要保证可靠性的应用。</li></ol></li></ol></li><li><strong>应用层(Application Layer)</strong>:<ol type="1"><li><strong>功能</strong>：<ol type="1"><li>直接为用户提供各种网络服务</li><li>处理应用程序的网络功能，如文件传输、电子邮件、远程登录等</li></ol></li><li><strong>协议和设备</strong>：<ol type="1"><li>常见的协议有：超文本传输协议（HTTP）、文件传输协议（FTP）、简单邮件传输协议（SMTP）、域名系统（DNS）、简单网络管理协议（SNMP）、动态主机配置协议（DHCP）。</li><li>应用程序软件和服务运行在应用层上。</li></ol></li></ol></li></ol><h4 id="两种模型比较">1.5.3 两种模型比较</h4><ul><li>OSI模型的不足：<ul><li>从未真正被实现<ul><li>TCP/IP已成为事实标准，OSI缺少厂家支持</li></ul></li><li>技术实现糟糕<ul><li>OSI分层欠缺技术考虑：会话层、表示层很少内容；数据链路层、网络层内容繁杂。模型和协议过于复杂</li><li>分层间功能重复：差错控制、流量控制等在不同层反复出现</li></ul></li><li>非技术因素<ul><li>TCP/IP实现为UNIX一部分，免费</li><li>OSI被认为是政府和机构的强加标准</li></ul></li></ul></li><li>TCP/IP模型的不足<ul><li>核心概念未能实现<ul><li>未明确区分服务、接口和协议等核心概念</li></ul></li><li>不具备通用性<ul><li>不适于描述TCP/IP之外的其他协议栈</li></ul></li><li>混用接口与分层的设计<ul><li>链路层和物理层一起被定义为网络接口层，而非真正意义上的分层</li></ul></li><li>模型欠缺完整性<ul><li>未包含物理层与数据链路层</li><li>物理层与数据链路层是至关重要的部分</li></ul></li></ul></li></ul><p>注意：教材是以下分层来讲述的：<code>物理层</code>、<code>数据链路层</code>、<code>网络层</code>、<code>运输层</code>、<code>应用层</code></p><h2 id="物理层-1">2、物理层</h2><ul><li>物理层考虑的是怎样才能<strong>在连接各种计算机的传输媒体上传输数据比特流</strong>，而不是指具体的传输媒体。</li></ul><blockquote><p>举个例子，物理层就像一个快递员，负责把你要寄的东西送到目的地。他的主要任务是确保“东西”（数据比特流）能在不同的路上（传输介质）顺利送达，而不管这条路是什么</p></blockquote><ul><li>物理层的作用是要尽可能地<strong>屏蔽掉不同传输媒体和通信手段的差异</strong>。</li></ul><blockquote><p>就像快递员不管你家门口是柏油马路、泥泞小路还是一条河，他只需知道如何开车、骑车或划船，把包裹安全送到目的地。</p><ul><li>如果路是柏油马路（比如双绞线），他可能会开车。</li><li>如果路是河（比如光纤），他可能会划船。</li><li>如果是无线电波，那就好比快递员通过无人机送快递。</li></ul></blockquote><ul><li>用于物理层的协议也常称为<strong>物理层规程</strong>(procedure)。</li></ul><blockquote></blockquote><h3 id="物理介绍">2.1 物理介绍</h3><h3 id="引导型介绍">2.1.1 引导型介绍</h3><blockquote><p>信号在固体介质中传播，例如铜、光纤、同轴电缆</p></blockquote><ol type="1"><li><strong>光纤</strong><ol type="1"><li>高速运行：高速点对点运输(10 - 100 Gbps)</li><li>低错误率：中继器相距很远，对电磁噪声免疫</li></ol></li></ol><figure><img src="/images/光纤.png" alt="光纤" /><figcaption aria-hidden="true">光纤</figcaption></figure><ol start="2" type="1"><li><strong>双绞线</strong><ol type="1"><li>两根绝缘铜线互相缠绕为一对</li><li>电话线为1对双绞线，网线为4对双绞线，广泛用于计算机网络（以太网）双向传输</li><li>第5类：100 Mbps~1 Gbps；第6类：10Gbps</li><li>传输距离一般为为100米</li></ol></li></ol><figure><img src="/images/双绞线.png" alt="双绞线" /><figcaption aria-hidden="true">双绞线</figcaption></figure><ol start="3" type="1"><li><strong>同轴电缆</strong><ol type="1"><li>两根同心铜导线，双向传输</li><li>电缆上的多个频率通道</li><li>带宽可达100Mbps</li><li>传输距离一般为200米</li></ol></li></ol><figure><img src="/images/同轴电缆.png" alt="同轴电缆" /><figcaption aria-hidden="true">同轴电缆</figcaption></figure><h4 id="非引导型介质">2.1.2 非引导型介质</h4><blockquote><p>信号自由传播，例如无线电(陆地无线电、卫星无线电信道)</p></blockquote><ol type="1"><li><strong>无线电</strong><ol type="1"><li>电磁频谱中各种“波段”携带的信号</li><li>没有物理“电线”</li><li>不依赖介质的广播</li><li>半双工（发送方到接收方）</li></ol></li><li><strong>无线链路类型</strong>：<ol type="1"><li>无线局域网（WiFi） 10-100 Mbps；10米</li><li>广域（如3/4/5G蜂窝） 在~10公里范围内</li><li>蓝牙：短距离，有限速率</li><li>地面微波：点对点；45 Mbps</li><li>同步卫星：36000km高空， 280毫秒的往返时延</li><li>低轨卫星：近地，但围绕地球高速运动，需要大量卫星才能覆盖地球</li></ol></li></ol><h3 id="数据交换方式">2.2 数据交换方式</h3><h3 id="分组交换">2.2.1 分组交换</h3><ul><li><p>分组交换是一种将数据分割成小块（称为分组或包）的传输方式。每个分组包含数据和控制信息（如源地址和目的地址），独立地在网络中传输，最终在目的地重新组装成完整的信息。</p></li><li><p>主要<strong>缺点</strong>：</p><ol type="1"><li><p>不具有实时性</p></li><li><p>存在延迟</p></li><li><p>会造成通信阻塞</p></li><li><p>存在无用的重复数据</p></li><li><p>会出现丢包的情况</p></li></ol></li><li><p><strong>优点</strong>：</p><ol type="1"><li>设计简单</li><li>资源利用率很高</li></ol></li></ul><h4 id="电路交换">2.2.2 电路交换</h4><ul><li><p>电路交换是一种在通信前预先建立固定路径（电路）的传输方式。通信双方在通话前通过交换机建立一个专用的通信电路，数据在该电路上传输，通信结束后释放电路。</p></li><li><p>电路连接的<strong>三个阶段</strong></p><ol type="1"><li>建立连接</li><li>数据传输</li><li>释放连接</li></ol></li><li><p><strong>优点</strong></p><ol type="1"><li>传输速度快、高效</li><li>实时</li></ol></li><li><p><strong>缺点</strong></p><ol type="1"><li>资源利用率低</li><li>新建连接需要占据一定的时间，甚至比通话的时间还长</li></ol></li><li><p>电路交换的多路复用</p><ul><li><p><strong>频分多路复用(FDM, Frequency DivisionMultiplexing)</strong>:将可用带宽划分为多个互不重叠的频段，每个频段传输一路信号。每个信号在不同的频率上独立传输，避免互相干扰。</p><ul><li><p><strong>特点</strong>：</p><ul><li><strong>并行传输</strong>：各信号在不同频率上同时传输，实现并行通信。</li><li><strong>恒定带宽</strong>：每个信号占用固定的频率带宽，不受其他信号的影响。</li><li><strong>硬件复杂度</strong>：需要频率分配和滤波器来确保信号不互相干扰，硬件设计较为复杂。</li></ul></li><li><p><strong>应用</strong>：</p><ul><li><strong>广播电视</strong>：多个电视台在不同频率上广播信号。</li><li><strong>无线通信</strong>：如传统模拟蜂窝网络（AMPS）。</li><li><strong>有线通信</strong>：如光纤通信中的波分复用（WDM）。</li></ul></li><li><p><strong>示例</strong>：假设有三个信号要通过同一介质传输，频分多路复用会将可用频谱划分为三段，每个信号占用一个频段，例如：</p><ul><li>信号A占用100-200 MHz频段</li><li>信号B占用200-300 MHz频段</li><li>信号C占用300-400 MHz频段</li></ul><p>通过这种方式，三路信号可以同时在各自的频段上传输而互不干扰</p></li></ul></li><li><p><strong>时分多路复用(Time Division Multiplexing,TDM)</strong>:将时间划分为多个时隙，每个时隙传输一路信号。在一个周期内，每个信号轮流占用时隙进行传输。</p><ul><li><p><strong>特点</strong>：</p><ul><li><strong>顺序传输</strong>：各信号在不同时间段轮流传输，实现顺序通信。</li><li><strong>动态带宽</strong>：每个信号的带宽利用率可以根据需要进行动态调整。</li><li><strong>时间同步</strong>：需要严格的时间同步机制，确保各信号在正确的时隙传输。</li></ul></li><li><p><strong>应用</strong>：</p><ul><li><strong>数字电话网络</strong>：如Plesiochronous DigitalHierarchy（PDH）和Synchronous Digital Hierarchy（SDH）。</li><li><strong>移动通信</strong>：如GSM（Global System for MobileCommunications）。</li></ul></li><li><p><strong>示例</strong>：假设有三个信号要通过同一介质传输，时分多路复用会将传输时间划分为三个时隙，每个信号在一个时隙内传输。例如：</p><ul><li>在第一个时隙（T1）传输信号A</li><li>在第二个时隙（T2）传输信号B</li><li>在第三个时隙（T3）传输信号C</li></ul><p>通过这种方式，三路信号在不同时间轮流使用同一传输介质</p></li></ul></li></ul><figure><img src="/images/多路复用.png" alt="多路复用" /><figcaption aria-hidden="true">多路复用</figcaption></figure></li></ul><h4 id="分组交换和电路交换对比">2.2.3 分组交换和电路交换对比</h4><table><thead><tr><th>特点</th><th>分组交换</th><th>电路交换</th></tr></thead><tbody><tr><td>建立连接</td><td>不需要预先建立固定路径</td><td>需要预先建立通信电路</td></tr><tr><td>资源利用率</td><td>高效，资源共享</td><td>低效，资源独占</td></tr><tr><td>传输延迟</td><td>可能变化，不稳定</td><td>低且稳定</td></tr><tr><td>容错率</td><td>高，具备路径选择灵活性</td><td>低，路径故障影响通信</td></tr><tr><td>应用场景</td><td>互联网数据传输，局域网</td><td>传统电话网络，实时通信</td></tr><tr><td>宽带利用</td><td>动态调整，根据需求变化</td><td>固定宽带，占用整个通话过程</td></tr><tr><td>适用场景</td><td>数据传输和互联网应用</td><td>需要低延迟和稳定性的实时通信应用，如传统的电话通话</td></tr></tbody></table><h3 id="信道复用">2.3 信道复用</h3><blockquote><p>信道复用（ChannelMultiplexing）是指在同一传输介质上同时传输多个信号的技术。通过信道复用技术，可以提高传输介质的利用效率，实现多个信号的同时传输。</p></blockquote><h4 id="频分多路复用frequency-division-multiplexing-fdm">2.3.1频分多路复用（Frequency Division Multiplexing, FDM）</h4><ul><li><p><strong>工作原理</strong></p><ul><li><p>将可用带宽划分为多个互不重叠的频段，每个频段传输一路信号。</p></li><li><p>每个信号在不同的频率上独立传输，避免互相干扰。</p></li></ul></li><li><p><strong>特点</strong></p><ul><li><p><strong>并行传输</strong>：各信号在不同频率上同时传输，实现并行通信。</p></li><li><p><strong>恒定带宽</strong>：每个信号占用固定的频率带宽，不受其他信号的影响。</p></li><li><p><strong>硬件复杂度</strong>：需要频率分配和滤波器来确保信号不互相干扰，硬件设计较为复杂。</p></li></ul></li><li><p><strong>应用</strong></p><ul><li><p>广播电视</p></li><li><p>无线通信</p></li><li><p>有线通信中的波分复用（WDM）</p></li></ul></li></ul><h4 id="时分多路复用time-division-multiplexing-tdm">2.3.2时分多路复用（Time Division Multiplexing, TDM）</h4><ul><li><strong>工作原理</strong><ul><li>将时间划分为多个时隙，每个时隙传输一路信号。</li><li>在一个周期内，每个信号轮流占用时隙进行传输。</li></ul></li><li><strong>特点</strong><ul><li><strong>顺序传输</strong>：各信号在不同时间段轮流传输，实现顺序通信。</li><li><strong>动态带宽</strong>：每个信号的带宽利用率可以根据需要进行动态调整。</li><li><strong>时间同步</strong>：需要严格的时间同步机制，确保各信号在正确的时隙传输。</li></ul></li><li><strong>应用</strong><ul><li>数字电话网络</li><li>移动通信(如GSM)</li></ul></li></ul><h4 id="码分多路复用code-division-multiplexing-cdm">2.3.3码分多路复用（Code Division Multiplexing, CDM）</h4><ul><li><p><strong>工作原理</strong></p><ul><li>为每个信号分配一个独特的编码序列，所有信号在同一频率范围内同时传输。</li><li>接收端使用相应的编码序列解码所需的信号，其它编码序列的信号被视为噪声。</li></ul></li><li><p><strong>特点</strong></p><ul><li><strong>高效利用频谱</strong>：所有信号共享同一频谱，编码序列确保信号独立传输。</li><li><strong>抗干扰能力强</strong>：编码序列提供抗干扰能力，特别适合多径传播环境。</li><li><strong>复杂度高</strong>：编码和解码过程复杂，需要强大的处理能力。</li></ul></li><li><p><strong>应用</strong></p><ul><li>蜂窝移动通信（如CDMA）</li><li>卫星通信、</li></ul></li><li><p><strong>具体例子</strong>：假设有四个用户（A、B、C、D）在同一蜂窝网络中通信。每个用户被分配一个独特的编码序列，用于区分不同的信号。这里使用伪随机序列作为编码序列：</p><ul><li>用户A的编码序列：1010</li><li>用户B的编码序列：1100</li><li>用户C的编码序列：1001</li><li>用户D的编码序列：0110</li></ul><p>每个用户的信号通过与其编码序列相乘来进行编码，然后所有编码信号叠加在一起在同一频谱上进行传输。</p><ul><li><strong>编码过程</strong>：<ul><li>用户A发送比特1，其编码信号为：1010</li><li>用户B发送比特0，其编码信号为：0000</li></ul></li></ul></li></ul><h4 id="波分多路复用wavelength-division-multiplexing-wdm">2.3.4波分多路复用（Wavelength Division Multiplexing, WDM）</h4><ul><li><strong>工作原理</strong><ul><li>将光纤的可用光谱划分为多个波长，每个波长传输一路信号。</li><li>各个波长的信号在同一光纤上独立传输，互不干扰。</li></ul></li><li><strong>特点</strong><ul><li><strong>高带宽</strong>：利用光纤的巨大带宽，提供极高的数据传输速率。</li><li><strong>并行传输</strong>：多个波长的信号在同一光纤上同时传输。</li><li><strong>硬件复杂度</strong>：需要精确的波长分配和滤波设备，硬件设计复杂。</li></ul></li><li><strong>应用</strong><ul><li>长距离光纤通信</li><li>数据中心互连</li></ul></li></ul><h2 id="数据链路层-1">3、 数据链路层</h2><h3 id="功能要解决的问题">3.1 功能（要解决的问题）</h3><p><strong>成帧（Framing）</strong></p><p>将比特流划分成<strong>帧</strong>的主要目的是为了检测和纠正物理层在比特传输中可能出现的错误，数据链路层功能需借助<strong>帧</strong>的各个域来实现</p><p><strong>差错控制（Error Control）</strong></p><p>处理传输中出现的差错，如位错误、丢失等</p><p><strong>流量控制（Flow Control）</strong></p><p>确保发送方的发送速率，不大于接收方的处理速率，避免接收缓冲区溢出</p><h3 id="数据链路层提供的服务">3.2 数据链路层提供的服务</h3><ol type="1"><li><strong>无确认、无连接服务(Unacknowledged connections)</strong><ul><li>接收方不对收到的帧进行确认</li><li>适用场景：误码率低的可靠信道；实时通信</li><li>网络实例：以太网</li></ul></li><li><strong>有确认、无连接服务(Acknowledged connections)</strong><ul><li>每一帧都得到单独的确认</li><li>适用场景：不可靠的信道(无线信道)</li><li>网络实例：802.11</li></ul></li><li><strong>有确认、有连接服务(Acknowleddgeconnection-oriented)</strong><ul><li>适用场景：长延迟的不可靠信道</li></ul></li></ol><h3 id="成帧framing">3.3 成帧(Framing)</h3><h4 id="什么是成帧和帧">3.3.1 什么是成帧和帧</h4><ul><li><p><strong>成帧(Framing)</strong>旨在将网络层传递的数据包(通常称为网络层数据报)封装为数据链路层课传输的单位，称为<strong>帧(Frame)</strong>。每个帧包含了实际的数据以及用于传输控制和错误检测的附加信息</p></li><li><p><strong>帧的结构</strong>：</p><ol type="1"><li><strong>帧头(Header):</strong>包含控制信息，如源地址、目的地址、协议标识、帧序号等。这些信息帮助接收方识别帧并正确处理2.</li><li><strong>数据字段(Payload/Data):</strong>包含要传输的实际数据，即从网络层传递下来的数据包</li><li><strong>帧尾(Trailer):</strong>通常包括错误检测信息，如循环冗余校验(CRC)，用于检测帧在传输过程中是否发生错误</li></ol></li></ul><h4 id="要解决的关键问题如何表示一个帧的开始">3.3.1要解决的关键问题：如何表示一个帧的开始？</h4><ul><li>接收方必须能从物理层接收的比特流中明确区分出一帧的开始和结束，这个问题被称为帧同步或帧定界</li><li><strong>关键：</strong>选择何种定界符？定界符出现在数据部分如何处理？</li></ul><h4 id="成帧framing的方式">3.3.2 成帧(framing)的方式</h4><ol type="1"><li><p><strong>带比特填充的定界符法</strong></p><p><strong>定界符：</strong>两个0比特之间，连续6个1比特，即<code>01111110</code>,0x7E</p><p><img src="/images/875b471e44a6b0c85370a060308c384d(1)(1).png" /></p><p>发送方检查有效载荷：若在有效载荷中出现连续5个1比特，则直接插入1个0比特</p><p><img src="/images/f91c2c9a1ad4ac4232124097737f8162(1)(1).png" /></p><p>接收方的处理：</p><ul><li>若出现连续5个1比特</li><li>若下一个比特为0，则为有效载荷，直接丢弃0比特</li><li>若下一个比特为1，则连同后一比特的0，构成定界符，一帧结束</li></ul></li><li><p><strong>物理层编码违例</strong></p><ul><li><p><strong>物理层编码违例(Physical Layer CodingViolation)</strong>是物理层的一种信号编码技术，通常用于在数据传输过程中标识特定的控制信息，如帧的开始和结束、错误检测或其他特殊信号</p></li><li><p>核心思想：<strong>选择的定界符不会在数据部分出现</strong></p></li><li><p><strong>4B/5B编码方案：</strong></p><ul><li>4比特数据映射成5比特编码，剩余的一半码字(16个码字)未使用，可以用作帧界定符。</li><li><strong>传统的NRZ(不归零)编码</strong>存在这样的问题：如果数据中有长串的0或1，信号电平会长时间保持不变，导致时钟同步困难</li><li><strong>4B/5B编码</strong>通过将4位数据映射为5位编码，确保在传输的数据流中不会出现<strong>长时间没有电平变化</strong>的情况，从而提高了信号的可靠性和传输质量</li><li><strong>具体示例</strong></li></ul><table><thead><tr><th>4位数据</th><th>5位编码</th></tr></thead><tbody><tr><td>0000</td><td>11110</td></tr><tr><td>0001</td><td>01001</td></tr><tr><td>0010</td><td>10100</td></tr><tr><td>0011</td><td>10101</td></tr><tr><td>0100</td><td>01010</td></tr><tr><td>0101</td><td>01011</td></tr><tr><td>0110</td><td>01110</td></tr><tr><td>0111</td><td>01111</td></tr><tr><td>1000</td><td>10010</td></tr><tr><td>1001</td><td>10011</td></tr><tr><td>1010</td><td>10110</td></tr><tr><td>1011</td><td>10111</td></tr><tr><td>1100</td><td>11010</td></tr><tr><td>1101</td><td>11011</td></tr><tr><td>1110</td><td>11100</td></tr><tr><td>1111</td><td>11101</td></tr></tbody></table><p><strong>示例说明</strong></p><ul><li><strong>输入数据：</strong>假设我妈需要传输数据序列<code>0101 1100 0011</code></li><li><strong>编码过程：</strong><ul><li><code>0101</code> --&gt; <code>01011</code></li><li><code>1100</code> --&gt; <code>11010</code></li><li><code>0011</code> --&gt; <code>10101</code></li></ul></li><li><strong>传输信号：</strong>编码后的数据序列为<code>01011 11010 10101</code></li><li><strong>解码过程：</strong><ul><li>接收<code>01011</code>，查表还原为<code>0101</code></li><li>接收<code>11010</code>，查表还原为<code>1100</code></li><li>接收<code>10101</code>，查表还原为<code>0011</code></li></ul></li><li><strong>最终数据：</strong>成功还原为原始数据序列<code>0101 1100 0011</code></li></ul></li><li><p><strong>前导码：</strong></p><ul><li><strong>前导码(Preamble)</strong>是网络通信中用于信号同步的一个特殊序列，通常位于数据帧的最前端</li><li>例如：在<strong>以太网协议(如IEEE802.3)中</strong>，前导码通常由7个字节组成，每个字节为<code>10101010</code>(十六进制为<code>0xAA</code>)，紧接着是一个<strong>帧起始定界符(StartFrame Delimiter)</strong></li></ul></li><li><p><strong>曼切斯特编码/差分曼切斯特编码：</strong></p><ul><li>正常的信号在周期中间有跳变，持续的高电平(或低电平)为违例码，可以用作定界符</li><li>例如：802.5令牌环网</li></ul></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI大语言模型</title>
    <link href="/2024/07/24/aiLargeModel/"/>
    <url>/2024/07/24/aiLargeModel/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是aigc">1. 什么是AIGC</h2><ul><li><strong>AIGC</strong>：AI Generated Content，AI生成内容</li><li><strong>generative ai</strong>：生成式ai</li><li>生成式ai所生成内容就是AIGC</li><li><code>AI</code>、<code>机器学习</code>、<code>监督学习</code>、<code>深度学习</code>、<code>生成式AI</code>、<code>大语言模型</code>、<code>无监督模型</code>、<code>强化学习</code>之间的关系</li></ul><figure><img src="/images/关系图.jpg" alt="关系图" /><figcaption aria-hidden="true">关系图</figcaption></figure><ul><li><p><strong>AI</strong>(ArtificialIntelligence):人工智能，旨在让计算机系统去模拟人类的智能，从而解决问题和完成任务</p></li><li><p><strong>机器学习</strong>(MachineLearning):AI的一个子集，不需要人类去做<u>显式编程</u>，而是通过算法去自行识别和改进，去识别模式、做出预测和抉择</p><ul><li><strong>显式编程</strong>：如果我们通过代码告诉电脑，图片里面有红色说明是玫瑰，有黄色说明是向日葵</li><li><strong>机器学习</strong>：给电脑大量玫瑰和向日葵图片，让电脑自行识别模式，总结规律，从而对没见过的图片进行判断。这就是机器学习</li><li><strong>机器学习</strong>领域下有若干分支，包括<code>监督学习</code>、<code>无监督学习</code>、<code>强化学习</code>。</li></ul></li><li><p><strong>监督学习</strong>：机器学习算法会接受有<u>标签</u>的训练数据。每个训练数据点都既包括输入特征，也包括期望的输出值。</p><ul><li><strong>标签</strong>：期望的输出值</li><li><strong>算法的目标</strong>：学习输入和输出之间的映射关系，从而在给出新的输入特征后能够准确预测出相应的输出值</li><li><strong>举例</strong>：经典的监督学习任务包括分类、回归<ul><li><strong>分类</strong>：把数据划分为不同的类别。比如，拿一堆猫猫狗狗的照片，和照片对应的"猫"“狗"标签进行训练，让模型根据没见过的照片预测是猫还是狗</li><li><strong>回归</strong>：对数值进行预测。比如，拿一些房子特征的数据，比如面积、卧室数、是否带阳台等，和相应的房价作为标签进行训练然后让模型根据没见过房子的特征预测房价</li></ul></li></ul></li><li><p><strong>无监督学习</strong>：学习的内容是没有标签的，算法的任务是自主发现数据里的模式和规律。经典的无监督学习任务包括<u>聚类</u>。比如，拿一堆新闻文章，让模型根据主题或内容的特征，自主把相似文章进行组织</p><ul><li><strong>聚类</strong>：把数据进行分组。</li></ul></li><li><p><strong>强化学习</strong>：让模型在环境里采取行动，获得结果反馈，从反馈里学习，从而能在给定情况下采取最佳行动，来最大化奖励或最小化损失。跟训小狗类似，刚开始时小狗随心所欲做出很多动作，但随着与训犬师的互动，小狗发现某些动作会获得零食，某些动作会获得惩罚。通过观察动作和奖惩之间的联系，小狗的行为会逐渐接近训犬师的期望。</p></li><li><p><strong>深度学习</strong>：不属于<code>监督学习</code>、<code>无监督学习</code>或<code>强化学习</code>，他是机器学习的一个方法，核心在于使用人工神经网络，模仿人脑处理信息的方式，通过层次化的方法，提取和表示数据的特征。神经网络由许多基本的计算和存储单元组成，这些单元被称为神经元，这些神经元通过层层连接来处理数据，并且深度学习往往有很多层，因此称为”深度“。比如要识别一张小猫的照片，数据首先传入到输入层(就像人类的眼睛看到图片)，之后数据通过多个隐藏层，每一层都会对数据进行一些复杂的数学运算，来帮助计算机理解图片中的特征，例如小猫的耳朵、眼睛等等。最后，计算机会给出一个答案，表示这是否是一张小猫的图片</p><ul><li><strong>神经网络</strong>可以用于<code>监督学习</code>、<code>无监督学习</code>、<code>强化学习</code>，所以深度学习不属于他们的子集。</li><li><strong>生成式AI</strong>是深度学习的一个应用，它利用神经网络来识别现有内容的模式和结构，学习生成新的内容。内容形式可以是文本、图片、音频等等</li><li><strong>大语言模型</strong>(Large Language Model，LLM)也是深度学习的一种应用，专门用于进行自然语言处理任务。包括模型输入、训练数据、模型输出</li><li>不是所有的生成式AI都是大语言模型，例如<u>扩散模型</u><ul><li><strong>扩散模型</strong>：扩散模型首先定义了一个由数据分布逐步转化为高斯噪声分布的过程（正向扩散），这一过程可以视为一系列逐渐添加噪声的步骤。随后，模型学习如何执行这一过程的逆操作，即从纯粹的噪声开始，通过一系列逆步骤逐步“去噪”，最终生成接近原始数据分布的样本（反向扩散）。</li></ul></li><li>而是否所有的大语言模型都是生成式AI，这也存在些许争议。因为有些大语言模型因为其架构特点，不适合文本生成。</li></ul><h2 id="什么是大语言模型">2. 什么是大语言模型</h2><p><strong>大语言模型</strong>(Large Language Model,LLM)是用于做自然语言相关任务的深度学习模型，给模型一些文本输入，他能进行相应的文本输出大语言模型首先需要通过大量文本进行无监督学习。借助海量的训练文本数据，模型能更多了解单词与上下文之间的关系，从而能更好的了解文本的含义，并生成更准确的预测</p><p>大语言模型的大，不止是指训练数据量大，而是<strong>参数</strong>数量巨大。</p><p><strong>参数</strong>：模型内部的变量，可以理解为是模型在训练过程中学到的知识。参数决定了模型如何对输入数据作出反应，从而决定模型的行为。(GPT(GenerativePre-trainedTransformer，Transformer是其中的关键)-1参数有1.17亿个，GPT-2参数有15亿个，而GPT-3的参数又增长到1750亿个)。</p><p>在Transformer被提出之前，语言模型的主要架构是<strong>循环神经网络</strong>(RecurrentNeuralNetwork)。RNN逐字处理，每一步取决于先前的隐藏状态和当前的输入，因此无法并行运算，训练效率低。而且RNN不适合长文本训练。词之间距离越远，前面对后面的影响越弱，所以它难以得到长距离的语义关系</p><p><strong>Transformer</strong>有能力学习输入序列里所有词的相关性和上下文，不会受到短时记忆的影响，因为Transformer有<u>注意力机制</u>。简单来说，Transformer在处理每个词的时候，不仅会注意这个词本身，以及它附件的词，还会去注意输入序列里所有其他的词，然后给予每个词不一样的注意力权重。权重是模型在训练过程中通过大量文本习得的。因此Transformer有能力知道当前这个词和其他词之间的相关性有多强，然后去专注于输入里真正重要的部分，即使两个词的距离很远，Transformer依然能捕获到它们之间的依赖关系。</p><p><strong>Transformer</strong>在把每个词输入给神经网络前，除了会对词进行嵌入，转换成向量，也就是把词各用一串数字表示，还会把每个词在句子中的位置，也各用一串数字表示，添加到输入序列的表示中，然后把这个结果给神经网络，这样模型既能理解每个词的实际意义，又能捕获词在句子中的位置，从而理解不同词之间的顺序关系。借助位置编码，词可以不按顺序输入给Transformer，模型可以同时处理输入序列里的所有位置，而不需要像RNN那样依次处理。在计算时，每个输出都可以独立地计算，不需要等待其他位置的计算结果，这大大提升了训练速度。</p><h2 id="transformer">3. Transformer</h2><p><a href="/images/Transformer.png">Transformer</a></p><p><strong>Transformer</strong>由两个核心部分组成：<strong>编码器</strong>(Enconder)和<strong>解码器</strong>(Decoder)</p><p><strong>工作原理</strong>：</p><ul><li><p><strong>编码器部分</strong>：</p></li><li><ol type="1"><li>假如我们想要将一个英文橘子转化为法语，比如输入:<code>She is in a restaurant</code>,输入的文本首先会被<code>token化</code>，也就是先把输入拆分成各个token：<code>she</code>is<code>in</code> a<code>restaurant</code>。取决于不同的token化方法，短单词可能每个词是一个token，长单词可能被拆成多个token。每个token会被一个整数数字表示，这个数字被叫做<code>token ID</code>。这样做是因为计算机内部无法储存文字，任何字符和字符最终都得用数字来表示。有了数字表示的输入文本后，再把它传入嵌入层。</li><li>通过编码器获得词向量之后，下一步是对向量进行位置编码，然后把得到的结果传给编码器。模型既可以理解每个词的意义，又可以捕捉词在句子中的位置，从而理解不同词之间的顺序关系</li><li>接着进入编码器的核心部分，把输入表示成一种更抽象的表示形式，这个表示形式也是向量，即一串数字。里面既保留了输入文本的词汇信息和顺序关系，也捕捉了语法语义上的关键特征。捕捉关键特征的核心是编码器的<u>自注意力机制</u>。模型在处理每个词的时候，不仅会关注这个词本身和它附件的词，还会关注输入序列中的其他所有词。同时Transformer使用多头注意力机制，也就是编码器不只有一个自注意力模块，而是有多个，每个头有不同的自注意力权重，用来关注文本里不同特征或方面。比如有的关注动词，有的关注修饰词，有的关注情感，有的关注命名实体等等，而且可以做并行运算，也就是计算进展上互不影响。</li><li>多头自注意力后面，还有一个前馈神经网络。他会对自注意力模块的输出进行进一步的处理，增强模型的表达能力</li><li>编码器在Transformer里不止有一个，实际上是有多个堆叠在一起。每个编码器内部结构一样，但不共享权重，这让模型能更深入的理解数据处理更复杂的文本语言内容</li></ol><ul><li><p>token可以理解为是文本的一个基本单位。短的英文单词，可能一个词是一个token，而长的词可能被分为多个token。而中文的话，所占的token数量会相对更多，有些字要用一个甚至更多token表示</p></li><li><p>嵌入层的作用：把每个token都用向量表示。向量，即一串数字，他能表达的含义远远大于一个数字，能包含更多语法语义信息。词向量不仅可以帮模型理解词的语义，也可以捕捉词与词之间的复杂关系(提出Transformer的文章里，向量长度是512，GPT-3是12288)</p></li><li><p>位置编码：把表示各个词在文本里顺序的向量和上一步得到的词向量相加</p></li><li><p>自注意力机制，通过计算每对词之间的相关性来决定注意力权重。两个词之间的相关性越强，它们之间的注意力权重就会越高。自注意力机制涉及很多计算步骤，更多细节请参考论文原文<ahref="https://arxiv.org/pdf/1706.03762">Attention Is All YouNeed</a></p></li></ul></li><li><p><strong>解码器部分</strong>：</p><ul><li>他是大语言模型生成一个个词的关键。</li></ul><ol type="1"><li>通过前面的编码器。我们有了输入序列里各个token的抽象表示，可以把它传给解码器。解码器还会先接收一个特殊值，这个值表示输出序列的开头。这样做的原因是，解码器不仅会把来自编码器的输入序列的抽象表示作为输入，还会把之前已经生成的文本也作为输入，来保持输出的连贯性和上下文相关性。刚开始生成的这轮，还没有任何已生成的文本，所以把表示开头的特殊值先作为输入，具体的生成过程仍然是要经过多个步骤</li><li>首先跟编码器一样，文本要经过我们已经了解过的嵌入层和位置编码，然后被输入进多头自注意力层。但他和编码器里的自注意力层有点不一样，当编码器在处理各个词的时候，它会关注输入序列里所有其他词，但解码器中，自注意力只会关注这个词和它前面的其他词，后面的词要被遮住，不去关注。这样做是为了确认解码器在生成文本时遵循正确的时间顺序，不能给他偷看到后面。在预测下一个词时，只使用前面的词作为上下文。这种类型的多头自注意力，被叫做带掩码的多头自注意力。带掩码的多头自注意力，是针对已生成的输出序列的</li><li>而后面解码器还有个多头自注意力层，这里就是前面编码器所输出的，输入序列的抽象表示所派上用场的地方。注意力会捕捉编码器的输出和解码器即将生成的输出之间的对应关系，从而将原始输入序列的信息融合到输出序列的生成过程中。</li><li>解码器里的前馈神经网络和编码器里的类似，也是通过额外的计算来增强模型的表达能力。</li><li>和编码器一样，解码器同样是多个堆叠到一起的，这可以增强模型的性能，有助于处理复杂的输入输出关系</li><li>解码器的最后阶段，包含一个线性层和一个Softmax层，它们俩加一块的作用是，把解码器输出的表示转化为词汇表的概率分布</li></ol><ul><li>词汇表的概率分布，代表下一个被生成token的概率，有些token的概率比其他值高，在大多数情况下模型会选择概率最高的token作为下一个输出</li><li>解码器本质上在猜下一个最可能的输出，至于输出是否符合客观事实，模型无从得知，所以我们也能看到模型一本正经的胡说八道，这种现象叫做<strong>幻觉</strong></li><li>解码器的一整个流程会重复多次，新的token会持续生成，直到生成的是一个用来表示输出序列结束的特殊token</li></ul></li><li><p><strong>小结</strong>：</p><ul><li>编码器用来理解和表示输入序列，解码器用来生成输出序列</li><li>实际上，在原始架构的基础上，后续出现了一些变种，主要有三个类别：<strong>仅编码器</strong>，<strong>仅解码器</strong>，以及<strong>编码器-解码器</strong></li><li><strong>仅编码器模型</strong>，也叫自编码器模型，只保留了原始架构里的编码器，如BERT。此类模型适用于理解语言的任务，比如掩码语言建模，也就是让模型猜文本里被遮住的词是什么；情感分析，让模型判断文本情感是积极还是消极，等等</li><li><strong>仅解码器模型</strong>，也叫自回归型模型，只保留了原始架构里的解码器，GPT系列都是这种模型的例子，这类模型非常擅长通过预测下一个词来实现文本生成，我们已经在ChatGPT上见识过了</li><li><strong>编码器-解码器模型</strong>，也叫序列到序列模型，同时保留了原始架构里的编码器和解码器，例如T5，BART。此类模型适用于把一个系列转换成另一个序列的任务，比如翻译、总结等等</li></ul></li></ul><h2 id="炼成chatgpt">4. 炼成ChatGPT</h2><p>炼成ChatGPT拢共分三步：</p><ol type="1"><li><strong>无监督学习</strong>：通过大量文本进行无监督学习预训练，得到一个能进行文本生成的基座模型<ol type="1"><li>首先需要海量文本作为原料，让模型从中学习。比如GPT-3这个基座模型的训练数据，有多个互联网文本语料库，覆盖书籍、新闻文章、科学论文、维基百科等等，训练数据的整体规模是3000亿token</li><li>有了大量可用于训练的文本后，要采用无监督学习的方式训练模型</li><li>预训练不是一个容易的过程，是这四个步骤里最耗时、费钱的。</li><li>预训练得到一个基座模型。基座模型不等同于ChatGPT背后的对话模型，因为此时模型有预测下一个token的能力，会根据上文补充文本，但并不擅长对话。比如你问他一个问题，他可能模仿你的问题生成更多的问题。为了解决这个问题，我们需要进行第二步，对基座模型进行微调</li></ol></li><li><strong>监督微调</strong>：通过一些人类撰写的高质量对话数据，对基座模型进行监督微调，得到一个微调后的基座模型。此时的模型除了具备续写文本之外。也会获得更好的对话能力<ol type="1"><li><strong>微调</strong>就是在已有模型上做进一步的训练，会改变模型的内部参数，让模型更加适应特定任务。换句话说，为了训练更适合对话的ai助手，需要给基座模型看更多的对话数据</li><li>微调的成本相比于预训练的成本低很多，因为需要的训练数据的规模更小，训练时长更短。在这一阶段里，模型不需要从海量文本中学习，而是从一些人类写的专业且高质量的回答里学习。这相当于给了模型问题，也给了模型我们中意的回答，属于监督学习，所以这一过程被叫做监督微调(SupercisedFine-Tuning, SFT)</li><li>完成后会得到一个SFT模型，他相比较步骤一得到的模型，更加擅长对问题做出回答。但为了对模型的实力继续提升，还能进行第三步，让SFT模型进行强化学习</li></ol></li><li><strong>训练奖励模型+强化学习训练</strong>：用问题和多个对应回答的数据，让人类标注员对回答进行质量排序，然后基于这些数据，训练出一个能对回答进行评分预测的奖励模型。接下来，让第二步得到的模型对问题生成回答，用奖励模型给回答进行评分，利用评分进行反馈，进行强化学习训练<ol type="1"><li>对SFT模型进行强化学习。我们可以让ChatGPT对问题做出回答，然后让人类评估员去给回答打分</li><li>打分主要基于3H原则：Helpful(有用性)， Honest(真实性)，Harmless(无害性)。如果打分高的话模型知道要再接再厉，打分低的话模型就学习到要予以改进。但是，让人类给模型一个个打分，成本极高，效率极低。所以要训练出一个模型，让模型给模型打分。所以在这一个步骤里，需要训练一个奖励模型</li><li>奖励模型，是从回答以及回答对应的评分里学习的。得到评分数据的方式是，让微调后的GPT模型，也就是第二步里得到的SFT模型，对每个问题生成多个回答，然后让人类标注员对回答质量进行比较排序。虽然还是免不了人类标注员的劳动，但一旦有了足够的排序数据，就可以把数据用在训练奖励模型上，让奖励模型学习预测回答的评分</li><li>奖励模型训练出来后，就可以用在强化学习上了。强化学习里，ChatGPT模型的最初参数来自之前得到的SFT模型但会随着训练而更新。奖励模型的参数则不会被更新，它的任务就是对模型生成的内容打分</li><li>经过一轮又一轮的迭代之后，模型会不断优化策略，回答的质量会进一步提升，强大的ChatGPT就炼成了</li></ol></li></ol><h2 id="调教chatgpt">5. 调教ChatGPT</h2><p><strong>提示工程</strong>(PromptEngineering)：研究如何提高和AI的沟通质量及效率，核心关注提示的开发和优化</p><ul><li>提示就是我们给AI聊天助手输入的问题或指令，AI会根据提示内容给予回应</li></ul><p>ChatGPT等聊天助手存在的局限性：他们背后的大语言模型是用海量文本训练出来的，因此擅长模仿人类语言表达，也从那些内容里学到了不少知识，他们的回应都是根据提示以及前面已生成的内容，通过持续预测下一个token的概率来实现的。但同时，对于他们不了解的领域，他们并不知道自己缺乏那方面的知识，加上生成过程中并没有反思能力，所以会经常看到胡说八道的同时还充满着自信。</p><p>如何调教AI给出想要的回答？</p><ol type="1"><li><strong>小样本提示</strong>：我们很多时候都是直接丢问题或指令给ai，这属于零样本提示，就是没有给AI示范，不一定和我们想要的效果相符合。但如果我们在ai回答前，给他几个对话作为示例，用样本对他进行引导，AI模型就会利用上下文学习能力，一方面作为记忆那些内容作为知识，另一方面，像示范那样模仿着进行回应。有了小样本提示后，再给出AI类似的问题，他就能给出和提示示范相似的回答了</li><li><strong>思维链</strong>：AI不擅长做数学题，因为它不会因为某个词需要涉及更多的思考，而花费更多时间生成那个token，即使前面有正确的示范答案也没什么帮助。这种时候可以借助思维链。思维链的使用方法是，我们给AI的小样本提示里，不仅包含正确的结果，也展示中间的推理步骤，AI在生成回答时，也会模仿着去生成一些中间步骤，把过程进行分解。</li><li>在思维链的相关论文里，作者还提到，即使我们不用小样本提示，只是在问题后面加一句：Let'sthink step by step.让我们来分步骤思考，也能提升AI得到正确答案的概率</li></ol><h2 id="武装chatgpt">6. 武装ChatGPT</h2><p>ChatGPT的短板：编造事实、计算不准确、数据过时等等。为了应对这些问题，可以借组一些外部工具或数据，把AI武装起来。实现这一思路的框架包括<code>RAG</code>、<code>PAL</code>、<code>ReAct</code></p><ul><li><strong>RAG</strong>(Retrieval Augmented Generation, 检索增强生成)：<ul><li>对于一些小众领域，我们无法指望ChatGPT帮我们回答相关问题。一个应对方法是，我们可以提供外部文档，让模型访问外部知识库，获得实时且正确的数据，生成更可靠和准确的回答，这种架构就是检索增强生成。</li><li>具体来说，外部知识文档要先被切分成一个个段落，因为大语言模型一次性能接收的文本长度有限，然后每个段落会被转成一系列向量。向量可以被看作是一串固定长度的数字，然后储存进向量数据库里。当我们提出问题的时候，这个提示也会被转换为向量，然后查找向量数据库里，和用户的查询向量最为接近的段落向量。找到以后，段落信息回合原本的用户查询问题组合到一起，一块传给AI。这样，AI就能把外部文档的段落作为上下文，基于里面的信息给出更严谨的回答。因此，你可以对外部文档里任何内容进行提问，即使AI模型没有受到过那些内容的训练</li><li>RAG有利于搭建企业知识库和个人知识库，CHatGPT的一些插件就是基于RAG架构的，官方也推出了上传PDF之后，对PDF进行提问的功能。如果你会使用ChatGPT的API，还可以用代码实现自己的索引增强生成</li></ul></li><li><strong>PAL</strong>(Program-Aided Language Models,程序辅助语言模型)：<ul><li>大语言模型还有一个问题，我们没法把它当作计算器，当我们问他一个数学计算后，他没有真正帮忙做计算，只是在猜下一个最可能的token来生成回答。但如果我们不让他做计算，而是把计算后的结果告诉他呢？PAL可以帮助我们解决此类问题。</li><li>PAL的核心在于，我们不让AI直接生成计算结果，而是借助其他善于做计算的工具，比如Python解释器。那我们对AI的需求，就变成了生成得到计算结果所需的代码。具体来说，首先，为了让AI遵循我们的需求，可以借助思维链。我们现在小样本提示里，通过样本示例，给模型示范如何分步骤思考，写出解决问题所需的变量赋值、数学运算等代码，让模型照猫画虎。在用户提问后，把用户的问题和我们已有的提示模板进行拼接，一并给到AI，让AI生成代码。接下来，把AI返回的回答给到Python解释器，让Python解释器执行并返回计算的结果，这个回答再给回到AI，让AI带着计算答案对用户的回答进行妥善回复</li><li>现在我们用了大语言模型接收问题的耳朵、思考的脑子、说话的嘴，以及代码解释器做运算的手</li></ul></li><li><strong>ReAct</strong>(Reason Action, 推理行动结合)：<ul><li>ChatGPT所了解的知识，天然受到训练数据日期的影响。比如说，模型是去年训练完成的，训练数据里必然不包含今年的新闻，模型也无从得知训练完成后发生的事情，这被称为<strong>知识截断</strong>。当我们问模型最近发生的事实时，模型要么回复已过时的信息，要么会胡编乱造一通。但重新训练模型的成本是相当高的，也无法彻底解决数据过时的问题</li><li>ReAct的核心在于，让模型进行动态推理，并采取行动与外界环境互动。它同样能与思维链结合。我们会用小样本示例，展示给模型一个推理与行动结合的框架，也就是针对问题，把步骤进行拆分。每个步骤要经过推理、行动、观察，推理是针对问题或上一步观察的思考，行动是基于推理，与外部环境的一些交互，比如用搜索引擎对关键词进行一些搜索，观察是对行动得到的结果进行查看</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>ai</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ai</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杂记</title>
    <link href="/2024/07/20/notes/"/>
    <url>/2024/07/20/notes/</url>
    
    <content type="html"><![CDATA[<h2 id="手机电脑知识">手机/电脑知识</h2><h3 id="电脑硬件基础知识">电脑硬件基础知识</h3><h4 id="cpu">1. CPU</h4><p>CPU就是笔记本的大脑，负责处理计算机系统的指令，决定电脑的反映速度</p><h5 id="主要要数">主要要数</h5><p>英特尔酷睿版和AMD锐龙版</p><h5 id="多核胜过单核">多核胜过单核</h5><h5 id="主频">主频</h5><p>运算速度，主频越高性能越强</p><h5 id="核心">核心</h5><p>最大工作频率，主频相同时睿频越大越好</p><h5 id="intel处理器">intel处理器</h5><p>Intel的CPU通常以品牌名（如Core, Pentium,Celeron）开始，随后是一系列数字和字母，表示不同的系列和性能级别。</p><ol type="1"><li>品牌和系列：<br></li></ol><ul><li><code>Core：</code>主流至高端市场。例如，Core i3, Core i5, Core i7,Core i9。</li><li><code>Pentium</code> 和<code>Celeron</code>：入门级市场，适用于基本计算。</li></ul><ol start="2" type="1"><li>代号：<br></li></ol><ul><li>数字的第一位表示代（generation）。例如，i7-9700K中的“9”表示第9代。</li></ul><ol start="3" type="1"><li>SKU数字：</li></ol><ul><li>接下来的数字表示性能级别和SKU。数字越大，性能通常越强。</li></ul><ol start="4" type="1"><li>后缀：</li></ol><ul><li>K:可超频</li><li>F；没有集成显卡</li><li>U：低功耗，通常用于笔记本</li><li>H：高性能，常见于游戏本</li></ul><ol start="5" type="1"><li>以 Intel Core i7-12700H 为例：<ol type="1"><li>i7：这部分表示处理器的系列。Intel的核心系列从i3、i5、i7到i9，数字越大，性能通常越强，功能也越多。</li><li>12：这两位数字表示处理器的代数，也就是说12700H属于Intel的第12代处理器。</li><li>700：这通常是用来进一步区分同一代内不同性能级别的型号。数字越大，通常性能越强。</li><li>H：这个字母代表处理器的用途或特性。对于Intel来说，H常见于笔记本处理器中，代表高性能版，通常意味着更高的功率和性能。</li></ol></li></ol><h5 id="amd处理器">AMD处理器</h5><ol type="1"><li>品牌和系列<ul><li>Ryzen：与Intel的Core系列相对应。包括Ryzen 3, Ryzen 5, Ryzen 7, Ryzen9等。</li><li>Threadripper：面向高端桌面市场，适合专业内容创造者和极端多任务处理。</li></ul></li><li>代号和性能级别：<ul><li>与Intel类似，数字的第一位通常表示代。例如，Ryzen3700X中的“3”表示是第3代Ryzen。</li></ul></li><li>SKU数字：<ul><li>数字越大，指示的性能和核心数通常越高。</li></ul></li><li>后缀：<br><ul><li>X：表示性能加强版。</li><li>G：含有集成显卡。</li><li>H：高性能，用于笔记本。</li><li>U：低功耗，同样用于笔记本。</li></ul></li><li>以 AMD Ryzen 7 5800X 为例：<br></li></ol><ul><li>Ryzen 7：这部分表示处理器的系列。AMD的系列包括Ryzen 3、Ryzen5、Ryzen 7和Ryzen 9。和Intel一样，系列数字越大，表示性能越高。</li><li>5800：对于AMD，前一位数字（5）通常表示处理器的代数，这里指的是第5代Ryzen处理器。后三位（800）则用来区分性能级别，数字越大，性能越高。</li><li>X：AMD处理器中的这个字母表示该处理器的特性。例如，X表示高性能版，而U则表示能效优先。</li></ul><h4 id="显卡gpu">2. 显卡/GPU</h4><p>显卡又称GPU，负责渲染画面。分为独立显卡和集成显卡(核显)<br></p><p><strong>核显：</strong>是集成在CPU内部的显卡，功耗低，性能也低</p><p><strong>独显：</strong>独立显卡是高性能显卡，独立存在，功耗也高</p><p><strong>NVIDIA命名规则</strong></p><p>NVIDIA的显卡通常以“GeForce”为品牌名，后面跟着系列名称如“RTX”或“GTX”，然后是一串数字和可能的后缀。</p><p><em>品牌名称：</em></p><ul><li>GeForce GTX：主要针对主流市场的游戏显卡。</li><li>GeForce RTX：高端市场，支持光线追踪和AI增强图形。</li></ul><p><em>系列和代数：</em></p><p>数字的前两位通常表示系列，如RTX 3080中的“30”代表3000系列。系列的更新通常意味着显卡在性能、能效和技术上的大幅提升。</p><p><em>性能级别：</em></p><p>数字的后两位表示性能级别。数字越高，性能越强。例如，RTX 3090比RTX3080性能更强。</p><p><em>后缀：</em></p><ul><li>Ti 或 Super：这些后缀表示比标准型号更高的性能。</li><li>M：用于笔记本电脑的移动版显卡。</li></ul><p><strong>AMD命名规则</strong></p><p>AMD的显卡品牌为“Radeon”，同样后面跟随系列和数字，指示性能和代数。</p><p><em>品牌名称：</em></p><ul><li>Radeon RX：普及到高端的游戏显卡。</li><li>系列和代数：类似于NVIDIA，AMD显卡的数字前两位通常代表其系列。如RadeonRX 6700 XT，其中的“67”表示6000系列。</li></ul><p><em>性能级别：</em></p><p>数字的后两位或三位代表显卡在系列中的性能位置，数字越大，性能通常越高。</p><p><em>后缀：</em></p><p>XT：性能较高的版本。 M：指移动版，用于笔记本电脑。</p><h4 id="屏幕">3. 屏幕</h4><p><strong>尺寸</strong></p><p>指电脑屏幕的对角线长度，通常有小屏的13寸、14寸，大屏有15寸、16寸，17。14英寸以下便携性高，适合外带办公；15英寸以上，适合观影娱乐。</p><p><strong>分辨率：</strong>显示器最多能显示的像素数，反映屏幕色彩细腻程度的指标。常见有<spanclass="math inline">\(1920 \times 1080\)</span>、<spanclass="math inline">\(2240 \times1400\)</span>（2k屏）。还有2.5k，3k屏。</p><p><strong>色域：</strong>色域可以认为是红（R）绿（G）蓝（B）的组合。色域值越高，色彩就更丰富。72%NTSC、100%SRGB都属于高色域，对于需要修图、视频剪辑和渲染的，高色域是必选项。</p><p><strong>刷新率：</strong>表示每秒刷新的画面帧数，刷新率越大越好，画面过渡越流畅，一般需要好的显卡支持。多数电脑是60Hz，能够满足日常的影音需求。90HZ、120HZ、144HZ属于高刷。</p><h4 id="内存">4. 内存</h4><p><strong>内存：</strong>指电脑RAM大小，系统和软件的运行都需要在RAM上，数据传输与交换都需要经过它。标配一般是16G，有的可以增加到32G，甚至64G。</p><p><strong>单双道：</strong>内存分单通道和双通道，双通道比单通道运行要更快。</p><p><strong>注：</strong>内存只负责传输数据，具有临时性，一旦电脑关机或者断点，会自动清空数据。</p><h4 id="硬盘">5. 硬盘</h4><p><strong>硬盘：</strong>硬盘分为机械硬盘和固态硬盘，市面上的笔记本电脑基本都是固态硬盘，特点是读取速度快（文件拷贝读写快），经久耐用。</p><p><strong>容量：</strong>电脑硬盘容量标配512G，有的可以达到1T</p><h4 id="接口">6. 接口</h4><p><strong>类型：</strong>通常有USB、Type-C、3.5毫米、HDMI、SD读卡器和网线接口。</p><p><strong>特点：</strong></p><ul><li>USB3.0要比USB2.0有更快的传输速度;</li><li>Type-C支持正反插，通常用来做扩展端口</li><li>HDMI主要用来连接投影仪或电视设备，如果办公经常要开会，该接口是必须的。</li></ul><h4 id="重量">7. 重量：</h4><p><strong>排序：</strong>轻薄本＜全能本＜游戏本</p><p>轻薄本通常在1 ~ 1.5KG以内，游戏本一般在2 ~ 3KG</p><h4 id="散热">8. 散热</h4><p><strong>散热：</strong>笔记本发热源主要来源于：CPU、显卡和主板电感，如果热量没法散开，那么性能也无法很好的表现出来。</p><p><strong>需求：</strong>散热方面通常需要需要考虑：内部要有大型的散热铜管导热、较大的风扇、整体散热的噪音尽可能的小;</p><h4 id="续航">9. 续航</h4><p><strong>续航：</strong> 轻薄本＞全能本＞游戏本</p><p><strong>注：</strong>正常情况下笔记本应该是充着电源使用，这样并不会对电池有什么影响，而且充着电源时性能才可以得到释放。</p><h3 id="桌面白图标">桌面白图标</h3><p>任务管理器 -&gt; windows资源器 -&gt; 右键重新启动</p><h3 id="装机法">装机法</h3><ol start="0" type="1"><li>请熟读背诵并严格遵守本文条例。</li><li>如果一个设备现在运行得很完美，就不要手贱去调整它。</li><li>不要空腹装机，务必保证开工前有足够的热量摄入。</li><li>不要在夜晚睡前折腾设备，除非你今晚并不打算睡觉。</li><li>新设备装箱前务必在外面做最小系统亮机测试。</li><li>将主板挡板摆在主板旁边最显眼的位置，并在最小系统亮机后第一时间安装。</li><li>务必撕去散热器的保护膜。</li><li>均匀适量涂抹品牌硅脂，禁止使用牙膏等物品替代。</li><li>硅脂应且仅应涂抹在CPU表面，禁止涂抹针脚与底座。</li><li>防呆并不防傻，禁止大力出奇迹。</li><li>内存应首先选择远离CPU的插槽安装。</li><li>内存数量：宁双不单，宁二不四。</li><li>ATX主板装不进ITX机箱，ITX主板也不建议装进ATX机箱。</li><li>使用正规散热器，禁止使用萝卜和水缸等物品代替。</li><li>使用品牌电源，禁止使用红星电源等高爆设备。</li><li>系统应尽量安装在固态硬盘里。</li><li>不要使用玻璃等易碎材质侧板。</li><li>间歇性清灰是必须的，频率取决于设备环境的洁净程度。</li><li>购买设备前务必仔细核对显卡、散热、机箱等配件的长宽高以及各类线材的长度。</li><li>显存导热硅片必须使用和原装同样厚度，拆显卡前请复习第1条内容。</li><li>工作空间距离一米内不要放置危险物品，如敞口的水杯、猫。</li><li>水冷有风险，选择需谨慎。</li><li>拆机前应先烤机、并保证散热器轻微扭动取下，避免连根拔起。</li><li>重启解决90%的问题，重装解决99%的问题，重买解决100%的问题。</li><li>电子产品长期来看价格只会越来越低，杜绝“精准下山”的想法。</li><li>备份是最安全且唯一真正安全的数据保存方法。</li><li>如果你不擅长空间管理，请保证C盘分区尽量大。</li><li>Linux是个好东西，对于且仅对于会用的人来说。</li><li>不要照抄网上的超频作业，因为每一个元件的“体质“都不一样。</li><li>显卡紧挨的PCIE槽不要插面积大的设备挡风。</li><li>扎带和双面胶有时比螺丝好用。</li><li>机箱不重要，安全的设备安放环境才重要。</li><li>不要给小白推组装机，更不要给他提供硬件或软件，让他去买品牌机或者笔记本。</li><li>整机功率应不高于电源标称功率的75%。</li><li>禁止在机箱内摆放熔点低的装饰物。</li><li>涉及重要工作生产内容的设备应配置UPS.</li><li>水洗设备后务必保证完全干燥再通电，水洗前请复习第1条。</li><li>不要用手触摸高速旋转的风扇。</li><li>不要太过热心当好人，也不要试图教育或改变他人。</li><li>快递设备务必拨下显卡和塔扇等设备，并做好填充和包装，允许时使用静电袋。</li><li>RGB灯能显著提升设备性能。</li></ol><h3 id="打游戏时">打游戏时</h3><p>GPU跑满说明游戏优化好</p><p>CPU跑满说明电脑要爆炸了</p><p>不严谨的说，GPU利用率越高越好，CPU越低越好</p><h3 id="取消大数据算法推送">取消大数据算法推送</h3><table><thead><tr><th>APP 类型</th><th>APP 名称</th><th>关闭步骤</th></tr></thead><tbody><tr><td>买</td><td>淘宝</td><td>设置 - 隐私 - 推荐管理 - 个性化推荐</td></tr><tr><td>买</td><td>京东</td><td>设置 - 隐私 - 广告管理 - 个性化广告（所有选项都可以关闭）</td></tr><tr><td>买</td><td>拼多多</td><td>设置 - 账号与安全 - 个性化广告管理 - 个性化广告</td></tr><tr><td>买</td><td>闲鱼</td><td>设置 - 隐私设置 - 个性化推荐</td></tr><tr><td>吃</td><td>饿了么</td><td>设置 - 安全中心 - 个性化推荐设计</td></tr><tr><td>吃</td><td>美团</td><td>设置 - 隐私设置 - 个性化内容推荐</td></tr><tr><td>行</td><td>携程旅行</td><td>设置 - 隐私设置 - 个性推荐</td></tr><tr><td>行</td><td>高德地图</td><td>设置 - 关于高德地图 - 隐私管理 - 个性化推荐设置</td></tr><tr><td>行</td><td>百度地图</td><td>设置 - 关于百度地图 - 隐私 -个性化推荐设置（有14个个性化选项，全部关闭）</td></tr><tr><td>行</td><td>同程旅行</td><td>设置 - 个性化内容推荐/个性化广告推荐</td></tr><tr><td>行</td><td>去哪儿旅行</td><td>设置 - 系统设置 - 接受个性化推荐</td></tr><tr><td>行</td><td>飞猪旅行</td><td>设置 - 隐私 - 个性化内容推荐/个性化广告推荐</td></tr><tr><td>玩</td><td>百度</td><td>设置 - 隐私设置 - 广告设置/搜索个性化推荐/推荐设置</td></tr><tr><td>玩</td><td>哔哩哔哩</td><td>设置 - 隐私权限设置 - 个性化内容推荐管理 - 个性化内容推荐</td></tr><tr><td>玩</td><td>西瓜视频</td><td>设置 - 个性化推荐（往下找）</td></tr><tr><td>玩</td><td>微博</td><td>设置 - 隐私设置 - 个人信息与权限 -个性化内容推荐/个性化广告推荐</td></tr><tr><td>玩</td><td>抖音</td><td>我的 - 设置 - 个人信息管理 - 个性化内容推荐</td></tr><tr><td>玩</td><td>音乐</td><td>设置 - 使用信息管理 -个性化内容推荐/视频展示个性化推荐/视频设置</td></tr><tr><td>玩</td><td>快手</td><td>设置 - 个人信息收集清单 - 广告 - 个性化广告展示</td></tr><tr><td>玩</td><td>懂车帝</td><td>设置 - 隐私设置 - 个性化广告/个性化推荐头条</td></tr><tr><td>玩</td><td>酷安</td><td>设置 - 隐私设置 - 个性化推荐</td></tr></tbody></table><h3 id="文字乱码">文字乱码</h3><h4 id="计算机是如何存储数据">1. 计算机是如何存储数据？</h4><p>每个计算机都是由大量晶体管组成的，每个晶体管只存在高电平和低电平两种状态，这意味着所有的数据在存储和计算时，都只能使用<strong>0</strong>和<strong>1</strong>这两种二进制数来表示</p><p>为了使计算机能够满足我们的日常生活，我们可以先用日常生活中常用的十进制数，用每个数字代表一个文字。然后将这些编号转换为二进制，这样就能把不同的文字以二进制的形式保存在计算机当中。</p><p>在这个过程中，用来代表二进制数的数称为码位，不同的字符对应的码位也是不同的。同时为了更直观的查询字符和码位的关系，我们可以用表来进行记录。每个字符的码位可以用行号和列号组合而成，这样查看码位就非常轻松了。</p><p>而在计算机中，这些用来表示0和1的位置，则被称为二进制位<strong>bit</strong>，8个bit组成了一个字节<strong>byte</strong>。而字节，是计算机用于表示数据的基本单位，生活中常见的KB、MB、GB，指的就是千字节、兆字节、吉字节。由于每个byte具有8个二进制位，每个二进制位又具有0和1两种取值，所以一个byte可以表示<spanclass="math inline">\(2^8\)</span>个字节，也就是256种取值。</p><h4 id="编码与解码">2. 编码与解码</h4><p>256种取值看似很少，但在计算机的早期已经完全足够了。在计算机发展的早期，最先被支持的是英文字符。英文26个字母，大小写一共52个，再加上数字、标点等可现实字符和控制字符，一共只有128个，这仅仅使用了一个字节可表示的一半码位。</p><p>1963年，美国国家标准协会将这128个字符组成了一个字符集，称为美国信息交换标准代码，简称<strong>ASCII</strong>。ASCII将所有字符按0-127进行排号，当你在计算机中输入大写字母<strong>A</strong>，计算机就会将大写字母<strong>A</strong>转换为十进制数65，这个过程被称为编码，然后计算机会将65保存为一个字节，并将这个字节转换为二进制数01000001，再存储到文件中。当计算机要显示数据时，则是一个反向的过程。先读取二进制数01000001，并转换为十进制数65，再用ASCII解码表进行解码，最后得到一个大写字母A。</p><p>这样我们就得到了一个字符的编码和解码过程</p><h4 id="字符集与乱码">3.字符集与乱码</h4><p>随着计算机的普及，世界各国也纷纷开始制定支持不同语言的字符集。这时问题就来了，因为很多国家的字符并不止几十或几百个那么简单，例如中国在1980年制定的信息交换用汉字编码字符集GB2312-80，在发布之初就收入了常用汉字6763个，可以覆盖中国大陆99.75%的使用频率。</p><p>这时问题就出现了，之前提到的一个字节可以表示的256个码位，在常用汉字面前根本就不够看，更别提再支持其他几万个汉字了。为了解决这个问题，GB2312决定使用两个字节来编码一个字符。字节增加一个，但码位并不止增加一位，而是从<spanclass="math inline">\(2^8\)</span>变成了<spanclass="math inline">\(2^{16}\)</span>，也就是65536个码位，这完全满足了当时汉字字符集的使用需求。</p><p>而随着时间推移，各种字符集不断涌现，如中国港台地区使用的繁体中文字符集Big5，以及韩语字符集、俄语字符集等等。这时有意思的事情出现了，如果你偶然得到了一份由繁体字符集Big5编码的文本，并使用简体字符集GB2312进行读取。由于同一码位再不同字符集中会对应不同字符，就会显示错乱。如果新的字符集对应不到字符，就会显示问号，或者一个方框等无意义字符，而这就是我们见到乱码的原因。</p><p>为了让不同国家的字符友好共处，减少乱码的出现，由国际组织：统一码联盟，制定了一个囊括世界各国文学的超大字符集：<strong>Unicode</strong>，中文名为<strong>万国码</strong>。为了能在一个字符集中表示世界各国的字符，两个字节所具有的六万多个码位也不够看了。一个Unicode编码的字符可能会占用三个或者四个字节，而这让本来只需要一个字节就可以表示字符的英美国家无法接受。对于他们来说，一个字符所占用的字节从一个变成了四个，意味着同样一段文字在计算机中的大小也增加到四倍，这显然并不划算。</p><p>为了平衡世界各国的需求，在经过一段实践后，最终确定了一种合适的字符编码：<strong>UTF-8</strong>。UTF-8是针对Unicode的一种可变长度字符编码。简单来说，使用UTF-8不仅可以拥有原来的码位数量，还可以根据字符种类来分配不同的字节个数。如ASCII中的字符，在UTF-8中只占用一个字节，拉丁文、希腊文等字符会占用两个字节，中文、韩文、日文等字符会占用三个字节，而还有少数字符和古代文字会占用4个字节。</p><h4 id="常见问题与处理方案">常见问题与处理方案</h4><p>虽然有了大家都认可的UTF-8编码，但并不意味着乱码就不会出现，反而因为新旧编码切换等原因，造成了更多更奇怪的乱码问题。例如(在Windows10的后续版本中已解决)在记事本中输入中文，再打开，就会出现乱码。这是因为windows默认使用的是ANSI编码保存文本文件。</p><p>在简体中文的windows中，ANSI通常指的是GBK编码，也就是GB2312的扩展版本。但由于GBK编码中的某些字符，开头长得和UTF-8编码的字节很像，所以被错误的按照UTF-8编码读取，这就出现了乱码的情况。</p><p>所以，当你的文件在打开时出现了乱码，可以先使用一些能够查看字符集的工具(例如VSCode)，并使用与文件相匹配的字符集打开，就可以了。</p><p>但是，并非字符集正确就一定可以显示正常。当一个文字按照正确的编码读取之后，还需要根据用户选择的字体进行显示。而字体，才决定了一段内容最终的呈现效果。例如我们最为熟悉的黑体、宋体、楷体等。每个字体都以不同风格的字形设计，对字符进行了美化。但由于每个字体支持的字符个数不同，如果使用了字体不支持的汉字，这时就会出现字符显示异常的问题。</p><p>但好在，现在的系统和软件都自带字体回退功能。当你使用了字体不支持的字符时，系统和软件会查找另一个支持该字符的字体进行渲染，以确保字符尽可能的正确显示。如果你希望彻底解决此类问题，可以更换其他主流字体，或者向字体开发者反馈，并等待字体更新，以达到最佳的显示效果</p><h2 id="知乎上拍案叫绝的回答">知乎上拍案叫绝的回答</h2><h3id="你读过最有力量的一段文字是什么">你读过最有力量的一段文字是什么？</h3><p>无论你有多么不堪，多么卑微，你的身体都远比你想象中的更加爱你。</p><p>当你溺水时，你的肺会压缩成一团，只为了再给你输送一口氧气。</p><p>当你失血过多时，你的心脏仍然会拼了命的为你输血。</p><p>你染上坏习惯时，他们会成批成批的，在你的不自律下牺牲自己。只为你提醒，让你回头。他们从不曾嫌弃你，也从不会认为你无药可救。</p><p>每天，你的体内会有5个细胞发生癌变，免疫系统无时无刻不在战斗，他们奋力抵抗侵略，直至消灭所有的癌细胞。</p><p>就算所有人都不在乎你，你的器官和细胞都在为你拼命。你的皮肤知道你是热了还是冷了，你的胃知道你是否饿了，他们都在拼尽全力调节你的身体，你的温度，甚至你的情绪。</p><p>他们努力工作，只为了让你在这个世界上能活。</p><p>哪怕你自己放弃了自己，你身上的37兆2000亿细胞都会耗尽最后的力气，竭尽全力的保护你。</p><h3id="现在世界都在为战争做准备会演变成世界大战吗">现在世界都在为战争做准备，会演变成世界大战吗？</h3><figure><img src="/images/d3b6081c5349430c59262bf6d1285c4.jpg"alt="现在世界都在为战争做准备，会演变成世界大战吗？" /><figcaptionaria-hidden="true">现在世界都在为战争做准备，会演变成世界大战吗？</figcaption></figure><h3id="如果把赵构换成希特勒会怎么样">如果把赵构换成希特勒会怎么样？</h3><p>“今天，我们站在这里！站在汉人的土地上！站在临安，这块我们祖先用鲜血和尊严浇灌的土地上！我的身后，是诸葛武侯的雕像！他是天下公认的英雄！他是全天下的光荣！</p><p>“我的面前，站着的是一个民族，一个在屈辱中呻吟的民族！靖康之耻°之后，我们这个民族的骄傲就没有了！那些战胜者们骑在我们的脖子上作威作福，他们随意践踏我们的尊严，一个华夏大陆上最高贵民族的尊严！你们告诉我，你们是选择像诸葛武侯一样去做一个北伐斗士，还是一个奴隶？!</p><p>“你们或许要说：陛下，我需要一块地种，一个炊饼。是的，你的说法很对，生命实在是太重要了。但是我要告诉你们。这世界上还有一种东西比生命更重要，那是荣耀！那就是尊严！”</p><p>“只要燕云十六州和汴梁上空一日还飘扬着金国的国旗，我们的尊严就不存在！只要那些金国人、蒙古人在我们的国土上横行霸道，我们的尊严就不存在！只要在中国的版图上，这个叫大宋的国家四分五裂、积弱不堪，我们的尊严就不存在！只要其他国家的人，在聊天的时候说到大宋这个字眼的时候会发出一声轻蔑的笑声，我们的尊严就不存在！</p><p>“我们需要的不是一块炊饼！而是一个生存空间！一个民族的生存空间！这生存空间，不是靠乞求和抗议来实现的，而是靠铁和血来实现的！”</p><p>“别人欺辱我们，哪怕是最弱小的民族也来践踏我们，我们只会叫着：我们表示强烈的愤慨和抗议。这样的人，是没有骨头的！这样的人，是低贱的！我们应该用战吼地震耳欲聋声让敌人颤抖！我们应该碾压他们的尊严、生命，让他们知道我们不是一群只知道抗议的懦夫！”</p><p>“你们要记住，一个只懂得抗议的国家，是一个没有骨头的国家！一个只懂得抗议的政府，是一个没有骨头的政府！当我们地尊严、领土、生存地空间都遭受践踏的时候，还不知羞耻地抗议地政府，我们是不需要的！你们最后也会抛弃它们的！”</p><p>“我很骄傲，在你们这些人中，这样没有骨头的人，少之又少！我的面前，是一个留着千年不屈血液的军团！这血液，曾经在我们祖先的血管里面流淌过，他们没有屈服过！现在，它们在我们的身体里面汨汩奔涌，你们告诉我，你们愿意它冷却吗！？”</p><p>“能够团结人们的，有两件东西：共同的理想和共同的犯罪。我们有雕刻在大宋旗帜上面的伟大理想，我们会为这理想流尽我们的最后一滴血！在今天的临安。没有任何东西能够拯救我们的祖国，只有这理想！靖康和议，是一个极大的耻辱！我们有拒绝执行它的决心和理由！做你们想做的吧！就像诸葛武侯那样挥师北伐，就像他带领着他的同胞们高举着那面自由的大旗英勇杀敌一样！假如你们期望战斗，那就去战斗吧！然后我就能够看到你们是七千万奴隶还是七千万坚贞不屈的汉人！”</p><p>“如果有那么一天，我，赵构，也会像诸葛武侯那样，举着属于我们大宋的大旗冲在最前方！哪怕是战死，我也会微笑着进入天堂！我会见到那些大宋的荣耀的祖先们，我可以昂着头颅走到伟大的太祖跟前，我可以骄傲地对他说：我，你的子孙，没有给你丢脸，我为伟大的大汉民族流尽了最后一滴血！”</p><p>“我们不为奴役而战！我们为自由而战！我们不是机器，不是牛马，我们是人！是从来没有屈服过的汉人！”</p><p>“我们以自由的名义团结起来！为一个新的、公平的世界而战！我们为人人有地种而战！为那些奴役我们的人滚出中国人的土地而战！为我们不需要整天喊着抗议而战！为我们的尊严而战！为我们的诺言而战！为解放这个国家而战！汉人，我们为我们的祖先的荣耀而战！为我们的子孙后代能够骄傲地宣传：我们是从来不屈服的汉人而战！”</p><p>“我的同胞们，大宋和大汉人民万岁！自由，万岁!”</p><h3 id="中国有资本家吗">中国有资本家吗？</h3><p>1972年，有人问毛主席： //张春桥“资本主义复辟，无产阶级就会吃第二遍苦吗？”</p><p>毛主席说：“你太高看他们了，他们懂什么是资本主义？最多倒退回半殖民地半封建社会。资本主义是靠侵略和掠夺别的国家而积累资产的，他们敢侵略谁呀？不被侵略就阿弥陀佛喽”</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>词根词缀表</title>
    <link href="/2024/07/15/RootsAffixes/"/>
    <url>/2024/07/15/RootsAffixes/</url>
    
    <content type="html"><![CDATA[<h2 id="a">A</h2><h3 id="ace">ace</h3><ul><li><strong>Meaning</strong>:尖（扑克牌里的A）</li></ul><h3 id="admire">admire</h3><ul><li><strong>Meaning</strong>:倾佩，崇拜（额的妈耶）</li></ul><h3 id="aer">aer</h3><ul><li><strong>Meaning</strong>:空气</li></ul><h3 id="age">age</h3><ul><li><strong>Meaning</strong>:年龄</li></ul><h3 id="ail">ail</h3><ul><li><strong>Meaning</strong>:生病，苦恼(哎呦)</li></ul><h3 id="alli">alli</h3><ul><li><strong>Meaning</strong>:全部合一（all+i（罗马数字1））</li></ul><h3 id="alt">alt</h3><ul><li><strong>Meaning</strong>:高，变（Altman）</li><li><strong>Example</strong>:<ul><li><code>v:</code> alter exalt</li><li><code>adj:</code> alterable altered altertive alterant altitudinalaltithermal</li><li><code>n:</code> alteration alterability exaltation altitudealtimeter altometer alto altrigraph altocumulus altostratusaltonimbus</li></ul></li></ul><h3 id="am">am</h3><ul><li><strong>Meaning</strong>:爱慕</li><li><strong>Example</strong>:<ul><li><code>n:</code>amour amativeness paramour</li><li><code>adj:</code>amorous enamored amatory amatorial amative</li><li><code>adv:</code>amorously</li><li><code>v:</code>enamor enamour</li></ul></li></ul><h3 id="amb">amb</h3><ul><li><strong>Meaning</strong>:步行（安步）</li></ul><h3 id="ambu">ambu</h3><ul><li><strong>Meaning</strong>:行走（安步）</li></ul><h3 id="appet">appet</h3><ul><li><strong>Meaning</strong>:癖好，特别喜爱（爱癖）</li></ul><h3 id="ardu">ardu</h3><ul><li><strong>Meaning</strong>:艰辛，努力(阿杜)</li></ul><h3 id="argo">argo</h3><ul><li><strong>Meaning</strong>:农业（a(加强)+gro（grow,生长））</li></ul><h3 id="arist">arist</h3><ul><li><strong>Meaning</strong>:至高无上的（arise的最高级）</li></ul><h3 id="arthur">arthur</h3><ul><li><strong>Meaning</strong>:关节（Arthur（亚瑟）把剑从石头中取出，author作为腕力的象征,后升级为关节）</li></ul><h3 id="assidu">assidu</h3><ul><li><strong>Meaning</strong>:勤奋，刻苦(爱死读)</li></ul><h3 id="atom">atom</h3><ul><li><strong>Meaning</strong>:原子（阿童木）</li></ul><h3 id="awe">awe</h3><ul><li><strong>Meaning</strong>:恐惧，害怕，敬畏(在害怕时嘴巴张成<strong>O</strong>型，发出<strong>awe</strong>的声音)</li></ul><h2 id="b">B</h2><h3 id="bag">bag</h3><ul><li><strong>Meaning</strong>: 包</li></ul><h3 id="bail">bail</h3><ul><li><strong>Meaning</strong>: 保释(保)</li></ul><h3 id="bald">bald</h3><ul><li><strong>Meaning</strong>:暴露的，裸露的(暴的)</li></ul><h3 id="bale">bale</h3><ul><li><strong>Meaning</strong>:包</li></ul><h3 id="ballet">ballet</h3><ul><li><strong>Meaning</strong>:芭蕾</li></ul><h3 id="bar">bar</h3><ul><li><strong>Meaning</strong>:小棍儿，篱笆，障碍，法庭（笆，法庭是由篱笆围起来的）</li></ul><h3 id="barbrcue">barbrcue</h3><ul><li><strong>Meaning</strong>:烧烤（芭比Q）</li></ul><h3 id="barge">barge</h3><ul><li><strong>Meaning</strong>:驳船（驳子）</li></ul><h3 id="bas">bas</h3><ul><li><strong>Meaning</strong>:低（贝斯）</li></ul><h3 id="bat">bat</h3><ul><li><strong>Meaning</strong>:战斗</li></ul><h3 id="bath">bath</h3><ul><li><strong>Meaning</strong>:深，底</li></ul><h3 id="be">be</h3><ul><li><strong>Meaning</strong>:使(逼，逼你去上学就是使你去上学)</li></ul><h3 id="bebi">be/bi</h3><ul><li><strong>Meaning</strong>:生命，生物</li></ul><h3 id="ben">ben</h3><ul><li><strong>Meaning</strong>:好，吉利（big ben）</li></ul><h3 id="bet">bet</h3><ul><li><strong>Meaning</strong>: 赌博</li></ul><h3 id="bev">bev</h3><ul><li><strong>Meaning</strong>:酒水饮料（百威）</li></ul><h3 id="bhor">bhor</h3><ul><li><strong>Meaning</strong>:不喜欢，讨厌，厌恶(不好)</li></ul><h3 id="bi">bi</h3><ul><li><strong>Meaning</strong>:二(B)</li></ul><h3 id="bible">bible</h3><ul><li><strong>Meaning</strong>:圣经，白宝书，书的总称（白宝，圣经是西方最早装订成书的文字作品）</li></ul><h3 id="bili">bili</h3><ul><li><strong>Meaning</strong>:能干的，强壮的（比利）</li></ul><h3 id="bind">bind</h3><ul><li><strong>Meaning</strong>:羁绊，拘束，束缚(绊的)</li></ul><h3 id="bin">bin</h3><ul><li><strong>Meaning</strong>:垃圾桶（摒）</li></ul><h3 id="bine">bine</h3><ul><li><strong>Meaning</strong>:伴同，在一起(伴)</li></ul><h3 id="bit">bit</h3><ul><li><strong>Meaning</strong>:比特，小（承载信息的最小单位）</li></ul><h3 id="blem">blem</h3><ul><li><strong>Meaning</strong>:不灵光，有问题（不灵）</li></ul><h3 id="blind">blind</h3><ul><li><strong>Meaning</strong>:瞎的，盲的</li></ul><h3 id="blunder">blunder</h3><ul><li><strong>Meaning</strong>: 步子乱的（步乱的）</li></ul><h3 id="boat">boat</h3><ul><li><strong>Meaning</strong>: 船</li></ul><h3 id="bob-bub-bulb">bob bub bulb</h3><ul><li><strong>Meaning</strong>:球</li></ul><h3 id="boil">boil</h3><ul><li><strong>Meaning</strong>: 煮(煲)</li></ul><h3 id="bomb">bomb</h3><ul><li><strong>Meaning</strong>:炸弹</li></ul><h3 id="bon">bon</h3><ul><li><strong>Meaning</strong>:棒</li></ul><h3 id="bosom">bosom</h3><ul><li><strong>Meaning</strong>:胸部（波胸）</li></ul><h3 id="both">both</h3><ul><li><strong>Meaning</strong>: 两者全都</li></ul><h3 id="bowl">bowl</h3><ul><li><strong>Meaning</strong>: 碗</li></ul><h3 id="bowling">bowling</h3><ul><li><strong>Meaning</strong>:保龄，保龄球</li></ul><h3 id="bra">bra</h3><ul><li><strong>Meaning</strong>:支撑</li></ul><h3 id="bron">bron</h3><ul><li><strong>Meaning</strong>: 古铜</li></ul><h3 id="bru">bru</h3><ul><li><strong>Meaning</strong>:禽兽(禽兽不如)</li></ul><h3 id="buckle">buckle</h3><ul><li><strong>Meaning</strong>:使XX紧贴之扣（巴扣）</li></ul><h3 id="buffet">buffet</h3><ul><li><strong>Meaning</strong>:自助餐（巴菲特）</li></ul><h3 id="bullet">bullet</h3><ul><li><strong>Meaning</strong>:子弹(巴雷特)</li></ul><h3 id="bullying">bullying</h3><ul><li><strong>Meaning</strong>: 霸凌</li></ul><h3 id="bulk">bulk</h3><ul><li><strong>Meaning</strong>: 身形饱满的人（饱客）</li></ul><h2 id="c">C</h2><h3 id="cafe">cafe</h3><ul><li><strong>Meaning</strong>:咖啡</li></ul><h3 id="calo">calo</h3><ul><li><strong>Meaning</strong>:热量（calory，卡路里）</li></ul><h3 id="can">can</h3><ul><li><strong>Meaning</strong>:能</li></ul><h3 id="canteen">canteen</h3><ul><li><strong>Meaning</strong>:餐厅</li></ul><h3 id="car">car</h3><ul><li><strong>Meaning</strong>:车</li></ul><h3 id="cart">cart</h3><ul><li><strong>Meaning</strong>:车</li></ul><h3 id="cartoon">cartoon</h3><ul><li><strong>Meaning</strong>:卡通</li></ul><h3 id="cast">cast</h3><ul><li><strong>Meaning</strong>:演员阵容（卡司）</li></ul><h3 id="castle">castle</h3><ul><li><strong>Meaning</strong>:城堡（哨卡）</li></ul><h3 id="caut-caust">caut caust</h3><ul><li><strong>Meaning</strong>:灼烧（烤特）</li></ul><h3 id="cease">cease</h3><ul><li><strong>Meaning</strong>:停止(息事)</li></ul><h3 id="ceit">ceit</h3><ul><li><strong>Meaning</strong>:欺骗</li></ul><h3 id="cemet">cemet</h3><ul><li><strong>Meaning</strong>: 埋葬尸体的墓地(尸墓)</li></ul><h3 id="cens">cens</h3><ul><li><strong>Meaning</strong>:审视，审查</li></ul><h3 id="cerp">cerp</h3><ul><li><strong>Meaning</strong>:扯破，扯皮</li></ul><h3 id="chal">chal</h3><ul><li><strong>Meaning</strong>: 吵，吵闹</li></ul><h3 id="chamb">chamb</h3><ul><li><strong>Meaning</strong>:腔部，房屋，房间，屋子</li></ul><h3 id="chan">chan</h3><ul><li><strong>Meaning</strong>:唱</li></ul><h3 id="change">change</h3><ul><li><strong>Meaning</strong>:改变</li></ul><h3 id="chao">chao</h3><ul><li><strong>Meaning</strong>:混乱(吵)</li></ul><h3 id="char">char</h3><ul><li><strong>Meaning</strong>: 茶</li></ul><h3 id="chat">chat</h3><ul><li><strong>Meaning</strong>:说话，聊天</li></ul><h3 id="cheat">cheat</h3><ul><li><strong>Meaning</strong>:欺骗</li></ul><h3 id="cheese">cheese</h3><ul><li><strong>Meaning</strong>:起司，奶酪</li></ul><h3 id="cherry">cherry</h3><ul><li><strong>Meaning</strong>: 樱桃（车厘子）</li></ul><h3 id="chew">chew</h3><ul><li><strong>Meaning</strong>:嚼，咀嚼（刍）</li></ul><h3 id="chin">chin</h3><ul><li><strong>Meaning</strong>:下巴</li></ul><h3 id="cian">cian</h3><ul><li><strong>Meaning</strong>:在某个领域技能精湛的人(神)</li></ul><h3 id="cigar">cigar</h3><ul><li><strong>Meaning</strong>: 雪茄</li></ul><h3 id="cipe">cipe</h3><ul><li><strong>Meaning</strong>:食谱</li></ul><h3 id="ciph">ciph</h3><ul><li><strong>Meaning</strong>:密码(私符)</li></ul><h3 id="circle">circle</h3><ul><li><strong>Meaning</strong>:循环，圆</li></ul><h3 id="circul">circul</h3><ul><li><strong>Meaning</strong>:循环（蛇扣）</li></ul><h3 id="cit">cit</h3><ul><li><strong>Meaning</strong>:城市（市）</li></ul><h3 id="click">click</h3><ul><li><strong>Meaning</strong>:点击</li></ul><h3 id="class">class</h3><ul><li><strong>Meaning</strong>:等级，阶级，班级</li></ul><h3 id="clock">clock</h3><ul><li><strong>Meaning</strong>:计时器，钟，表</li></ul><h3 id="co-con-com">co, con, com</h3><ul><li><strong>Meaning</strong>:一起(靠)</li></ul><h3 id="coal">coal</h3><ul><li><strong>Meaning</strong>:全部一起（co+al(l)）</li></ul><h3 id="coarse">coarse</h3><ul><li><strong>Meaning</strong>: 粗鲁，粗俗(糙死)</li></ul><h3 id="coin">coin</h3><ul><li><strong>Meaning</strong>:硬币（钞硬）</li></ul><h3 id="col">col</h3><ul><li><strong>Meaning</strong>:桶状，柱状（cola是桶状或柱状的）</li></ul><h3 id="colon">colon</h3><ul><li><strong>Meaning</strong>:殖民（克隆）</li></ul><h3 id="compet">compet</h3><ul><li><strong>Meaning</strong>:完成</li></ul><h3 id="concert">concert</h3><ul><li><strong>Meaning</strong>:共同协调（con（共同）+cert（协，协调））</li></ul><h3 id="conq">conq</h3><ul><li><strong>Meaning</strong>:战胜，攻克(抗克，对抗攻克)</li></ul><h3 id="control">control</h3><ul><li><strong>Meaning</strong>:操控，控制</li></ul><h3 id="cook">cook</h3><ul><li><strong>Meaning</strong>: 厨师</li></ul><h3 id="cosy">cosy</h3><ul><li><strong>Meaning</strong>:舒适</li></ul><h3 id="cow">cow</h3><ul><li><strong>Meaning</strong>: 牛</li></ul><h3 id="coy">coy</h3><ul><li><strong>Meaning</strong>:可爱，害羞，腼腆（阔爱）</li></ul><h3 id="crow">crow</h3><ul><li><strong>Meaning</strong>:乌鸦（枯肉午，以枯肉为食的乌鸦）</li></ul><h3 id="crust">crust</h3><ul><li><strong>Meaning</strong>:硬壳，地壳（壳如石）</li></ul><h3 id="cuisine">cuisine</h3><ul><li><strong>Meaning</strong>:饭菜，菜肴（厨膳）</li></ul><h3 id="cut">cut</h3><ul><li><strong>Meaning</strong>:切，割</li></ul><h3 id="cute">cute</h3><ul><li><strong>Meaning</strong>:可爱</li></ul><h3 id="cyber">cyber</h3><ul><li><strong>Meaning</strong>:计算机，网络（赛博）</li></ul><h2 id="d">D</h2><h3 id="daunt">daunt</h3><ul><li><strong>Meaning</strong>:恐吓(恫，恫吓)</li></ul><h3 id="dawn">dawn</h3><ul><li><strong>Meaning</strong>: 破晓，黎明(旦)</li></ul><h3 id="deb">deb</h3><ul><li><strong>Meaning</strong>:借钱(贷币)</li></ul><h3 id="del">del</h3><ul><li><strong>Meaning</strong>:删除（丢）</li></ul><h3 id="demp">demp</h3><ul><li><strong>Meaning</strong>:当铺</li></ul><h3 id="deny">deny</h3><ul><li><strong>Meaning</strong>:抵赖，抵抗，否认</li></ul><h3 id="despair">despair</h3><ul><li><strong>Meaning</strong>:绝望（得失败）</li></ul><h3 id="di">di</h3><ul><li><strong>Meaning</strong>:天（day）</li></ul><h3 id="diamond">diamond</h3><ul><li><strong>Meaning</strong>:钻石（戴梦得）</li></ul><h3 id="diet">diet</h3><ul><li><strong>Meaning</strong>:节食（die+eat）</li></ul><h3 id="dim">dim</h3><ul><li><strong>Meaning</strong>:暮色暗淡，天光暗淡，天色昏暗(低暮)</li></ul><h3 id="dine">dine</h3><ul><li><strong>Meaning</strong>:吃（啖，日啖荔枝三百颗）</li></ul><h3 id="diom">diom</h3><ul><li><strong>Meaning</strong>:典故（典）</li></ul><h3 id="disa">disa</h3><ul><li><strong>Meaning</strong>:灾难，灾祸(地煞)</li></ul><h3 id="disc">disc</h3><ul><li><strong>Meaning</strong>:盘子，碟子（迪斯科）</li></ul><h3 id="dismay">dismay</h3><ul><li><strong>Meaning</strong>:不可能（dis+may）</li></ul><h3 id="diesel">diesel</h3><ul><li><strong>Meaning</strong>:柴油，柴油车，柴油机(迪赛尔，《速度与激情》主角)</li></ul><h3 id="dilige">dilige</h3><ul><li><strong>Meaning</strong>:勤奋，勤勉，刻苦，努力(砥砺之)</li></ul><h3 id="dive">dive</h3><ul><li><strong>Meaning</strong>:跳水</li></ul><h3 id="doc">doc</h3><ul><li><strong>Meaning</strong>:教(道课，道，说，常言道就是常言说)</li></ul><h3 id="dodge">dodge</h3><ul><li><strong>Meaning</strong>:躲避(躲之)</li></ul><h3 id="dol">dol</h3><ul><li><strong>Meaning</strong>:哀悼的，悲哀的，悲伤的(悼)</li><li><strong>Example</strong>:<ul><li><code>v:</code>condole</li><li><code>adj:</code>condolent, condolatory, doleful, dolefully,indolently</li><li><code>n:</code>condolence, dolefulness, dolor, dolour,indolence</li><li><code>adj:</code>doleful, dolorous, indolent</li></ul></li></ul><h3 id="dom">dom</h3><ul><li><strong>Meaning</strong>:具有某种身份的一类人(党)</li></ul><h3 id="domin">domin</h3><ul><li><strong>Meaning</strong>: 皇帝(陈道明演过皇帝)</li><li><strong>Example</strong>:<ul><li><code>v:</code>dominate domineer predominate</li><li><code>n:</code>dominator domination dominant dominance dominancypredominance</li><li><code>adj:</code>dominative predominant</li><li><code>adv:</code>predominately</li></ul></li></ul><h3 id="dop">dop</h3><ul><li><strong>Meaning</strong>:上瘾（多啪）</li></ul><h3 id="dot">dot</h3><ul><li><strong>Meaning</strong>:豆点，小圆点（豆）</li></ul><h3 id="doubt">doubt</h3><ul><li><strong>Meaning</strong>:怀疑</li></ul><h3 id="doz">doz</h3><ul><li><strong>Meaning</strong>:睡觉（do+z（睡觉））</li></ul><h3 id="drama">drama</h3><ul><li><strong>Meaning</strong>:戏剧</li></ul><h3 id="draw">draw</h3><ul><li><strong>Meaning</strong>:拽，拉</li></ul><h3 id="dread">dread</h3><ul><li><strong>Meaning</strong>:恐惧的，担忧的(，惴的， 惴惴不安)</li></ul><h3 id="dream">dream</h3><ul><li><strong>Meaning</strong>:梦想</li></ul><h3 id="dual">dual</h3><ul><li><strong>Meaning</strong>:对偶，一双，一对，两个</li></ul><h3 id="dulge">dulge</h3><ul><li><strong>Meaning</strong>:斗志</li></ul><h3 id="dum">dum</h3><ul><li><strong>Meaning</strong>:沉默(大默)，蠢(大木)</li></ul><h3 id="dur">dur</h3><ul><li><strong>Meaning</strong>:持久（durex）</li><li><strong>Example</strong>:<ul><li>adj: durable nondurable durative endurable endurbly unendurableenduring perdurable<br /></li><li>adv: durably enduringly</li><li>n: durability duration endurance perdurability</li><li>v: endure perdure</li></ul></li></ul><h3 id="dye">dye</h3><ul><li><strong>Meaning</strong>:染料(黛)</li></ul><h3 id="dyn">dyn</h3><ul><li><strong>Meaning</strong>:力度单位，打因（打因，击打因素）</li></ul><h2 id="e">E</h2><h3 id="ear">ear</h3><ul><li><strong>Meaning</strong>:耳朵</li></ul><h3 id="ease">ease</h3><ul><li><strong>Meaning</strong>:安逸（易事）</li></ul><h3 id="ebb">ebb</h3><ul><li><strong>Meaning</strong>:水波渐矮，退潮(矮波)</li></ul><p><a id="ed"></a></p><h3 id="ed">ed</h3><ul><li><strong>Meaning</strong>:吃（饿的）</li></ul><h3 id="ee">ee</h3><ul><li><strong>Meaning</strong>:被动者，被xx者(乙方)</li></ul><h3 id="eer">eer</h3><ul><li><strong>Meaning</strong>:从XX行业的人(爷，是<strong>er</strong>的加强版)</li></ul><h3 id="eg">eg</h3><ul><li><strong>Meaning</strong>:自己，自我 (一己)</li></ul><h3 id="elas">elas</h3><ul><li><strong>Meaning</strong>:易拉丝，易拉伸</li></ul><h3 id="elegan">elegan</h3><ul><li><strong>Meaning</strong>:漂亮，美丽优雅（艾丽感）</li></ul><h3 id="ely">ely</h3><ul><li><strong>Meaning</strong>:依赖</li></ul><h3 id="emin">emin</h3><ul><li><strong>Meaning</strong>: 卓越，超群(一鸣，一鸣惊人)</li></ul><h3 id="enchant">enchant</h3><ul><li><strong>Meaning</strong>:吟唱咒语，施法（吟唱）</li></ul><h3 id="eon">eon</h3><ul><li><strong>Meaning</strong>:永远，永久，永世(永)</li></ul><h3 id="equ">equ</h3><ul><li><strong>Meaning</strong>:相同(一曲同工)</li><li><strong>Example</strong>:<ul><li><code>adj:</code>equal unequal equitable inequitable equationalequatorial equilateral equivalent equative equiangluar equiproable</li><li><code>n:</code>equal equity equality inequality equalizer equationequator equidistance equinox equivalent equivalence equipartition</li><li><code>v:</code>equal equalize equate</li><li><code>adv:</code>equally equitably</li></ul></li></ul><h3 id="er">er</h3><ul><li><strong>Meaning</strong>:xx的人</li></ul><h3 id="erc">erc</h3><ul><li><strong>Meaning</strong>:运动（鸿星尔克，红星尔克，中国运动）</li></ul><h3 id="err">err</h3><ul><li><strong>Meaning</strong>:错误（讹，以讹传讹）</li><li><strong>Example</strong>:<ul><li><code>v:</code>err</li><li><code>n:</code>error erroneousness</li><li><code>adj:</code>errorless unerring errant inerrant erroneous</li><li><code>adv:</code>unerringly erroneously</li></ul></li></ul><h3 id="ess">ess</h3><ul><li><strong>Meaning</strong>:女人（大S，小S）</li></ul><h3 id="eu">eu</h3><ul><li><strong>Meaning</strong>:优</li></ul><h3 id="exo">exo</h3><ul><li><strong>Meaning</strong>:外面的（EXO是外国的）</li></ul><h3 id="exp">exp</h3><ul><li><strong>Meaning</strong>:经验</li></ul><h2 id="f">F</h2><h3 id="fab">fab</h3><ul><li><strong>Meaning</strong>:说（发布）</li></ul><h3 id="fac">fac</h3><ul><li><strong>Meaning</strong>:干（fuck）</li><li><strong>Example</strong>:<ul><li><code>adj:</code>facile</li><li><code>n:</code>malefactor malefaction malefactress benefactorbenefaction benefactress</li></ul></li></ul><h3 id="fal-faul">fal faul</h3><ul><li><strong>Meaning</strong>:错误（否）</li></ul><h3 id="famish">famish</h3><ul><li><strong>Meaning</strong>:挨饿（乏米食）</li></ul><h3 id="family">family</h3><ul><li><strong>Meaning</strong>:家庭</li></ul><h3 id="famine">famine</h3><ul><li><strong>Meaning</strong>:饥荒，饥馑（乏面）</li></ul><h3 id="fan">fan</h3><ul><li><strong>Meaning</strong>: xx迷，xx粉丝，xx狂热爱好者(饭)</li></ul><h3 id="fantasy">fantasy</h3><ul><li><strong>Meaning</strong>:幻想（范特西）</li></ul><h3 id="far">far</h3><ul><li><strong>Meaning</strong>:进发（发）</li></ul><h3 id="fast">fast</h3><ul><li><strong>Meaning</strong>: 禁食（废食）</li></ul><h3 id="fat">fat</h3><ul><li><strong>Meaning</strong>:胖</li></ul><h3 id="fatig">fatig</h3><ul><li><strong>Meaning</strong>:疲乏（乏体格）</li></ul><h3 id="febr">febr</h3><ul><li><strong>Meaning</strong>:热（February，开始变热的月份，即二月）</li></ul><h3 id="fee">fee</h3><ul><li><strong>Meaning</strong>:费，费用</li></ul><h3 id="feeb">feeb</h3><ul><li><strong>Meaning</strong>:废物，蠢货，笨蛋(废逼)</li></ul><h3 id="fem">fem</h3><ul><li><strong>Meaning</strong>:女性(粉)</li></ul><h3 id="fero">fero</h3><ul><li><strong>Meaning</strong>:粗暴（非柔）</li></ul><h3 id="fert">fert</h3><ul><li><strong>Meaning</strong>:肥沃（肥）</li></ul><h3 id="fev">fev</h3><ul><li><strong>Meaning</strong>:发热，滚烫(沸物)</li></ul><h3 id="few">few</h3><ul><li><strong>Meaning</strong>:少有，很少</li></ul><h3 id="fibr">fibr</h3><ul><li><strong>Meaning</strong>:纤维（菲薄）</li></ul><h3 id="fid">fid</h3><ul><li><strong>Meaning</strong>:相信的，信任的（非疑的）</li></ul><h3 id="fili">fili</h3><ul><li><strong>Meaning</strong>:依附，隶属（附依隶）</li></ul><h3 id="film">film</h3><ul><li><strong>Meaning</strong>: 胶卷，电影</li></ul><h3 id="fin">fin</h3><ul><li><strong>Meaning</strong>:结束</li></ul><h3 id="finge">finge</h3><ul><li><strong>Meaning</strong>: 手指（分指）</li></ul><h3 id="fine">fine</h3><ul><li><strong>Meaning</strong>: 范围，范畴(范)</li></ul><h3 id="fit">fit</h3><ul><li><strong>Meaning</strong>: 利益，好处(肥)</li></ul><h3 id="fla">fla</h3><ul><li><strong>Meaning</strong>:吹气(呼啦，夫啦)</li><li><strong>Example</strong>:<ul><li><code>v:</code>inflate, deflate, flatter</li><li><code>n:</code>inflation, inflator, deflation, flatus, flatulence,flattery, perflation</li><li><code>adj:</code>inflationary, inflatable, deflationary,flatulent</li></ul></li></ul><h3 id="flee">flee</h3><ul><li><strong>Meaning</strong>:离去，逃离(拂离)</li></ul><h3 id="flor">flor</h3><ul><li><strong>Meaning</strong>:花（Flordia，花城）</li></ul><h3 id="foam">foam</h3><ul><li><strong>Meaning</strong>:泡沫（浮沫）</li></ul><h3 id="for">for</h3><ul><li><strong>Meaning</strong>:否定(否)</li></ul><h3 id="fort-ford-force">fort ford force</h3><ul><li><strong>Meaning</strong>:强壮，坚强，有力量（福特）</li></ul><h3 id="franc-slave">franc slave</h3><ul><li><strong>Meaning</strong>:<ul><li><strong>franc</strong>:自由(free+rank)</li><li><strong>slave</strong>:奴隶</li></ul></li></ul><h3 id="frugal">frugal</h3><ul><li><strong>Meaning</strong>:非常没钱，非常节俭(富如狗，狗很穷)</li></ul><h3 id="frust">frust</h3><ul><li><strong>Meaning</strong>: 沮丧，挫败(弗如死)</li></ul><h3 id="fuel">fuel</h3><ul><li><strong>Meaning</strong>: 加油（赋油）</li></ul><h3 id="fulge">fulge</h3><ul><li><strong>Meaning</strong>:发光发热（发炽）</li></ul><h3 id="fur">fur</h3><ul><li><strong>Meaning</strong>:愤怒（怫）</li></ul><h3 id="furn">furn</h3><ul><li><strong>Meaning</strong>:提供（奉）</li></ul><h3 id="fut">fut</h3><ul><li><strong>Meaning</strong>: 否定(弗，自愧弗如)</li></ul><h2 id="g">G</h2><h3 id="gadge">gadge</h3><ul><li><strong>Meaning</strong>:嘎吱</li></ul><h3 id="gang">gang</h3><ul><li><strong>Meaning</strong>:一群罪犯流氓之类的人(干，一干人等)</li></ul><h3 id="gas">gas</h3><ul><li><strong>Meaning</strong>:煤气，气体</li></ul><h3 id="gem">gem</h3><ul><li><strong>Meaning</strong>:珍宝，宝石(珍)</li></ul><h3 id="genius">genius</h3><ul><li><strong>Meaning</strong>:天才，天赋(吉尼斯)</li></ul><h3 id="ges">ges</h3><ul><li><strong>Meaning</strong>:姿势</li></ul><h3 id="gift">gift</h3><ul><li><strong>Meaning</strong>:给予，礼物，天赋</li></ul><h3 id="give">give</h3><ul><li><strong>Meaning</strong>:给予</li></ul><h3 id="gloom">gloom</h3><ul><li><strong>Meaning</strong>:昏暗，黑暗，阴暗（咕隆，黑咕隆）</li></ul><h3 id="glu">glu</h3><ul><li><strong>Meaning</strong>:吞咽（咕噜），模仿倒出粘稠液体时发出的声音，粘稠液体沸腾冒泡的声音</li></ul><h3 id="goat">goat</h3><ul><li><strong>Meaning</strong>:山羊</li></ul><h3 id="golf">golf</h3><ul><li><strong>Meaning</strong>:高尔夫</li></ul><h3 id="gon">gon</h3><ul><li><strong>Meaning</strong>:角度（躬，鞠躬的时候有角度）</li></ul><h3 id="gossip">gossip</h3><ul><li><strong>Meaning</strong>:传播流言蜚语的人（搞事婆）</li></ul><h3 id="govern">govern</h3><ul><li><strong>Meaning</strong>:统治（国王）</li></ul><h3 id="grain">grain</h3><ul><li><strong>Meaning</strong>:谷粒，谷物（谷仁）</li></ul><h3 id="gran">gran</h3><ul><li><strong>Meaning</strong>:谷仁</li></ul><h3 id="gree">gree</h3><ul><li><strong>Meaning</strong>:允许，同意（格力）</li></ul><h3 id="groce">groce</h3><ul><li><strong>Meaning</strong>:食品店（谷肉市）</li></ul><h3 id="guess">guess</h3><ul><li><strong>Meaning</strong>:猜测，推测</li></ul><h3 id="guilt">guilt</h3><ul><li><strong>Meaning</strong>: 罪，罪行，有罪(辜儿)</li></ul><h3 id="guis">guis</h3><ul><li><strong>Meaning</strong>:掩盖（掩饰）</li></ul><h3 id="gull">gull</h3><ul><li><strong>Meaning</strong>: 鸥(孤鸥)</li></ul><h3 id="gum">gum</h3><ul><li><strong>Meaning</strong>:口香糖</li></ul><h3 id="gym">gym</h3><ul><li><strong>Meaning</strong>:健身（健）</li></ul><h2 id="h">H</h2><h3 id="hal">hal</h3><ul><li><strong>Meaning</strong>:吸气(拟声词)</li></ul><h3 id="hance">hance</h3><ul><li><strong>Meaning</strong>:加强，增强(夯实)</li></ul><h3 id="harbor">harbor</h3><ul><li><strong>Meaning</strong>:海港（海泊）</li></ul><h3 id="hate">hate</h3><ul><li><strong>Meaning</strong>:讨厌</li></ul><h3 id="haught">haught</h3><ul><li><strong>Meaning</strong>:傲慢（好傲）</li></ul><h3 id="haul">haul</h3><ul><li><strong>Meaning</strong>:拉，拽，拖(薅，薅羊毛)</li></ul><h3 id="haus">haus</h3><ul><li><strong>Meaning</strong>:耗尽，耗光(耗死)</li><li><strong>Example</strong>:<ul><li><code>v:</code>exhaust</li><li><code>adj:</code>exhausted exhausting unexhausted exhaustibleinexhaustible exhaustless</li><li><code>n:</code>exhaustion</li><li><code>adv:</code>exhaustively</li></ul></li></ul><h3 id="haven">haven</h3><ul><li><strong>Meaning</strong>:海湾</li></ul><h3 id="heart">heart</h3><ul><li><strong>Meaning</strong>:核心，心，中心</li></ul><h3 id="heel">heel</h3><ul><li><strong>Meaning</strong>:后部</li></ul><h3 id="hein">hein</h3><ul><li><strong>Meaning</strong>:恨的，令人憎恨的(恨)</li></ul><h3 id="hermit">hermit</h3><ul><li><strong>Meaning</strong>: 隐者，隐士(何觅)</li></ul><h3 id="hide">hide</h3><ul><li><strong>Meaning</strong>:骇人的，可怕的（骇的）</li></ul><h3 id="hier">hier</h3><ul><li><strong>Meaning</strong>:僧侣，牧师（higher）</li></ul><h3 id="high">high</h3><ul><li><strong>Meaning</strong>:高，嗨</li></ul><h3 id="hilar">hilar</h3><ul><li><strong>Meaning</strong>:高兴，快乐（嗨乐）</li></ul><h3 id="hob">hob</h3><ul><li><strong>Meaning</strong>:玩，淘气（霍比特人）</li></ul><h3 id="hol">hol</h3><ul><li><strong>Meaning</strong>:全部(whole)</li></ul><h3 id="hom">hom</h3><ul><li><strong>Meaning</strong>:同，一类</li></ul><h3 id="hon">hon</h3><ul><li><strong>Meaning</strong>: 光荣(红)</li></ul><h3 id="hoop">hoop</h3><ul><li><strong>Meaning</strong>:篮圈(虎扑，全球最大的华语篮球论坛)</li></ul><h3 id="hormone">hormone</h3><ul><li><strong>Meaning</strong>:荷尔蒙，激素</li></ul><h3 id="horn">horn</h3><ul><li><strong>Meaning</strong>:角，喇叭（合恩角，位于）</li></ul><h3 id="horr">horr</h3><ul><li><strong>Meaning</strong>:害怕(在<strong>害怕</strong>的时候倒吸一口凉气，发出<strong>horr</strong>的声音)</li></ul><h3 id="hotel">hotel</h3><ul><li><strong>Meaning</strong>:旅馆，酒店</li></ul><h3 id="house">house</h3><ul><li>房子</li></ul><h3 id="holic">holic</h3><ul><li><strong>Meaning</strong>:好like ，喜欢</li><li><strong>Example</strong>:<ul><li>n:alcoholic workholic shopholic foodholic bookholic phonaholiccompurterholic sexaholic chocoholic colaholic carboholic cardholic</li></ul></li></ul><h3 id="hook">hook</h3><ul><li><strong>Meaning</strong>:钩子(虎克，彼得潘里的虎克船长，直译过来是钩子船长，左手是钩子)</li></ul><h3 id="howl">howl</h3><ul><li><strong>Meaning</strong>:嚎，嚎叫</li></ul><h3 id="hub">hub</h3><ul><li><strong>Meaning</strong>:核心部位，中心部位（核部）</li></ul><h3 id="hum">hum</h3><ul><li><strong>Meaning</strong>:哼</li></ul><h3 id="hut">hut</h3><ul><li><strong>Meaning</strong>:屋子，小屋(户)</li></ul><h3 id="hyb">hyb</h3><ul><li><strong>Meaning</strong>:混合（合一璧）</li></ul><h3 id="hyd">hyd</h3><ul><li><strong>Meaning</strong>:水（海的）</li></ul><h2 id="i">I</h2><h3 id="idi">idi</h3><ul><li><strong>Meaning</strong>:自己（ID:I）</li></ul><h3 id="idol">idol</h3><ul><li><strong>Meaning</strong>:爱豆，偶像</li></ul><h3 id="imit">imit</h3><ul><li><strong>Meaning</strong>:模仿（I'm it）</li></ul><h3 id="immin">immin</h3><ul><li><strong>Meaning</strong>:在几分钟内（in minutes）</li></ul><h3 id="index">index</h3><ul><li><strong>Meaning</strong>: 索引</li></ul><h3 id="insid">insid</h3><ul><li><strong>Meaning</strong>:潜伏的（隐袭的）</li></ul><h3 id="inst">inst</h3><ul><li><strong>Meaning</strong>:即使，立刻(应时)</li></ul><h3 id="iron">iron</h3><ul><li><strong>Meaning</strong>:钢铁</li></ul><h3 id="isol">isol</h3><ul><li><strong>Meaning</strong>:一个人，独自，独立(一手)</li></ul><h3 id="iso">iso</h3><ul><li><strong>Meaning</strong>:相同，一样(is so的缩略形式)</li></ul><h2 id="j">J</h2><h3 id="jack">jack</h3><ul><li><strong>Meaning</strong>:劫持乘客(劫客)</li></ul><h3 id="jacket">jacket</h3><ul><li><strong>Meaning</strong>:夹克</li></ul><h3 id="jam">jam</h3><ul><li><strong>Meaning</strong>:果酱，塞满，挤紧(酱)</li></ul><h3 id="jar">jar</h3><ul><li><strong>Meaning</strong>:广口瓶(扎，一扎)</li></ul><h3 id="jargon">jargon</h3><ul><li><strong>Meaning</strong>:行话（家梗）</li></ul><h3 id="jeal">jeal</h3><ul><li><strong>Meaning</strong>:嫉妒(嫉了)</li></ul><h3 id="jeep">jeep</h3><ul><li><strong>Meaning</strong>:吉普车</li></ul><h3 id="jelly">jelly</h3><ul><li><strong>Meaning</strong>:胶（啫喱）</li><li><strong>Example</strong>：<ul><li><code>n:</code>jelly jel jell jello jellyfish <code>sea jelly</code><code>fruit jelly</code> gel gelation gelatin gelatine aerogel hydrogel<code>silica gel</code></li><li><code>v:</code>gelate</li><li><code>adj:</code>gelatinous</li></ul></li></ul><h3 id="jewel">jewel</h3><ul><li><strong>Meaning</strong>:珠宝(珠儿)</li></ul><h3 id="jill">jill</h3><ul><li><strong>Meaning</strong>:情人，少女，妹纸（姬儿）</li></ul><h3 id="jun">jun</h3><ul><li><strong>Meaning</strong>:年轻的，级别低的(君)</li></ul><h2 id="k">K</h2><h3 id="kill-mill">kill mill</h3><ul><li><strong>Meaning</strong>:千分之一，以前（千是虚词）（kill，mill，切成很多块）</li></ul><h2 id="l">L</h2><h3 id="labor">labor</h3><ul><li><strong>Meaning</strong>:劳工，劳动（累伯）</li><li><strong>Example</strong>:<ul><li><code>v:</code>labor collkaborate</li><li><code>n:</code>labour labokrer labourer collaboration collkaboratorlaboratory</li><li><code>adj:</code>collaborative laborious elaborate</li><li><code>adv:</code>laboriously elaborately</li></ul></li></ul><h3 id="lace">lace</h3><ul><li><strong>Meaning</strong>:蕾丝</li></ul><h3 id="lan">lan</h3><ul><li><strong>Meaning</strong>: 泪目，悲伤</li></ul><h3 id="lang">lang</h3><ul><li><strong>Meaning</strong>: 语言（language）</li></ul><h3 id="lant">lant</h3><ul><li><strong>Meaning</strong>:明亮（朗）</li></ul><h3 id="laser">laser</h3><ul><li><strong>Meaning</strong>:激光(镭射)</li></ul><h3 id="lat">lat</h3><ul><li><strong>Meaning</strong>:联系（拉条）</li></ul><h3 id="latry">latry</h3><ul><li><strong>Meaning</strong>:无比崇拜(擂吹)</li></ul><h3 id="lax">lax</h3><ul><li><strong>Meaning</strong>:拉稀，松弛，放松</li></ul><h3 id="leave">leave</h3><ul><li><strong>Meaning</strong>:离开</li></ul><h3 id="leisure">leisure</h3><ul><li><strong>Meaning</strong>:悠闲，闲暇(累惹)</li></ul><h3 id="langui">langui</h3><ul><li><strong>Meaning</strong>:懒惰(懒鬼)</li></ul><h3 id="lend">lend</h3><ul><li><strong>Meaning</strong>:借</li></ul><h3 id="lige">lige</h3><ul><li><strong>Meaning</strong>: 捆，绑(勒之)</li></ul><h3 id="lim-limin">lim limin</h3><ul><li><strong>Meaning</strong>:开端，界限（黎明）</li></ul><h3 id="ling">ling</h3><ul><li><strong>Meaning</strong>:（年纪和体积双重意义上的）小，无足轻重微不足道（略带贬义）</li></ul><h3 id="lingua">lingua</h3><ul><li><strong>Meaning</strong>:语言（灵呱）</li></ul><p><a id="root_aqu"></a></p><h3 id="liqu-aqu">liqu aqu</h3><ul><li><strong>Meaning</strong>:水（离去）</li></ul><h3 id="lish">lish</h3><ul><li><strong>Meaning</strong>:青睐，喜欢（睐喜）</li></ul><h3 id="lit-litter">lit litter</h3><ul><li><strong>Meaning</strong>:小</li></ul><h3 id="little">little</h3><ul><li><strong>Meaning</strong>:非常少的</li></ul><h3 id="local">local</h3><ul><li><strong>Meaning</strong>:附件，本地</li></ul><h3 id="log">log</h3><ul><li><strong>Meaning</strong>:记录（如Blog，Vlog）</li></ul><h3 id="logi">logi</h3><ul><li><strong>Meaning</strong>: 逻辑</li></ul><h3 id="lone">lone</h3><ul><li><strong>Meaning</strong>:孤独（long+one）</li></ul><h3 id="loot">loot</h3><ul><li><strong>Meaning</strong>: 掳掠，掠夺</li></ul><h3 id="loq">loq</h3><ul><li><strong>Meaning</strong>:说话，聊天(唠嗑)</li><li><strong>Example</strong>:<ul><li><code>adj:</code>loqiacious grandiloquent eloquent ineloquentsomniloquous magniloquent</li><li><code>n:</code>loquacity colloquy colloquist grandiloquenceeloquence soliloquy soliloquist somniloquy obloquy ventriloquygastriloquy</li><li><code>adv:</code>eloquently</li><li><code>v:</code>soliloquize</li></ul></li></ul><h3 id="lotto">lotto</h3><ul><li><strong>Meaning</strong>:抽签，从很多里面抽出一份</li></ul><h3 id="loyal">loyal</h3><ul><li><strong>Meaning</strong>:忠诚(老友)</li></ul><h3 id="luc">luc</h3><ul><li><strong>Meaning</strong>:光明（路西，路西法）</li></ul><h3 id="luct">luct</h3><ul><li><strong>Meaning</strong>:无可能快乐（乐无可）</li></ul><h3 id="lum">lum</h3><ul><li><strong>Meaning</strong>:明亮(朗)</li></ul><h3 id="lun">lun</h3><ul><li><strong>Meaning</strong>:月亮(轮)</li></ul><h3 id="lure">lure</h3><ul><li><strong>Meaning</strong>:诱饵（虏饵）</li></ul><h2 id="m">M</h2><h3 id="magi">magi</h3><ul><li><strong>Meaning</strong>:魔法技艺（魔技）</li></ul><h3 id="magnet">magnet</h3><ul><li><strong>Meaning</strong>:磁感线（mag（大）+net（网），巨大的网，磁感线）</li></ul><h3 id="maid">maid</h3><ul><li><strong>Meaning</strong>:妹子，少女(妹的)</li></ul><h3 id="mall">mall</h3><ul><li><strong>Meaning</strong>:商场，购物中心(贸)</li></ul><h3 id="mandarin">mandarin</h3><ul><li><strong>Meaning</strong>:满清官人（满大人）</li></ul><h3 id="marshal">marshal</h3><ul><li><strong>Meaning</strong>:将帅，元帅(马首，马首是瞻)</li></ul><h3 id="mark">mark</h3><ul><li><strong>Meaning</strong>:标记（马克，马克笔）</li></ul><h3 id="marsh">marsh</h3><ul><li><strong>Meaning</strong>:沼泽（麻湿，长满麻草的湿地）</li></ul><h3 id="mart">mart</h3><ul><li><strong>Meaning</strong>:市场（玛特）</li></ul><h3 id="marvel">marvel</h3><ul><li><strong>Meaning</strong>:惊奇（妈喔）</li></ul><h3 id="massa">massa</h3><ul><li><strong>Meaning</strong>:按摩(摩挲)</li></ul><h3 id="mast">mast</h3><ul><li><strong>Meaning</strong>:大师（马师）</li></ul><h3 id="max-mag-maj">max mag maj</h3><ul><li><strong>Meaning</strong>:大</li></ul><h3 id="mel">mel</h3><ul><li><strong>Meaning</strong>:蜜，蜂蜜(蜜儿)</li></ul><h3 id="mem">mem</h3><ul><li><strong>Meaning</strong>:记忆（墨墨，墨墨背单词）</li></ul><h3 id="memb">memb</h3><ul><li><strong>Meaning</strong>:组成整体的部分（门部）</li></ul><h3 id="mence">mence</h3><ul><li><strong>Meaning</strong>: 开始(门始)</li></ul><h3 id="merge">merge</h3><ul><li><strong>Meaning</strong>:沉没，沉下去(没之)</li></ul><h3 id="micro">micro</h3><ul><li><strong>Meaning</strong>:微小(米颗若)</li></ul><h3 id="might">might</h3><ul><li><strong>Meaning</strong>:强大的威力，强大的力量(迈特凯)</li></ul><h3 id="migr">migr</h3><ul><li><strong>Meaning</strong>:跨境，移民，迁徙(迈隔，迈过隔阂)</li><li><strong>Example</strong>:<ul><li><code>v:</code>migrate immigrate emigrate</li><li><code>n:</code>migration migrator immigration immigrant emigrationemigrant</li><li><code>adj:</code>migrant migratory immigrant emigrant</li></ul></li></ul><h3 id="mim">mim</h3><ul><li><strong>Meaning</strong>:模仿（摸一摸，模一模）</li></ul><h3 id="mini">mini</h3><ul><li><strong>Meaning</strong>:迷你</li></ul><h3 id="minister">minister</h3><ul><li><strong>Meaning</strong>:仆人，管家，大臣，管家（mini+ster(人，stand+er)，大臣和管家本质是皇帝的仆人）</li></ul><h3 id="mir">mir</h3><ul><li><strong>Meaning</strong>:神奇(魔)</li></ul><h3 id="mirror">mirror</h3><ul><li><strong>Meaning</strong>:镜子</li></ul><h3 id="mist">mist</h3><ul><li><strong>Meaning</strong>:雾(弥湿)</li></ul><h3 id="mobi">mobi</h3><ul><li><strong>Meaning</strong>:移动（mobike，共享单车）</li></ul><h3 id="model">model</h3><ul><li><strong>Meaning</strong>:模特</li></ul><h3 id="modern">modern</h3><ul><li><strong>Meaning</strong>:现代化的，时髦的(摩登)</li></ul><h3 id="mon">mon</h3><ul><li><strong>Meaning</strong>:一（孟）</li><li><strong>Example</strong>:<ul><li><code>n:</code>monday monopoly monologue monarch monoxide monotonemonotony monodrama monograph monogamy monocycle</li><li><code>adj:</code>monophonic</li></ul></li></ul><h3 id="mord">mord</h3><ul><li><strong>Meaning</strong>:尖锐（矛）</li></ul><h3 id="mort">mort</h3><ul><li><strong>Meaning</strong>:死(殁)</li><li><strong>Example</strong>:<ul><li><code>adj:</code>immortal mortal amort</li><li><code>n:</code>immortal mortal immortality mortuary mortality</li><li><code>adv:</code>immortally</li><li><code>v:</code>immortalise immortalize</li></ul></li></ul><h3 id="moss">moss</h3><ul><li><strong>Meaning</strong>:苔藓（莫斯）</li></ul><h3 id="mousse">mousse</h3><ul><li><strong>Meaning</strong>:慕斯，奶油冻</li></ul><h3 id="movie">movie</h3><ul><li><strong>Meaning</strong>:电影</li></ul><h3 id="mum">mum</h3><ul><li><strong>Meaning</strong>:妈妈，母亲</li></ul><h3 id="murmur">murmur</h3><ul><li><strong>Meaning</strong>:悄咪咪的说（默默）</li></ul><h3 id="muse">muse</h3><ul><li><strong>Meaning</strong>:沉思，冥想（穆思）</li></ul><h3 id="mute">mute</h3><ul><li><strong>Meaning</strong>:沉默，不语(穆，静穆，清穆)</li></ul><h3 id="myst">myst</h3><ul><li><strong>Meaning</strong>:难以理解之事(谜事)</li></ul><h3 id="myth">myth</h3><ul><li><strong>Meaning</strong>: 神话(迷思)</li></ul><h2 id="n">N</h2><h3 id="naive">naive</h3><ul><li><strong>Meaning</strong>:天真幼稚的人或物（奶物）</li></ul><h3 id="nec">nec</h3><ul><li><strong>Meaning</strong>:连接(neck，脖子，连接头和身体的部分)</li></ul><h3 id="nege">nege</h3><ul><li><strong>Meaning</strong>: 逆反(逆之)</li></ul><h3 id="negr">negr</h3><ul><li><strong>Meaning</strong>:黑人（尼哥）</li></ul><h3 id="neighbor">neighbor</h3><ul><li><strong>Meaning</strong>:邻居</li></ul><h3 id="neo">neo</h3><ul><li><strong>Meaning</strong>:新（new）</li></ul><h3 id="nest">nest</h3><ul><li><strong>Meaning</strong>:雀巢</li></ul><h3 id="nigr">nigr</h3><ul><li><strong>Meaning</strong>:黑色（尼哥）</li></ul><h3 id="nihil">nihil</h3><ul><li><strong>Meaning</strong>:虚无（<ahref="#expression_n">ni</a>+hil(hill，山)，连山都没有就是虚无的）</li></ul><h3 id="noc">noc</h3><ul><li><strong>Meaning</strong>:攻击，伤害（knock）</li></ul><h3 id="norm">norm</h3><ul><li><strong>Meaning</strong>:标准，常规（nor+m，既不XX也不XX的东西）</li></ul><h3 id="nounce">nounce</h3><ul><li><strong>Meaning</strong>:通知，宣告（known）</li></ul><h3 id="noy">noy</h3><ul><li><strong>Meaning</strong>: 烦恼的心情，愤怒的心情(恼意)</li></ul><h3 id="nown">nown</h3><ul><li><strong>Meaning</strong>:知名的，有名的(known)</li></ul><h3 id="nucle">nucle</h3><ul><li><strong>Meaning</strong>:核</li></ul><h3 id="null">null</h3><ul><li><strong>Meaning</strong>: 无，没有(no)</li></ul><h3 id="num">num</h3><ul><li><strong>Meaning</strong>:数</li></ul><h3 id="numb">numb</h3><ul><li><strong>Meaning</strong>:迟钝，呆滞，麻木(木讷，讷木)</li></ul><h3 id="nutri">nutri</h3><ul><li><strong>Meaning</strong>:营养(纽崔莱)</li></ul><h3 id="nylon">nylon</h3><ul><li><strong>Meaning</strong>:尼龙</li></ul><h3 id="nym">nym</h3><ul><li><strong>Meaning</strong>:名字(name，与name发音相同)</li></ul><h2 id="o">O</h2><h3 id="oar">oar</h3><ul><li><strong>Meaning</strong>:桨（rao，桡）</li></ul><h3 id="obey">obey</h3><ul><li><strong>Meaning</strong>: 服从，遵守(无背)</li></ul><h3 id="occid">occid</h3><ul><li><strong>Meaning</strong>:欧洲及西方各国(欧西的)</li></ul><h3 id="ole">ole</h3><ul><li><strong>Meaning</strong>:油，加油(欧蕾，oil)</li></ul><h3 id="only">only</h3><ul><li><strong>Meaning</strong>:一的，一地(one + ly)</li></ul><h3 id="oo-ov">oo ov</h3><ul><li><strong>Meaning</strong>:卵，蛋</li></ul><h3 id="opaqu">opaqu</h3><ul><li><strong>Meaning</strong>:不透明的（op（否定）+<ahref="#root_aqu">aqu</a>）</li></ul><h3 id="optim">optim</h3><ul><li><strong>Meaning</strong>:最佳，最优(傲普天)</li></ul><h3 id="ordin-muni">ordin muni</h3><ul><li><strong>Meaning</strong>:<ul><li><strong>ordin</strong>：秩序（奥丁，秩序之神）</li><li><strong>muni</strong>：公共，共享（慕尼，给奥丁传递信息的乌鸦）</li></ul></li></ul><h3 id="ox">ox</h3><ul><li><strong>Meaning</strong>:氧(<spanclass="math inline">\(O_x,比如O_2\)</span>)</li></ul><h2 id="p">P</h2><h3 id="pact">pact</h3><ul><li><strong>Meaning</strong>:压（pack）</li></ul><h3 id="pain">pain</h3><ul><li><strong>Meaning</strong>:痛苦</li></ul><h3 id="pal">pal</h3><ul><li><strong>Meaning</strong>:可怕的，令人害怕的（怕哦）</li></ul><h3 id="pan">pan</h3><ul><li><strong>Meaning</strong>:盘</li></ul><h3 id="pants">pants</h3><ul><li><strong>Meaning</strong>: 内裤(胖次)</li></ul><h3 id="pany">pany</h3><ul><li><strong>Meaning</strong>:陪伴(陪你)</li><li><strong>Example</strong>:<ul><li><code>n:</code>companion, companionship, company, accompaniment,accompanist, accompanier</li><li><code>adj:</code>companionate, companionable, accompanied,uncompanied</li><li><code>adv:</code>companionably, uncompanionably</li><li><code>v:</code>accompany</li></ul></li></ul><h3 id="parall">parall</h3><ul><li><strong>Meaning</strong>: 排若(平行)</li></ul><h3 id="part">part</h3><ul><li><strong>Meaning</strong>:部分</li></ul><h3 id="party">party</h3><ul><li><strong>Meaning</strong>:派对，聚会</li></ul><h3 id="pat">pat</h3><ul><li><strong>Meaning</strong>:拍，轻拍</li></ul><h3 id="patr-matr">patr matr</h3><ul><li><strong>Meaning</strong>:<ul><li><strong>pater</strong>=<strong>patr</strong>：爸的那个人，叫做爸的人（pa+ter）</li><li><strong>mater</strong>=<strong>matr</strong>：妈的那个人，叫做妈的人(ma+ter)</li></ul></li></ul><h3 id="paw">paw</h3><ul><li><strong>Meaning</strong>:刨，爪子</li></ul><h3 id="peak">peak</h3><ul><li><strong>Meaning</strong>:山峰（匹克）</li></ul><h3 id="pen">pen</h3><ul><li><strong>Meaning</strong>:判罚（判）</li></ul><h3 id="perfum">perfum</h3><ul><li><strong>Meaning</strong>: 芳香，芬芳，香味(颇芳，颇为芳香)</li></ul><h3 id="person">person</h3><ul><li><strong>Meaning</strong>:人类</li></ul><h3 id="pest">pest</h3><ul><li><strong>Meaning</strong>:害虫(拍死他)</li></ul><h3 id="pha">pha</h3><ul><li><strong>Meaning</strong>:说（发）</li></ul><h3 id="phil">phil</h3><ul><li><strong>Meaning</strong>:喜爱（妃子）</li></ul><h3 id="phoen">phoen</h3><ul><li><strong>Meaning</strong>:风，凤凰</li></ul><h3 id="phony">phony</h3><ul><li><strong>Meaning</strong>:仿造的，假冒的（仿你）</li></ul><h3 id="photo">photo</h3><ul><li><strong>Meaning</strong>:光，照片（胶卷被光照到的地方，颜色就会变深）</li></ul><h3 id="pie">pie</h3><ul><li><strong>Meaning</strong>:派，馅饼</li></ul><h3 id="pilgrim">pilgrim</h3><ul><li><strong>Meaning</strong>:旅行者（漂孤人，漂泊且孤独的旅人）</li></ul><h3 id="pink">pink</h3><ul><li><strong>Meaning</strong>:粉红色的</li></ul><h3 id="plan">plan</h3><ul><li><strong>Meaning</strong>:打算</li></ul><h3 id="plant">plant</h3><ul><li><strong>Meaning</strong>:种植（圃栏）</li></ul><h3 id="plat">plat</h3><ul><li><strong>Meaning</strong>:平（柏拉图，第一个真正提出男女平等的思想家）</li></ul><h3 id="plead">plead</h3><ul><li><strong>Meaning</strong>:恳求，恳请(please)</li></ul><h3 id="ploy">ploy</h3><ul><li><strong>Meaning</strong>:仆人，劳役(仆劳役)</li><li><strong>注意</strong>：<strong>ploy</strong>会变成<strong>ploi</strong>的形式，是因为后面加了<strong>万能t</strong>(词根都可以加<strong>万能t</strong>)，但如果强行写成<strong>ployt</strong>会显得太过刻意，所以要把<strong>y</strong>写成意义相同的<strong>i</strong>再接万能<strong>t</strong></li></ul><h3 id="plunge">plunge</h3><ul><li><strong>Meaning</strong>:跳水，跳入(扑浪之)</li></ul><h3 id="plur">plur</h3><ul><li><strong>Meaning</strong>:多（多普勒，多plur）</li></ul><h3 id="poe">poe</h3><ul><li><strong>Meaning</strong>:诗（坡）</li></ul><h3 id="poly">poly</h3><ul><li><strong>Meaning</strong>:<ul><li>作为前缀是<strong>多</strong>，作为后缀是<strong>销售</strong></li><li>薄利，薄利多销</li></ul></li></ul><h3 id="pool">pool</h3><ul><li><strong>Meaning</strong>:水池，水潭（泊）</li></ul><h3 id="pop">pop</h3><ul><li><strong>Meaning</strong>:流行，（拟声词）砰</li></ul><h3 id="porn">porn</h3><ul><li><strong>Meaning</strong>:色情文学，黄色书刊（炮文）</li></ul><h3 id="pour">pour</h3><ul><li><strong>Meaning</strong>: 泼，倾倒液体</li></ul><h3 id="powder">powder</h3><ul><li><strong>Meaning</strong>:粉（泡打）</li></ul><h3 id="pract">pract</h3><ul><li><strong>Meaning</strong>:练习（pre+act）</li></ul><h3 id="precar">precar</h3><ul><li><strong>Meaning</strong>:危险（挡在车前是很危险的）</li></ul><h3 id="pred">pred</h3><ul><li><strong>Meaning</strong>:捕食（pre+<a href="#ed">ed</a>）</li></ul><h3 id="prehend">prehend</h3><ul><li><strong>Meaning</strong>:抓住，理解</li></ul><h3 id="prim">prim</h3><ul><li><strong>Meaning</strong>:最前（pro+im(最)）</li></ul><h3 id="proto">proto</h3><ul><li><strong>Meaning</strong>:原始（to pro）</li></ul><h3 id="psyche">psyche</h3><ul><li><strong>Meaning</strong>:精神（普赛克，灵魂女神）</li></ul><h3 id="pug">pug</h3><ul><li><strong>Meaning</strong>:攻击（巴狗，哈巴狗，哈巴狗有攻击性）</li></ul><h3 id="puls">puls</h3><ul><li><strong>Meaning</strong>:推（push）</li></ul><h3 id="pun">pun</h3><ul><li><strong>Meaning</strong>:判罚（判）</li></ul><h3 id="punc">punc</h3><ul><li><strong>Meaning</strong>:朋克，刺激性元素</li></ul><h3 id="punch">punch</h3><ul><li><strong>Meaning</strong>: 用拳猛击(砰哧)</li></ul><h3 id="pur">pur</h3><ul><li><strong>Meaning</strong>:纯朴（朴）</li></ul><h2 id="q">Q</h2><h3 id="quaff">quaff</h3><ul><li><strong>Meaning</strong>:爆饮，痛饮（夸父）</li></ul><h3 id="quasi">quasi</h3><ul><li><strong>Meaning</strong>:接近，准（夸似）</li></ul><h3 id="quest">quest</h3><ul><li><strong>Meaning</strong>:探求，寻求（求是）</li></ul><h3 id="quick">quick</h3><ul><li><strong>Meaning</strong>:快速的</li></ul><h2 id="r">R</h2><h3 id="rain">rain</h3><ul><li><strong>Meaning</strong>:雨</li></ul><h3 id="ran">ran</h3><ul><li><strong>Meaning</strong>:任意（任）</li></ul><h3 id="rapid">rapid</h3><ul><li><strong>Meaning</strong>:快</li></ul><h3 id="rar">rar</h3><ul><li><strong>Meaning</strong>:少(rar格式的压缩包)</li></ul><h3 id="rear">rear</h3><ul><li><strong>Meaning</strong>:向后，后面的，后部(<strong>re</strong>意思是向后，<strong>ar</strong>是形容词和名词后缀组成的复合词)</li></ul><h3 id="reel">reel</h3><ul><li><strong>Meaning</strong>:绕</li></ul><h3 id="rio">rio</h3><ul><li><strong>Meaning</strong>:狂野，放纵（里约）</li></ul><h3 id="rival">rival</h3><ul><li><strong>Meaning</strong>: 敌人（日倭）</li></ul><h3 id="roar">roar</h3><ul><li><strong>Meaning</strong>:咆哮，吼叫（嗷）</li></ul><h3 id="rod">rod</h3><ul><li><strong>Meaning</strong>:杆，竿，棒（若笛，宛若长笛般的东西）</li></ul><h3 id="rot">rot</h3><ul><li><strong>Meaning</strong>:弱，衰弱</li></ul><h3 id="row">row</h3><ul><li><strong>Meaning</strong>:桨（桡）</li></ul><h3 id="rudiment">rudiment</h3><ul><li><strong>Meaning</strong>:入门（入得门）</li></ul><h3 id="ruin">ruin</h3><ul><li><strong>Meaning</strong>:破坏，糟蹋(辱淫)</li></ul><h3 id="rubbish">rubbish</h3><ul><li><strong>Meaning</strong>:垃圾</li></ul><h3 id="rumor">rumor</h3><ul><li><strong>Meaning</strong>:谣言(辱没)</li></ul><h2 id="s">S</h2><h3 id="sage">sage</h3><ul><li><strong>Meaning</strong>:智者，贤人（傻子，大智若愚）</li></ul><h3 id="saint">saint</h3><ul><li><strong>Meaning</strong>:圣人(圣)</li></ul><h3 id="sale">sale</h3><ul><li><strong>Meaning</strong>: 销售，出售</li></ul><h3 id="salute">salute</h3><ul><li><strong>Meaning</strong>:敬礼</li></ul><h3 id="sandwich">sandwich</h3><ul><li><strong>Meaning</strong>:三明治</li></ul><h3 id="sant">sant</h3><ul><li><strong>Meaning</strong>:圣人</li></ul><h3 id="sassion">sassion</h3><ul><li><strong>Meaning</strong>:杀手(杀神)</li></ul><h3 id="sauce">sauce</h3><ul><li><strong>Meaning</strong>:沙司，酱汁</li></ul><h3 id="sault">sault</h3><ul><li><strong>Meaning</strong>:攻击，击打（扫）</li></ul><h3 id="scand">scand</h3><ul><li><strong>Meaning</strong>:不堪的（失堪的）</li></ul><h3 id="sche">sche</h3><ul><li><strong>Meaning</strong>:策划（使策）</li></ul><h3 id="schol">schol</h3><ul><li><strong>Meaning</strong>:学校（school）</li></ul><h3 id="seal">seal</h3><ul><li><strong>Meaning</strong>:印章（玺儿）</li></ul><h3 id="seas">seas</h3><ul><li><strong>Meaning</strong>:四季（四时）</li></ul><h3 id="seat">seat</h3><ul><li><strong>Meaning</strong>:座位</li></ul><h3 id="see">see</h3><ul><li><strong>Meaning</strong>:看</li></ul><h3 id="seem">seem</h3><ul><li><strong>Meaning</strong>:似乎，好像</li></ul><h3 id="seg">seg</h3><ul><li><strong>Meaning</strong>:分割（撕割）</li></ul><h3 id="seld">seld</h3><ul><li><strong>Meaning</strong>:少的，很少的</li></ul><h3 id="sell">sell</h3><ul><li><strong>Meaning</strong>:售</li></ul><h3 id="sen">sen</h3><ul><li><strong>Meaning</strong>: 老(参，人参)</li></ul><h3 id="scen">scen</h3><ul><li><strong>Meaning</strong>:景象，景观，舞台剧（seen）</li></ul><h3 id="scent">scent</h3><ul><li><strong>Meaning</strong>:芳香，香味（馨）</li></ul><h3 id="schedule">schedule</h3><ul><li><strong>Meaning</strong>:计划表，带做事项</li></ul><h3 id="scorn">scorn</h3><ul><li><strong>Meaning</strong>: 蔑视，藐视(视空)</li></ul><h3 id="scure">scure</h3><ul><li><strong>Meaning</strong>:使明白（使彻）</li></ul><h3 id="serv">serv</h3><ul><li><strong>Meaning</strong>:奴隶（servant，servile）</li></ul><h3 id="sev">sev</h3><ul><li><strong>Meaning</strong>:切(七，7的形状像一个镰刀)</li></ul><h3 id="sh">sh</h3><ul><li><strong>Meaning</strong>:使，似，式</li></ul><h3 id="share">share</h3><ul><li><strong>Meaning</strong>:分享</li></ul><h3 id="shark">shark</h3><ul><li><strong>Meaning</strong>: 鲨鱼</li></ul><h3 id="sheen">sheen</h3><ul><li><strong>Meaning</strong>:闪耀，发光（闪）</li></ul><h3 id="sheep">sheep</h3><ul><li><strong>Meaning</strong>:羊</li></ul><h3 id="shelt">shelt</h3><ul><li><strong>Meaning</strong>: 守护(守)</li></ul><h3 id="shift">shift</h3><ul><li><strong>Meaning</strong>:转换</li></ul><h3 id="shim">shim</h3><ul><li><strong>Meaning</strong>:闪光（闪）</li></ul><h3 id="shine">shine</h3><ul><li><strong>Meaning</strong>:闪耀，发光</li></ul><h3 id="shit">shit</h3><ul><li><strong>Meaning</strong>:屎</li></ul><h3 id="shop">shop</h3><ul><li><strong>Meaning</strong>:店铺</li></ul><h3 id="shot">shot</h3><ul><li><strong>Meaning</strong>: 射击</li></ul><h3 id="shore">shore</h3><ul><li><strong>Meaning</strong>:岸（首尔）</li></ul><h3 id="shout">shout</h3><ul><li><strong>Meaning</strong>:呼喊</li></ul><h3 id="show">show</h3><ul><li><strong>Meaning</strong>:展示</li></ul><h3 id="shun">shun</h3><ul><li><strong>Meaning</strong>:闪避(闪)</li></ul><h3 id="sigh">sigh</h3><ul><li><strong>Meaning</strong>:叹息（唏）</li></ul><h3 id="sight">sight</h3><ul><li><strong>Meaning</strong>:视觉，视力，视线，视野（视）</li></ul><h3 id="silen">silen</h3><ul><li><strong>Meaning</strong>:消音</li></ul><h3 id="silic">silic</h3><ul><li><strong>Meaning</strong>:细粒颗（硅）</li></ul><h3 id="simil">simil</h3><ul><li><strong>Meaning</strong>:像，似(似貌，貌似)</li></ul><h3 id="simul">simul</h3><ul><li><strong>Meaning</strong>:像，似（似貌）</li></ul><h3 id="sist">sist</h3><ul><li><strong>Meaning</strong>:合作，坚持</li></ul><h3 id="sit">sit</h3><ul><li><strong>Meaning</strong>:坐</li></ul><h3 id="situ">situ</h3><ul><li><strong>Meaning</strong>:使置身xx地/xx情况（使处）</li></ul><h3 id="ske">ske</h3><ul><li><strong>Meaning</strong>:尸体骨骼（尸骼）</li></ul><h3 id="sku">sku</h3><ul><li><strong>Meaning</strong>:死人骨头（死骷）</li></ul><h3 id="sky">sky</h3><ul><li><strong>Meaning</strong>:天空</li></ul><h3 id="snatch">snatch</h3><ul><li><strong>Meaning</strong>:抓住（使拿持）</li></ul><h3 id="soar">soar</h3><ul><li><strong>Meaning</strong>:高飞，升空(嗖)</li></ul><h3 id="sol">sol</h3><ul><li><strong>Meaning</strong>:太阳，唯一（solo，单挑；Sol，索尔，太阳神）</li></ul><h3 id="solid">solid</h3><ul><li><strong>Meaning</strong>:消灭敌人（扫敌）</li></ul><h3 id="son">son</h3><ul><li><strong>Meaning</strong>:声音（嗓）</li><li><strong>Example</strong>：<ul><li><code>adj:</code>sonic supersonic subsonic consonant ultrasonicstereosonic</li><li><code>n:</code>sonics unison consonant dissonance assonancesonar</li><li><code>v:</code>resonate</li></ul></li></ul><h3 id="soon">soon</h3><ul><li><strong>Meaning</strong>:瞬间，立刻，马上</li></ul><h3 id="sooth">sooth</h3><ul><li><strong>Meaning</strong>:舒适</li></ul><h3 id="soph">soph</h3><ul><li><strong>Meaning</strong>:诡辩（说服）</li></ul><h3 id="sou">sou</h3><ul><li><strong>Meaning</strong>:南（south）</li></ul><h3 id="sour">sour</h3><ul><li><strong>Meaning</strong>:酸，馊(馊)</li></ul><h3 id="source">source</h3><ul><li><strong>Meaning</strong>:起点，开头，开端（首始）</li></ul><h3 id="sover">sover</h3><ul><li><strong>Meaning</strong>:至高无上的，最崇高的（so over）</li></ul><h3 id="spider">spider</h3><ul><li><strong>Meaning</strong>:蜘蛛</li></ul><h3 id="spis">spis</h3><ul><li><strong>Meaning</strong>:非常鄙视（死鄙视）</li></ul><h3 id="spit">spit</h3><ul><li><strong>Meaning</strong>:吐唾沫（使呸）</li></ul><h3 id="spite">spite</h3><ul><li><strong>Meaning</strong>:鄙视（视鄙）</li></ul><h3 id="square">square</h3><ul><li><strong>Meaning</strong>:正方块，正方形</li></ul><h3 id="stable">stable</h3><ul><li><strong>Meaning</strong>:可以xx的（stay）</li></ul><h3 id="staff-fran">staff fran</h3><ul><li><strong>Meaning</strong>:<ul><li><strong>staff</strong>:参谋，策划，职员(士大夫)</li><li><strong>fran</strong>：(通fren)弗然大怒</li></ul></li></ul><h3 id="stain">stain</h3><ul><li><strong>Meaning</strong>:使玷污（使玷）</li></ul><h3 id="stereo">stereo</h3><ul><li><strong>Meaning</strong>:立体的（<a href="#postfix_ster">ster</a>+<ahref="#postfix_eo">eo</a>）</li></ul><h3 id="stew">stew</h3><ul><li><strong>Meaning</strong>:管理（司徒，官职，司-管理，徒-xx的人）</li></ul><h3 id="sto">sto</h3><ul><li><strong>Meaning</strong>:石头</li></ul><h3 id="stoop">stoop</h3><ul><li><strong>Meaning</strong>:使驼背，使弯腰（使驼扑）</li></ul><h3 id="strict">strict</h3><ul><li><strong>Meaning</strong>:严格</li></ul><h3 id="strive">strive</h3><ul><li><strong>Meaning</strong>:使追求（使追骛）</li></ul><h3 id="stroll">stroll</h3><ul><li><strong>Meaning</strong>:四处走走，散步闲逛（四走）</li></ul><h3 id="sturd">sturd</h3><ul><li><strong>Meaning</strong>:特别结实的（实特的）</li></ul><h3 id="sudden">sudden</h3><ul><li><strong>Meaning</strong>:突然</li></ul><h3 id="summ">summ</h3><ul><li><strong>Meaning</strong>:最高</li></ul><h3 id="surrender">surrender</h3><ul><li><strong>Meaning</strong>:投降(输认的)</li></ul><h3 id="swa">swa</h3><ul><li><strong>Meaning</strong>:摆动（甩）</li></ul><h3 id="swamp">swamp</h3><ul><li><strong>Meaning</strong>:沼泽(死亡泊)</li></ul><h3 id="sweat">sweat</h3><ul><li><strong>Meaning</strong>:流出水，渗处水，流出水（水）</li></ul><h3 id="sym">sym</h3><ul><li><strong>Meaning</strong>:相同（same）</li></ul><h2 id="t">T</h2><h3 id="tab">tab</h3><ul><li><strong>Meaning</strong>:表格，面板（游戏里的<code>tab</code>键）</li></ul><h3 id="taboo">taboo</h3><ul><li><strong>Meaning</strong>:禁止，禁忌(特步的logo是一个巨大的<strong>×</strong>)</li></ul><h3 id="tach">tach</h3><ul><li><strong>Meaning</strong>:接触，贴付（touch）</li></ul><h3 id="tal">tal</h3><ul><li><strong>Meaning</strong>:高（tall）</li></ul><h3 id="tami">tami</h3><ul><li><strong>Meaning</strong>：脏，弄脏(汰埋，埋汰)</li></ul><h3 id="tan">tan</h3><ul><li><strong>Meaning</strong>:皮肤日晒后的炭黑色&amp;把皮肤晒成宛如黑炭的颜色(碳)</li></ul><h3 id="tangi">tangi</h3><ul><li><strong>Meaning</strong>:触及，触摸(探及)</li></ul><h3 id="tangle">tangle</h3><ul><li><strong>Meaning</strong>:纠缠（探戈：一种舞蹈）</li><li><strong>Example</strong>:<ul><li><code>n:</code>tangle entanglement</li><li><code>adj:</code>tangled</li><li><code>v:</code>untangle entangle disentangle detangle</li></ul></li></ul><h3 id="tard">tard</h3><ul><li><strong>Meaning</strong>:拖沓的，缓慢的，迟缓的(沓的)</li></ul><h3 id="target">target</h3><ul><li><strong>Meaning</strong>:靶子</li></ul><h3 id="tart">tart</h3><ul><li><strong>Meaning</strong>:馅饼（蛋挞egg tart）</li></ul><h3 id="tast">tast</h3><ul><li><strong>Meaning</strong>:味道（塔斯，塔斯汀）</li></ul><h3 id="tattoo">tattoo</h3><ul><li><strong>Meaning</strong>:纹身(拓图)</li></ul><h3 id="tear">tear</h3><ul><li><strong>Meaning</strong>: 眼泪</li></ul><h3 id="tedi">tedi</h3><ul><li><strong>Meaning</strong>:啰嗦（泰迪）</li></ul><h3 id="teen">teen</h3><ul><li><strong>Meaning</strong>:十(ten中间的e变为两个e)</li></ul><h3 id="tel">tel</h3><ul><li><strong>Meaning</strong>:远距离</li></ul><h3 id="text">text</h3><ul><li><strong>Meaning</strong>:文字，文本(.txt)</li></ul><h3 id="thaw">thaw</h3><ul><li><strong>Meaning</strong>:消融（销）</li></ul><h3 id="theat">theat</h3><ul><li><strong>Meaning</strong>:戏剧(戏)</li></ul><h3 id="theme">theme</h3><ul><li><strong>Meaning</strong>:题目，主题</li></ul><h3 id="thes">thes</h3><ul><li><strong>Meaning</strong>:标题（题示）</li></ul><h3 id="thin">thin</h3><ul><li><strong>Meaning</strong>:细，薄（纤）</li></ul><h3 id="thousand">thousand</h3><ul><li><strong>Meaning</strong>:千</li></ul><h3 id="tim">tim</h3><ul><li><strong>Meaning</strong>:恐惧</li></ul><h3 id="tinu">tinu</h3><ul><li><strong>Meaning</strong>: 不停(停无)</li></ul><h3 id="tilt">tilt</h3><ul><li><strong>Meaning</strong>:倾斜（梯儿是倾斜的）</li></ul><h3 id="title">title</h3><ul><li><strong>Meaning</strong>:标题</li></ul><h3 id="toe">toe</h3><ul><li><strong>Meaning</strong>:xx的尖端（头）</li></ul><h3 id="tom">tom</h3><ul><li><strong>Meaning</strong>:切开(膛，开膛破肚)</li></ul><h3 id="tomb">tomb</h3><ul><li><strong>Meaning</strong>:土墓</li></ul><h3 id="torm">torm</h3><ul><li><strong>Meaning</strong>:痛苦，使人痛苦的人或物（痛）</li></ul><h3 id="torrent">torrent</h3><ul><li><strong>Meaning</strong>:奔流，激流(滔然)</li></ul><h3 id="total">total</h3><ul><li><strong>Meaning</strong>:彻底，完全</li></ul><h3 id="tour">tour</h3><ul><li><strong>Meaning</strong>:旅途(途儿)</li></ul><h3 id="tow">tow</h3><ul><li><strong>Meaning</strong>:拖，拉，拽，牵引</li></ul><h3 id="town">town</h3><ul><li><strong>Meaning</strong>:镇，城镇</li></ul><h3 id="traum">traum</h3><ul><li><strong>Meaning</strong>: 创伤</li></ul><h3 id="tread">tread</h3><ul><li><strong>Meaning</strong>:踹，踩踏(踹的)</li></ul><h3 id="trem">trem</h3><ul><li><strong>Meaning</strong>:颤抖（颤）</li></ul><h3 id="tri">tri</h3><ul><li><strong>Meaning</strong>:摧毁破坏，毁坏（摧）</li></ul><h3 id="trib">trib</h3><ul><li><strong>Meaning</strong>:边陲部落（陲部）</li></ul><h3 id="trophy">trophy</h3><ul><li><strong>Meaning</strong>:超肥，营养</li></ul><h3 id="trouble">trouble</h3><ul><li><strong>Meaning</strong>:麻烦</li></ul><h3 id="truan">truan</h3><ul><li><strong>Meaning</strong>:逃跑，逃掉（窜）</li></ul><h3 id="tunn">tunn</h3><ul><li><strong>Meaning</strong>:通道（通）</li></ul><h3 id="turb">turb</h3><ul><li><strong>Meaning</strong>:错乱（特步的logo是个<code>×</code>）</li></ul><h3 id="turr">turr</h3><ul><li><strong>Meaning</strong>:塔，小塔</li></ul><h3 id="typhoon">typhoon</h3><ul><li><strong>Meaning</strong>:台风</li></ul><h3 id="tyre">tyre</h3><ul><li><strong>Meaning</strong>:轮胎（胎儿）</li></ul><h2 id="u">U</h2><h3 id="umb">umb</h3><ul><li><strong>Meaning</strong>:阴影(暗部)</li></ul><h3 id="un">un</h3><ul><li><strong>Meaning</strong>:不(安，不入虎穴，安得虎子)</li></ul><h3 id="und">und</h3><ul><li><strong>Meaning</strong>:洋溢，充溢，多到溢出来（盎的）</li><li><strong>Example</strong>:<ul><li><code>adj:</code>abundant redundant abounding</li><li><code>n:</code>abundance inundation redundancy</li><li><code>adv:</code>abundantly</li><li><code>v:</code>inundate abound superabound</li></ul></li></ul><h3 id="usu">usu</h3><ul><li><strong>Meaning</strong>: 寻常，通常(无殊)</li></ul><h2 id="v">V</h2><h3 id="vac">vac</h3><ul><li><strong>Meaning</strong>:空空如也(外壳)</li></ul><h3 id="val-vail">val vail</h3><ul><li><strong>Meaning</strong>:强壮(wall)，有价值的(wallet)</li></ul><h3 id="vall">vall</h3><ul><li><strong>Meaning</strong>: 墙（wall）</li></ul><h3 id="van">van</h3><ul><li><strong>Meaning</strong>:前，空（one，第一名）</li></ul><h3 id="vanq">vanq</h3><ul><li><strong>Meaning</strong>:征服，击败(完克)</li></ul><h3 id="veget">veget</h3><ul><li><strong>Meaning</strong>:素食，蔬菜（味斋）</li></ul><h3 id="veh">veh</h3><ul><li><strong>Meaning</strong>:承载东西（物荷）</li></ul><h3 id="vein">vein</h3><ul><li><strong>Meaning</strong>:纹理，纹路，血管(vein=vey+in,vey=way路。英吉利人认为血管是人身上的纹路，特指静脉，因为身体表面上看得到的这些纹路状的东西都是静脉)</li></ul><h3 id="vener">vener</h3><ul><li><strong>Meaning</strong>:性欲（维纳，<ahref="https://zhuanlan.zhihu.com/p/34199679">维纳斯</a>）</li></ul><h3 id="vent">vent</h3><ul><li><strong>Meaning</strong>:来，风（went，风神Venti）</li></ul><h3 id="vet">vet</h3><ul><li><strong>Meaning</strong>:禁止（勿）</li></ul><h3 id="vey">vey</h3><ul><li><strong>Meaning</strong>:运输，路（way，路）</li></ul><h3 id="vibr">vibr</h3><ul><li><strong>Meaning</strong>:振动</li></ul><h3 id="vict">vict</h3><ul><li><strong>Meaning</strong>: 战胜(威克)</li></ul><h3 id="vigor">vigor</h3><ul><li><strong>Meaning</strong>:精力(伟哥：一款随时随地帮你把精力拉满的药)</li><li><strong>Example</strong>:<ul><li><code>n:</code>vigor vigour invigoration invigorator</li><li><code>adj:</code>vigorous invigorative</li><li><code>adv:</code>vigorously</li><li><code>v:</code>invigorate reinvigorate</li></ul></li></ul><h3 id="vince">vince</h3><ul><li><strong>Meaning</strong>:战胜（win+ce）</li></ul><h3 id="viro">viro</h3><ul><li><strong>Meaning</strong>:围绕，外绕</li><li><strong>注意</strong>：<strong>viro</strong>在单词出现的时候，经常在后面带上<strong>n.</strong>这个经典名词后缀，变成<strong>viron</strong>形式，表示<strong>围绕在周围的东西</strong></li></ul><h3 id="vita">vita</h3><ul><li><strong>Meaning</strong>:命（维他命）</li><li><strong>Example</strong>:<ul><li><code>n:</code>vita vijtality vitalization vitamin multivitaminrevitalization</li><li><code>adj:</code>vital</li><li><code>adv:</code>vitally</li><li><code>v:</code>vitalize devitalize revitalize</li></ul></li></ul><h3 id="vocvok">voc，vok</h3><ul><li><strong>Meaning</strong>:大喊（我靠），呼唤（从voc衍生过来）</li></ul><h3 id="volt">volt</h3><ul><li><strong>Meaning</strong>:伏特</li></ul><h3 id="vor">vor</h3><ul><li><strong>Meaning</strong>:漩涡，吞噬（涡）</li></ul><h2 id="w">W</h2><h3 id="wage">wage</h3><ul><li><strong>Meaning</strong>:工资（位资）</li></ul><h3 id="want">want</h3><ul><li><strong>Meaning</strong>:想要</li></ul><h3 id="ware">ware</h3><ul><li><strong>Meaning</strong>:陶器（瓦儿）</li></ul><h3 id="warm">warm</h3><ul><li><strong>Meaning</strong>:温暖</li></ul><h3 id="wedge">wedge</h3><ul><li><strong>Meaning</strong>:楔子，楔形物（v字）</li></ul><h3 id="wee">wee</h3><ul><li><strong>Meaning</strong>：微小的，极小的(微)</li></ul><h3 id="whirl">whirl</h3><ul><li><strong>Meaning</strong>:斡旋(斡)</li></ul><h3 id="whistle">whistle</h3><ul><li><strong>Meaning</strong>:哨，口哨(微哨)</li></ul><h3 id="wick">wick</h3><ul><li><strong>Meaning</strong>:坏人（无益客）</li></ul><h3 id="wink">wink</h3><ul><li><strong>Meaning</strong>:眨眼（温克）</li></ul><h3 id="wire">wire</h3><ul><li><strong>Meaning</strong>: 钢丝(威亚)</li></ul><h3 id="woo">woo</h3><ul><li><strong>Meaning</strong>:追求(骛，好高骛远)</li></ul><h2 id="x">X</h2><h3 id="x-1">x</h3><ul><li><strong>Meaning</strong>:女（性染色体）</li></ul><h2 id="y">Y</h2><h3 id="yer">yer</h3><ul><li><strong>Meaning</strong>:从事某某行业的人(爷，比如倒爷，军爷，官爷)</li></ul><h3 id="yest">yest</h3><ul><li><strong>Meaning</strong>:昨日的，已逝的（已逝）</li></ul><h3 id="yogurt">yogurt</h3><ul><li><strong>Meaning</strong>:酸奶</li></ul><h3 id="young">young</h3><ul><li><strong>Meaning</strong>:年轻</li></ul><h3 id="youth">youth</h3><ul><li><strong>Meaning</strong>:青春，青少年时期</li></ul><h2 id="z">Z</h2><h3 id="zinc">zinc</h3><ul><li><strong>Meaning</strong>:锌（锌颗粒）</li></ul><h3 id="zom">zom</h3><ul><li><strong>Meaning</strong>:僵尸（粽子）</li></ul><h3 id="zoo">zoo</h3><ul><li><strong>Meaning</strong>:生物（造物，生物是神之造物）</li></ul><h2 id="附录">附录</h2><h3 id="公式">1. 公式</h3><h4 id="万能t">1.1 万能t</h4><p>词根结尾+t含义不变，如：</p><p><code>dic = dict</code></p><p><code>spec = spect</code></p><p><code>doc = doct</code></p><p>且一般不会予以翻译，比如<code>bullet</code>翻译成芭蕾，<code>jacket</code>翻译成夹克</p><h4 id="屌丝定律">1.2 屌丝定律</h4><p>当一个词根的尾辅音是<code>d</code>的时候，那这个词根就一定由尾辅音是<code>s</code>的情况。如：</p><p><code>cad = cas</code></p><p><code>ced = ces</code></p><p><code>cid = cis</code></p><p><a id="expression_n"></a></p><h4 id="n元音">1.3 n+元音</h4><p>n+任何元音都表示否定的意思，<code>na</code>,<code>ne</code>,<code>ni</code>,<code>no</code>,<code>nu</code></p><h3 id="通假">2. 通假</h3><ol type="1"><li><code>v</code>和<code>w</code>通假</li><li><code>n</code>和<code>m</code>通假</li><li><code>e</code>和<code>i</code>通假</li></ol><h3 id="后缀">3. 后缀</h3><p><a id="postfix_eo"></a></p><ul><li>-eo:xx东西，xx的人，形容词后缀</li></ul><p><a id="postfix_ster"></a></p><ul><li>ster:stand+er，站立的人，即表示人</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>词根词缀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端复习笔记</title>
    <link href="/2024/06/16/webExamination/"/>
    <url>/2024/06/16/webExamination/</url>
    
    <content type="html"><![CDATA[<p>因为老师给的笔记分散在多个文件夹，用百度翻译出来的结果经常不准，所以我在一怒之下<del>怒了一下</del>决定将所有的笔记归类到一篇文章中，并且将其中的一些难以理解的术语用大白话说出来</p><p>先上思维导图(你们应该能理解我有多肝了)</p><figure><img src="/images/web思维导图.png" alt="思维导图" /><figcaption aria-hidden="true">思维导图</figcaption></figure><h2 id="写在开头">0. 写在开头</h2><p>开始之前，我想先说一下html,css,Bootstrap,Javascript,Query之间的关系</p><ol type="1"><li>HTML(HyperText MarkupLanguage)是网页的基础，它定义了网页的结构和内容。你可以把它想象成建筑的骨架，决定了建筑的基本形状和内部空间的布局。</li><li>CSS(Cascading StyleSheet)是用来设置网页的样式的，包括布局、颜色、字体等。它的作用类似于建筑的装修，通过它可以使基本的建筑看起来更美观、更符合使用需求。</li><li>Bootstrap是基于 HTML 和 CSS的一个框架，它提供了预制的样式和组件，使网页设计变得更快、更容易。想象一下，如果有一个预装好家具和装饰的房间，你只需要进行一些小的调整就能入住，这就是Bootstrap 的作用。</li><li>JavaScript是一种脚本语言，用于添加网页的交互功能，比如响应按钮点击、数据更新等。如果把网页比作一部电影，那么JavaScript 就是让静态画面动起来的电影导演。</li><li>jQuery是一个 JavaScript 库，它简化了 JavaScript 的编程，使 DOM的操作、事件处理和动画效果的实现更加容易。使用 jQuery就像是为电影导演提供了一套高效的工具，使拍摄过程更加顺畅。</li></ol><p>想象你在建造一个现代住宅（网页）。首先，你需要一个结构图（HTML），它定义了房子的基本布局和每个房间的位置。接着，你需要进行内部装修（CSS），决定墙壁的颜色、地板的材质和房间的灯光等。然后，为了让装修更快更方便，你选择了一套现成的装修套餐（Bootstrap），这套套餐已经包括了一些流行的设计和家具。</p><p>现在房子看起来很好，但如果要住得舒适，你还需要添加一些高科技设备，比如自动窗帘、温度调节器等（JavaScript），使房子可以根据居住者的行为自动调整环境。最后，为了简化这些高科技设备的安装和使用，你引入了一个智能家居系统（jQuery），它可以帮你更容易地控制这些设备，让你的智能家居体验更加无缝和愉快。</p><h2 id="html-cheatsheethtml工作表">1. HTML Cheatsheet(HTML工作表)</h2><h3 id="basic-tags">1.1 Basic Tags</h3><ol type="1"><li><code>&lt;html&gt;&lt;/html&gt;</code>:Creates an HTMLdocument<br>创建HTML文档</li><li><code>&lt;head&gt;&lt;/head&gt;</code>:Sets off the title &amp;other info that isn'sdisplayed<br>用来标记网页标题和其他不会直接显示的内容(<em>这里的<code>set off</code>可以理解为标记或设定</em>)</li><li><code>&lt;body&gt;&lt;/body&gt;</code>:Sets off the visible portionof the document<br>用来标记文档可见部分</li><li><code>&lt;title&gt;&lt;/title&gt;</code>:Puts name of the documentin the title bar;when bookmarking pages,this is whatbookmarked<br>文档的标题会显示在浏览器的标题栏或标签页上，当用户为页面添加书签时，这个标题也是被保存的内容。(<code>bookmark</code>:书签)</li></ol><h3id="body-attributesonly-used-in-email-newsletters仅用于电子邮件通讯">1.2Body attributes[Only used in email newsletters(仅用于电子邮件通讯)]</h3><ol type="1"><li><code>&lt;body bgcolor=?&gt;</code>:Sets background color,using nameor hex value<br>设置背景颜色，使用名称或十六进制值</li><li><code>&lt;body text=?&gt;</code>:Sets text color,using name or hexvalue<br>设置文本颜色，使用名称或十六进制值</li><li><code>&lt;body link=?&gt;</code>:Sets color of links,using name orhex value<br>设置链接颜色，使用名称或十六进制值</li><li><code>&lt;body vlink=?&gt;</code>:Sets color of visited links,usingname or hex calue<br>设置已访问链接的颜色，使用名称或十六进制值</li><li><code>&lt;body alink=?&gt;</code>:Sets color of active links (whilemouse-clicking)<br>设置活动链接的颜色（鼠标点击时）</li></ol><blockquote><p><strong>小贴士（不赶时间可以看看）：</strong>使用名称或十六进制值是指在指定颜色时，可以使用颜色的名称或其对应的十六进制值使用名称，比如<code>red</code>,<code>blue</code>,<code>green</code>等等使用十六进制时，每种颜色都可以用一个六位的十六进制代码来表示，代码前加上<code>#</code>,比如<code>#FF0000</code>(红色)，<code>#0000FF</code>(蓝色)，<code>#00FF00</code>(绿色)，<code>#000000</code>(黑色)，<code>#FFFFFF</code>(白色)十六进制值由三个部分组成，分别表示红色、绿色和蓝色（RGB），每部分用两位十六进制数表示。比如，#FF0000代表红色，因为 FF 表示最大值 255，对应于红色，而绿色和蓝色的值为 0。</p></blockquote><h3 id="text-tags文本标签">1.3 Text Tags(文本标签)</h3><ol type="1"><li><code>&lt;pre&gt;&lt;/pre&gt;</code>:Creates preformattedtext<br>创建预格式化文本<br>大白话：使用<code>&lt;pre&gt;</code>标签可以确保文本的格式不会被浏览器自动调整，非常适合需要保持原始格式的内容</li><li><code>&lt;h1&gt;&lt;/h1&gt;--&gt;&lt;h6&gt;&lt;/h6&gt;</code>:Createsheadlines -- H1=largest, H6=smallest<br>创建标题，h1最大，h6最小</li><li><code>&lt;b&gt;&lt;/b&gt;</code>:Creates bold text (should use<code>&lt;strong&gt;</code>instead)<br>创建粗体文本(创建粗体文本（应该使用<code>&lt;strong&gt;</code> 代替）)</li><li><code>&lt;i&gt;&lt;/i&gt;</code>:Creates italicized text (should use<code>&lt;em&gt;</code> instead)<br>创建斜体文本（应该使用<code>&lt;em&gt;</code> 代替）</li><li><code>&lt;tt&gt;&lt;/tt&gt;</code>:Creates typewriter-styletext<br>创建打字机风格的文本</li><li><code>&lt;code&gt;&lt;/code&gt;</code>:Used to define source code,usually monospace<br>用于定义源代码，通常为等宽字体</li><li><code>&lt;cite&gt;&lt;/cite&gt;</code>:Creates a citation, usuallyprocessed in italics<br>创建引用，通常为斜体</li><li><code>&lt;address&gt;&lt;/address&gt;</code>:Creates addresssection, usually processed in italics<br>创建地址部分，通常为斜体</li><li><code>&lt;em&gt;&lt;/em&gt;</code>:Emphasizes a word (usuallyprocessed in italics)<br>强调一个词（通常为斜体）</li><li><code>&lt;strong&gt;&lt;/strong&gt;</code>:Emphasizes a word(usually processed in bold)<br>强调一个词（通常为粗体）</li><li><code>&lt;font size=?&gt;&lt;/font&gt;</code>:Sets size of font - 1to 7 (should use CSS instead)<br>设置字体大小 - 1 到 7（应该使用 CSS代替）</li><li><code>&lt;font color=?&gt;&lt;/font&gt;</code>:Sets font color(should use CSS instead)<br>设置字体颜色（应该使用 CSS 代替）</li><li><code>&lt;font face=?&gt;&lt;/font&gt;</code>:Defines the fontused(should use the CSS instead)<br>定义所使用的字体（应该使用 CSS代替）</li></ol><h3 id="links">1.4 Links</h3><ol type="1"><li><code>&lt;a href="URL"&gt;clickable text&lt;/a&gt;</code>:Creates ahyperlink to a Uniform ResourceLocator<br>创建一个指向统一资源定位符（URL）的超链接</li><li><code>&lt;a href="mailto:EMAIL_ADDRESS"&gt;clickable text&lt;/a&gt;</code>:Createsa hyperlink to an email address<br>创建一个指向电子邮件地址的超链接</li><li><code>&lt;a name="NAME"&gt;</code>:Creates a target location withina document<br>在文档内创建一个目标位置</li><li><code>&lt;a href="#NAME"&gt;clickable text&lt;/a&gt;</code>:Createsa link to that targetlocation<br>创建一个指向该目标位置的链接<br>大白话：创建一个指向该目标位置的链接。点击此链接时，页面会滚动到相应的锚点目标位置</li></ol><blockquote><p><strong>小贴士：</strong>超链接（Hyperlink）是指在网页或文档中，能够从一个页面或位置跳转到另一个页面或位置的链接。通过点击超链接，用户可以快速导航到指定的目标，例如另一个网页、同一页面中的特定位置、电子邮件地址或文件。超链接通常以不同的颜色或下划线显示，提示用户可以点击它们。超链接使用HTML 中的 <code>&lt;a&gt;</code>（anchor）标签来创建。 href是"HypertextReference"的缩写。在 HTML 中，href 属性用于指定超链接的目标地址。通过为<code>&lt;a&gt;</code> 标签设置 href属性，可以定义用户点击链接时应该跳转到的目标位置。 URL是"UniformResource Locator"的缩写，中文常译为“统一资源定位符”。URL是一种用于指定互联网上某一资源位置的地址，类似于我们在现实生活中使用的地址来找到特定位置。URL可以是网址(比如<a href="https://crazythursdayv50tome.cn">https://crazythursdayv50tome.cn</a>)也可以是路径(比如"/path/to/resource")等</p></blockquote><h3 id="formatting格式化">1.5 Formatting(格式化)</h3><ol type="1"><li><code>&lt;p&gt;&lt;/p&gt;</code>:Creates a newparagraph<br>创建一个新段落</li><li><code>&lt;br&gt;</code>：Inserts a line break(carriagereturn)<br>插入一个换行符(回车)</li><li><code>&lt;blockquote&gt;&lt;/blockquote&gt;</code>:Puts content in aquote-indents text from bothsides<br>将内容放在引号中-将文本从两边缩进<br>大白话：<code>&lt;blockquote&gt;</code>标签用于表示引用的内容，浏览器通常会对其进行缩进处理以突出显示引用的部分。这种标记常用于显示他人的言论或引用的文本，以便与正文区分开来。通常，浏览器会在左右两侧添加一些空白来使引用部分与周围内容有所区别。</li><li><code>&lt;div&gt;&lt;/div&gt;</code>:Used to format block contentwith CSS<br>用于使用 CSS 格式化块级内容</li><li><code>&lt;span&gt;&lt;/span&gt;</code>:Used to format inline contentwith CSS<br>用于使用 CSS 格式化内联内容<br><code>&lt;span&gt;</code>标签用于对文本中的一部分进行行内样式控制，通常用于对文本进行格式化或添加样式而不影响其它文本。它类似于<code>&lt;div&gt;</code>，但 <code>&lt;span&gt;</code>是行内元素，而<code>&lt;div&gt;</code>是块级元素，所以 <code>&lt;span&gt;</code>通常用于对文本的一部分进行样式设置，例如改变颜色、字体、大小等。<br>打个比方，<code>&lt;span&gt;</code>标签就像是一个装饰盒，你可以把它放在文字中任何你想要装饰的地方。比如，你可以用<code>&lt;span&gt;</code>来给文字涂上不同的颜色、改变字体大小或者添加特殊效果，而不会影响到其他文字。就像给一小块文字打扮一样，不会影响到整个段落的装扮。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一段 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red;&quot;</span>&gt;</span>红色<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 的文字。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure> <img src="/images/span.png" alt="效果图" /></li></ol><h3 id="lists列表">1.6 Lists(列表)</h3><ol type="1"><li><code>&lt;ul&gt;&lt;/ul&gt;</code>:Creates an unorderedlist<br>创建一个无序列表</li><li><code>&lt;ol start=?&gt;&lt;/ol&gt;</code>:Creates an ordered list(start=xx, where xx is a countingnumber)<br>创建一个有序列表（start=xx，其中 xx 是一个计数数字）<br>xx可以是任意整数，表示列表从这个编号开始。默认情况下，有序列表从 1开始编号，但通过设置 start 属性，可以更改起始编号。</li><li><code>&lt;li&gt;&lt;/li&gt;</code>:Encompasses each listitem<br>包围每个列表项</li><li><code>&lt;dl&gt;&lt;/dl&gt;</code>:Creates a definitionlist<br>创建一个定义列表</li><li><code>&lt;dt&gt;&lt;/dt&gt;</code>:Precedes each definitionterm<br>在每个定义术语之前</li><li><code>&lt;dd&gt;&lt;/dd&gt;</code>:Precedes eachdefinition<br>在每个定义之前</li></ol><p><strong>没听懂？没关系，举个例子你就明白了</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项二<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项三<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><span class="hljs-comment">&lt;!--&lt;dl&gt;:定义列表的容器(definition list)--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><span class="hljs-comment">&lt;!--&lt;dt&gt;:定义列表中的术语--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>超文本标记语言，用于创建网页。<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><span class="hljs-comment">&lt;!--定义列表中的定义--&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>层叠样式表，用于控制网页的外观和布局。<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>一种编程语言，用于为网页添加互动功能。<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/list.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><h3 id="graphical-elements图形元素">1.7 Graphicalelements(图形元素)</h3><ol type="1"><li><code>&lt;hr&gt;</code>:Inserts a horizontalrule<br>插入一个水平线</li><li><code>&lt;hr size=?&gt;</code>:Sets size (height) of horizontalrule<br>设置水平线的高度</li><li><code>&lt;hr width=?&gt;</code>:Sets width of rule(as a % orabsolute pixellength)<br>设置水平线的宽度（可以是百分比或绝对像素长度）</li><li><code>&lt;hr noshade&gt;</code>:Creates a horizoontal rule without ashadow<br>创建一个没有阴影的水平线</li><li><code>&lt;img src="URL" /&gt;</code>:Adds image; it is a separatefile located at the URL<br>添加图像；它是一个位于指定 URL的单独文件<br><code>&lt;img src="URL" /&gt;</code> 标签中的 /是自闭合标签的写法。这种写法主要源于 XHTML 规范，在 XHTML中，所有标签都必须正确关闭，即使是那些在 HTML 中不需要关闭的空元素（例如<code>&lt;img&gt;</code>、<code>&lt;br&gt;</code>、<code>&lt;hr&gt;</code>等）。</li><li><code>&lt;img src="URL" align=?&gt;</code>:Aligns imageleft/right/center/bottom/top/middle (useCSS)<br>将图像左对齐/右对齐/居中对齐/底部对齐/顶部对齐/中间对齐（建议使用CSS）</li><li><code>&lt;img src="URL" border=?&gt;</code>:Sets size of bordersurrounding image (use CSS)<br>设置图像周围边框的大小（建议使用CSS）</li><li><code>&lt;img src="URL" height=?&gt;</code>:Sets height of image, inpixels<br>设置图像的高度（单位为像素）</li><li><code>&lt;img src="URL" width=?&gt;</code>:Sets width of image, inpixels<br>设置图像的宽度（单位为像素）</li><li><code>&lt;img src="URL" alt=?&gt;</code>:Sets the alternate text forbrowsers that can't process images (required by theADA)<br>为无法处理图像的浏览器设置替代文本（ADA 要求）</li></ol><h3 id="forms表单">1.8 Forms(表单)</h3><ol type="1"><li><code>&lt;form&gt;&lt;/form&gt;</code>:Defines aform<br>定义一个表单</li><li><code>&lt;select multiple name=? size=?&gt;&lt;/select&gt;</code>:Createsa scrolling menu. Size sets the number of menu items visible before userneeds toscroll.<br>创建一个滚动菜单。size设置用于需要滚动前可见的菜单项数量</li><li><code>&lt;select name=?&gt;&lt;/select&gt;</code>:Creates a pulldownmenu<br>创建一个下拉菜单</li><li><code>&lt;option&gt;</code>:Sets off each menuitem<br>设置每个菜单项</li><li><code>&lt;textarea name=? col="x" rows="y"&gt;&lt;/textarea&gt;</code>:Createsa text box area. Columns set the width; rows set theheight.<br>创建一个文本区域。cols 设置宽度；rows 设置高度。</li><li><code>&lt;input type="checkbox" name=? value=?&gt;</code>:Creates acheckbox.<br>创建一个复选框。</li><li><code>&lt;input type="checkbox" name=? value=? checked&gt;</code>:Createsa checkbox which is pre-checked<br>创建一个预选中的复选框。</li><li><code>&lt;input type="radio" name=? value=?&gt;</code>:Creates aradio button.<br>创建一个单选按钮</li><li><code>&lt;input type="radio" name=? value=? checked&gt;</code>:Createsa radio button which is pre-checked.<br>创建一个预选中的单选按钮。</li><li><code>&lt;input type="text" name=? size=?&gt;</code>:Creates aone-line text area. Size sets length, incharacters.<br>创建一个单行文本区域。size 设置长度，以字符为单位。</li><li><code>&lt;input type="submit" value=?&gt;</code>:Creates a submitbutton. Value sets the text in the submitbutton.<br>创建一个提交按钮。value 设置提交按钮上的文本。</li><li><code>&lt;input type="image" name=? src=? border=? alt=?&gt;</code>:Createsa submit button using an image.<br>使用图像创建一个提交按钮。</li><li><code>&lt;input type="reset"&gt;</code>:Creates a resetbutton<br>创建一个重置按钮</li></ol><h3id="html5-input-tag-attributeshtml5-输入标签属性不是所有浏览器都支持请访问-httpcaniuse.com-获取详细信息">1.9HTML5 input tag attributes[HTML5输入标签属性（不是所有浏览器都支持；请访问 http://caniuse.com获取详细信息）]</h3><ol type="1"><li><code>&lt;input type="email" name=?&gt;</code>:Sets a single-linetextbox for email addresses<br>设置一个用于电子邮件地址的单行文本框</li><li><code>&lt;input type="URL" name=?&gt;</code>:Sets a single-linetextbox for URLs<br>设置一个用于 URL 的单行文本框</li><li><code>&lt;input type="number" name=?&gt;</code>:Sets a single-linetextbox for a number<br>设置一个用于数字的单行文本框</li><li><code>&lt;input type="range" name=?&gt;</code>:Sets a single-linetext box for a range of numbers<br>设置一个用于范围数字的单行文本框</li><li><code>&lt;input type="date/month/week/time" name=?&gt;</code>:Sets asingle-line text box with a calendar showing thedate/month/week/time<br>设置一个带有日历的单行文本框，显示日期/月份/周/时间</li><li><code>&lt;input type="search" name=?&gt;</code>:Sets a single-linetext box for searching<br>设置一个用于搜索的单行文本框</li><li><code>&lt;input type="color" name=?&gt;</code>:Sets a single-linetext box for picking a color<br>设置一个用于选择颜色的单行文本框</li></ol><h3id="tablesuse-only-for-data-layout--use-css-for-page-layout表格仅用于数据布局---使用-css-进行页面布局">1.10Tables(use only for data layout -use CSS for pagelayout)[表格（仅用于数据布局 - 使用 CSS 进行页面布局）]</h3><ol type="1"><li><code>&lt;table&gt;&lt;/table&gt;</code>:Creates atable<br>创建一个表格</li><li><code>&lt;tr&gt;&lt;/tr&gt;</code>:Sets off each row in atable<br>设置表格中的每一行</li><li><code>&lt;td&gt;&lt;/td&gt;</code>:Sets off each cell in arow<br>设置每行中的每个单元格<br>td:table data</li><li><code>&lt;th&gt;&lt;/th&gt;</code>:Sets off the table header(anormal cell with bold,centeeredtext)<br>设置表头（一个普通单元格，其中的文本加粗且居中显示）</li></ol><h3id="table-attributesonly-use-for-email-newsletters表格属性仅用于电子邮件新闻简报">1.11Table attributes(only use for emailnewsletters)[表格属性(仅用于电子邮件新闻简报)]</h3><ol type="1"><li><code>&lt;table border=?&gt;</code>:Sets the width of the borderaround table cells<br>设置单元格周围边框的宽度</li><li><code>&lt;table cellspacing=?&gt;</code>:Sets amount of spacebetween table cells<br>设置表格单元格之间的间距</li><li><code>&lt;table cellpadding=?&gt;</code>:Sets amount of spacebetween a cell's border and itscontents<br>设置单元格边框和内容之间的间距</li><li><code>&lt;table width=?&gt;</code>:Sets width of the table in pixelsor as a percentage<br>设置表格的宽度，单位可以是像素或百分比</li><li><code>&lt;tr align=?&gt;</code>:Sets alignment for cells within theroe(left/center/right)<br>设置行内单元格的对齐方式（左对齐/居中/右对齐）</li><li><code>&lt;td align=?&gt;</code>:Sets alignment for cells within therow(left/center/right)<br>设置单元格的对齐方式（左对齐/居中/右对齐）</li><li><code>&lt;tr valign=?&gt;</code>:Sets vertical alignment for cellswithin the row(top/middle/bottom)<br>设置行内单元格的垂直对齐方式（顶部对齐/居中/底部对齐）</li><li><code>&lt;td valign=?&gt;</code>:Sets vertical alignment for cell(top/middle/bottom)<br>设置单元格的垂直对齐方式（顶部对齐/居中/底部对齐）</li><li><code>&lt;td rowspan=?&gt;</code>:Sets number of rows a cell shouldspan (default=1)<br>设置单元格应跨越的行数（默认为1）</li><li><code>&lt;td colspan=?&gt;</code>:Sets number of columns a cellshould span<br>设置单元格应跨越的列数</li><li><code>&lt;td nowrap&gt;</code>:Prevents lines within a cell frombeing broken to fit<br>防止单元格内部的文本换行以适应</li></ol><h2 id="cascading-style-sheets-cheatsheet层叠样式表速查表">2. CascadingStyle Sheets Cheatsheet(层叠样式表速查表)</h2><h3 id="font-properties字体属性">2.1 Font Properties(字体属性)</h3><ol type="1"><li><p>Font Family:Changes the font family of certain words,sentences,paragraphs, etc. <br>更改特定单词、句子、段落等的字体系列。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;New Century Schoolbook&quot;</span>, Times, serif; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Font Style:Changes text: normal, oblique, anditalics.<br>更改文本的样式：正常、斜体、和斜体字。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">font-style</span>: oblique; &#125;<br><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">font-style</span>: normal; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Font-Variant:Used to display font in normal orsmall-caps.<br>用于显示正常字体或小型大写字体。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">span</span>&#123;<span class="hljs-attribute">font-variant</span>: small-caps&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Font-Weight:Used to specify the weight of thefont.<br>用于指定字体的粗细 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">font-weight</span>: <span class="hljs-number">800</span>;&#125;<br><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">font-weight</span>:normal;&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Font-Size:Used to modify the size of the displayedfont.<br>用于修改显示字体的大小。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">font-size</span>: large; &#125;<br><span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12pt</span>; &#125;<br><span class="hljs-selector-tag">li</span> &#123; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">90%</span>; &#125;<br><span class="hljs-selector-tag">strong</span> &#123; <span class="hljs-attribute">font-size</span>: larger; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Font:Used to combine all properties offonts<br>用于组合所有字体属性 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">font</span>: italic bold <span class="hljs-number">12pt</span>/<span class="hljs-number">14pt</span> Times, serif; &#125;<br></code></pre></td></tr></table></figure></p></li></ol><h3 id="color-and-background-properties颜色和背景属性">2.2 Color andBackground Properties(颜色和背景属性)</h3><ol type="1"><li><p>Color：Changes the color of text<br>更改文本的颜色。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">color</span>: blue&#125;;<br><span class="hljs-selector-tag">h2</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>&#125;;<br></code></pre></td></tr></table></figure></p></li><li><p>Background-Color:Sets the background color of anelement.<br>设置元素的背景颜色。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">background-color</span>: white; &#125;<br><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000080</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Background-Image: Sets the background image of anelement<br>设置元素的背景图片。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">/images/foo.gif</span>); &#125;<br><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">http://www.htmlhelp.com/bg.png</span>); &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Background-Repeat:Determines how a specified background image isrepeated. The repeat-x value will repeat the image horizontally whilethe repeat-y value will repeat the imagevertically.<br>确定指定的背景图像如何重复。repeat-x 值将图像水平重复，而repeat-y 值将图像垂直重复。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">background</span>: white <span class="hljs-built_in">url</span>(<span class="hljs-string">candybar.gif</span>); <span class="hljs-attribute">background-repeat</span>: repeat-x; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Background-Attachment:Determines if a specified background imagewill scroll with the content or be fixed with regard to thecanvas.<br>确定指定的背景图像是随着内容滚动还是相对于画布固定。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">background</span>: white <span class="hljs-built_in">url</span>(<span class="hljs-string">candybar.gif</span>); <span class="hljs-attribute">background-attachment</span>: fixed; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Background:Used to combine all properties ofbackground<br>用于组合所有背景属性。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">background</span>: white <span class="hljs-built_in">url</span>(<span class="hljs-string">http://www.htmlhelp.com/foo.gif</span>); &#125;<br><span class="hljs-selector-tag">BLOCKQUOTE</span> &#123; <span class="hljs-attribute">background</span>: <span class="hljs-number">#7fffd4</span>; &#125;<br><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../backgrounds/pawn.png</span>) <span class="hljs-number">#f0f8ff</span> fixed; &#125;<br><span class="hljs-selector-tag">TABLE</span> &#123; <span class="hljs-attribute">background</span>: red <span class="hljs-built_in">url</span>(<span class="hljs-string">leaves.jpg</span>) no-repeat bottom right; &#125;<br></code></pre></td></tr></table></figure></p></li></ol><h3 id="text-properties文本属性">2.3 Text Properties(文本属性)</h3><ol type="1"><li><p>Word-Spacing:Defines an additional amount of space betweenwords.<br>定义单词之间的额外间距。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> <span class="hljs-selector-tag">EM</span> &#123; <span class="hljs-attribute">word-spacing</span>: <span class="hljs-number">0.4em</span>; &#125;&lt;!--表示所有嵌套在 &lt;<span class="hljs-selector-tag">p</span>&gt; 标签内的 &lt;<span class="hljs-selector-tag">em</span>&gt; 标签，即 &lt;<span class="hljs-selector-tag">p</span>&gt; 元素中的 &lt;<span class="hljs-selector-tag">em</span>&gt; 元素。<br>--&gt;<br><span class="hljs-selector-tag">P</span><span class="hljs-selector-class">.note</span> &#123; <span class="hljs-attribute">word-spacing</span>: -<span class="hljs-number">0.2em</span>; &#125;&lt;!--表示所有带有 class=&quot;note&quot; 的 &lt;<span class="hljs-selector-tag">p</span>&gt; 标签。--&gt;<br></code></pre></td></tr></table></figure></p></li><li><p>Letter-Spacing:Defines an additional amount of space betweencharacters.<br>定义字符之间的额外间距。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">0.1em</span>; &#125;<br><span class="hljs-selector-tag">P</span><span class="hljs-selector-class">.note</span> &#123; <span class="hljs-attribute">letter-spacing</span>: -<span class="hljs-number">0.1em</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Text-Decoration:Allows text to be decorated through one of fiveproperties:underline, overline, line-through, blink,none.<br>允许通过以下五个属性之一装饰文本：下划线（underline）、上划线（overline）、删除线（line-through）、闪烁（blink）、无（none）。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:link</span>, <span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:visited</span>, <span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:active</span> &#123; <span class="hljs-attribute">text-decoration</span>: none; &#125;<br>&lt;!--<br><span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:link</span>：表示未访问过的链接（普通状态）。<br><span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:visited</span>：表示用户已经访问过的链接。<br><span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:active</span>：表示用户正在点击的链接（激活状态）<br>&#123; <span class="hljs-attribute">text-decoration</span>: none; &#125;：表示移除这些链接的默认文本装饰（通常是下划线）。<br> 对于所有未访问过的链接（<span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:link</span>），已经访问过的链接（<span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:visited</span>），和正在点击的链接（<span class="hljs-selector-tag">A</span><span class="hljs-selector-pseudo">:active</span>），都不显示文本装饰（例如下划线）。<br> 换句话说，这行代码将移除所有状态下的超链接的默认下划线效果，使其看起来像普通文本<br> --&gt;<br></code></pre></td></tr></table></figure></p></li><li><p>Vertical-Align:Used to alter the vertical positioning of aninline element,relative to its parent element or to the element'sline.<br>用于相对于父元素或元素的行，改变内联元素的垂直位置<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">IMG</span><span class="hljs-selector-class">.middle</span> &#123; <span class="hljs-attribute">vertical-align</span>: middle; &#125;<br><span class="hljs-selector-tag">IMG</span> &#123; <span class="hljs-attribute">vertical-align</span>: <span class="hljs-number">50%</span>; &#125;<br><span class="hljs-selector-class">.exponent</span> &#123; <span class="hljs-attribute">vertical-align</span>: super; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Text-Transform:Allows for capitalizing the first letter of eachword (capitalize),capitalizing all letters of a word (uppercase), usingall small letters in each word(lowercase), and the initalvalue(none).<br>允许将每个单词的首字母大写（capitalize），将所有字母大写（uppercase），将每个单词的所有字母小写（lowercase），以及初始值（none）。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">text-transform</span>: uppercase &#125;<br><span class="hljs-selector-tag">H2</span> &#123; <span class="hljs-attribute">text-transform</span>: capitalize &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Text-Align:Used to justify text left, center, right, andjustify.<br>用于将文本左对齐、居中对齐、右对齐和两端对齐。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">text-align</span>: center; &#125;<br><span class="hljs-selector-tag">P</span><span class="hljs-selector-class">.newspaper</span> &#123; <span class="hljs-attribute">text-align</span>: justify; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Text-Indent:Used to specify the amount of indentation prior tothe first line of text.<br>用于指定文本第一行的缩进量。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">5em</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Line-Height:Used to control the spacing between baselines oftext.<br>用于控制文本基线之间的间距。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200%</span>; &#125;<br></code></pre></td></tr></table></figure></p></li></ol><h3 id="classification-properties分类属性">2.4 ClassificationProperties(分类属性)</h3><ol type="1"><li><p>List-Style-Type:Specifies the type of list-item marker,and isused if list-style-image is none or if image loading is turnedoff.<br>指定列表项标记的类型，如果 list-style-image 为 none或者图像加载被关闭时使用。<br>大白话：list-style-type属性用来指定列表项的标记类型。这个属性决定了显示在列表项前的标记的形状，比如实心圆、方块或是数字等。这个属性非常有用，因为它允许你改变列表标记的样式，使之更符合网页的设计需求。如果你没有指定list-style-image，或者指定的图像无法显示，那么就会使用 list-style-type的设置。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">LI</span><span class="hljs-selector-class">.square</span> &#123; <span class="hljs-attribute">list-style-type</span>: square; &#125;<br><span class="hljs-selector-tag">UL</span><span class="hljs-selector-class">.plain</span> &#123; <span class="hljs-attribute">list-style-type</span>: none; &#125;<br><span class="hljs-selector-tag">OL</span> &#123; <span class="hljs-attribute">list-style-type</span>: upper-alpha; &#125; <span class="hljs-comment">/* A B C D E 等 */</span><br><span class="hljs-selector-tag">OL</span> <span class="hljs-selector-tag">OL</span> &#123; <span class="hljs-attribute">list-style-type</span>: decimal; &#125; <span class="hljs-comment">/* 1 2 3 4 5 等 */</span><br><span class="hljs-selector-tag">OL</span> <span class="hljs-selector-tag">OL</span> <span class="hljs-selector-tag">OL</span> &#123; <span class="hljs-attribute">list-style-type</span>: lower-roman; &#125; <span class="hljs-comment">/* i ii iii iv v 等 */</span><br></code></pre></td></tr></table></figure></p></li><li><p>List-Style-Image:Specifies the image that will be used aslist-item marker when image loading is turned on, replacing the markerspecified in the list-style-typeproperty.<br>指定在图像加载开启时，将用作列表项标记的图像，替换list-style-type 属性中指定的标记。<br>list-style-image属性允许你将图像用作列表项的标记。这意味着你可以用自定义图像替换传统的列表标记，如圆点或数字。这在创建更具视觉吸引力的列表时非常有用。当图像加载被关闭时，会回退到list-style-type 指定的标记。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">UL</span><span class="hljs-selector-class">.check</span> &#123; <span class="hljs-attribute">list-style-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">/LI-markers/checkmark.gif</span>); &#125;<br><span class="hljs-selector-tag">UL</span> <span class="hljs-selector-tag">LI</span><span class="hljs-selector-class">.x</span> &#123; <span class="hljs-attribute">list-style-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">x.png</span>); &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>List-Style-Position:Determines where the marker is placed inregard to the list item. If the value inside is used, the lines willwrap under the marker instead of being indented. outside isdefault.<br>确定标记在列表项中的位置。如果值为inside，则行会在标记下方换行，而不是缩进。默认值为outside。<br>大白话：list-style-position属性定义列表标记的位置相对于列表内容的放置位置。它有两个可能的值：inside和 outside。默认值是outside，标记在内容的外部，并且列表项的文本与页面左侧对齐。如果设为inside，标记则位于内容的内部，列表文本将环绕标记对齐，这通常会导致文本的首行缩进不同于其他行<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">UL</span> &#123; <span class="hljs-attribute">list-style-position</span>: inside; &#125;<br></code></pre></td></tr></table></figure></p></li></ol><h3 id="box-properties盒子属性">2.5 Box Properties(盒子属性)</h3><figure><img src="/images/Box_Model.png" alt="盒子模型" /><figcaption aria-hidden="true">盒子模型</figcaption></figure><blockquote><p><strong>小贴士：</strong> Margin(外边距) -清除边框外的区域，外边距是透明的Margin(外边距) -清除边框外的区域，外边距是透明的 Border(边框) -围绕在内边距和内容外的边框 Padding(内边距) -清除内容周围的区域，内边距是透明的 Content(内容) -盒子的内容，显示文本和图像</p></blockquote><ol type="1"><li><p>Margin-Top：Sets the top margin of an element by specifying alength or a percentage.<br>通过指定长度或百分比设置元素的上边距。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5pt</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Margin-Right:Sets the right margin of an element by specifying alength or a percentage.<br>通过指定长度或百分比设置元素的右边距<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span><span class="hljs-selector-class">.narrow</span> &#123; <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">50%</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Margin-Bottom:sets the bottom margin of an element by specifyinga length or a percentage.<br>通过指定长度或百分比设置元素的下边<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">DT</span> &#123; <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">3em</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Margin-Left:Sets the left margin of an element by specifying alength or a percentage.<br>通过指定长度或百分比设置元素的左边距<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">ADDRESS</span> &#123; <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">50%</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Margin:Sets the margins of an element by specifying top, bottom,left and right margins -- all either specifying length orpercentage<br>通过指定上、下、左、右边距来设置元素的边距 -都是指定长度或百分比 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BODY</span> &#123; <span class="hljs-attribute">margin</span>: <span class="hljs-number">5em</span>; &#125; <span class="hljs-comment">/* 所有边距 5em */</span><br><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">margin</span>: <span class="hljs-number">2em</span> <span class="hljs-number">4em</span>; &#125; <span class="hljs-comment">/* 上下边距 2em，左右边距 4em */</span><br><span class="hljs-selector-tag">DIV</span> &#123; <span class="hljs-attribute">margin</span>: <span class="hljs-number">1em</span> <span class="hljs-number">2em</span> <span class="hljs-number">3em</span> <span class="hljs-number">4em</span>; &#125; <br><span class="hljs-comment">/* 上边距 1em，右边距 2em，下边距 3em，左边距 4em */</span><br></code></pre></td></tr></table></figure></p></li><li><p>Padding-Top:Describes the amount of space between the top borderand the content of theselector.<br>描述选择器的顶部边框和内容之间的空间。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">20%</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Padding-Right:Describes the amount of space between the rightborder and the content of theselector.<br>描述选择器的右边框和内容之间的空间。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">20px</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Padding-Bottom:Describes the amount of space between the bottomborder and the content of theselector.<br>描述选择器的底部边框和内容之间的空间。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">5em</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Padding-Left:Describes the amount of space between the leftborder and the content of theselector.<br>描述选择器的左边框和内容之间的空间。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">15pt</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Padding:Shorthand for the padding-top, padding-right,padding-bottom,and padding-left properties.<br>内边距的简写属性，依次是上、右、下、左。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">BLOCKQUOTE</span> &#123; <span class="hljs-attribute">padding</span>: <span class="hljs-number">2em</span> <span class="hljs-number">4em</span> <span class="hljs-number">5em</span> <span class="hljs-number">4em</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Top-Width:Used to specify the width of an element's topborder.<br>用于指定元素顶部边框的宽度。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123;<span class="hljs-attribute">border-top</span>:<span class="hljs-number">20%</span>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Right-Width:Used to specify the width of an element'sright border<br>用于指定元素右侧边框的宽度。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-right</span>: <span class="hljs-number">20%</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Bottom-Width:Used to specify the width of an element'sbottom border<br>用于指定元素底部边框的宽度 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">20%</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Left-Width:Used to specify the width of an element's leftborder.<br>用于指定元素左侧边框的宽度。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-left</span>: <span class="hljs-number">20%</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Width:Used to set the width of an element's border (eitherall borders, or specifying top border, right border, bottom border,leftborder).<br>用于设置元素的边框宽度（所有边框，或分别指定上、右、下、左边框）。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-width</span>: <span class="hljs-number">20%</span>; &#125;<br><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-width</span>: <span class="hljs-number">10px</span> <span class="hljs-number">5px</span> <span class="hljs-number">10px</span> <span class="hljs-number">5px</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Color:Used to set the color of an element'sborder.<br>用于设置元素边框的颜色 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#000000</span>; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Style:Sets style of a border - none, dotted, dashed,solid, double.<br>设置边框样式 - 无、点状、虚线、实线、双线。</p></li><li><p>Border-Top:Sets the width, style, and color of an element's topborder<br>设置元素顶部边框的宽度、样式和颜色 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-top</span>: <span class="hljs-number">10px</span> red double; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Right:Sets the width, style, and color of an element'sright border.<br>设置元素右侧边框的宽度、样式和颜色。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-right</span>: <span class="hljs-number">10px</span> red double; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Bottom:Sets the width, style, and color of an element'sbottom border<br>设置元素底部边框的宽度、样式和颜色<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">10px</span> red double; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border-Left:Sets the width, style, and color of an element's leftborder<br>设置元素左侧边框的宽度、样式和颜色 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border-left</span>: <span class="hljs-number">10px</span> red double; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Border:Sets the width, style, and color of an element'sborder<br>设置元素边框的宽度、样式和颜色 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> red double; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Width:Each block-level or replaced element can be given a width,specified as a length, a percentage, or asauto.<br>每个块级或替换元素都可以指定一个宽度，长度、百分比或自动。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">15px</span>; &#125;<br><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">35%</span>; &#125;<br><span class="hljs-selector-class">.foo</span> &#123; <span class="hljs-attribute">width</span>: auto; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Height:Each block-level or replaced element can be given aheight,specified as a length or asauto.<br>每个块级或替换元素都可以指定一个高度，长度或自动。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">height</span>: <span class="hljs-number">15px</span>; &#125;<br><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">height</span>: <span class="hljs-number">35%</span>; &#125;<br><span class="hljs-selector-class">.foo</span> &#123; <span class="hljs-attribute">height</span>: auto; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Float:Allows text to wrap around an element (left, right,none).<br>允许文本环绕元素（左、右、无） <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">float</span>: left; &#125;<br><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">float</span>: right; &#125;<br><span class="hljs-selector-class">.foo</span> &#123; <span class="hljs-attribute">float</span>: none; &#125;<br></code></pre></td></tr></table></figure></p></li><li><p>Clear:Specifies whether an element allows floating elements toits sides (left, right,none).<br>指定一个元素是否允许浮动元素在其侧边（左、右、无）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">P</span> &#123; <span class="hljs-attribute">clear</span>: left; &#125;<br><span class="hljs-selector-tag">H1</span> &#123; <span class="hljs-attribute">clear</span>: right; &#125;<br><span class="hljs-selector-class">.foo</span> &#123; <span class="hljs-attribute">clear</span>: none; &#125;<br></code></pre></td></tr></table></figure></p></li></ol><p>一个具体的例子： <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Box Model Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-comment">/*全局样式*/</span></span><br><span class="language-css">            <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;  <span class="hljs-comment">/* 设置盒子的宽度 */</span></span><br><span class="language-css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>; <span class="hljs-comment">/* 设置盒子的高度 */</span></span><br><span class="language-css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;  <span class="hljs-comment">/* 设置盒子外边距 */</span></span><br><span class="language-css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>; <span class="hljs-comment">/* 设置盒子内边距 */</span></span><br><span class="language-css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> solid black; <span class="hljs-comment">/* 设置盒子边框样式 */</span></span><br><span class="language-css">                <span class="hljs-attribute">float</span>: left; <span class="hljs-comment">/* 设置浮动，使盒子并排显示 */</span></span><br><span class="language-css">                <span class="hljs-attribute">box-sizing</span>: border-box; <span class="hljs-comment">/* 包括边框和内边距在内的总宽高计算 */</span></span><br><span class="language-css">            &#125;</span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-comment">/*针对第一个盒子的特定样式*/</span></span><br><span class="language-css">            <span class="hljs-selector-class">.box1</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">background-color</span>:lightblue;</span><br><span class="language-css">            &#125;</span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-comment">/*针对第二个盒子的特定样式*/</span></span><br><span class="language-css">            <span class="hljs-selector-class">.box2</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">background-color</span>:lightgreen;</span><br><span class="language-css">                <span class="hljs-attribute">clear</span>:both;<span class="hljs-comment">/* 清除浮动，使此盒子不并排在第一个盒子旁边 */</span></span><br><span class="language-css">            &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span>Box 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span>box 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></p><figure><img src="/images/boxExample.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><p>说明： * HTML 部分： *设定了一个基本的HTML结构，包含了标题和两个盒子元素。 * CSS 部分： *在<code>style</code>标签内定义了样式，包含： * 全局样式：为所有 div设置了宽度、高度、外边距、内边距、边框和浮动属性。 * .box1 和 .box2的特定样式，分别设置了背景颜色和清除浮动。</p><h2 id="javascript">3. JavaScript</h2><h3 id="syntax-and-structure">3.1 Syntax and Structure</h3><ul><li>Comments<ul><li>// Single line comment</li><li>/<em>Multi-line comment </em>/</li></ul></li><li>Statements<ul><li>Statements are the building blocks of a JavaScript program.</li><li>End with a semicolon;(optional but recommended)</li></ul></li></ul><h3 id="语法和结构">3.1 语法和结构</h3><ul><li>注释<ul><li>//单行注释</li><li>/<em>多行 注释</em>/</li></ul></li><li>语句<ul><li>语句是JavaScript程序的构建块</li><li>以分号结尾;(可选但建议使用)</li></ul></li></ul><h3 id="variables">3.2 Variables</h3><ul><li>Declaration var name;//Function-scoped, can be re-declared letage;//Block-scoped, cannot be re-declared within the same scope const PI= 3.14;// Block-scoped, constant value</li><li>Initialization<ul><li>var name = "John";</li><li>let age = 25;</li><li>const PI = 3.14;</li></ul></li></ul><h3 id="变量">3.2 变量</h3><ul><li>声明<ul><li>var name;//函数作用域，可以重新声明</li><li>let age;//块作用域，同一作用域不能重新声明</li><li>const PI = 3.14;//块作用域，常数值</li></ul></li><li>初始化<ul><li>var name = "John";</li><li>let age = 25;</li><li>const PI = 3.14;</li></ul></li></ul><h3 id="data-types">3.3 Data Types</h3><ul><li>Primitive Types<ul><li>Number: Represents both integer and floating-point numbers. Example:42, 3.14</li><li>String: Represents a sequence of characters. Example: "Hello",'World'</li><li>Boolean: Represents logical values. Example: true, false</li><li>Null: Represents the intentional absence of any object value.Example: null</li><li>Undefined: Represents an uninitialized variable. Example:undefined</li><li>Symbol: Represents a unique and immutable primitive value. Example:Symbol('description')</li><li>BigInt: Represents integers with arbitrary precision. Example:123n</li></ul></li></ul><h3 id="数据类型">3.3 数据类型</h3><ul><li>原始类型<ul><li>Number：表示整数和浮点数。例如：42, 3.14</li><li>String：表示字符序列。例如："Hello", 'World'</li><li>Boolean：表示逻辑值。例如：true, false</li><li>Null：表示有意的没有任何对象值。例如：null</li></ul></li><li>Undefined：表示未初始化的变量。例如：undefined<ul><li>undefined 在 JavaScript中代表未定义的值。当声明的变量未被初始化时，变量的默认值就是undefined。也就是说，这个变量已经被声明了，但还没有被赋予任何值。</li><li>undefined也可以作为函数没有返回值的标志。例如，当一个函数没有明确的返回语句时，它默认返回undefined。</li></ul></li><li>Symbol：表示唯一且不可变的原始值。例如：Symbol('description') *Symbol 是 ES6引入的一种新的原始数据类型，主要用于创建唯一的标识符。Symbols是不可变的且是唯一的，即使创建两个相同描述的Symbol，它们也是不相等的。这使得 Symbol成为添加属性到对象时不会出现属性名冲突的理想选择。</li><li>BigInt：表示任意精度的整数。例如：123n</li></ul><h3 id="operators">3.4 Operators</h3><ul><li>Arithmetic Operators:+ (Addition), - (Subtraction), *(Multiplication), / (Division), % (Modulus), ++ (Increment), --(Decrement)</li><li>Assignment Operators:= (Assignment), += (Addition assignment), -=(Subtraction assignment), *= (Multiplication assignment), /= (Divisionassignment), %= (Modulus assignment)</li><li>Comparison Operators:== (Equal to), === (Strict equal to), != (Notequal to), !== (Strict not equal to), &gt; (Greater than), &lt; (Lessthan), &gt;= (Greater than or equal to), &lt;= (Less than or equalto)</li><li>Logical Operators:&amp;&amp; (AND), || (OR), ! (NOT)</li></ul><h3 id="运算符">3.4 运算符</h3><ul><li>算术运算符：+(加法), - (减法), * (乘法), / (除法), % (取模), ++(自增), -- (自减)</li><li>赋值运算符：= (赋值), += (加法赋值), -= (减法赋值), *= (乘法赋值),/= (除法赋值), %= (取模赋值)</li><li>比较运算符：== (等于), === (严格等于), != (不等于), !==(严格不等于), &gt; (大于), &lt; (小于), &gt;= (大于或等于), &lt;=(小于或等于)</li><li>逻辑运算符：&amp;&amp;(与)， ||(或), !(非)</li></ul><h3 id="functions">3.5 Functions</h3><ul><li>Function Declaration<ul><li>Named functions that can be called anywhere in the scope<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li>Function Expression<ul><li>Functions assigned to variables.Can be anonymous.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> greet = <span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="函数">3.5 函数</h3><ul><li>函数声明<ul><li>可在作用域内任何位置调用的命名函数 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li>函数表达式<ul><li>分配给变量的函数。可以是匿名的 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> greet = <span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="代码示例">3.6 代码示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JavaScript Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;John&quot;</span>;<span class="hljs-comment">//旧式变量声明</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> num1 = <span class="hljs-number">10</span>;<span class="hljs-comment">//块级作用域变量</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> num2 = <span class="hljs-number">5</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> greetingText = <span class="hljs-string">&quot;Hello&quot;</span>;<span class="hljs-comment">//常量声明</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">//函数声明</span></span><br><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> greetingText + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-string">&quot;!&quot;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">//函数表达式</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> calculate = <span class="hljs-keyword">function</span>(<span class="hljs-params">operation</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (operation === <span class="hljs-string">&#x27;add&#x27;</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> num1 + num2;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (operation === <span class="hljs-string">&#x27;subtract&#x27;</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> num1 - num2;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (operation === <span class="hljs-string">&#x27;multiply&#x27;</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> num1 * num2;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (operation === <span class="hljs-string">&#x27;divide&#x27;</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> num1 / num2;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">greet</span>(name));<span class="hljs-comment">//输出问候语</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Addition: &quot;</span> + <span class="hljs-title function_">calculate</span>(<span class="hljs-string">&#x27;add&#x27;</span>));        <span class="hljs-comment">// 加法</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Subtraction: &quot;</span> + <span class="hljs-title function_">calculate</span>(<span class="hljs-string">&#x27;subtract&#x27;</span>)); <span class="hljs-comment">// 减法</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Multiplication: &quot;</span> + <span class="hljs-title function_">calculate</span>(<span class="hljs-string">&#x27;multiply&#x27;</span>)); <span class="hljs-comment">// 乘法</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Division: &quot;</span> + <span class="hljs-title function_">calculate</span>(<span class="hljs-string">&#x27;divide&#x27;</span>));     <span class="hljs-comment">// 除法</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">//演示null和undefined</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> undefinedVariable;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;An undefined variable: &quot;</span>, undefinedVariable);<span class="hljs-comment">// 显示 undefined</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;A null operation result: &quot;</span>, <span class="hljs-title function_">calculate</span>(<span class="hljs-string">&#x27;unknown&#x27;</span>)); <span class="hljs-comment">// 显示 null</span></span><br><span class="language-javascript">            </span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><em>代码解释</em>： <em>变量声明：使用了 var, let, 和 const来声明和初始化变量。</em> <em>函数声明和函数表达式：greet是一个函数声明，用于生成问候语。calculate是一个函数表达式，根据传入的操作类型执行数学运算。</em><em>算术和赋值运算符：在 calculate 函数中使用了加法 (+), 减法 (-), 乘法(</em>), 和除法 (/) 运算符。<em> </em>输出结果：使用 console.log输出问候语和各种数学运算的结果。<em></em>处理未定义和空值：演示了如何处理 undefined 和 null。*</p><blockquote><p><strong>小贴士：let和var的区别</strong> 1.作用域(scope)：var声明的变量具有函数作用域，这意味着在函数内部定义的变量在整个函数中都是可见的，即使是在声明之前。如果在函数外部使用var声明变量，该变量成为全局变量。而let声明的变量具有块级作用域，这意味着变量只在包含它的代码块（例如：循环、条件语句等）内有效。2.变量提升(hoisting):var变量会提升，这表示变量可以在声明之前被访问，此时变量的值是undefined。而let变量同样被提升到块的顶部，但在声明之前访问这些变量会导致一个暂时性死区（TemporalDead Zone, TDZ），即在声明之前访问变量会报错。 3.重复声明(Re-dedclaration):var允许在同一作用域内多次声明同一个变量，而let在相同的作用域或块级作用域内不能重复声明同一个变量，尝试这样做将抛出一个错误。</p></blockquote><blockquote><p>例子： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">var</span> varVariable = <span class="hljs-string">&quot;I am var&quot;</span>;<br>    <span class="hljs-keyword">let</span> letVariable = <span class="hljs-string">&quot;I am let&quot;</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(varVariable); <span class="hljs-comment">// 输出: &quot;I am var&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(letVariable); <span class="hljs-comment">// 报错: letVariable is not defined</span><br><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> x = <span class="hljs-number">20</span>; <span class="hljs-comment">// 有效</span><br><span class="hljs-keyword">let</span> y = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">let</span> y = <span class="hljs-number">20</span>; <span class="hljs-comment">// 报错: Identifier &#x27;y&#x27; has already been declared</span><br></code></pre></td></tr></table></figure></p></blockquote><h2 id="jquery">4. jQuery</h2><h3 id="introuduction介绍">4.1 Introuduction(介绍)</h3><ul><li>jQuery is a fast, small, and feature-rich JavaScript library.</li><li>jQuery 是一个快速、小巧且功能丰富的 JavaScript 库。</li><li>Simplifies HTML document traversal and manipulation, event handling,animation, and Ajax.</li><li>简化了 HTML 文档遍历和操作、事件处理、动画和 Ajax 的使用。</li></ul><h3 id="including-jquery">4.2 Including jQuery</h3><ol type="1"><li>CDN</li></ol><p>html Copy code <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jQuery.com/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p><ol start="2" type="1"><li>Local(本地)</li></ol><p>html Copy code <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;path/to/your/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h3 id="basic-syntax基本语法">4.3 Basic Syntax(基本语法)</h3><ul><li>The basic syntax is:$(selector).action()</li><li>基本语法为：<code>$(selector).action()</code></li><li>$ is a shorthand for jQuery</li><li><code>$</code> 是 jQuery 的简写。</li><li>Selector:Finds HTML elements</li><li>选择器（Selector）：查找 HTML 元素。</li><li>Action:Performs an action on the elements</li><li>操作（Action）：对元素执行操作。</li></ul><h3 id="document-ready-event文档就绪事件">4.4 Document ReadyEvent(文档就绪事件)</h3><ul><li>Ensures the DOM is fully loaded before running scripts.</li><li>确保 DOM 完全加载后再运行脚本。 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Code to execute when the DOM is ready// 当 DOM 准备好后执行的代码</span><br>&#125;);<br></code></pre></td></tr></table></figure></li><li>Shorthand:</li><li>简写形式： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Code to execute when the DOM is ready// 当 DOM 准备好后执行的代码</span><br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h3 id="selectors选择器">4.5 Selectors(选择器)</h3><ul><li>Element Selector(元素选择器) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>); <span class="hljs-comment">// Selects all &lt;p&gt; elements//选择所有 &lt;p&gt; 元素</span><br></code></pre></td></tr></table></figure></li><li>ID Selector(ID选择器) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myId&quot;</span>); <span class="hljs-comment">// Selects the element with id=&quot;myId&quot;//选择 id=&quot;myId&quot; 的元素</span><br></code></pre></td></tr></table></figure></li><li>Class Selector(类选择器) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;.myClass&quot;</span>); <span class="hljs-comment">// Selects all elements with class=&quot;myClass&quot;//选择所有 class=&quot;myClass&quot; 的元素</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="event-handling">4.6 Event Handling</h3><ul><li>Common Events<ul><li>click <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myButton&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-params"><span class="hljs-keyword">function</span></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Button clicked!&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li><li>Mouse Events <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">mouseenter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>);<br>&#125;);<br>$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">mouseleave</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li>Keyboard Events <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">keypress</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Key pressed!&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h3 id="事件处理">4.6 事件处理</h3><ul><li><p>常见事件</p><ul><li>点击事件 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myButton&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-params"><span class="hljs-keyword">function</span></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Button clicked!&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure> <em>解释</em></li></ul></li><li><p><code>$("#myButton")</code> 选择具有 <code>ID myButton</code>的元素，通常是一个按钮。</p></li><li><p><code>.click(function() &#123;...&#125;)</code>为这个按钮添加一个点击事件监听器。当用户点击这个按钮时，会执行函数内的代码。</p></li><li><p><code>alert("Button clicked!");</code>在用户点击按钮后显示一个警告对话框，内容为 "Button clicked!"。</p><ul><li>鼠标事件 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">mouseenter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>);<br>&#125;);<br>$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">mouseleave</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure> <em>解释</em></li></ul></li><li><p><code>$("p")</code> 选择所有 <code>&lt;p&gt;</code>元素。</p></li><li><p>.mouseenter(function() {...}) 为这些 <code>&lt;p&gt;</code>元素添加鼠标进入（鼠标悬停）事件监听器。当鼠标指针移入这些元素时，会执行函数内的代码。</p><ul><li>键盘事件 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">keypress</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Key pressed!&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure> <em>解释</em></li></ul></li><li><p><code>$("input")</code> 选择所有 <code>&lt;input&gt;</code>元素。</p></li><li><p><code>.keypress(function() &#123;...&#125;)</code> 为这些<code>&lt;input&gt;</code>元素添加键盘按键事件监听器。当用户在这些元素中按下任意键时，函数内的代码会被执行。</p></li><li><p><code>console.log("Key pressed!");</code> 在浏览器的控制台输出"Keypressed!"，这用于调试或向开发者提供反馈，用户看不到这个输出。</p></li></ul><h3 id="manipulating-html-and-css操作html和css">4.7 Manipulating HTMLand CSS(操作HTML和CSS)</h3><ul><li><p>HTML Content(HTML内容) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&lt;p&gt;New content&lt;/p&gt;&quot;</span>); <span class="hljs-comment">// Sets HTML content//设置HTML内容</span><br><span class="hljs-keyword">var</span> content = $(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">html</span>(); <span class="hljs-comment">// Gets HTML content//获取HTML内容</span><br></code></pre></td></tr></table></figure></p></li><li><p>Text Content(文本内容) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;New text content&quot;</span>); <span class="hljs-comment">// Sets text content//设置文本内容</span><br><span class="hljs-keyword">var</span> text = $(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">text</span>(); <span class="hljs-comment">// Gets text content//获取文本内容</span><br></code></pre></td></tr></table></figure></p></li><li><p>CSS <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>); <span class="hljs-comment">// Sets the color to blue//设置颜色为蓝色</span><br><span class="hljs-keyword">var</span> color = $(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>); <span class="hljs-comment">// Gets the color value//获取颜色值</span><br></code></pre></td></tr></table></figure></p></li></ul><h3 id="effects-and-animations效果和动画">4.8 Effects andAnimations(效果和动画)</h3><ul><li>Show/Hide(显示/隐藏) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">show</span>(); <span class="hljs-comment">// Shows the element//显示元素</span><br>$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">hide</span>(); <span class="hljs-comment">// Hides the element//隐藏元素</span><br></code></pre></td></tr></table></figure></li><li>Fade(淡入/淡出) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">fadeIn</span>(); <span class="hljs-comment">// Fades in the element//元素淡入</span><br>$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">fadeOut</span>(); <span class="hljs-comment">// Fades out the element//元素淡出</span><br></code></pre></td></tr></table></figure></li><li>Slide(滑动) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">slideDown</span>(); <span class="hljs-comment">// Slides down the element//元素向下滑动</span><br>$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">slideUp</span>(); <span class="hljs-comment">// Slides up the element//元素向上滑动</span><br></code></pre></td></tr></table></figure></li><li>Animate(动画) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">animate</span>(&#123;<br>  <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;250px&#x27;</span>,<br>  <span class="hljs-attr">opacity</span>: <span class="hljs-string">&#x27;0.5&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h3 id="chaininig">4.9 Chaininig</h3><ul><li>jQuery allows you to chain multiple methods.</li><li>jQuery 允许你链式调用多个方法。 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#myDiv&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>).<span class="hljs-title function_">slideUp</span>().<span class="hljs-title function_">slideDown</span>();<br></code></pre></td></tr></table></figure></li></ul><h2 id="bootstrap">5 Bootstrap</h2><h3 id="bootstrap-basics-review-notes">5.1 Bootstrap Basics ReviewNotes</h3><h4 id="introduction介绍">5.1.1 Introduction(介绍)</h4><ul><li>Bootstrap is a popular front-end framework for developing responsiveand mobile-first websites.</li><li>Bootstrap是一个流行的前端框架，用于开发响应式和移动优先的网站</li><li>It includes HTML, CSS, and JavaScript components.</li><li>它包括HTML，CSS和JavaScript组件</li></ul><blockquote><p><strong>小贴士：</strong> * 响应式网站设计(Responsive WebDesign):响应式网站设计（RWD）是一种网页设计方法论，其目的是使网站能够对不同的屏幕尺寸和解析度做出响应并相应地调整其布局。这意味着网站可以在桌面显示器、笔记本电脑、平板电脑以及手机上提供一致的查看体验，无需为每种设备制作不同的版本* 移动优先设计(Mobile FirstDesign)：移动优先设计是一种策略，优先考虑移动设备的布局和设计，在此基础上扩展至桌面版视图。这种设计策略的主要原因是移动互联网使用已超过桌面互联网使用，许多设计师和开发者选择优先为小屏幕优化其网站。</p></blockquote><h4 id="including-bootstrap">5.1.2 Including Bootstrap</h4><ul><li>CDN<ul><li><p>CSS <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;link href=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.6.0/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br></code></pre></td></tr></table></figure></p></li><li><p>JS <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;</span>&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.6.0/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></p></li></ul></li><li>Local<ul><li>Download from getbootstrap.com and include the files in yourproject.</li></ul></li></ul><h4 id="basic-structure">5.1.3 Basic Structure</h4><ul><li>HTML Template(HTML模板) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>  &lt;meta charset=&quot;UTF-8&quot;&gt;<br>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>  &lt;title&gt;Bootstrap Example&lt;/title&gt;<br>  &lt;link href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.6.0/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>  &lt;h1&gt;Hello, world!&lt;/h1&gt;<br><br>  &lt;script src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;<br>  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js&quot;&gt;&lt;/script&gt;<br>  &lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.6.0/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="grid-system网格系统">5.1.4 Grid System(网格系统)</h4><ul><li>Bootstrap's grid system uses a series of containers, rows, andcolumns to layout and align content.</li><li>Bootstrap 的网格系统使用一系列容器、行和列来布局和对齐内容。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm&quot;</span>&gt;</span><br>      Column 1<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm&quot;</span>&gt;</span><br>      Column 2<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm&quot;</span>&gt;</span><br>      Column 3<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>Containers(容器)<ul><li><code>.container</code> for a responsive fixed-width container.</li><li><code>.container</code>用于响应式固定宽度容器</li><li><code>.container-fluid</code> for a full-width container, spanningthe entire width of the viewport.</li><li><code>.container-fluid</code>用于全宽容器，覆盖视口的整个宽度</li></ul></li><li>Columns(列)<ul><li><code>.col-*</code>用于响应式列(例如，<code>.col-6</code>为50%宽度)</li><li><code>.col-sm-*</code>,<code>.col-md-*</code>,<code>.col-lg-*</code>,<code>.col-xl-*</code>用于不同的断点</li></ul></li></ul><blockquote><p><strong>小贴士：理解断点(Breakpoints)</strong>在Bootstrap中，断点是媒体查询的预设尺寸，定义了在不同的屏幕宽度下布局应该如何变化。这些断点主要对应不同种类的设备屏幕尺寸，如手机、平板电脑、桌面显示器等。</p></blockquote><h4 id="typography排版">5.1.5 Typography(排版)</h4><ul><li>Headings(标题) <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h1. Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>h2. Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-comment">&lt;!-- and so on --&gt;</span><br></code></pre></td></tr></table></figure></li><li>Lead(引导段落) <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lead&quot;</span>&gt;</span>This is a lead paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>Text Utilities(文本工具) <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted&quot;</span>&gt;</span>Muted text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-primary&quot;</span>&gt;</span>Primary text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-success&quot;</span>&gt;</span>Success text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-info&quot;</span>&gt;</span>Info text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-warning&quot;</span>&gt;</span>Warning text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-danger&quot;</span>&gt;</span>Danger text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="components组件">5.1.6 Components(组件)</h4><ul><li>Buttons(按钮) <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Primary<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-secondary&quot;</span>&gt;</span>Secondary<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span>&gt;</span>Success<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="forms表单-1">5.1.7 Forms(表单)</h4><ul><li>Basic Form(基本表单) <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;</span>Email address<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span> <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">&quot;emailHelp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emailHelp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span>We&#x27;ll never share your email with anyone else.<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-input&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleCheck1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-label&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleCheck1&quot;</span>&gt;</span>Check me out<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="utilities实用工具类">5.1.8 Utilities(实用工具类)</h4><ul><li>Spacing(间距) <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span>&gt;</span>Margin bottom<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-3&quot;</span>&gt;</span>Padding<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>Text Alignment(文本对齐) <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-left&quot;</span>&gt;</span>Left aligned text<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>Center aligned text<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-right&quot;</span>&gt;</span>Right aligned text<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>Display Property <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-none&quot;</span>&gt;</span>Hidden<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-block&quot;</span>&gt;</span>Block<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-inline&quot;</span>&gt;</span>Inline<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="bootstrap4-cheatsheet">5.2 Bootstrap4 Cheatsheet</h3><h4 id="breakpoints断点">5.2.1 Breakpoints(断点)</h4><ul><li>Extra small ＜ 544px</li><li>Small ≥ 544px</li><li>Medium ≥ 768px</li><li>Large ≥ 992px</li><li>Extra Large ≥ 1200px</li></ul><h4 id="colors颜色">5.2.2 Colors(颜色)</h4><ul><li><code>.text-primary</code></li><li><code>.text-secondary</code></li><li><code>.text-success</code></li><li><code>.text-danger</code></li><li><code>.text-warning</code></li><li><code>.text-info</code></li><li><code>.text-light</code></li><li><code>.text-dark</code></li><li><code>.bg-primary</code></li><li><code>.bg-secondary</code></li><li><code>.bg-success</code></li><li><code>.bg-danger</code></li><li><code>.bg-warning</code></li><li><code>.bg-info</code></li><li><code>.bg-light</code></li><li><code>.bg-dark</code></li><li><code>.bg-white</code></li></ul><blockquote><p><strong>小贴士</strong> 文本颜色类 (text-<em>):<code>.text-primary</code>, <code>.text-secondary</code>,<code>.text-success</code>, <code>.text-danger</code>,<code>.text-warning</code>, <code>.text-info</code>,<code>.text-light</code>, 和 <code>.text-dark</code>分别将段落的文本颜色设置为主题的基本颜色、次要颜色、成功颜色（通常是绿色）、危险颜色（通常是红色）、警告颜色（通常是黄色）、信息颜色（通常是浅蓝色）、浅色（用于深色背景）、和深色（用于浅色背景）。背景颜色类 (bg-</em>): <code>.bg-primary</code>,<code>.bg-secondary</code>, <code>.bg-success</code>,<code>.bg-danger</code>, <code>.bg-warning</code>,<code>.bg-info</code>, <code>.bg-light</code>, <code>.bg-dark</code>, 和<code>.bg-white</code> 用于设置背景颜色，通常与 <code>text-white</code>或 <code>text-dark</code>搭配使用以保证足够的对比，从而确保文本可读性。</p></blockquote><p>一个具体的例子： <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Color Classes Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container mt-5&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-primary&quot;</span>&gt;</span>This is a primary text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-secondary&quot;</span>&gt;</span>This is a secondary text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-success&quot;</span>&gt;</span>This is a success text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-danger&quot;</span>&gt;</span>This is a danger text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-warning&quot;</span>&gt;</span>This is a warning text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-info&quot;</span>&gt;</span>This is an info text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-light bg-dark&quot;</span>&gt;</span>This is a light text on dark background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-dark bg-light&quot;</span>&gt;</span>This is a dark text on light background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-primary text-white p-2&quot;</span>&gt;</span>This is a text with primary background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-secondary text-white p-2&quot;</span>&gt;</span>This is a text with secondary background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-success text-white p-2&quot;</span>&gt;</span>This is a text with success background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-danger text-white p-2&quot;</span>&gt;</span>This is a text with danger background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-warning text-white p-2&quot;</span>&gt;</span>This is a text with warning background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-info text-white p-2&quot;</span>&gt;</span>This is a text with info background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-light text-dark p-2&quot;</span>&gt;</span>This is a text with light background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-dark text-white p-2&quot;</span>&gt;</span>This is a text with dark background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-white text-dark p-2&quot;</span>&gt;</span>This is a text with white background.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p><img src="/images/bscolors1.png" alt="效果图1" /> <imgsrc="/images/bscolors2.png" alt="效果图2" /></p><h4 id="typography排版-1">5.2.3 Typography(排版)</h4><ul><li><code>.text-left</code>: Left aligned text(左对齐文本)</li><li><code>.text-center</code>: Center aligned text(居中对齐文本)</li><li><code>.text-right</code>: Right aligned text(右对齐文本)</li><li><code>.text-justify</code>： Justified text(两端对齐文本)</li><li><code>.text-nowrap</code>： No wrap text(禁止文本换行)</li><li><code>.text-lowercause</code>： Lowercasetext(将文本转换为小写)</li><li><code>.text-uppercase</code>： Uppercase text(将文本转换为大写)</li><li><code>.text-capitalize</code>： Capitalizedtext(将文本中每个单词首字母大写)</li><li><code>.lead</code>： Good for first paragraph ofarticl(适合用作文章的第一段)<ul><li>通常文本会大一些，用于引导读者进入文章内容</li></ul></li></ul><h4 id="lists列表-1">5.2.4 Lists(列表)</h4><ul><li><code>list-unstyled</code>:Removes default listmargin(移除默认的列表外边距)<ul><li>通常用于移除 <code>&lt;ul&gt;</code> 或 <code>&lt;ol&gt;</code>的默认列表样式，如前面的项目符号或数字。</li></ul></li><li><code>.dl-horizontal</code>:Makes list items twocolumns(将定义列表<code>&lt;dl&gt;</code>的项显示为两列)<ul><li>通常用于使术语和描述并排显示，而不是上下排列。</li></ul></li><li><code>.list-inline</code>:Makes list itemsinline(使列表项<code>&lt;li&gt;</code>呈行内（inline）显示)<ul><li>可以将所有列表项放在一行显示，而不是默认的垂直堆叠。</li></ul></li><li><code>.list-inline-item</code>:Added to eachli(应添加到每个行内列表项<code>&lt;li&gt;</code>上)<ul><li>当使用 <code>.list-inline</code>时，此类确保列表项正确地显示在同一行内。</li></ul></li></ul><p>Example</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;social-icons list-inline&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline-item&quot;</span>&gt;</span>item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一个具体的例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>List Styles Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container mt-5&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 无样式列表 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-unstyled&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Apple<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Banana<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Cherry<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 横向定义列表 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dt</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>Black hot drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dt</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>White cold drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 行内列表 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline-item&quot;</span>&gt;</span>Red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline-item&quot;</span>&gt;</span>Green<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline-item&quot;</span>&gt;</span>Blue<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/bslist.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><p><strong>说明：</strong> 1. 无样式列表 (<code>list-unstyled</code>):这个无序列表 <code>&lt;ul&gt;</code> 使用 <code>.list-unstyled</code>类来移除默认的内边距和列表项目符号，使得列表项纯粹呈现内容。 2.横向定义列表 (<code>dl-horizontal</code>): 在Bootstrap4中，dl-horizontal 类已被移除，取而代之的是使用带 .row 类的<code>&lt;dl&gt;</code> 和 .col-sm-* 类的 <code>&lt;dt&gt;</code> 和<code>&lt;dd&gt;</code>。这种方式使定义列表的术语<code>&lt;dt&gt;</code> 和描述 <code>&lt;dd&gt;</code>并排显示，形成两列布局。</p><h4 id="blockquote">5.2.5 Blockquote</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blockquote&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;m-b-0&quot;</span>&gt;</span>Lorem ipsum dolor sit <br>amet, consectetur adipiscing elit. Integer <br>posuere erat a ante.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="headings">5.2.6 Headings</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h1. Bootstrap heading <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>Secondary <br>text<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>Paragraph that looks like <br>heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="images">5.2.7 Images</h4><ul><li><code>.img-fluid</code>:Make an image responsive(使图像响应式)</li><li><code>.rounded</code>:Adds rounded corners toimage(为图像添加圆角)</li><li><code>.rounded-circle</code>:Crops image to becircle(将图像裁剪为圆形)</li><li><code>.img-thumbnail</code>:Adds rounded corner +border(为图像添加圆角和边框)</li></ul><h4 id="floats浮动">5.2.8 Floats(浮动)</h4><ul><li><code>.float-left</code>:Floats items left(将元素浮动到左侧)</li><li><code>.float-right</code>:Floats items right(将元素浮动到右侧)</li><li><code>.float-none</code>:Removes float(移除元素的浮动属性)<ul><li>这个类用于取消元素的任何浮动效果，使元素回归到正常的文档流中。</li></ul></li><li><code>.float-*-*</code>:Add breakpoints if needed( 在断点处添加浮动)<ul><li>这种模式的类用于响应式设计，允许在特定的屏幕尺寸断点上应用浮动属性</li><li>例如，<code>.float-md-left</code>表示在中等尺寸的屏幕上将元素浮动到左侧。</li></ul></li></ul><h4 id="starter-template启动模板">5.2.9 Starter Template(启动模板)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- Required meta tags --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- Bootstrap CSS --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/</span></span><br><span class="hljs-string"><span class="hljs-tag">bootstrap.min.css&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Main CSS --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/main.css&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span>Left Column<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span>Right Column<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- jQuery first, then Tether, then Bootstrap JS. --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.2.1.slim.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.</span></span><br><span class="hljs-string"><span class="hljs-tag">js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.</span></span><br><span class="hljs-string"><span class="hljs-tag">js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- Main JS --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="one-column-centered-grid一列居中网格">5.2.10 One Column CenteredGrid(一列居中网格)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row justify-content-center&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="two-column-grid两列网格">5.2.11 Two Column Grid(两列网格)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="three-column-grid三列网格">5.2.12 Three ColumnGrid(三列网格)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="four-column-grid四列网格">5.2.13 Four Column Grid(四列网格)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="forms表格">5.2.14 Forms(表格)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;</span>Email address<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span> <span class="hljs-attr">aria</span><span class="hljs-attr">describedby</span>=<span class="hljs-string">&quot;emailHelp&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter email&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emailHelp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span>We&#x27;ll never share your email with <br>anyone else.<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> Check me out<br> <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="buttons按钮">5.2.15 Buttons(按钮)</h4><ul><li><code>.btn</code>:Needs to be added to all buttons because it addspadding andmargin(需要添加到所有按钮上，因为它增加了内边距和外边距)</li><li><code>.btn-*</code>: primary, secondary, success, danger, warning,info, light, dark, link(表示按钮的不同样式，其中 * 可以是primary、secondary、success、danger、warning、info、light、dark、link。)</li><li><code>.btn-outline-*</code>:primary, secondary, success, danger,warning, info, light, dark, link(边框样式按钮,其中 * 可以是primary、secondary、success、danger、warning、info、light、dark、link)</li><li><code>.btn-lg</code>:Large buttom(大号按钮)</li><li><code>.btn-sm</code>:Smaller than default button(小号按钮)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-secondary&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="tables表">5.2.16 Tables(表)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">thead</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;thead-default&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>thead-default<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Nina<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">thead</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;thead-inverse&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>thead-inverse<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Nina<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="代码解析">6.代码解析</h2><h3 id="webpage1">6.1 webpage1</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>webpage 1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> Photography<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;pic1.jpg&quot;</span>   <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;IMAGE NO AVAILABLE&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sound1.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">video</span>  <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;350&quot;</span>   <span class="hljs-attr">controls</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;Video1.mp4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.beautifulworld.com/wp-content/uploads/2017/07/lake-dal-shikava-boat.jpg.webp&quot;</span>&gt;</span>   Click Here to Download   <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;webpage2.html&quot;</span>&gt;</span> Page 2 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/webpage1.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><h3 id="webpage2">6.2 webpage2</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.center</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>Red and center-aligned heading<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>Red and center-aligned paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/webpage2.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><h3 id="webpage3">6.3 webpage3</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">         <span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-color</span>: linen;&#125;</span><br><span class="language-css">         <span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">color</span>:red;<span class="hljs-attribute">margin-left</span>:<span class="hljs-number">40px</span>;&#125;</span><br><span class="language-css">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>This is a heading<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/webpage3.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><h3 id="inlinecss">6.4 inLINECSS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>InLine CSS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red; text-align: center;&quot;</span>&gt;</span> Welcome to the Hainan University<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: green; font-size: 100px; text-align: center;&quot;</span>&gt;</span> Welcome to Haikou<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue; font-style: italic;&quot;</span>&gt;</span> Department of Computer Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue; font-style: italic;&quot;</span>&gt;</span> Department of Chemical Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue; font-style: italic;&quot;</span>&gt;</span> Department of Bio Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue; font-style: italic;&quot;</span>&gt;</span> Department of Material Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="external-css">6.5 External CSS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> External CSS <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;cssfile1.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> &gt;</span> Welcome to the Hainan University<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> Welcome to Haikou<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span> Department of Computer Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span> Department of Chemical Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;b&quot;</span> &gt;</span> Department of Bio Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span> Department of Material Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span> Department of Chemical Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span> Department of Bio Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span> Department of Material Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/enternalCSS.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><h3 id="internalcss">6.6 InternalCSS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>InLine CSS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">               <span class="hljs-selector-tag">h1</span>&#123; <span class="hljs-attribute">text-align</span>: center; <span class="hljs-attribute">color</span>:red; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30</span>; <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Franklin Gothic Medium&#x27;</span>, <span class="hljs-string">&#x27;Arial Narrow&#x27;</span>, Arial, sans-serif;&#125;</span><br><span class="language-css">               <span class="hljs-selector-tag">h2</span>&#123; <span class="hljs-attribute">color</span>: green; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>; <span class="hljs-attribute">text-align</span>: center;&#125;</span><br><span class="language-css">               <span class="hljs-selector-tag">h3</span>&#123;<span class="hljs-attribute">color</span>: blue; <span class="hljs-attribute">font-style</span>: italic;&#125;</span><br><span class="language-css">               <span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">background-color</span>:bisque&#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> &gt;</span> Welcome to the Hainan University<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> &gt;</span> Welcome to Haikou<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Computer Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Chemical Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Bio Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Material Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Chemical Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Bio Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> &gt;</span> Department of Material Science<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/internal.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><h3 id="cssfontproperties">6.7 CssFontProperties</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">          <span class="hljs-selector-tag">h1</span></span><br><span class="language-css">          &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>:<span class="hljs-string">&#x27;Times New Roman&#x27;</span>, Times, serif;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-weight</span>:<span class="hljs-number">100</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-style</span>:normal;</span><br><span class="language-css">           <span class="hljs-comment">/*/ font-variant:small-caps;  */</span></span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>:center;</span><br><span class="language-css">            <span class="hljs-attribute">letter-spacing</span>: .<span class="hljs-number">25em</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: underline;</span><br><span class="language-css">            <span class="hljs-attribute">word-spacing</span>: .<span class="hljs-number">50em</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-transform</span>: lowercase;</span><br><span class="language-css">            <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">35%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>:antiquewhite;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">Kmr.jpg</span>);</span><br><span class="language-css">            <span class="hljs-attribute">background-position</span>: left;</span><br><span class="language-css">            <span class="hljs-attribute">background-size</span>:cover;</span><br><span class="language-css">          &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Distinctio ipsum, recusandae repellendus rem laboriosam ad porro nobis ratione incidunt consequatur aliquam rerum. Aliquam quisquam animi aspernatur tempore at, ut deleniti!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/CssFontProperties.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><h3 id="cssselectors">6.8 CssSelectors</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;<span class="hljs-attribute">color</span>:blueviolet&#125;   <span class="hljs-comment">/* Universal selector */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.c1</span> &#123;<span class="hljs-attribute">color</span>:blueviolet&#125; <span class="hljs-comment">/* Class Selector  */</span></span><br><span class="language-css">        <span class="hljs-selector-id">#a1</span> &#123;<span class="hljs-attribute">color</span>:blueviolet&#125; <span class="hljs-comment">/* Id Selector */</span></span><br><span class="language-css">       <span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">color</span>:blueviolet&#125;   <span class="hljs-comment">/* Tag Selector*/</span></span><br><span class="language-css">       <span class="hljs-selector-tag">h1</span>,<span class="hljs-selector-tag">h2</span>&#123;<span class="hljs-attribute">color</span>:blueviolet&#125; <span class="hljs-comment">/* Group Selector*/</span> </span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a1&quot;</span> &gt;</span>Hello World! <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a1&quot;</span> &gt;</span>Hello World! <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      <br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span> Web Front-end Class<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Eum quod, provident quam ipsum ratione laudantium et reiciendis. Repudiandae laborum delectus vel consequatur sequi dignissimos unde beatae cupiditate, autem sit nulla.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/CssSelectors.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure><h3 id="cssproperties">6.9 Cssproperties</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">h1</span>&#123;</span><br><span class="language-css">     <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">font-family</span>:<span class="hljs-string">&#x27;Trebuchet MS&#x27;</span>, <span class="hljs-string">&#x27;Lucida Sans Unicode&#x27;</span>, <span class="hljs-string">&#x27;Lucida Grande&#x27;</span>, <span class="hljs-string">&#x27;Lucida Sans&#x27;</span>, Arial, sans-serif;</span><br><span class="language-css">     <span class="hljs-attribute">font-weight</span>:lighter;</span><br><span class="language-css">     <span class="hljs-attribute">font-style</span>: oblique;</span><br><span class="language-css">     <span class="hljs-attribute">font-variant</span>:small-caps;</span><br><span class="language-css">     </span><br><span class="language-css">     <span class="hljs-attribute">text-align</span>: right;</span><br><span class="language-css">     <span class="hljs-attribute">text-decoration</span>:underline;</span><br><span class="language-css">     <span class="hljs-attribute">letter-spacing</span>: .<span class="hljs-number">20em</span>;</span><br><span class="language-css">     <span class="hljs-attribute">word-spacing</span>: .<span class="hljs-number">50em</span>;</span><br><span class="language-css">     <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200%</span>;</span><br><span class="language-css">     </span><br><span class="language-css">     <span class="hljs-comment">/*background-image: url(pic1.jpg);*/</span></span><br><span class="language-css">     <span class="hljs-attribute">background-color</span>:antiquewhite;</span><br><span class="language-css">     <span class="hljs-attribute">background-position</span>: right;</span><br><span class="language-css"></span><br><span class="language-css">     <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">     <span class="hljs-attribute">border-style</span>: dashed;</span><br><span class="language-css">     <span class="hljs-attribute">border-width</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">border-color</span>: red; </span><br><span class="language-css">     <span class="hljs-attribute">border-top-color</span>: blueviolet;</span><br><span class="language-css">     <span class="hljs-attribute">border-top-width</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">border-left-style</span>: dotted;</span><br><span class="language-css">     <span class="hljs-attribute">border-left-color</span>: green;</span><br><span class="language-css">     <span class="hljs-attribute">border-left-width</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eius, temporibus! Reiciendis deserunt facilis accusantium quasi sapiente similique velit, facere nulla explicabo, vel iste quas? Autem recusandae mollitia incidunt iusto maiores!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![效果图] (/images/Cssproperties.png)</p><h3 id="div">6.10 DIV</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#d1</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: antiquewhite;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Franklin Gothic Medium&#x27;</span>, <span class="hljs-string">&#x27;Arial Narrow&#x27;</span>, Arial, sans-serif;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">     <span class="hljs-selector-id">#d2</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Gill Sans&#x27;</span>, <span class="hljs-string">&#x27;Gill Sans MT&#x27;</span>, Calibri, <span class="hljs-string">&#x27;Trebuchet MS&#x27;</span>, sans-serif;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span> <br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">H1</span>&gt;</span>Section 1<span class="hljs-tag">&lt;/<span class="hljs-name">H1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Hello This is example of div tag<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ipsam animi vitae alias doloribus reprehenderit debitis maiores aut optio velit officiis, asperiores totam, sequi necessitatibus magni numquam corporis nesciunt quisquam voluptatem.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">H1</span>&gt;</span>Section 2<span class="hljs-tag">&lt;/<span class="hljs-name">H1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Hello This is example of div tag<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ipsam animi vitae alias doloribus reprehenderit debitis maiores aut optio velit officiis, asperiores totam, sequi necessitatibus magni numquam corporis nesciunt quisquam voluptatem.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/images/DIV.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption></figure>]]></content>
    
    
    
    <tags>
      
      <tag>web前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用模板</title>
    <link href="/2024/06/11/dataStructureTemplate/"/>
    <url>/2024/06/11/dataStructureTemplate/</url>
    
    <content type="html"><![CDATA[<h2 id="基础算法">1. 基础算法</h2><figure><img src="/images/基础算法知识框架.jpg" alt="基础算法知识框架" /><figcaption aria-hidden="true">基础算法知识框架</figcaption></figure><h3 id="快速排序">1.1 快速排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l &gt;= r) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = q[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span>(i &lt; j)<br>    &#123;<br>        <span class="hljs-keyword">do</span> i ++; <span class="hljs-keyword">while</span>(q[i] &lt; x);<br>        <span class="hljs-keyword">do</span> j --; <span class="hljs-keyword">while</span>(q[j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(q[i], q[j]);<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(q, l, j), <span class="hljs-built_in">quick_sort</span>(q, j + <span class="hljs-number">1</span>, r);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="归并排序">1.2 归并排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">merge_sort</span>(q, l, mid);<br>    <span class="hljs-built_in">merge_sort</span>(q, mid + <span class="hljs-number">1</span>, r);<br><br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, i = l, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class="hljs-keyword">if</span> (q[i] &lt;= q[j]) tmp[k++] = q[i++];<br>        <span class="hljs-keyword">else</span> tmp[k++] = q[j++];<br><br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k++] = q[i++];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) tmp[k++] = q[j++];<br><br>    <span class="hljs-keyword">for</span>(i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i++, j++) q[i] = tmp[j];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小贴士</strong> <br></p><blockquote><p>快速排序和归并排序时间复杂度都是<spanclass="math inline">\(O(nlogn)\)</span><br> 二者的选择：<br> 1.快速排序：大规模数据<br> 2.归并排序：对于稳定性要求高，比如涉及多关键字排序（成绩排序）或者涉及数据记录的题目；链表排序<br>在大多数算法比赛中不需要考虑稳定性，而快速排序大部分情况下平均表现优异</p></blockquote><h3 id="整数二分">1.3 整数二分</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<span class="hljs-comment">/*...*/</span>&#125;<br><br><span class="hljs-comment">//当区间[l, r]被划分为[l, mid]和[mid + 1, r]时使用</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bsearch_1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><br><span class="hljs-comment">//当区间[l, r]被划分为[l, mid - 1]和[mid, r]时使用</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bsearch_2</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r) <br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid  - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小贴士</strong><br></p><blockquote><ol type="1"><li><code>bsearch_1</code>特点：区间划分为<code>[l, mid]</code>和<code>[mid + 1, r]</code><br>当<code>check(mid)</code>为真时，将右边界收缩到<code>mid</code>，即<code>r = mid</code><br>当<code>check(mid)</code>为假时，将左边界移到<code>mid + 1</code>即<code>l = mid + 1</code><br>这种方式确保了最终收敛时，l 和 r 会指向满足条件的最左边的位置<br>使用场景：适用于需要找到满足<code>check</code>条件的第一个位置，如有序数组中寻找第一个大于等于某个值的位置<br></li><li><code>bsearch_2</code>特点：区间划分为<code>[l, mid - 1]</code>和<code>[mid, r]</code><br>当<code>check(mid)</code>为真时，将左边界收缩到<code>mid</code>，即<code>l = mid</code><br>当<code>check(mid)</code>为假时，将右边界移到<code>mid - 1</code>即<code>r = mid - 1</code><br>这种方式确保了最终收敛时，l 和 r 会指向满足条件的最右边的位置<br>使用场景：适用于需要找到满足<code>check</code>条件的最后一个位置，如有序数组中寻找最后一个小于等于某个值的位置</li></ol></blockquote><h3 id="浮点数二分算法">1.4 浮点数二分算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> </span>&#123;<span class="hljs-comment">/*...*/</span>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">bsearch_3</span><span class="hljs-params">(<span class="hljs-type">double</span> l, <span class="hljs-type">double</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-6</span>;<br>    <span class="hljs-keyword">while</span> (r - l &gt; eps)<br>    &#123;<br>        <span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高精度加法">1.5 高精度加法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>() || i &lt; B.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; A.<span class="hljs-built_in">size</span>()) t += A[i];<br>        <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t += B[i];<br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (t) C.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol type="1"><li>将两个数字的每一位存入数组，低位在前，高位在后。</li><li>从最低位开始相加，若和大于等于 10，处理进位。</li><li>将每位的和存入结果数组。</li><li>最后输出结果数组。</li></ol></blockquote><h3 id="高精度减法">1.6 高精度减法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        t = A[i] - t;<br>        <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t -= B[i];<br>        C.<span class="hljs-built_in">push_back</span>((t + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (t &lt; <span class="hljs-number">0</span>) t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C; <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol type="1"><li>将两个数字的每一位存入数组，低位在前，高位在后。</li><li>从最低位开始逐位相减，若差小于 0，处理借位。</li><li>将每位的差存入结果数组</li><li>去掉结果数组前导零</li><li>最后输出结果数组</li></ol></blockquote><h3 id="高精度乘低精度">1.7 高精度乘低精度</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// C = A * b, A &gt;= 0, b &gt;= 0</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.size || t; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; A.<span class="hljs-built_in">size</span>()) t += A[i] * b;<br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (C.size &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br><br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高精度除以低精度">1.8 高精度除以低精度</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// A / b = C ... r, A &gt;= 0, b &gt; 0</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">div</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> &amp;r)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        r = r * <span class="hljs-number">10</span> + A[i];<br>        C.<span class="hljs-built_in">push_back</span>(r / b);<br>        r %= b;<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(C.<span class="hljs-built_in">begin</span>(), C.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.back == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="一维前缀和">1.9 一维前缀和</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TXT">S[i] = a[1] + a[2] + ... + a[i]<br>a[l] + ... + a[r] = S[r] - S[l - 1]<br></code></pre></td></tr></table></figure><h3 id="二维前缀和">1.10 二维前缀和</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TXT">S[i, j] = 第i行j列格子左上部分所有元素的和<br>以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：<br>S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]<br></code></pre></td></tr></table></figure><h3 id="一维差分">1.11 一维差分</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs TXT">给区间[l, r]中的每个数加上c：B[l] += c, B[r + 1] -= c<br></code></pre></td></tr></table></figure><p><strong>小贴士</strong></p><blockquote><p>差分原理： 1. 假设我们有一个原数组 <spanclass="math inline">\(a\)</span>，差分数组 <spanclass="math inline">\(b\)</span> 定义如下：<br /><span class="math inline">\(b[i] = a[i] - a[i - 1]\)</span> （其中 <spanclass="math inline">\(a[0]\)</span> 为 0） 2. 假设原数组 <spanclass="math inline">\(a = [2, 3, 5, 8]\)</span>，我们希望对区间 [2, 4]的每个元素增加 3<br />原数组 <span class="math inline">\(a = [2, 3, 5, 8]\)</span><br /><span class="math inline">\(b[1] = a[1] - a[0] = 2\)</span><br /><span class="math inline">\(b[2] = a[2] - a[1] = 1\)</span><br /><span class="math inline">\(b[3] = a[3] - a[2] = 2\)</span><br /><span class="math inline">\(b[4] = a[4] - a[3] = 3\)</span> 3.更新差分数组：<br /><span class="math inline">\(b[2] += 3\)</span><br /><span class="math inline">\(b[5] -= 3\)</span>（假设 <spanclass="math inline">\(b[5]\)</span> 初始为 0）<br />更新后 <span class="math inline">\(b = [2, 4, 2, 3, -3]\)</span> 4.通过前缀和恢复原数组：<br /><span class="math inline">\(a[1] = b[1] + a[0] = 2\)</span><br /><span class="math inline">\(a[2] = b[2] + a[1] = 6\)</span><br /><span class="math inline">\(a[3] = b[3] + a[2] = 9\)</span><br /><span class="math inline">\(a[4] = b[4] + a[3] = 11\)</span></p></blockquote><h3 id="二维差分">1.12 二维差分</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TXT">给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：<br>S[x1, y1] += c, S[x2 + 1, y1] -= c, S[x1, y2 + 1] -= c, S[x2 + 1, y2 + 1] += c<br></code></pre></td></tr></table></figure><p><strong>小贴士</strong></p><blockquote><p>差分矩阵原理：<br />1. 假设我们有一个二维矩阵<spanclass="math inline">\(a\)</span>,差分矩阵<spanclass="math inline">\(b\)</span>的定义如下：<br /><span class="math inline">\(b[i][j] = a[i][j] - a[i - 1][j] - a[i][j -1] + a[i - 1][j - 1]\)</span><br />2. 更新差分矩阵：<br> 假设我们要对子矩形区域<spanclass="math inline">\([x1][y1]\)</span>到<spanclass="math inline">\(x[2][y2]\)</span>进行加c操作<br> <spanclass="math inline">\(b[x1][y1] += c\)</span><br> <spanclass="math inline">\(b[x2 + 1][y1] -= c\)</span><br> <spanclass="math inline">\(b[x1][y2 + 1] -= c\)</span><br> <spanclass="math inline">\(b[x2 + 1][y2 + 1] += c\)</span><br> 3.通过前缀和恢复原矩阵：<br> <span class="math inline">\(a[i][j] = b[i][j]+ a[i - 1][j] + a[i][j - 1] - a[i - 1][j - 1]\)</span><br>具体例子：<br> 1. 假设一个二维数组 a = {<br> {1, 2, 3},<br> {4, 5,6},<br> {7, 8, 9} };<br> 差分矩阵为 b = {<br> {1, 1, 1},<br> {3, 0,0},<br> {3, 0, 0}<br> };<br> 2. 对子矩阵区域[1, 1]到[2, 2]进行更新<br><span class="math inline">\(b[1][1] += 10\)</span><br> <spanclass="math inline">\(b[3][1] -= 10\)</span><br> <spanclass="math inline">\(b[1][3] -= 10\)</span><br> <spanclass="math inline">\(b[3][3] += 10\)</span><br> 3. 恢复原矩阵<br> <spanclass="math inline">\(a[i][j] = b[i][j] + a[i - 1][j] + a[i][j - 1] -a[i - 1][j - 1]\)</span></p></blockquote><h3 id="位运算">1.13 位运算</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TXT">求整数n的第k位二进制数字: n &gt;&gt; k &amp; 1(从右边开始计数)<br>返回n的最后一位1：lowbit(n) = n &amp; -n<br></code></pre></td></tr></table></figure><p><strong>理解<code>n &amp; -n</code></strong><br></p><blockquote><p>假设<spanclass="math inline">\(n\)</span>是整数12，其二进制表示如下：<br> 1.正数二进制为<code>1100</code><br> 2. <spanclass="math inline">\(-n\)</span>的二进制表示通过取反并加1，故取反得到<code>0011</code>,加1得到<code>0100</code><br> 3. 故有<span class="math inline">\(n \&amp; -n= 0100\)</span> 4. 则n中最低位的1所对应的值为4</p></blockquote><p><strong>什么是最低位的 1 所对应的值？</strong></p><blockquote><p>具体来说，它是二进制表示中从右到左第一个 1的<em>权重</em>(二进制数字每一位的权重是2的幂次，例如，最低位（最右边）的权重是<spanclass="math inline">\(2^0 = 1\)</span>,第二位的权重是<spanclass="math inline">\(2^1 = 2\)</span>,第三位的权重是<spanclass="math inline">\(2^2 = 4\)</span>)。示例：整数12，二进制为<code>1100</code>,最低为的1是从右到左的第三位，对应的值，即这个最低位的1的权重是<spanclass="math inline">\(2^2 = 4\)</span></p></blockquote><h3 id="双指针算法">1.14 双指针算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (j &lt; i &amp;&amp; <span class="hljs-built_in">check</span>(i, j)) j ++ ;<br><br>    <span class="hljs-comment">// 具体问题的逻辑</span><br>&#125;<br><span class="hljs-comment">/*常见问题分类：</span><br><span class="hljs-comment">    (1) 对于一个序列，用两个指针维护一段区间</span><br><span class="hljs-comment">    (2) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作*/</span><br></code></pre></td></tr></table></figure><h3 id="离散化">1.15 离散化</h3><p><strong>离散化</strong>是将连续数据转换为离散数据的过程</p><ol type="1"><li>使用场景：</li></ol><ul><li>连续数据的范围非常大，而离散化可以将数据映射到较小的范围</li></ul><ol start="2" type="1"><li>基本步骤<ol type="1"><li>收集数据：首先收集所有需要离散化的数值，通常存储在一个数组或列表中</li><li>排序和去重：将收集到的数据进行排序，并去除重复值，得到一个有序且唯一的数值列表</li><li>建立映射：建立原始数值到离散值的映射关系，通常使用哈希表或字典来实现</li><li>应用映射：将原始数据根据建立的映射关系转换为离散值</li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs CPP">vector&lt;<span class="hljs-type">int</span>&gt; alls; <span class="hljs-comment">// 存储所有待离散化的值</span><br><span class="hljs-built_in">sort</span>(alls.<span class="hljs-built_in">begin</span>(), alls.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 将所有值排序</span><br>alls.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(alls.<span class="hljs-built_in">begin</span>(), alls.<span class="hljs-built_in">end</span>()), alls.<span class="hljs-built_in">end</span>());   <span class="hljs-comment">// 去掉重复元素</span><br><br><span class="hljs-comment">// 二分求出x对应的离散化的值</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 找到第一个大于等于x的位置</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = alls.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (alls[mid] &gt;= x) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span>; <span class="hljs-comment">// 映射到1, 2, ...n</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="区间合并">1.16 区间合并</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-comment">// 将所有存在交集的区间合并</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;PII&gt; &amp;segs)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;PII&gt; res;<br><br>    <span class="hljs-built_in">sort</span>(segs.<span class="hljs-built_in">begin</span>(), segs.<span class="hljs-built_in">end</span>());<br><br>    <span class="hljs-type">int</span> st = <span class="hljs-number">-2e9</span>, ed = <span class="hljs-number">-2e9</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> seg : segs)<br>        <span class="hljs-keyword">if</span> (ed &lt; seg.first)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, ed&#125;);<br>            st = seg.first, ed = seg.second;<br>        &#125;<br>        <span class="hljs-keyword">else</span> ed = <span class="hljs-built_in">max</span>(ed, seg.second);<br><br>    <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, ed&#125;);<br><br>    segs = res;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据结构">2. 数据结构</h2><figure><img src="/images/数据结构知识框架.jpg" alt="数据结构知识框架" /><figcaption aria-hidden="true">数据结构知识框架</figcaption></figure><h3 id="单链表">2.1 单链表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点</span><br><span class="hljs-type">int</span> head, e[N], ne[N], idx;<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    head = <span class="hljs-number">-1</span>;<br>    idx = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 在链表头插入一个数a</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = a, ne[idx] = head, head = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 将头结点删除，需要保证头结点存在</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    head = ne[head];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双链表">2.2 双链表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点</span><br><span class="hljs-type">int</span> e[N], l[N], r[N], idx;<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//0是左端点，1是右端点</span><br>    r[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, l[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    idx = <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment">// 在节点a的右边插入一个数x</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = x;<br>    l[idx] = a, r[idx] = r[a];<br>    l[r[a]] = idx, r[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 删除节点a</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    l[r[a]] = l[a];<br>    r[l[a]] = r[a];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="栈">2.3 栈</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// tt表示栈顶</span><br><span class="hljs-type">int</span> stk[N], tt = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 向栈顶插入一个数</span><br>stk[ ++ tt] = x;<br><br><span class="hljs-comment">// 从栈顶弹出一个数</span><br>tt -- ;<br><br><span class="hljs-comment">// 栈顶的值</span><br>stk[tt];<br><br><span class="hljs-comment">// 判断栈是否为空，如果 tt &gt; 0，则表示不为空</span><br><span class="hljs-keyword">if</span> (tt &gt; <span class="hljs-number">0</span>)<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="队列">2.4 队列</h3><h4 id="普通队列">2.4.1 普通队列</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// hh 表示队头，tt表示队尾</span><br><span class="hljs-type">int</span> q[N], hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br><br><span class="hljs-comment">// 向队尾插入一个数</span><br>q[ ++ tt] = x;<br><br><span class="hljs-comment">// 从队头弹出一个数</span><br>hh ++ ;<br><br><span class="hljs-comment">// 队头的值</span><br>q[hh];<br><br><span class="hljs-comment">// 判断队列是否为空，如果 hh &lt;= tt，则表示不为空</span><br><span class="hljs-keyword">if</span> (hh &lt;= tt)<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="循环队列">2.4.2 循环队列</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// hh 表示队头，tt表示队尾的后一个位置</span><br><span class="hljs-type">int</span> q[N], hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 向队尾插入一个数</span><br>q[tt ++ ] = x;<br><span class="hljs-keyword">if</span> (tt == N) tt = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 从队头弹出一个数</span><br>hh ++ ;<br><span class="hljs-keyword">if</span> (hh == N) hh = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 队头的值</span><br>q[hh];<br><br><span class="hljs-comment">// 判断队列是否为空，如果hh != tt，则表示不为空</span><br><span class="hljs-keyword">if</span> (hh != tt)<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单调栈">2.5 单调栈</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//常见模型：找出每个数左边离它最近的比它大/小的数</span><br><span class="hljs-type">int</span> tt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (tt &amp;&amp; <span class="hljs-built_in">check</span>(stk[tt], i)) tt -- ;<br>    stk[ ++ tt] = i;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单调队列">2.6 单调队列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//常见模型：找出滑动窗口中的最大值/最小值</span><br><span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="hljs-built_in">check_out</span>(q[hh])) hh ++ ;  <span class="hljs-comment">// 判断队头是否滑出窗口</span><br>    <span class="hljs-keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="hljs-built_in">check</span>(q[tt], i)) tt -- ;<br>    q[ ++ tt] = i;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kmp">2.7 KMP</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// s[]是长文本，p[]是模式串，n是s的长度，m是p的长度</span><br>求模式串的Next数组：<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= m; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br>    <span class="hljs-keyword">if</span> (p[i] == p[j + <span class="hljs-number">1</span>]) j ++ ;<br>    ne[i] = j;<br>&#125;<br><br><span class="hljs-comment">// 匹配</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br>    <span class="hljs-keyword">if</span> (s[i] == p[j + <span class="hljs-number">1</span>]) j ++ ;<br>    <span class="hljs-keyword">if</span> (j == m)<br>    &#123;<br>        j = ne[j];<br>        <span class="hljs-comment">// 匹配成功后的逻辑</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="trie树">2.8 Trie树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> son[N][<span class="hljs-number">26</span>], cnt[N], idx;<br><span class="hljs-comment">// 0号点既是根节点，又是空节点</span><br><span class="hljs-comment">// son[][]存储树中每个节点的子节点</span><br><span class="hljs-comment">// cnt[]存储以每个节点结尾的单词数量</span><br><br><span class="hljs-comment">// 插入一个字符串</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i]; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!son[p][u]) son[p][u] = ++ idx;<br>        p = son[p][u];<br>    &#125;<br>    cnt[p] ++ ;<br>&#125;<br><br><span class="hljs-comment">// 查询字符串出现的次数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i]; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!son[p][u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        p = son[p][u];<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt[p];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小贴士</strong></p><blockquote><p>异或对(XOR pair)<br /><strong>异或：</strong>指的是使用异或运算（XOR operation），即 ^操作符。<br /><strong>对：</strong>指的是成对的两个数。通常，我们关注的是一对数（a,b），并研究它们在应用异或运算后的一些特性。<br /><strong>性质：</strong><br />1. a ^ a = 0<br />2. a ^ 0 = a<br />3. 异或运算满足交换律和结合律，即 a ^ b = b ^ a 和 (a ^ b) ^ c = a ^ (b^ c)</p></blockquote><h3 id="并查集">2.9 并查集</h3><h4 id="朴素并查集">2.9.1 朴素并查集</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> p[N]; <span class="hljs-comment">//存储每个点的祖宗节点</span><br><br><span class="hljs-comment">// 返回x的祖宗节点</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 初始化，假定节点编号是1~n</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) p[i] = i;<br><br><span class="hljs-comment">// 合并a和b所在的两个集合：</span><br>p[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b);<br></code></pre></td></tr></table></figure><h4 id="维护size的并查集">2.9.2 维护size的并查集</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> p[N], size[N];<br><span class="hljs-comment">//p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量</span><br><br><span class="hljs-comment">// 返回x的祖宗节点</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 初始化，假定节点编号是1~n</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    p[i] = i;<br>    size[i] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 合并a和b所在的两个集合：</span><br>size[<span class="hljs-built_in">find</span>(b)] += size[<span class="hljs-built_in">find</span>(a)];<br>p[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b);<br></code></pre></td></tr></table></figure><h4 id="维护到祖宗节点的并查集">2.9.3 维护到祖宗节点的并查集</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> p[N], d[N];<br><span class="hljs-comment">//p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离</span><br><br><span class="hljs-comment">// 返回x的祖宗节点</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x)<br>    &#123;<br>        <span class="hljs-type">int</span> u = <span class="hljs-built_in">find</span>(p[x]);<br>        d[x] += d[p[x]];<br>        p[x] = u;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 初始化，假定节点编号是1~n</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    p[i] = i;<br>    d[i] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 合并a和b所在的两个集合：</span><br>p[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b);<br>d[<span class="hljs-built_in">find</span>(a)] = distance; <span class="hljs-comment">// 根据具体问题，初始化find(a)的偏移量</span><br></code></pre></td></tr></table></figure><h3 id="堆">2.10 堆</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1</span><br><span class="hljs-comment">// ph[k]存储第k个插入的点在堆中的位置</span><br><span class="hljs-comment">// hp[k]存储堆中下标是k的点是第几个插入的</span><br><span class="hljs-type">int</span> h[N], ph[N], hp[N], size;<br><br><span class="hljs-comment">// 交换两个点，及其映射关系</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heap_swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">swap</span>(ph[hp[a]],ph[hp[b]]);<br>    <span class="hljs-built_in">swap</span>(hp[a], hp[b]);<br>    <span class="hljs-built_in">swap</span>(h[a], h[b]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = u;<br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> &lt;= size &amp;&amp; h[u * <span class="hljs-number">2</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= size &amp;&amp; h[u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (u != t)<br>    &#123;<br>        <span class="hljs-built_in">heap_swap</span>(u, t);<br>        <span class="hljs-built_in">down</span>(t);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (u / <span class="hljs-number">2</span> &amp;&amp; h[u] &lt; h[u / <span class="hljs-number">2</span>])<br>    &#123;<br>        <span class="hljs-built_in">heap_swap</span>(u, u / <span class="hljs-number">2</span>);<br>        u &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// O(n)建堆</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n / <span class="hljs-number">2</span>; i; i -- ) <span class="hljs-built_in">down</span>(i);<br></code></pre></td></tr></table></figure><ul><li><p><strong>堆的特性</strong>：</p><ul><li><p>堆中某个节点的值总是不大于或不小于其父节点的值；</p></li><li><p>堆总是一棵完全二叉树。</p></li></ul></li><li><p><strong>大根堆</strong>：</p><ul><li>父节点 ≥ 子节点<br /></li><li><code>priotity_queue&lt;int&gt; MaxHeap</code><br /></li><li>每次取出的元素是队列中的最大值</li></ul></li><li><p><strong>小根堆</strong>：</p><ul><li>父节点 ≤ 子节点</li><li><code>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; MinHeap</code></li><li>每次取出的元素是队列中的最小值</li></ul></li></ul><h3 id="一般哈希">2.11 一般哈希</h3><h4 id="拉链法">2.11.1 拉链法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><br><span class="hljs-comment">// 向哈希表中插入一个数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k = (x % N + N) % N;<br>    e[idx] = x;<br>    ne[idx] = h[k];<br>    h[k] = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 在哈希表中查询某个数是否存在</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k = (x % N + N) % N;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[k]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        <span class="hljs-keyword">if</span> (e[i] == x)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="开放寻址法">2.11.2 开放寻址法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> h[N];<br><br><span class="hljs-comment">// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = (x % N + N) % N;<br>    <span class="hljs-keyword">while</span> (h[t] != null &amp;&amp; h[t] != x)<br>    &#123;<br>        t ++ ;<br>        <span class="hljs-keyword">if</span> (t == N) t = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串哈希">2.12 字符串哈希</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//核心思想：将字符串看成P进制数，P的经验值是131或13331，取这两个值的冲突概率低</span><br><span class="hljs-comment">//小技巧：取模的数用2^64，这样直接用unsigned long long存储，溢出的结果就是取模的结果</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ULL;<br>ULL h[N], p[N]; <span class="hljs-comment">// h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64</span><br><br><span class="hljs-comment">// 初始化</span><br>p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    h[i] = h[i - <span class="hljs-number">1</span>] * P + str[i];<br>    p[i] = p[i - <span class="hljs-number">1</span>] * P;<br>&#125;<br><br><span class="hljs-comment">// 计算子串 str[l ~ r] 的哈希值</span><br><span class="hljs-function">ULL <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> h[r] - h[l - <span class="hljs-number">1</span>] * p[r - l + <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="搜索与图论">3. 搜索与图论</h2><figure><img src="/images/搜索与图论知识框架.jpg" alt="搜索与图论知识框架" /><figcaption aria-hidden="true">搜索与图论知识框架</figcaption></figure><h3 id="树与图的存储">3.1 树与图的存储</h3><ul><li>树是一种特殊的图，与图的存储方式相同</li><li>对于无向图中的边ab，存储两条有向边a-&gt;b,b-&gt;a</li><li>因此我们可以只考虑有向图的存储</li></ul><h4 id="邻接矩阵">3.1.1 邻接矩阵</h4><p><code>g[a][b]</code> 存储边a-&gt;b</p><h4 id="邻接表">3.1.2 邻接表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点</span><br><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><span class="hljs-comment">//h[N]存储每个节点的链表的头结点索引</span><br><span class="hljs-comment">//e[N]存储每条边的终点</span><br><span class="hljs-comment">//ne[N]存储每条边在链表中的下一条边的索引</span><br><span class="hljs-comment">//idx是全局变量，表示当前边的索引</span><br><br><span class="hljs-comment">//添加一条边a-&gt;b</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-comment">//初始化</span><br>idx = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br></code></pre></td></tr></table></figure><p>不严谨的说(但是方便理解)：</p><ul><li>对于邻接表的实现，添加新边并不会影响已经存在的边的终点关系。每次添加一条边，只是将新边插入到链表的头部，而不会改变其他边的终点<br /></li><li>如果在邻接表中我们有a -(边1)&gt; b -(边2)&gt;c，那么h[a]存储的是边1的索引，e[h[a]]存储的是b，ne[h[a]]存储的是边2</li></ul><h3 id="树与图的遍历">3.2 树与图的遍历</h3><p>时间复杂度<span class="math inline">\(O(n + m)\)</span>, n表示点数，m表示边数</p><h4 id="深度优先遍历">3.2.1 深度优先遍历</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    st[u] = <span class="hljs-literal">true</span>;<span class="hljs-comment">//st[u]表示点u已经被遍历过</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span>(!st[j]) <span class="hljs-built_in">dfs</span>(j);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="宽度优先遍历">3.2.2 宽度优先遍历</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs CPP">queue&lt;<span class="hljs-type">int</span>&gt; q;<br>st[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>&#123;<br>    <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>    q.<span class="hljs-built_in">pop</span>();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!st[j])<br>        &#123;<br>            st[j] = <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(j);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="拓扑排序">3.3 拓扑排序</h3><p>时间复杂度<span class="math inline">\(O(n + m)\)</span>, n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">topsort</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-comment">//d[i] 存储点i的入度</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!d[i])<br>            q[++tt] = i;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (hh &lt;= tt)<br>    &#123;<br>        <span class="hljs-type">int</span> t = q[hh++];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span>(--d[j] ==<span class="hljs-number">0</span>)<br>                q[++tt] = j;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//如果所有点都入队了，说明存在拓扑排序，否则不存在拓扑排序</span><br>    <span class="hljs-keyword">return</span> tt = n - <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小贴士</strong><br />&gt; 1. 使用队列进行拓扑排序<br />&gt; 2. 将所有入度为0的节点入队<br />&gt; 3. 使用队列逐个处理节点，更新邻接节点的入度<br />&gt; 4. 每次从队列中取出节点并将其添加到<code>topo</code>中<br />&gt; 5.最终检查是否所有节点都被访问过，即<code>topo.size() == n</code></p><h3 id="朴素dijkstra算法">3.4 朴素dijkstra算法</h3><p>时间复杂度<span class="math inline">\(O(n&lt;sup&gt;2&lt;/sup&gt; +m)\)</span>, n表示点数， m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> g[N][N];  <span class="hljs-comment">// 存储每条边</span><br><span class="hljs-type">int</span> dist[N];  <span class="hljs-comment">// 存储1号点到每个点的最短距离</span><br><span class="hljs-type">bool</span> st[N];   <span class="hljs-comment">// 存储每个点的最短路是否已经确定</span><br><br><span class="hljs-comment">// 求1号点到n号点的最短路，如果不存在则返回-1</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;     <span class="hljs-comment">// 在还未确定最短路的点中，寻找距离最小的点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))<br>                t = j;<br><br>        <span class="hljs-comment">// 用t更新其他点的距离</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            dist[j] = <span class="hljs-built_in">min</span>(dist[j], dist[t] + g[t][j]);<br><br>        st[t] = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="堆优化版dijkstra">3.5 堆优化版dijkstra</h3><p>时间复杂度<span class="math inline">\(O(mlogm)\)</span>,n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">int</span> n;      <span class="hljs-comment">// 点的数量</span><br><span class="hljs-type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="hljs-comment">// 邻接表存储所有边</span><br><span class="hljs-type">int</span> dist[N];        <span class="hljs-comment">// 存储所有点到1号点的距离</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个点的最短距离是否已确定</span><br><br><span class="hljs-comment">// 求1号点到n号点的最短距离，如果不存在，则返回-1</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br>    heap.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;);      <span class="hljs-comment">// first存储距离，second存储节点编号</span><br><br>    <span class="hljs-keyword">while</span> (heap.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = heap.<span class="hljs-built_in">top</span>();<br>        heap.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-type">int</span> ver = t.second, distance = t.first;<br><br>        <span class="hljs-keyword">if</span> (st[ver]) <span class="hljs-keyword">continue</span>;<br>        st[ver] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[ver]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; distance + w[i])<br>            &#123;<br>                dist[j] = distance + w[i];<br>                heap.<span class="hljs-built_in">push</span>(&#123;dist[j], j&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>朴素dijkstrasuanfa算法(基于邻接矩阵)</strong>：</p><ul><li>在经典的Dijkstra算法中，我们需要</li></ul><ol type="1"><li>选择当前距离中最小的点 (时间复杂度为<spanclass="math inline">\(O(n)\)</span>)<br /></li><li>使用这个点更新其他节点的距离 (时间复杂度为<spanclass="math inline">\(O(n)\)</span>)<br /></li><li>对于每个节点我们都需要执行上诉两步，故时间复杂度为<spanclass="math inline">\(O(n^2)\)</span></li></ol></li><li><p><strong>堆优化版dijksra算法</strong></p><ul><li></li></ul></li></ul><h3 id="bellman-ford算法">3.6 Bellman-Ford算法</h3><p>时间复杂度<span class="math inline">\(O(mn)\)</span>,n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n, m;       <span class="hljs-comment">// n表示点数，m表示边数</span><br><span class="hljs-type">int</span> dist[N];        <span class="hljs-comment">// dist[x]存储1到x的最短路距离</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>     <span class="hljs-comment">// 边，a表示出点，b表示入点，w表示边的权重</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b, w;<br>&#125;edges[M];<br><br><span class="hljs-comment">// 求1到n的最短路距离，如果无法从1走到n，则返回-1。</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bellman_ford</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++ )<br>        &#123;<br>            <span class="hljs-type">int</span> a = edges[j].a, b = edges[j].b, w = edges[j].w;<br>            <span class="hljs-keyword">if</span> (dist[b] &gt; dist[a] + w)<br>                dist[b] = dist[a] + w;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] &gt; <span class="hljs-number">0x3f3f3f3f</span> / <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="spfa算法">3.7 spfa算法</h3><p>时间复杂度 平均情况下<spanclass="math inline">\(O(m)\)</span>,最坏情况下<spanclass="math inline">\(O(nm)\)</span>, n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n;      <span class="hljs-comment">// 总点数</span><br><span class="hljs-type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="hljs-comment">// 邻接表存储所有边</span><br><span class="hljs-type">int</span> dist[N];        <span class="hljs-comment">// 存储每个点到1号点的最短距离</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个点是否在队列中</span><br><br><span class="hljs-comment">// 求1号点到n号点的最短路距离，如果从1号点无法走到n号点则返回-1</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>    st[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        st[t] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i])<br>            &#123;<br>                dist[j] = dist[t] + w[i];<br>                <span class="hljs-keyword">if</span> (!st[j])     <span class="hljs-comment">// 如果队列中已存在j，则不需要将j重复插入</span><br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="spfa判断图中是否存在负环">3.8 spfa判断图中是否存在负环</h3><p>时间复杂度是<span class="math inline">\(O(nm)\)</span>，n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n;      <span class="hljs-comment">// 总点数</span><br><span class="hljs-type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="hljs-comment">// 邻接表存储所有边</span><br><span class="hljs-type">int</span> dist[N], cnt[N];        <span class="hljs-comment">// dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个点是否在队列中</span><br><br><span class="hljs-comment">// 如果存在负环，则返回true，否则返回false。</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 不需要初始化dist数组</span><br>    <span class="hljs-comment">// 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环。</span><br><br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        q.<span class="hljs-built_in">push</span>(i);<br>        st[i] = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        st[t] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i])<br>            &#123;<br>                dist[j] = dist[t] + w[i];<br>                cnt[j] = cnt[t] + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (cnt[j] &gt;= n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;       <span class="hljs-comment">// 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环</span><br>                <span class="hljs-keyword">if</span> (!st[j])<br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="floyd算法">3.9 Floyd算法</h3><p>时间复杂度是<spanclass="math inline">\(O(n&lt;sup&gt;3&lt;/sup&gt;)\)</span>,n表示点数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//初始化</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        <span class="hljs-keyword">if</span> (i == j) d[i][j] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> d[i][j] = INF;<br><br><span class="hljs-comment">//算法结束后，d[a][b]表示a到b的距离</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">floyd</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>                d[i][j] = <span class="hljs-built_in">min</span>(d[i][j], d[i][k] + d[k][j]);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="朴素版prim算法">3.10 朴素版prim算法</h3><p>时间复杂度是<spanclass="math inline">\(O(n&lt;sup&gt;2&lt;/sup&gt;+m)\)</span>,n表示点数， m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n;      <span class="hljs-comment">// n表示点数</span><br><span class="hljs-type">int</span> g[N][N];        <span class="hljs-comment">// 邻接矩阵，存储所有边</span><br><span class="hljs-type">int</span> dist[N];        <span class="hljs-comment">// 存储其他点到当前最小生成树的距离</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个点是否已经在生成树中</span><br><br><br><span class="hljs-comment">// 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))<br>                t = j;<br><br>        <span class="hljs-keyword">if</span> (i &amp;&amp; dist[t] == INF) <span class="hljs-keyword">return</span> INF;<br><br>        <span class="hljs-keyword">if</span> (i) res += dist[t];<br>        st[t] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ ) dist[j] = <span class="hljs-built_in">min</span>(dist[j], g[t][j]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kriskal算法">3.11 Kriskal算法</h3><p>时间复杂度<span class="math inline">\(O(mlogm)\)</span>, n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n, m;       <span class="hljs-comment">// n是点数，m是边数</span><br><span class="hljs-type">int</span> p[N];       <span class="hljs-comment">// 并查集的父节点数组</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>     <span class="hljs-comment">// 存储边</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b, w;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt; (<span class="hljs-type">const</span> Edge &amp;W)<span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &lt; W.w;<br>    &#125;<br>&#125;edges[M];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>     <span class="hljs-comment">// 并查集核心操作</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sort</span>(edges, edges + m);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) p[i] = i;    <span class="hljs-comment">// 初始化并查集</span><br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>, cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;<br><br>        a = <span class="hljs-built_in">find</span>(a), b = <span class="hljs-built_in">find</span>(b);<br>        <span class="hljs-keyword">if</span> (a != b)     <span class="hljs-comment">// 如果两个连通块不连通，则将这两个连通块合并</span><br>        &#123;<br>            p[a] = b;<br>            res += w;<br>            cnt ++ ;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (cnt &lt; n - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> INF;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="染色法判别二分图">3.12 染色法判别二分图</h3><p>时间复杂度是<span class="math inline">\(O(n + m)\)</span>,n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n;      <span class="hljs-comment">// n表示点数</span><br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;     <span class="hljs-comment">// 邻接表存储图</span><br><span class="hljs-type">int</span> color[N];       <span class="hljs-comment">// 表示每个点的颜色，-1表示未染色，0表示白色，1表示黑色</span><br><br><span class="hljs-comment">// 参数：u表示当前节点，c表示当前点的颜色</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    color[u] = c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (color[j] == <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">dfs</span>(j, !c)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color[j] == c) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(color, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> color);<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">if</span> (color[i] == <span class="hljs-number">-1</span>)<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">dfs</span>(i, <span class="hljs-number">0</span>))<br>            &#123;<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="匈牙利算法">3.13 匈牙利算法</h3><p>时间复杂度是<span class="math inline">\(O(nm)\)</span>,n表示点数，m表示边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> n1, n2;     <span class="hljs-comment">// n1表示第一个集合中的点数，n2表示第二个集合中的点数</span><br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;     <span class="hljs-comment">// 邻接表存储所有边，匈牙利算法中只会用到从第一个集合指向第二个集合的边，所以这里只用存一个方向的边</span><br><span class="hljs-type">int</span> match[N];       <span class="hljs-comment">// 存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 表示第二个集合中的每个点是否已经被遍历过</span><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[x]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!st[j])<br>        &#123;<br>            st[j] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (match[j] == <span class="hljs-number">0</span> || <span class="hljs-built_in">find</span>(match[j]))<br>            &#123;<br>                match[j] = x;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点</span><br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; i ++ )<br>&#123;<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> st);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(i)) res ++ ;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数学知识">4. 数学知识</h2><figure><img src="/images/数学知识知识框架.jpg" alt="数学知识知识框架" /><figcaption aria-hidden="true">数学知识知识框架</figcaption></figure><h3 id="试除法判定质数">4.1 试除法判定质数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i++)<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="试除法分解质因数">4.2 试除法分解质因数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>) x /= i, s ++ ;<br>            cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; s &lt;&lt; endl;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; endl;<br>    cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="朴素筛法求素数">4.3 朴素筛法求素数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-type">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (st[i]) <span class="hljs-keyword">continue</span>;<br>        primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + i; j &lt;= n; j += i)<br>            st[j] = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线性筛法求素数">4.4 线性筛法求素数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-type">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="试除法求所有约数">4.5 试除法求所有约数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">get_divisors</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            res.<span class="hljs-built_in">push_back</span>(i);<br>            <span class="hljs-keyword">if</span> (i != x / i) res.<span class="hljs-built_in">push_back</span>(x / i);<br>        &#125;<br>    <span class="hljs-built_in">sort</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="约数个数和约数之和">4.6 约数个数和约数之和</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TXT">如果 N = p1^c1 * p2^c2 * ... *pk^ck<br>约数个数： (c1 + 1) * (c2 + 1) * ... * (ck + 1)<br>约数之和： (p1^0 + p1^1 + ... + p1^c1) * ... * (pk^0 + pk^1 + ... + pk^ck)<br></code></pre></td></tr></table></figure><h3 id="欧几里得算法">4.7 欧几里得算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> b ? <span class="hljs-built_in">gcd</span>(b, a % b) : a;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="求欧拉函数">4.8 求欧拉函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">phi</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            res = res / i * (i - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>) x /= i;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) res = res / x * (x - <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="筛法求欧拉函数">4.9 筛法求欧拉函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-type">int</span> euler[N];           <span class="hljs-comment">// 存储每个数的欧拉函数</span><br><span class="hljs-type">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_eulers</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    euler[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i])<br>        &#123;<br>            primes[cnt ++ ] = i;<br>            euler[i] = i - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            <span class="hljs-type">int</span> t = primes[j] * i;<br>            st[t] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                euler[t] = euler[i] * primes[j];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            euler[t] = euler[i] * (primes[j] - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快速幂">4.10 快速幂</h3><p>求m<sup>k</sup> mod p,时间复杂度O(logk)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span> % p, t = m;<br>    <span class="hljs-keyword">while</span> (k)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k&amp;<span class="hljs-number">1</span>) res = res * t % p;<br>        t = t * t % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="扩展欧几里得算法">4.11 扩展欧几里得算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// 求x, y，使得ax + by = gcd(a, b)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> &amp;x, <span class="hljs-type">int</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!b)<br>    &#123;<br>        x = <span class="hljs-number">1</span>; y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-type">int</span> d = <span class="hljs-built_in">exgcd</span>(b, a % b, y, x);<br>    y -= (a/b) * x;<br>    <span class="hljs-keyword">return</span> d;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高斯消元">4.12 高斯消元</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// a[N][N]是增广矩阵</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gauss</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> c, r;<br>    <span class="hljs-keyword">for</span> (c = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>; c &lt; n; c ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> t = r;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; i &lt; n; i ++ )   <span class="hljs-comment">// 找到绝对值最大的行</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][c]) &gt; <span class="hljs-built_in">fabs</span>(a[t][c]))<br>                t = i;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[t][c]) &lt; eps) <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = c; i &lt;= n; i ++ ) <span class="hljs-built_in">swap</span>(a[t][i], a[r][i]);      <span class="hljs-comment">// 将绝对值最大的行换到最顶端</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= c; i -- ) a[r][i] /= a[r][c];      <span class="hljs-comment">// 将当前行的首位变成1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r + <span class="hljs-number">1</span>; i &lt; n; i ++ )       <span class="hljs-comment">// 用当前行将下面所有的列消成0</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][c]) &gt; eps)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n; j &gt;= c; j -- )<br>                    a[i][j] -= a[r][j] * a[i][c];<br><br>        r ++ ;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (r &lt; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; i &lt; n; i ++ )<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][n]) &gt; eps)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>; <span class="hljs-comment">// 无解</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 有无穷多组解</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j ++ )<br>            a[i][n] -= a[i][j] * a[j][n];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 有唯一解</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递推法求组合数">4.13 递推法求组合数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// c[a][b] 表示从a个苹果中选b个的方案数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i ++ )<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j ++ )<br>        <span class="hljs-keyword">if</span> (!j) c[i][j] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> c[i][j] = (c[i - <span class="hljs-number">1</span>][j] + c[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) % mod;<br></code></pre></td></tr></table></figure><h3 id="通过预处理逆元的方式求组合数">4.14通过预处理逆元的方式求组合数</h3><ul><li>首先预处理出所有阶乘取模的余数fact[N]，以及所有阶乘取模的逆元infact[N]</li><li>如果取模的数是质数，可以用费马小定理求逆元</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> p)</span>    <span class="hljs-comment">// 快速幂模板</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (k)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) res = (LL)res * a % p;<br>        a = (LL)a * a % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">// 预处理阶乘的余数和阶乘逆元的余数</span><br>fact[<span class="hljs-number">0</span>] = infact[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i ++ )<br>&#123;<br>    fact[i] = (LL)fact[i - <span class="hljs-number">1</span>] * i % mod;<br>    infact[i] = (LL)infact[i - <span class="hljs-number">1</span>] * <span class="hljs-built_in">qmi</span>(i, mod - <span class="hljs-number">2</span>, mod) % mod;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="lucas定理">4.15 Lucas定理</h3><p>若p是质数，则对于任意整数 1 &lt;= m &lt;= n，有： C(n, m) = C(n % p,m % p) * C(n / p, m / p) (mod p)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> p)</span>  <span class="hljs-comment">// 快速幂模板</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span> % p;<br>    <span class="hljs-keyword">while</span> (k)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) res = (LL)res * a % p;<br>        a = (LL)a * a % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> p)</span>  <span class="hljs-comment">// 通过定理求组合数C(a, b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a &lt; b) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    LL x = <span class="hljs-number">1</span>, y = <span class="hljs-number">1</span>;  <span class="hljs-comment">// x是分子，y是分母</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a, j = <span class="hljs-number">1</span>; j &lt;= b; i --, j ++ )<br>    &#123;<br>        x = (LL)x * i % p;<br>        y = (LL) y * j % p;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> x * (LL)<span class="hljs-built_in">qmi</span>(y, p - <span class="hljs-number">2</span>, p) % p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lucas</span><span class="hljs-params">(LL a, LL b, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a &lt; p &amp;&amp; b &lt; p) <span class="hljs-keyword">return</span> <span class="hljs-built_in">C</span>(a, b, p);<br>    <span class="hljs-keyword">return</span> (LL)<span class="hljs-built_in">C</span>(a % p, b % p, p) * <span class="hljs-built_in">lucas</span>(a / p, b / p, p) % p;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分解质因数求组合数">4.16 分解质因数求组合数</h3><p>当我们需要求出组合数的真实值，而非对某个数的余数时，分解质因数的方式比较好用：1. 筛法求出范围内的所有质数 2. 通过 C(a, b) = a! / b! / (a - b)!这个公式求出每个质因子的次数。 n! 中p的次数是 n / p + n / p^2 + n / p^3+ ... 3. 用高精度乘法将所有质因子相乘</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> primes[N], cnt;     <span class="hljs-comment">// 存储所有质数</span><br><span class="hljs-type">int</span> sum[N];     <span class="hljs-comment">// 存储每个质数的次数</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个数是否已被筛掉</span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>      <span class="hljs-comment">// 线性筛法求素数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> p)</span>       <span class="hljs-comment">// 求n！中的次数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        res += n / p;<br>        n /= p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; a, <span class="hljs-type">int</span> b)</span>       <span class="hljs-comment">// 高精度乘低精度模板</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; c;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        t += a[i] * b;<br>        c.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (t)<br>    &#123;<br>        c.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-built_in">get_primes</span>(a);  <span class="hljs-comment">// 预处理范围内的所有质数</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i ++ )     <span class="hljs-comment">// 求每个质因数的次数</span><br>&#123;<br>    <span class="hljs-type">int</span> p = primes[i];<br>    sum[i] = <span class="hljs-built_in">get</span>(a, p) - <span class="hljs-built_in">get</span>(b, p) - <span class="hljs-built_in">get</span>(a - b, p);<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; res;<br>res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i ++ )     <span class="hljs-comment">// 用高精度乘法将所有质因子相乘</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; sum[i]; j ++ )<br>        res = <span class="hljs-built_in">mul</span>(res, primes[i]);<br></code></pre></td></tr></table></figure><h2 id="动态规划">5. 动态规划</h2><h3 id="动态规划的三大步骤">5.1 动态规划的三大步骤</h3><ul><li><p><strong>第一步骤</strong>：定义<strong>数组元素的含义</strong>。假设用一维数组dp[]，就是规定这个数组元素的含义</p></li><li><p><strong>第二步骤</strong>：找出<strong>数组元素之间的关系式</strong>。动态规划有点类似于我们高中学的归纳法，当我们要计算dp[n]时，可以利用dp[n - 1]， dp[n -2]...d[[1]]，来推出dp[n]，也就是可以利用<strong>历史数据</strong>来推出新的元素值</p></li><li><p><strong>第三步骤</strong>：找出<strong>初始值</strong>。虽然我们知道了数组元素之间的关系式，例如dp[n]= dp[n - 1] + dp[n -2],但是，我们要知道初始值，例如这样一直推下去的话，会得到dp[3] = dp[2] +dp[1]。而dp[2]和dp[1]是不能再分解的了，所以我们必须要能够直接获得dp[2]和dp[1]的值，而这，就是所谓的初始值</p></li></ul><p>有了<strong>初始值</strong>，并且有了<strong>数组元素之间的关系式</strong>，我们就可以得到dp[n]的值了，而dp[n]的含义是由你来定义的，你想求什么，就定义什么，这样，这题的值也就解出来了</p><h3 id="案例一简单的一维dp">5.2 案例一、简单的一维DP</h3><blockquote><p>问题描述：一只青蛙一次可以跳上1级台阶，也可以跳上2级，求该青蛙跳上一个n级台阶总共有多少种跳法</p></blockquote><ul><li><strong>第一步骤</strong>：我们的问题是青蛙跳上n级台阶总共有多少种跳法，我们不妨设：跳上i级台阶总共有dp[i]种跳法</li><li><strong>第二步骤</strong>：对于这道题，由于情况可以是跳一级，也可以是跳2级，所以我们得出dp[i]= dp[i - 1] + dp[i - 2]</li><li><strong>第三步骤</strong>：显然，由第二步推出的关系式我们知道我们最多需要得到dp[0],dp[1],dp[2]的值，而dp[0]= 0, dp[1] = 1(青蛙一次跳一级台阶)， dp[2] =2(青蛙经过2次一次跳一级台阶或经过1次一次跳两级台阶)</li></ul><p>所以我们得到代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>, dp[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; i &lt;= n; i++) dp[i] = dp[i - <span class="hljs-number">1</span>] + dp[i - <span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">return</span> dp[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例二二维数组的dp">5.3 案例二、二维数组的DP</h3><blockquote><p>问题描述：一个机器人位于一个 m * n网格的左上角(起始点在下图中标记为"Start")。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角(在下图中标记为"Finish")。问总共由多少条不同的路径？</p></blockquote><figure><img src="/images/leetcode62.jpg" alt="图示" /><figcaption aria-hidden="true">图示</figcaption></figure><ul><li><strong>第一步骤</strong>：由于我们的目的是求从左上角到右下角一共有多少种路径，那我们就定义<code>dp[i][j]</code>的含义为：当机器人从左上角移动到(i,j)这个位置时，总共由多少种路径</li><li><strong>第二步骤</strong>：由于机器人每次只能向下或者向右移动一步，所以我们可以得到<code>dp[i][j]</code>= <code>dp[i - 1][j]</code> + <code>dp[i][j - 1]</code></li><li><strong>第三步骤</strong>：由第二步骤得到的关系式我们知道我们需要的初始值是第0行和第0列，而很显然<code>dp[0][j]</code>和<code>dp[i][0]</code>的值都为1</li></ul><blockquote><p>注意，这个网格相当于一个二维数组，数组是从下标为0开始算的，所以右下角的位置是(m- 1, n - 1)</p></blockquote><p>所以我们得到代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m - <span class="hljs-number">1</span>; i++) dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= n - <span class="hljs-number">1</span>; j++) dp[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m - <span class="hljs-number">1</span>; i++) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n - <span class="hljs-number">1</span>; j++)<br>            dp[i][j] = dp[i - <span class="hljs-number">1</span>][j] + dp[i][j - <span class="hljs-number">1</span>];<br>    <br>    <span class="hljs-keyword">return</span> dp[m - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例三二维数组的dp">5.4 案例三、二维数组的DP</h3><blockquote><p>问题描述：给定一个包含非负整数的 m * n网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和最小。</p><p>说明：每次只能向下或向右移动一步</p></blockquote><ul><li><strong>第一步骤</strong>：<ul><li>用数组<code>a[M][N]</code>存储每个网格的数字。</li><li>由题意可设<code>dp[i][j]</code>为从(0, 0)到(i,j)路径上的数字总和最小。</li></ul></li><li><strong>第二步骤</strong>：由于每次只能向下或向右移动一步，故我们可得关系式：<code>dp[i][j]</code>= min(<code>dp[i][j - 1]</code> + <code>dp[i - 1][j]</code>) +<code>a[i][j]</code></li><li><strong>第三步骤</strong>：很显然初始值还是第0行和第0列，由此我们可得初始值<code>dp[i][0]</code>= <code>dp[i - 1][0]</code> + <code>a[i][0]</code>,<code>dp[0][j]</code>= <code>dp[0][j - 1]</code> + <code>a[0][j]</code></li></ul><p>所以我们得到代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) dp[i][<span class="hljs-number">0</span>] = dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + a[i][<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++) dp[<span class="hljs-number">0</span>][j] = dp[<span class="hljs-number">0</span>][j - <span class="hljs-number">1</span>] + a[<span class="hljs-number">0</span>][j];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++)<br>            dp[i][j] = <span class="hljs-built_in">min</span>(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]) + a[i][j];<br>    <br>    <span class="hljs-keyword">return</span> dp[m - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例四编辑距离">5.5 案例四、编辑距离</h3><blockquote><p>问题描述：给定两个单词word1和word2，计算出将word1转换成word2所使用的最少操作数</p><p>你可以对一个单词进行如下三种操作：</p><p>插入一个字符，删除一个字符，替换一个字符</p></blockquote><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xl">示例：  <br>输入：word1 = <span class="hljs-string">&quot;horse&quot;</span>,word2 = <span class="hljs-string">&quot;ros&quot;</span>  <br>输出：<span class="hljs-number">3</span>  <br>解释：  <br><span class="hljs-function"><span class="hljs-title">horse</span> -&gt;</span> rorse(将<span class="hljs-string">&#x27;h&#x27;</span>替换成<span class="hljs-string">&#x27;r&#x27;</span>)  <br><span class="hljs-function"><span class="hljs-title">rorse</span> -&gt;</span> rose(删除<span class="hljs-string">&#x27;r&#x27;</span>)  <br><span class="hljs-function"><span class="hljs-title">rose</span> -&gt;</span> ros(删除<span class="hljs-string">&#x27;e&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><strong>第一步骤</strong>：<ul><li>我们不妨将第一个单词存入word1[N]数组中，将第二个单词存入word2[NJ]数组中</li><li>当第一个单词长度为i，第二个单词长度为j时，将单词1转换成单词2所需的最少操作数是<code>dp[i][j]</code></li></ul></li><li><strong>第二步骤</strong>：<ul><li>当word1[i] = word2[j]时，显然有<code>dp[i][j]</code> =<code>dp[i - 1][j - 1]</code>,即不用对他进行任何操作</li><li>当word1[i] ≠ word2[j]时，有三种操作分别如下：<ul><li>插入：如果对word1插入一个字符，则有<code>dp[i][j]</code> =<code>dp[i - 1][j]</code> + 1</li><li>删除：如果对word1删除一个字符，则有<code>dp[i][j]</code> =<code>dp[i][j - 1]</code> + 1;</li><li>替换：如果将word1一个字符替换成另一个字符，则有<code>dp[i][j]</code>= <code>dp[i - 1][j - 1]</code> + 1;</li><li>因此得到关系式：<code>dp[i][j]</code> =min(<code>dp[i - 1][j]</code>, <code>dp[i][j - 1]</code>,<code>dp[i - 1][j - 1]</code>) + 1</li></ul></li></ul></li><li><strong>第三步骤</strong>：由第二步骤得到的关系式可以看出我们需要的初始值是i= 0或是j = 0的情况。显然，i, j不同时等于0时，<code>dp[i][0]</code> =<code>dp[ i - 1][0]</code> + 1， <code>dp[0][j]</code> =<code>dp[0][j - 1]</code> + 1(进行删除操作)</li></ul><p>所以我们得到代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n1, <span class="hljs-type">int</span> n2)</span> </span>&#123;<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; i++) dp[i][<span class="hljs-number">0</span>] = dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>;<span class="hljs-comment">//对word1进行删除操作</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n2; j++) dp[<span class="hljs-number">0</span>][j] = dp[<span class="hljs-number">0</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<span class="hljs-comment">//对word2进行插入操作</span><br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; i++)  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n2; j++)<br>        &#123;<br>        <span class="hljs-keyword">if</span> (word1[i] == word2[j]) dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];    <br>            <span class="hljs-keyword">else</span> dp[i][j] = <span class="hljs-built_in">min</span>(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>], dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) + <span class="hljs-number">1</span>;<br>&#125;<br>    <br>    <span class="hljs-keyword">return</span> dp[n1][n2];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="贪心">6. 贪心</h2><h3 id="基本思想">6.1 基本思想</h3><p>贪心算法是一种在求解问题时，每一步都选择当前最优解，以期望最终得到全局最优解的算法思想。贪心算法的基本思想可以总结为“每一步都做出一个局部最优的选择，最终就能得到全局最优解”。</p><p>贪心算法通常包含以下关键步骤：<br />1.<strong>找到可选的子问题</strong>：首先，将原问题拆分成一系列可选的子问题或决策2.<strong>找到局部最优解</strong>：对每个子问题，找到一个局部最优解。这个局部最优解应该是一个贪心选择，即在当前状态下选择最优的方式3.<strong>合并子问题的解</strong>：将各个子问题的局部最优解合并起来，得到原问题的解4.<strong>检查解的有效性</strong>：最后，检查得到的解是否满足问题的约束和要求。如果满足，就认为得到了问题的解</p><h2 id="小tips">7. 小tips</h2><h3 id="命名规范">7.1 命名规范</h3><h4 id="变量">7.1.1 变量</h4><ul><li>小驼峰命名法</li><li>示例：<code>totalCount</code>, <code>userName</code></li></ul><h4 id="常量">7.1.2 常量</h4><ul><li>使用全大写字母，单词之间使用下划线分割</li><li>示例：<code>MAX_SIZE</code>, <code>PI_VALUE</code></li></ul><h4 id="函数和方法">7.1.3 函数和方法</h4><ul><li>小驼峰命名法</li><li>函数名应描述函数的动作或返回的结果</li><li>示例：<code>calculateTotal</code>, <code>getUserName</code></li></ul><h4 id="类和结构体">7.1.4 类和结构体</h4><ul><li>大驼峰命名法</li><li>示例：<code>UserAccount</code>, <code>DataManager</code></li></ul><h3 id="时间复杂度">7.2 时间复杂度</h3><figure><img src="/images/时间复杂度.jpg" alt="时间复杂度" /><figcaption aria-hidden="true">时间复杂度</figcaption></figure><ol type="1"><li><strong><span class="math inline">\(O(1)\)</span>和<spanclass="math inline">\(O(logn)\)</span></strong>:适用于非常大的输入规模（例如，<span class="math inline">\(n \leq10^{18}\)</span>），时间复杂度几乎可以忽略不计。<br /></li><li><strong><span class="math inline">\(O(n)\)</span></strong>:通常可以处理 <span class="math inline">\(n\)</span> 高达 <spanclass="math inline">\(10^7\)</span> 到 <spanclass="math inline">\(10^8\)</span> 的情况。<br /></li><li><strong><span class="math inline">\(O(n log n)\)</span></strong>:通常可以处理 <span class="math inline">\(n\)</span> 高达 <spanclass="math inline">\(10^5\)</span> 到 <spanclass="math inline">\(10^6\)</span> 的情况。<br /></li><li><strong><span class="math inline">\(O(n^2)\)</span></strong>:通常可以处理 <span class="math inline">\(n\)</span> 高达 <spanclass="math inline">\(10^3\)</span> 到 <spanclass="math inline">\(10^4\)</span> 的情况。<br /></li><li><strong><span class="math inline">\(O(n^3)\)</span></strong>:通常可以处理 <span class="math inline">\(n\)</span> 高达 <spanclass="math inline">\(10^2\)</span> 到 <spanclass="math inline">\(10^3\)</span> 的情况。</li><li><strong><span class="math inline">\(O(2^n)\)</span></strong>:通常只适用于 <span class="math inline">\(n \leq 20\)</span> 左右。</li><li><strong><span class="math inline">\(O(n!)\)</span></strong>:通常只适用于 <span class="math inline">\(n \leq 10\)</span> 左右。</li></ol><h3 id="代码风格">7.3 代码风格</h3><h4 id="缩进">7.3.1 缩进</h4><ul><li>使用一致的缩进风格(常用 4 个空格或 1 个 Tab)<br /></li><li>确保所有代码块都正确缩进</li></ul><h4 id="括号">7.3.2 括号</h4><ul><li>代码块的左括号 <code>&#123;</code> 通常放在行尾，右括号 <code>&#125;</code>单独占一行</li><li>示例：<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">if</span> (condition) &#123;<br>    <span class="hljs-comment">// code block</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// code block</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="空行">7.3.3 空行</h4><ul><li>使用空行分割逻辑上相关的代码块，增强代码可读性</li><li>示例:<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">initialize</span>();<br>    <br>    <span class="hljs-keyword">while</span> (running) &#123;<br>        <span class="hljs-built_in">processInput</span>();<br>        <span class="hljs-built_in">update</span>();<br>        <span class="hljs-built_in">render</span>();<br>    &#125;<br>    <br>    <span class="hljs-built_in">cleanup</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="空格">7.3.4 空格</h4><ul><li>在关键字和括号之间加空格<br /></li><li>在操作符两边加空格<br /></li><li>示例：<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (a[i] &gt; b[i]) &#123;<br>        result = a[i] + b[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="的两种使用方法">7.4 &amp;的两种使用方法</h3><p><code>&amp;：</code>一个是取地址用，另一个是引用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> a;<br><br><span class="hljs-type">int</span> *p = &amp;a;<span class="hljs-comment">//这就是取地址符，指针p指向对象a，p里面存着a的地址</span><br><br><span class="hljs-type">int</span> b;<br><br><span class="hljs-type">int</span> &amp;c = b;<span class="hljs-comment">//这是引用，定义一个引用就是说c是b的一个别名。c就是代表b。注意的是声明引用要初始化</span><br></code></pre></td></tr></table></figure><h3 id="整数无穷大">7.5 整数无穷大</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br></code></pre></td></tr></table></figure><p>0x3f3f3f3f的十进制是1061109567，是10<sup>9级别的，而一般场合下的数据都是小于10</sup>9的，所以它可以作为无穷大使用而不致出现数据大于无穷大的情形。</p><h3 id="c全局变量默认值">7.6 C++全局变量默认值</h3><p>在C++中，全局变量的初始化有特定的规则：</p><ul><li>对于整数类型（如<code>int</code>、<code>long</code>、<code>char</code> 等），默认值是<code>0</code>。<br /></li><li>对于浮点类型（如 <code>float</code>、<code>double</code>），默认值是<code>0.0</code>。<br /></li><li>对于指针类型，默认值是 <code>nullptr</code>（或<code>0</code>）。<br /></li><li>对于布尔类型（<code>bool</code>），默认值是<code>false</code>。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于洛谷113号题单对线性表的总结</title>
    <link href="/2024/06/03/113/"/>
    <url>/2024/06/03/113/</url>
    
    <content type="html"><![CDATA[<h2 id="p3156-询问学号">1 P3156 询问学号</h2><p><a href="https://www.luogu.com.cn/problem/P3156">传送门</a></p><p>没啥好说的，跳</p><h2 id="p3613-寄包柜">2 P3613 寄包柜</h2><p><a href="https://www.luogu.com.cn/problem/P3613">传送门</a></p><p><del>二维数组秒了</del></p><p>虽然这题的题目是寄包柜，但他真的是考察寄包柜吗？<del>是的</del></p><p>根据问题找答案，显然对于每个问题有三个元素:第i个寄包柜，第j个格子里的物品。如果用二维数组，显然10<sup>5</sup>* 10<sup>9</sup>会MLE，即使是动态数组也不太妥。</p><p>所以呢？最简单的方法当然是STL大法！</p><p>但有个问题，一个map元素只有两个值，比如map&lt;int,int&gt;b;但我们有三个元素。</p><p><del>aabandon</del></p><h3 id="方法1">2.1 方法1</h3><p>把第一个int改成long long，将第一个元素改成10<sup>5</sup>*i + j</p><h3 id="方法2">2.2 方法2</h3><p>map&lt;int,int&gt; b[MAX]; b[i][j] = k;</p><h2 id="p1449-后缀表达式">3 P1449 后缀表达式</h2><p><a href="https://www.luogu.com.cn/problem/P1449">传送门</a></p><p>很显然，这题需要用到栈。当输入不是数字时，将这个数字压入栈。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>(i &lt; postfix.<span class="hljs-built_in">length</span>() &amp;&amp; <span class="hljs-built_in">isdigit</span>(postfix[i]))<br>&#123;<br>   val = val * <span class="hljs-number">10</span> + (postfix[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<span class="hljs-comment">//这里注意，由于是从char型字符转化为int型字符，所以需要postfix[i] - &#x27;0&#x27;</span><br>   i++;<br>&#125;<br></code></pre></td></tr></table></figure><p>当输入不是数字时，就从栈中弹出两个数字进行运算，注意顺序：第一个弹出来的是val2，第二个弹出来的是val1，这对于减法和除法很重要</p><p>AC代码 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>string postfix;<br>stack&lt;<span class="hljs-type">int</span>&gt; s;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; postfix;<br>    <br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(i &lt; postfix.<span class="hljs-built_in">length</span>())<br>    &#123;<br>        <span class="hljs-keyword">if</span>(postfix[i] == <span class="hljs-string">&#x27;@&#x27;</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(postfix[i]))<br>        &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(postfix[i]))<br>            &#123;<br>                t = t * <span class="hljs-number">10</span> + (postfix[i++] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>            &#125;<br>            i++;<br>            s.<span class="hljs-built_in">push</span>(t);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> val2 = s.<span class="hljs-built_in">top</span>(); s.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-type">int</span> val1 = s.<span class="hljs-built_in">top</span>(); s.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-type">char</span> c = postfix[i];<br>            <span class="hljs-keyword">switch</span>(c)<br>            &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span> : s.<span class="hljs-built_in">push</span>(val1 + val2); <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span> : s.<span class="hljs-built_in">push</span>(val1 - val2); <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span> : s.<span class="hljs-built_in">push</span>(val1 * val2); <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span> : s.<span class="hljs-built_in">push</span>(val1 / val2); <span class="hljs-keyword">break</span>;<br>            &#125;<br>            i++;<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; s.<span class="hljs-built_in">top</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>------------------------手动分割线--------------------</p><p>单纯做这题其实并不难，但是我想到了一个问题：前缀表达式和前序遍历、中缀表达式和中序遍历、后续表达式和后序遍历之间是否有关系？</p><p>根据我自己的探索，发现其实前、中、后缀表达式可以说是前、中、后序遍历的一种特殊形式</p><p>举个例子，对于<code>3*(5-2)+7</code>这个表达式，可以转化为树。</p><p>很显然，我们最先算<code>3*(5-2)</code>与<code>7</code>的和，其次算<code>3</code>和<code>(5-2)</code>的乘积，要算<code>5-2</code>我们要先做<code>5</code>和<code>2</code>的减法，因此<code>*</code>的子节点是<code>3</code>和<code>-</code>。显然<code>-</code>的子节点是<code>5</code>和<code>2</code>。最后计算的是</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">    +</span><br>   / \<br><span class="hljs-bullet">  *</span>   7<br> / \<br>3   -<br>   / \<br>  5   2<br></code></pre></td></tr></table></figure><p>前缀表达式(前序遍历)： +*3-5.2.7</p><p>中缀表达式(中序遍历) 3*5-2+7</p><p>后缀表达式(后序遍历): 3.5.2.-*7+</p><h2 id="p1996">4 P1996</h2><p><a href="https://www.luogu.com.cn/problem/P1996">传送门</a></p><p>这题有两个方法：模拟法和递推法。模拟法更加直观，而递推法更加优雅</p><h3 id="模拟法">4.1 模拟法</h3><p>模拟法很直观，直接模拟整个出圈的过程，可以使用队列来解决。</p><p>将所有小朋友排好编号排成一列，在出列时报数。如果报数不是m的倍数则入列；否则直接出列，同时输出小朋友的编号</p><h4 id="ac代码">4.1.1 AC代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">joes</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        q.<span class="hljs-built_in">push</span>(i);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        t++;<br>        <span class="hljs-keyword">if</span>(t % m != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            q.<span class="hljs-built_in">push</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout &lt;&lt; q.<span class="hljs-built_in">front</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            q.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-built_in">joes</span>(n, m);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数学法约瑟夫环递推公式">4.2 数学法(约瑟夫环递推公式)</h3><p>约瑟夫环问题有一个著名的递推公式解法。设f(n,m)为n个人报数，每次数到m出列的最终胜利者，则有递推关系：</p><p>f(n,m) = (f(n - 1), m) mod n</p><p>从只有一个人开始推，直到n个人。基于此我们可以反向推导出每一步出圈的人的编号。</p><p>现在让我们进行递推公式</p><p>设f(n, m)为n个人报数，每次数到m的情况下，最后那个人的位置。</p><p>当只有一个人的时候，(即n=1)，很显然此人(编号'0')是最后的存活者</p><p>基于前一个数量的结果，但是因为我们现在有 <code>n</code>个人，所以我们要在这个位置基础上加上 <code>m</code>（因为每次都是数到<code>m</code> 的人出列），然后对当前人数 <code>n</code>取模，以确保我们得到的索引是有效的（即不会超出当前的人数范围）</p><p>举个例子</p><p>假设现在有<code>3</code>个人，每次数到<code>2</code>时出列，我们要找到最后存活的位置</p><ol type="1"><li>f(1,2) = 0;</li><li>f(2,2) = (f(1,2) + 2) % 2 = 0;</li><li>f(3,2) = (f(2,2) + 2) % 3 = 2;</li></ol><h4 id="ac代码-1">4.2.2 AC代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">josephus</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">people</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        people[i] = i + <span class="hljs-number">1</span>;<br>        <br>    vector&lt;<span class="hljs-type">int</span>&gt; result;<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(!people.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        index = (index + m - <span class="hljs-number">1</span>) % people.<span class="hljs-built_in">size</span>();<br>        result.<span class="hljs-built_in">push_back</span>(people[index]);<br>        people.<span class="hljs-built_in">erase</span>(people.<span class="hljs-built_in">begin</span>() + index);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; order = <span class="hljs-built_in">josephus</span>(n, m);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> person : order)<br>        cout &lt;&lt; person &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <br>    cout &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="p1160-队列安排">5 P1160 队列安排</h2><p><a href="https://www.luogu.com.cn/problem/P1160">传送门</a></p><p>此题有两个难点： 1. 如何插入同学？ 2. 如何删除同学？</p><h3 id="如何插入同学">5.1 如何插入同学？</h3><p>对于此类需要频繁插入的问题，数组显然不行，第一反应当然是链表。</p><p>我们可以把每个同学想象成互相握住肩膀，比如a同学的右边是b同学，a同学握着b同学的肩膀，b同学握住a同学的肩膀。如果想要在a同学的右边插入c同学，首先要让c同学握住a同学，之后c同学握住a同学握着的b同学，接着a同学右边的b同学握住a同学的手转为握住c同学，a同学握住b同学的手转为握住c同学。</p><p>这题可以使用结构体，但结构体比数组慢，所以我们可以用数组来模拟结构体。</p><p>但是要注意避免数据溢出，即第一个同学左边的同学是谁？所以对于同学的编号我们应该从1开始而不是从0开始</p><h3 id="如何删除同学">5.2 如何删除同学？</h3><p>当时第一反应是通过一个双重循环，即每输入一个需要删除的i号同学就搜索一遍链表，将i号同学改为0。输出时进行检查，如果是0则不输出。但显然时间复杂度则为O(N<sup>2</sup>)了。</p><p>正难则反，以退为进。我们不妨先用一个布尔数组标记所有要删除的学号，接着依次输出链表，当遇到要输出的学号被标记时则不输出，时间复杂度O(N)。</p><h3 id="ac代码-2">5.3 AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> l[N], r[N], res[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <br>    r[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, l[n + <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    r[<span class="hljs-number">1</span>] = n + <span class="hljs-number">1</span>, l[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> k, p;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;k, &amp;p);<br>        <br>        <span class="hljs-keyword">if</span>(p == <span class="hljs-number">0</span>)<br>        &#123;<br>            r[i] = k;<br>            l[i] = l[k];<br>            r[l[k]] = i;<br>            l[k] = i;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p == <span class="hljs-number">1</span>)<br>        &#123;<br>            l[i] = k;<br>            r[i] = r[k];<br>            l[r[k]] = i;<br>            r[k] = i;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> idx = <span class="hljs-number">1</span>, temp = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(r[temp] != n + <span class="hljs-number">1</span>)<br>    &#123;<br>        res[idx++] = r[temp];<br>        temp = r[temp];<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-type">bool</span> isDeleted[N] = &#123;<span class="hljs-literal">false</span>&#125;;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        isDeleted[x] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!isDeleted[res[i]])<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, res[i]);<br>    &#125;<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="p1540-机器翻译">6 P1540 机器翻译</h2><p><a href="https://www.luogu.com.cn/problem/P1540">传送门</a></p><p>解题思路：</p><ol type="1"><li>初始化<ul><li>使用一个固定大小的队列或列表来模拟内存</li><li>使用一个计算器来记录查词典的次数</li></ul></li><li>对于文章中的每个单词<ul><li>对于文章中每个单词首先要判断他是否在内存（这里用队列来模拟）中<ul><li>如果在，不需要做任何操作</li><li>如果不在<ul><li>如果内存未满，直接将单词添加到内存中</li><li>如果队列已满，移除最先进入内存的单词(直接pop())，然后将新单词添加到内存中</li><li>每次将单词加入内存时，增加查词典的计数</li></ul></li></ul></li></ul></li><li>输出结果<ul><li>文章处理完成后，输出查词典的总次数</li></ul></li></ol><p>AC代码 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;deque&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>deque&lt;<span class="hljs-type">int</span>&gt; words;<br><span class="hljs-type">int</span> m, n;<span class="hljs-comment">//m为内存容量，n为文章长度</span><br><span class="hljs-type">int</span> res;<br><span class="hljs-type">bool</span> isFound;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; m &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">while</span>(n -- )<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <br>        cin &gt;&gt; x;<br>        <br>        isFound = <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it = words.<span class="hljs-built_in">begin</span>(); it != words.<span class="hljs-built_in">end</span>(); it ++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span>(x == *it) <br>            &#123;<br>                isFound = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(!isFound)<br>        &#123;<br>            res ++ ;<br>            <br>            <span class="hljs-keyword">if</span>(words.<span class="hljs-built_in">size</span>() &gt;= m)<br>            &#123;<br>                words.<span class="hljs-built_in">pop_front</span>();<br>                words.<span class="hljs-built_in">push_back</span>(x);<br>            &#125;<span class="hljs-keyword">else</span> words.<span class="hljs-built_in">push_back</span>(x);<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>以上是本蒟蒻的代码，时间复杂度O(N<sup>2</sup>)。翻看题解，看到一位大佬的代码，居然将时间复杂度做到O(N)</p><p>用内存换时间，这是很划算的做法。 * 开辟两个数组a[MAX]、b[MAX] *用b[MAX]表示依次存入的单词,比如b[1] = 3, b[2] =5,表示第一个存入的单词是3，第二个存入的单词是5 *a[MAX]表示查询单词是否在区域中，如果在则为1，不在为0 *用左、右指针计算内存的长度</p><p>大佬的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,x,ans,l,r,a[<span class="hljs-number">1005</span>],b[<span class="hljs-number">1005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;m&gt;&gt;n;<br>    l=<span class="hljs-number">0</span>;r=<span class="hljs-number">0</span>;<span class="hljs-comment">//初始化两个指针</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>         <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<span class="hljs-comment">//边读入边做</span><br>         <span class="hljs-keyword">if</span> (a[x]==<span class="hljs-number">0</span>) <br>         &#123;<br>             ans++;<br>            r++;b[r]=x;a[x]=<span class="hljs-number">1</span>;<span class="hljs-comment">//因为每次遇到新单词都要做这些操作，不如搬到判断语句外做，这样程序更简洁</span><br>            <span class="hljs-keyword">if</span> (r&gt;m) &#123;l++;a[b[l]]=<span class="hljs-number">0</span>;&#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//千万不能忘记打这句，不然在比赛中会出错</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图(C++干货版)</title>
    <link href="/2024/05/28/graph/"/>
    <url>/2024/05/28/graph/</url>
    
    <content type="html"><![CDATA[<p>本章除了1:图的定义之外，其他内容很少讲概念，主要通过例题来感悟。因为我<del>懒</del>认为通过例题是一种更直观，也更实用的方法。</p><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="ie=edge"><title>Document</title><script src="https://cdn.jsdelivr.net/npm/mermaid@10.6.1/dist/mermaid.min.js"></script><script>        window.onload=mermaid.initialize({"theme": "forest"});    </script></head><h2 id="图的定义">1 图的定义</h2><p>图(graph)是由顶点的有穷非空集合V(G)和顶点之间边的集合E(G)组成，通常表示为:G=(V,E),其中G表示图，V是图G中顶点的个数，E是图G中边的集合</p><h2 id="图的基本概念和术语">2 图的基本概念和术语</h2><h3 id="有向图">2.1 有向图</h3><p>若E是有向边的有限集合时，则图G为有向图。弧是顶点的有序对，记为&lt;v,w&gt;。其中v，w是顶点，v为弧头，w是弧尾，&lt;v,w&gt;称为从v到w的弧，也称v邻接到w，或w邻接自v。</p><div class="mermaid"><pre><code class="hljs">    graph LR;        1--&gt;2;        2--&gt;1;        2--&gt;3;</code></pre></div><p>图中有向图可表示为 G<sub>1</sub>=(V<sub>1</sub>,E<sub>1</sub>);V<sub>1</sub>={1,2,3}E<sub>1</sub>={&lt;1,2&gt;,&lt;2,1&gt;,&lt;2,3&gt;}</p><h3 id="无向图">2.2 无向图</h3><p>若E是无向边(简称边)的有限集合时，则图G为无向图。边是顶点的无序对，记为(v,w)或(w,v)。其中v,w是顶点。可以说顶点v和顶点w互为邻接点。边(v,w)依附于顶点w和v，或者说边(v,w)和顶点v,w相关联</p><div class="mermaid"><pre><code class="hljs">    graph LR;        1 --- 2;        1 --- 3;        2 --- 3;</code></pre></div><p>图中所示无向图可表示为 G<sub>2</sub>=(V<sub>2</sub>,E<sub>2</sub>);V<sub>2</sub>={1, 2, 3}; E<sub>2</sub>={(1,2),(1,3),(2,3)};</p><h3 id="简单图">2.3 简单图</h3><p>一个图G若满足： 1. 不存在重复边 2. 不存在顶点到自身的边则其被称为简单图。</p><p><em>数据结构仅讨论简单图</em></p><h3 id="多重图">2.4 多重图</h3><p>若图G中某两个结点之间的边数多于一条，又运行顶点通过一条边与自己关联，则G为多重图。多重图的定义和简单图是相对的。</p><h3 id="完全图也称简单完全图">2.5 完全图(也称简单完全图)</h3><p>完全图是一个简单图，其中每对不同的顶点都恰好由一条边相连。这意味着在完全图中，任意两个不同的顶点之间都有直接的相连，没有任何的顶点是孤立的。</p><p>完全图的性质： * 顶点的数量：用(V)表示 * 边的数量：V<em>(V-1)/2 </em>度数：完全图中每个结点的度数都是(V-1)</p><h2 id="图的存储结构">3 图的存储结构</h2><h3 id="邻接矩阵">3.1 邻接矩阵</h3><p>相关概念不赘述，因为<del>懒</del>觉得没必要，直接上例子：</p><p>假设我们有三个顶点A、B、C，顶点之间的关系：</p><div class="mermaid"><pre><code class="hljs">graph LR;    A --&gt; B;    B --&gt; C;    C --&gt; A;</code></pre></div><p>为了用邻接矩阵表示这个图，首先定义一个二维数组，其中行和列的索引分别代表起点和终点。如果结点i有一条边指向j，则martix[i][j]被设置为1(无向图)或边的权重(如果是有权图)。如果没有直接连接，则设置为0。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> V = <span class="hljs-number">3</span>;<span class="hljs-comment">//顶点数</span><br><span class="hljs-type">int</span> adjMartix[V][V];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    adjMartix[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    adjMartix[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    adjMartix[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;邻接矩阵为：&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; V; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; V; j++)<br>            cout &lt;&lt; adjMartix[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="邻接表">3.2 邻接表</h3><p>邻接表是另一种常用的图的表示方法，适用于稀疏图，即边的数量远少于顶点的数量</p>假设我们有四个顶点:A,B,C,D。顶点之间的关系如下：<div class="mermaid"><pre><code class="hljs">graph LR;    A --- B;    A --- C;    B --- D;    C --- D;</code></pre></div><p>为了使用邻接表表示这个图，我们可以使用一个数组。其中每个元素是一个列表，列表中包含与该顶点相连的其他顶点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> V = <span class="hljs-number">4</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">adjList</span>(V);<span class="hljs-comment">//创建一个大小为V的向量</span><br><br>    adjList[<span class="hljs-number">0</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//A与B相连</span><br>    adjList[<span class="hljs-number">1</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//B与A相连</span><br>    adjlist[<span class="hljs-number">0</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>    adjList[<span class="hljs-number">2</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>    adjList[<span class="hljs-number">1</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>    adjList[<span class="hljs-number">3</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    adjList[<span class="hljs-number">2</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>    adjList[<span class="hljs-number">3</span>].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;邻接表为：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; V; i++)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;顶点&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;: &quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j : adjList[i])<br>        &#123;<br>            cout &lt;&lt; j &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="十字链表">3.3 十字链表</h3><p>十字链表适用于表示有向图的数据结构，特别适用于稀疏图。在十字链表中，每个顶点和每条边都用一个结点表示，这种结构特别适用于访问任何顶点的入边和出边</p><p>基本结构： * 顶点结点： - 包含顶点的信息 -两个指针，一个指向该顶点的第一条出边，另一个指向该顶点的第一条入边 *边结点： - 包含边的信息 -有四个指针，两个用于在顶点的出边或入边中前后链表，另外两个用于链接同一个顶点的下一条出边或入边</p><p><em>听不懂？没关系，看完例子再回过头来看</em></p><p>假设有一个有向图，包含A,B,C,D</p><p>考虑以下有向图：</p><div class="mermaid"><pre><code class="hljs">graph LR;    1 --&gt; 2;    1 --&gt; 3;    3 --&gt; 4;    2 --&gt; 4;</code></pre></div><p>使用十字链表构建有向图：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span><br>&#123;<br>    <span class="hljs-type">int</span> tail, head;<span class="hljs-comment">//边的尾和头</span><br>    ArcNode *tailLink, *headLink;<span class="hljs-comment">//指向下一个相同尾、头的边</span><br>    <span class="hljs-built_in">ArcNode</span>(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> h): <span class="hljs-built_in">tail</span>(t), <span class="hljs-built_in">head</span>(h), <span class="hljs-built_in">tailLink</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">headLink</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">VertexNode</span><br>&#123;<br>    <span class="hljs-type">int</span> vertex;<span class="hljs-comment">//顶点信息</span><br>    ArcNode *firstIn, *firstOut;<span class="hljs-comment">//指向该顶点的第一个入边和出边</span><br>    <span class="hljs-built_in">VertexNode</span>(<span class="hljs-type">int</span> v): <span class="hljs-built_in">vertex</span>(v), <span class="hljs-built_in">firstIn</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">firstOut</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><br>vector&lt;VertexNode*&gt; vertices;<br><br><span class="hljs-comment">// 添加顶点</span><br><span class="hljs-function">VertexNode* <span class="hljs-title">addVertex</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>    VertexNode* vertex = <span class="hljs-keyword">new</span> <span class="hljs-built_in">VertexNode</span>(id);<br>    vertices.<span class="hljs-built_in">push_back</span>(vertex);<br>    <span class="hljs-keyword">return</span> vertex;<br>&#125;<br><br><span class="hljs-comment">// 查找顶点</span><br><span class="hljs-function">VertexNode* <span class="hljs-title">findVertex</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : vertices) &#123;<br>        <span class="hljs-keyword">if</span> (v-&gt;id == id) <span class="hljs-keyword">return</span> v;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-comment">// 添加边</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> tail, <span class="hljs-type">int</span> head)</span> </span>&#123;<br>    VertexNode* tailVertex = <span class="hljs-built_in">findVertex</span>(tail);<br>    VertexNode* headVertex = <span class="hljs-built_in">findVertex</span>(head);<br>    <span class="hljs-keyword">if</span> (!tailVertex) tailVertex = <span class="hljs-built_in">addVertex</span>(tail);<br>    <span class="hljs-keyword">if</span> (!headVertex) headVertex = <span class="hljs-built_in">addVertex</span>(head);<br><br>    ArcNode* arc = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArcNode</span>(tail, head);<br>    arc-&gt;tailNext = tailVertex-&gt;firstOut;<br>    tailVertex-&gt;firstOut = arc;<br>    arc-&gt;headNext = headVertex-&gt;firstIn;<br>    headVertex-&gt;firstIn = arc;<br>&#125;<br><br><span class="hljs-comment">// 显示图的信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : vertices) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Vertex &quot;</span> &lt;&lt; v-&gt;id &lt;&lt; <span class="hljs-string">&quot;:\n&quot;</span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;  Outgoing: &quot;</span>;<br>        <span class="hljs-keyword">for</span> (ArcNode* arc = v-&gt;firstOut; arc; arc = arc-&gt;tailNext)<br>            std::cout &lt;&lt; arc-&gt;head &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;\n  Incoming: &quot;</span>;<br>        <span class="hljs-keyword">for</span> (ArcNode* arc = v-&gt;firstIn; arc; arc = arc-&gt;headNext)<br>            std::cout &lt;&lt; arc-&gt;tail &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 清理内存</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cleanup</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : vertices) &#123;<br>        <span class="hljs-keyword">while</span> (v-&gt;firstOut) &#123;<br>            ArcNode* tmp = v-&gt;firstOut;<br>            v-&gt;firstOut = tmp-&gt;tailNext;<br>            <span class="hljs-keyword">delete</span> tmp;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (v-&gt;firstIn) &#123;<br>            ArcNode* tmp = v-&gt;firstIn;<br>            v-&gt;firstIn = tmp-&gt;headNext;<br>            <span class="hljs-keyword">delete</span> tmp;<br>        &#125;<br>        <span class="hljs-keyword">delete</span> v;<br>    &#125;<br>    vertices.<span class="hljs-built_in">clear</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">addEdge</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">addEdge</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">addEdge</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">addEdge</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><br>    <span class="hljs-built_in">display</span>();<br><br>    <span class="hljs-built_in">cleanup</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>代码解释：</em> *我们定义了结构体<code>ArcNode</code>和<code>VertexNode</code>来表示图中的边和顶点* 使用全局的<code>vertices</code>向量来存储图中的所有顶点</p><p>例题</p><h3 id="题目描述">题目描述</h3><p>假设你是一家航空公司的数据分析师，你需要管理和分析航班与机场之间的关系。使用十字链表来存储航班信息。每个机场都可以有多个航班起飞和降落。设计一个系统，能够快速回答关于航班起降的查询。</p><h4 id="输入格式">输入格式</h4><ul><li>首先输入一个整数n，表示机场的数量</li><li>接着输入一个整数m，表示航班的数量</li><li>然后输入m行航班信息，每行包括起始机场和目的地机场编号</li></ul><h4 id="功能要求">功能要求</h4><ul><li>给定一个机场编号，查询从该机场起飞的所有航班的目的地机场。</li><li>给定一个机场编号，查询降落到该机场的所有航班的起始机场。</li><li>查询每个机场的出发航班数和到达航班数。</li></ul><h4 id="示例输入">示例输入</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">4</span>  <span class="hljs-comment">// 机场数量</span><br><span class="hljs-number">5</span>  <span class="hljs-comment">// 航班数量</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-number">4</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="示例输出">示例输出</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp">From airport <span class="hljs-number">1</span>:<br>  Departures to: <span class="hljs-number">2</span>, <span class="hljs-number">3</span><br>  Arrivals from: <span class="hljs-number">4</span><br>Departure count: <span class="hljs-number">2</span>, Arrival count: <span class="hljs-number">1</span><br><br>From airport <span class="hljs-number">2</span>:<br>  Departures to: <span class="hljs-number">3</span><br>  Arrivals from: <span class="hljs-number">1</span><br>Departure count: <span class="hljs-number">1</span>, Arrival count: <span class="hljs-number">1</span><br><br>From airport <span class="hljs-number">3</span>:<br>  Departures to: <span class="hljs-number">4</span><br>  Arrivals from: <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br>Departure count: <span class="hljs-number">1</span>, Arrival count: <span class="hljs-number">2</span><br><br>From airport <span class="hljs-number">4</span>:<br>  Departures to: <span class="hljs-number">1</span><br>  Arrivals from: <span class="hljs-number">3</span><br>Departure count: <span class="hljs-number">1</span>, Arrival count: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="代码示例">代码示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span><br>&#123;<br>    <span class="hljs-type">int</span> tail, head;<br>    ArcNode *tailnext, *headnext;<br>    <span class="hljs-built_in">ArcNode</span>(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> h) : <span class="hljs-built_in">tail</span>(t), <span class="hljs-built_in">head</span>(h), <span class="hljs-built_in">tailNext</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">headNext</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">VertexNode</span><br>&#123;<br>    <span class="hljs-type">int</span> id;<br>    ArcNode *firstOut, *firstIn;<br>    <span class="hljs-built_in">VertexNode</span>(<span class="hljs-type">int</span> v) : <span class="hljs-built_in">id</span>(v), <span class="hljs-built_in">firstOut</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">firstIn</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><br>map&lt;<span class="hljs-type">int</span>, VertexNode*&gt; airports;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addFlight</span><span class="hljs-params">(<span class="hljs-type">int</span> tail, <span class="hljs-type">int</span> head)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(airports.<span class="hljs-built_in">find</span>(tail) == airports.<span class="hljs-built_in">end</span>())<br>    &#123;<br>        airports[tail] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">VertexNode</span>(tail);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(airports.<span class="hljs-built_in">find</span>(head) == airports.<span class="hljs-built_in">end</span>())<br>    &#123;<br>        airports[head] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">VertexNode</span>(head);<br>    &#125;<br><br>    ArcNode* newArc = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArcNode</span>(tail, head);<br>    newArc-&gt;tailNext = airports[tail]-&gt;firstOut;<br>    airports[tail]-&gt;firstOut = newArc;<br>    newArc-&gt;headNext = airports[head]-&gt;firstIn;<br>    airports[head]-&gt;firstIn = newArc;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;v : airports)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;From airport&quot;</span> &lt;&lt; v.first &lt;&lt; <span class="hljs-string">&quot;:\n Departures to: &quot;</span>;<br>        <span class="hljs-keyword">for</span>(ArcNode* arc = v.second-&gt;firstOut; arc != <span class="hljs-literal">nullptr</span>; arc = arc-&gt;tailNext)<br>            cout &lt;&lt; arc-&gt;head &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;  Arrivals from: &quot;</span>;<br>        <span class="hljs-keyword">for</span>(ArcNode* arc = v.second-&gt;firstIn; arc != <span class="hljs-literal">nullptr</span>; arc = arc-&gt;headNext)<br>            cout &lt;&lt; arc-&gt;tail &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-type">int</span>  outCount = <span class="hljs-number">0</span>, inCount = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(ArcNode* arc = v.second-&gt;firstOut; arc; arc = arc-&gt;tailNext) outCount++;<br>        <span class="hljs-keyword">for</span>(ArcNode* arc = v.second-&gt;firstIn; arc; arc = arc-&gt;headNext) inCount++;<br>        cout &lt;&lt; <span class="hljs-string">&quot;\nDeparture count:&quot;</span> &lt;&lt; outCount &lt;&lt; <span class="hljs-string">&quot;, Arrival count: &quot;</span> &lt;&lt; inCount &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, u, v;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        cin &gt;&gt; u &gt;&gt; v;<br>        <span class="hljs-built_in">addFlight</span>(u, v);<br>    &#125;<br><br>    <span class="hljs-built_in">display</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS(够用版)</title>
    <link href="/2024/05/27/css/"/>
    <url>/2024/05/27/css/</url>
    
    <content type="html"><![CDATA[<h2 id="css简介">1 CSS简介</h2><h3 id="什么是css">1.1 什么是CSS？</h3><p><code>CSS</code>: Cascading Style Sheet</p><p><em>为什么被命名为CSS？</em><em>级联（Cascading）：CSS的“级联”特性意味着当多个样式应用于同一个HTML元素时，这些样式会根据它们的来源（例如用户样式表、作者样式表或浏览器默认样式）和优先级（例如内联样式、ID选择器、类选择器等）来决定如何组合或覆盖。这种机制允许开发者在多个地方定义样式，而浏览器会根据一定的规则来确定最终应用于元素的样式。</em><em>样式表（StyleSheets）：CSS使用“样式表”的方式来组织样式信息。一个样式表包含了一组规则，每个规则都由一个或多个选择器和一条或多条声明组成。选择器用于指定哪些HTML元素应用该规则，而声明则指定了这些元素应该如何被渲染（例如颜色、字体、布局等）。</em></p><h3 id="css的作用">1.2 CSS的作用</h3><p>页面外观美化</p><p>布局和定位</p><h2 id="基本用法">2 基本用法</h2><h3 id="css语法">2.1 CSS语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        选择器&#123;</span><br><span class="language-css">            属性名:属性值;</span><br><span class="language-css">            属性名:属性值;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>选择器：要修饰的对象</li><li>属性名：修饰对象的属性</li><li>属性值：样式的取值</li></ul><p><em>没听懂？没关系，接着往后看就行</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>:<span class="hljs-number">#cccccc</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">h2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>:blue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>CSS从入门到入土<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="css应用方式">2.2 CSS应用方式</h3><ul><li>内部样式(internal styles)</li><li>行内样式(inline styles)</li><li>外部样式(external styles)</li></ul><h4 id="内部样式">2.2.1 内部样式</h4><p>也称为内嵌样式，在页面头部通过style标签定义</p><p>对当前页面所有符合样式选择器的标签都起作用</p><h4 id="行内样式">2.2.2 行内样式</h4><p>也称为嵌入样式，使用HTML标签的style属性定义</p><p>只对设置style属性的标签起作用</p><h3 id="外部样式">2.2.3 外部样式</h3><p>使用单独的<code>.css</code>文件定义，然后在页面中使用<code>link标签</code>或<code>@import指令</code>引入</p><ul><li>使用<code>link标签</code>链接外部样式文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;path/to/your/example.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><em>小提示：type可省略</em></p><ul><li><code>@import</code>指令导入外部样式文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;path/to/your/example.css&quot;</span>;</span><br><span class="language-css">    <span class="hljs-keyword">@import</span> url(path/to/your/example.css);</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="选择器">3 选择器</h2><h3 id="基础选择器">3.1 基础选择器</h3><h4 id="标签选择器">3.1.1 标签选择器</h4><p>也称为元素选择器，使用HTML标签作为选择器的名称</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">p &#123;  <br>    color: red;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="类选择器">3.1.2 类选择器</h4><p>使用自定义的名称，以<code>.</code>号作为前缀，然后通过HTML标签的class属性调用类选择器</p><p><em>注意</em><br></p><ul><li>调用时不能添加<code>.</code>号；</li><li>同时调用多个类选择器时，用<code>空格</code>分割</li><li>类选择器名称不能以<code>数字</code>开头</li></ul><h4 id="id选择器">3.1.3 ID选择器</h4><p>使用自定义的名称，以<code>#</code>作为前缀，然后通过HTML标签的id属性进行名称匹配</p><p>ID属性是一对一的关系</p><h3 id="复杂选择器">3.2 复杂选择器</h3><h4 id="复合选择器">3.2.1 复合选择器</h4><p>标签选择器和类选择器、标签选择器和ID选择器一起使用</p><p>必须同时满足两个条件才能应用样式</p><ul><li>交集选择器<ul><li>语法：E.F</li><li>例子：<code>p.intro</code>将选择所有既是<code>&lt;p&gt;</code>元素又拥有<code>intro</code>类的元素</li></ul></li><li>并集选择器<ul><li>语法：E,f</li><li>例子：<code>h1,h2&#123;color:blue;&#125;</code>将选择所有的<code>&lt;h1&gt;</code>和<code>&lt;h2&gt;</code>元素，并将他们的颜色设为蓝色</li></ul></li></ul><h4 id="组合选择器">3.2.2 组合选择器</h4><p>组合选择器描述了元素之间的关系，如父子关系、兄弟关系等，允许开发者更精准的选择元素</p><ul><li>后代选择器<ul><li>符号：空格</li><li>例子:<code>div p</code>将选择所有<code>&lt;div&gt;</code>元素内部的<code>&lt;p&gt;</code>元素</li></ul></li><li>子元素选择器<ul><li>符号： &gt;</li><li>例子：<code>ul&gt;li</code>将选择所有<code>ul</code>元素内部的直接子元素<code>li</code></li></ul></li><li>相邻兄弟选择器<ul><li>符号：<code>+</code></li><li>例子：<code>h2+p</code>将选择紧接在<code>&lt;h2&gt;</code>元素后面的<code>&lt;p&gt;</code>元素</li></ul></li><li>通用兄弟选择器<ul><li>符号：<code>~</code></li><li>例子：<code>h2~p</code>将选择所有与<code>&lt;h2&gt;</code>元素在同一层级的<code>&lt;p&gt;</code>元素</li></ul></li></ul><h4 id="嵌套组合器">3.2.3 嵌套组合器</h4><p>嵌套组合器允许在一个选择器的内部定义另一个选择器，以形成嵌套的样式规则</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/* 1.标签选择器和类选择器合起来使用----复合选择器 */</span></span><br><span class="language-css"><span class="hljs-selector-tag">h1</span><span class="hljs-selector-class">.aaa</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 1.标签选择器和ID选择器合起来使用----复合选择器 */</span></span><br><span class="language-css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-id">#bbb</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:blue;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 2.组合选择器 */</span></span><br><span class="language-css"><span class="hljs-selector-tag">h1</span>,<span class="hljs-selector-tag">p</span>,<span class="hljs-selector-tag">div</span>,<span class="hljs-selector-tag">span</span>,<span class="hljs-selector-class">.ccc</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>:<span class="hljs-number">30px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">background</span>:violet;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.ccc</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-weight</span>:bold;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.first</span> + <span class="hljs-selector-class">.second</span> &#123;  </span><br><span class="language-css">    <span class="hljs-attribute">color</span>: red;  </span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.first</span> ~ <span class="hljs-selector-tag">p</span> &#123;  </span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: lightblue;  </span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 3.嵌套选择器 */</span></span><br><span class="language-css"><span class="hljs-comment">/* div p&#123;</span></span><br><span class="hljs-comment"><span class="language-css">color:green;</span></span><br><span class="hljs-comment"><span class="language-css">text-decoration:underline;</span></span><br><span class="hljs-comment"><span class="language-css">&#125; */</span></span><br><span class="language-css"><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:green;</span><br><span class="language-css"><span class="hljs-attribute">text-decoration</span>:underline;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">h3</span><span class="hljs-selector-class">.ddd</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需求：只想修饰class属性为aaa的h1标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aaa&quot;</span>&gt;</span>welcome<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aaa&quot;</span>&gt;</span>css<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 我要修饰ID属性为bbb的p标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bbb&quot;</span>&gt;</span>world&lt;/p &gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>html<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bbb&quot;</span>&gt;</span>主讲：叽叽<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 给h1、p、div、span标签中的内容设置字号为30px --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>WEB开发<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ccc&quot;</span>&gt;</span>JAVA开发<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需求：修饰div内部的p标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>div内部的p标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>div内部的h3标签<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>div内部的h3内部的p标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需求：修饰div内部的class为ddd的标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>div内部的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ddd&quot;</span>&gt;</span>div内部的h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ddd&quot;</span>&gt;</span>PPPP<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ddd&quot;</span>&gt;</span>h3h3h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需求：修饰div内部class为first的标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;first&quot;</span>&gt;</span>我是第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;second&quot;</span>&gt;</span>我是相邻的段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;third&quot;</span>&gt;</span>我不是相邻的段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="伪类选择器">伪类选择器</h4><p>根据不同的状态显示不同的样式，一般用于标签</p><p>四种状态： * <code>:link</code>：未访问的链接 *<code>:visited</code>：已访问的链接 *<code>:hover</code>：鼠标悬浮在链接上，即移动在链接上 *<code>:active</code>：选定的链接，被激活</p><p><em>注意：默认超链接为：蓝色，不划线</em></p><h3 id="选择器优先级">3.3 选择器优先级</h3><h4 id="优先级">3.3.1 优先级</h4><p>行内样式 &gt; ID选择器 &gt; class选择器 &gt; 标签选择器</p><p><em>原因：首先加载标签选择器，再加载类选择器，然后加载ID选择器，最后加载行内样式</em><em>后加载会覆盖先加载的同名样式</em></p><h4 id="内外部样式加载顺序">3.3.2 内外部样式加载顺序</h4><p>就近原则<del>英语的DNA动了</del></p><p><em>原因和上诉一样，在同优先级的前提下，后加载的会覆盖先加载的同名样式，所以离得越近越优先</em></p><h4 id="important">3.3.3 !important</h4><p>可以使用<code>!important</code>使某个样式有最高的优先级</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red !important;&quot;</span>&gt;</span>这段文字是红色的，因为使用了 !important。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="常见css属性">4 常见CSS属性</h2><h3 id="字体属性">4.1 字体属性</h3><p>设置字体相关的样式</p><table><thead><tr><th style="text-align: left;">属性</th><th style="text-align: left;">含义</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr><td style="text-align: left;">font-size</td><td style="text-align: left;">大小、尺寸</td><td style="text-align: left;">可以使用多种单位</td></tr><tr><td style="text-align: left;">font-weight</td><td style="text-align: left;">粗细</td><td style="text-align: left;">取值:normal,bold,自定义</td></tr><tr><td style="text-align: left;">font-family</td><td style="text-align: left;">字体</td><td style="text-align: left;">系统中要安装指定的字体</td></tr><tr><td style="text-align: left;">font-style</td><td style="text-align: left;">样式</td><td style="text-align: left;">取值：normal,italic</td></tr><tr><td style="text-align: left;">font</td><td style="text-align: left;">简写</td><td style="text-align: left;"></td></tr></tbody></table><p>简写属性：font:font-style|font-weight|font-size|font-family必须按照次顺序书写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css"><span class="hljs-comment">/*font-size: 20px;*/</span></span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">80%</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.hello</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">62.5%</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css"><span class="hljs-comment">/*font-size: 30px;</span></span><br><span class="hljs-comment"><span class="language-css">font-weight: bold;</span></span><br><span class="hljs-comment"><span class="language-css">font-family: 华文行楷,宋体,黑体;</span></span><br><span class="hljs-comment"><span class="language-css">font-style: italic;*/</span></span><br><span class="language-css"><span class="hljs-attribute">font</span>: italic bold <span class="hljs-number">30px</span> 微软雅黑;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>CSS从入门到入土<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>我的DIV<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>CSS从入门到精通<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>Dumpling handsome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>嘿嘿<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="文本属性">4.2 文本属性</h3><table><thead><tr><th style="text-align: left;">属性</th><th style="text-align: left;">含义</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr><td style="text-align: left;">color</td><td style="text-align: left;">颜色</td><td style="text-align: left;"></td></tr><tr><td style="text-align: left;">line-height</td><td style="text-align: left;">行高</td><td style="text-align: left;">行之间的高度</td></tr><tr><td style="text-align: left;">text-align</td><td style="text-align: left;">水平对齐方式</td><td style="text-align: left;">取值：left、center、right</td></tr><tr><td style="text-align: left;">vertical-align</td><td style="text-align: left;">垂直对齐方式</td><td style="text-align: left;">取值：top、middle、bottom</td></tr><tr><td style="text-align: left;">text-indent</td><td style="text-align: left;">首行缩进</td><td style="text-align: left;"></td></tr><tr><td style="text-align: left;">text-decoration</td><td style="text-align: left;">文本修饰</td><tdstyle="text-align: left;">取值：underline、overline、line-through</td></tr><tr><td style="text-align: left;">text-transform</td><td style="text-align: left;">字母大小写转换</td><tdstyle="text-align: left;">取值：lowercase、uppercase、capitalize(首字母大写)</td></tr><tr><td style="text-align: left;">letter-spacing</td><td style="text-align: left;">字符间距</td><td style="text-align: left;"></td></tr><tr><td style="text-align: left;">word-spacing</td><td style="text-align: left;">单词间距</td><td style="text-align: left;">只对英文有效</td></tr><tr><td style="text-align: left;">white-space</td><td style="text-align: left;">空白的处理方法</td><tdstyle="text-align: left;">文本超出后是否换行，取值：nowrap(截断)</td></tr></tbody></table><h3 id="背景属性">4.3 背景属性</h3><table><thead><tr><th style="text-align: left;">属性</th><th style="text-align: left;">含义</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr><td style="text-align: left;">background-color</td><td style="text-align: left;">背景颜色</td><td style="text-align: left;">取值：transparent(透明)</td></tr><tr><td style="text-align: left;">background-image</td><td style="text-align: left;">背景图片</td><td style="text-align: left;">必须用url()方式指定图片的路径</td></tr><tr><td style="text-align: left;">background-repeat</td><td style="text-align: left;">背景图片的重复方式</td><td style="text-align: left;"></td></tr><tr><td style="text-align: left;">background-position</td><td style="text-align: left;">背景图片的显示位置</td><tdstyle="text-align: left;">取值：top、bottom、left、right、center、坐标(左上角(0,0)为坐标，向右为x正方向，向下为y正方向)</td></tr><tr><td style="text-align: left;">background-attachment</td><td style="text-align: left;">背景图片是否跟随滚动</td><td style="text-align: left;">取值：scroll(默认)、fixed</td></tr><tr><td style="text-align: left;">background</td><td style="text-align: left;">简写</td><td style="text-align: left;"></td></tr></tbody></table><p>简写属性：background:background-color|background-image|background-repeat|background-position</p><p>以空格隔开，书写顺序没有要求</p><h3 id="列表属性">4.4 列表属性</h3><table><thead><tr><th style="text-align: left;">属性</th><th style="text-align: left;">含义</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr><td style="text-align: left;">list-style-type</td><td style="text-align: left;">设置列表前的标记</td><tdstyle="text-align: left;">取值:none、disc、circle、square、decimal</td></tr><tr><td style="text-align: left;">list-style-image</td><td style="text-align: left;">将图片作为列表前的标记</td><td style="text-align: left;"></td></tr><tr><td style="text-align: left;">list-style-position</td><td style="text-align: left;">设置标记的位置</td><td style="text-align: left;">取值：outside(默认)、inside</td></tr><tr><td style="text-align: left;">list-style</td><td style="text-align: left;">简写</td><td style="text-align: left;"></td></tr></tbody></table><p>简写属性：list-style:list-style-type|list-style-image|list-style-position</p><p>书写顺序没有要求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/* li&#123;</span></span><br><span class="hljs-comment"><span class="language-css">list-style-type:decimal;</span></span><br><span class="hljs-comment"><span class="language-css">&#125; */</span></span><br><span class="language-css"><span class="hljs-selector-class">.first</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style-type</span>:circle;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.second</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">../images/male.gif</span>);</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.third</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style-type</span>:circle;</span><br><span class="language-css"><span class="hljs-attribute">list-style-position</span>:inside;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.fourth</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style</span>:circle <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/female.gif</span>)inside;</span><br><span class="language-css"><span class="hljs-comment">/* list-style:none; */</span></span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.nav</span>&#123;</span><br><span class="language-css"><span class="hljs-comment">/* list-style:none;</span></span><br><span class="hljs-comment"><span class="language-css">float:left; */</span></span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style</span>:none;</span><br><span class="language-css"><span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;</span><br><span class="language-css"><span class="hljs-attribute">width</span>:<span class="hljs-number">70px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;first&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;second&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;third&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fourth&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>新闻<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>小说<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>艾瑞蒂<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>政治<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学习<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="表格属性">4.5 表格属性</h3><p>border-collapse:表格中相邻的边框是否合并(折叠)为单一边框</p><p>取值：separated(默认) collapse</p><h2 id="盒子模型">5 盒子模型</h2><h3 id="简介">5.1 简介</h3><p>盒子模型是网页布局的基础，将页面中所有元素都看作是一个盒子，盒子都包含以下几个属性：</p><ul><li>width 宽度</li><li>height 高度</li><li>border 边框</li><li>padding 内边距</li><li>margin 外边距</li></ul><h3 id="盒子模型-1">5.2 盒子模型</h3><h4 id="border">5.2.1 border</h4><p>表示盒子的边框</p><p>分为四个方向： * 上top、右right、下bottom、左left *border-top、border-right、border-bottom、border-left</p><p>每个边框包含三种样式</p><pre><code class="hljs">* border-top-color,border-top-width,border-top-style* border-right-color,border-right-width,border-right-style* border-left-color,border-left-width,border-left-style* border-bottom-color,border-bottom-width,border-bottom-style</code></pre><p>style的取值： * solid 实线 * dashed 虚线 * dotted 点线 * double 双线* inset 内嵌的3D线 * outset 外嵌的3D线</p><p>简写，三种方式</p><pre><code class="hljs">* 按方向简写：    - border-top    - border-right    - border-bottom    - border-left    - 书写顺序：border-顺序:width style coloe* 按样式简写    - border-color    - border-width    - border-style    - 书写顺序：border-样式:top right bottom left    - 必须按顺时针方向书写* 终极简写：    如果四个边框样式完全相同，border:width style color</code></pre><h4 id="padding">5.2.2 padding</h4><p>表示盒子的内边距，即内容与边框之间的距离</p><p>同样也分为四个方向，也可以简写(按顺时针方向，默认上下一样，左右一样)</p><p>注意：如果上下冲突，则以上为准，左右冲突则以左为准</p><h4 id="margin">5.2.3 margin</h4><p>表示盒子的外边距，即盒子与盒子之间的距离</p><p>同样也分为四个方向，也可以简写(按顺时针方向，默认上下一样，左右一样)</p><h3 id="其他">5.3 其他</h3><h4 id="元素所占空间">5.3.1 元素所占空间</h4><p>页面中的元素实际所占的空间 *宽度＝width+左右padding＋左右border+左右margin *高度＝height+上下padding＋上下border+上下margin</p><h4 id="盒子属性默认值">5.3.2 盒子属性默认值</h4><p>不同标签的盒子属性默认值可能不同，需要自己设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">body,ul,ol,dl,li&#123;<br>    margin:0;<br>    padding:0;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="外边距的合并">5.3.3 外边距的合并</h4><p>也称为外边距的折叠，指的是两个块级元素垂直外边距相遇时它们将合并为一个外边距</p><p>两种情况： *当一个元素出现在另一个元素上面时，第一个元素的下边距与第二个元素的上边距会发生合并*当一个元素包含在另一个元素中时，并且没有内边距或边框把外边距分隔开时，两个元素的上外边距会发生合并</p><p><em>好处：更加美观</em></p><h2 id="定位方法">6 定位方法</h2><h3 id="简介-1">6.1 简介</h3><p>通过position属性实现对元素的定位，有四种定位方法</p><p>常用取值：</p><table><thead><tr><th style="text-align: left;">取值</th><th style="text-align: left;">含义</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr><td style="text-align: left;">static</td><td style="text-align: left;">默认值</td><td style="text-align: left;">按照常规文档流进行显示</td></tr><tr><td style="text-align: left;">relative</td><td style="text-align: left;">相对定位</td><td style="text-align: left;">相对于标签原来的位置进行的定位</td></tr><tr><td style="text-align: left;">absolute</td><td style="text-align: left;">绝对定位</td><tdstyle="text-align: left;">相对于第一个非static定位的父标签的定位</td></tr><tr><td style="text-align: left;">fixed</td><td style="text-align: left;">固定定位</td><td style="text-align: left;">相对于浏览器窗口进行定位</td></tr></tbody></table><p>说到这里，你可能没听懂。所以我尝试用更通俗的语言再说一遍：</p><ul><li>static<ul><li>这是元素默认的状态。元素会按照从上到下、从左到右的顺序排列在页面中。</li><li>不能使用top、right、bottom、left这些属性来移动元素的位置。</li></ul></li><li>relative<ul><li>元素仍然会占据原本的位置，但你可以通过top、right、bottom、left这些属性让它在自己的位置上“移动”一点。</li><li>元素原本的位置依然保留，占据空间不变，只是视觉上会稍微移动。</li></ul></li><li>fixed<ul><li>元素会固定在浏览器窗口的某个位置，不管你怎么滚动页面，它都不会动。</li><li>用来制作那些始终显示在某个位置的元素，比如导航栏或广告。</li></ul></li><li>absolute<ul><li>元素会相对于它的父元素进行定位，而这个父元素必须是用相对定位（relative）或绝对定位（absolute）来设置的。如果没有这样的父元素，它就会相对于整个页面定位。</li><li>元素会脱离正常的排列顺序，你可以完全控制它在页面中的位置。</li></ul></li></ul><p><em>举个例子</em> 想象你在桌子上拜访物品 *static：所有物品都按固定的顺序摆放，不能随意移动。 *relative：你可以在桌子上的原位稍微移动某个物品，但它还是在桌子上那个位置。*fixed：你把物体用绳子从天花板吊着，不管你移动桌子上的其他物品或桌子，它都不会动。*absolute：你可以把物品放在桌子上的任何位置，不考虑它原本的摆放顺序，就像你可以在桌子上任意摆放东西。</p><p>设置定位方式后，还要设置定位属性：top,bottom,left,right</p><h3 id="z-index">6.2 z-index</h3><p>设置元素定位方式后，元素会浮在页面上方，此时可以通过z-index属性设置优先级，控制元素的堆叠排序</p><p>取值为数字，值越大优先级越高，默认为auto(大多数浏览器默认为0)</p><p>注意：只能给非static定位的元素设置z-index属性</p><h2 id="其他css属性">7 其他css属性</h2><h3 id="浮动和清除">7.1 浮动和清除</h3><h4 id="浮动属性">7.1.1 浮动属性</h4><p>通过float属性来实现元素的浮动，可以让块级元素脱离常规的文档流，向左或向右移动，在同一行显示</p><p>如果一行显示不下，则会换行</p><p>常用取值： * left * right * none</p><h4 id="清除属性">7.1.2 清除属性</h4><p>通过clear属性来实现清除，设置元素的哪一侧不允许有浮动元素</p><p>常用取值： * left * right * both * none(默认取值)</p><h3 id="元素的显示和隐藏">7.2 元素的显示和隐藏</h3><h4 id="display">7.2.1 display</h4><p>通过display属性设置元素是否显示，以及是否独占一行</p><p>常用取值：</p><table><thead><tr><th style="text-align: left;">取值</th><th style="text-align: left;">含义</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr><td style="text-align: left;">none</td><td style="text-align: left;">不显示</td><td style="text-align: left;"></td></tr><tr><td style="text-align: left;">inline</td><td style="text-align: left;">显示为内联元素，行级元素的默认值</td><td style="text-align: left;">将块级元素变为行级元素，不在独占一行</td></tr><tr><td style="text-align: left;">block</td><td style="text-align: left;">显示为块级元素，块级元素的默认值</td><td style="text-align: left;">将行级元素变为块级元素，独占一行</td></tr><tr><td style="text-align: left;">inline-block</td><td style="text-align: left;">显示为内联元素，但是可以设置宽和高</td><td style="text-align: left;">在inline基础上允许设置宽度和高度</td></tr></tbody></table><h4 id="visibility">7.2.2 visibility</h4><p>常用属性</p><table><thead><tr><th style="text-align: left;">取值</th><th style="text-align: left;">含义</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr><td style="text-align: left;">visibility</td><td style="text-align: left;">显示</td><td style="text-align: left;"></td></tr><tr><td style="text-align: left;">hidden</td><td style="text-align: left;">隐藏</td><td style="text-align: left;"></td></tr></tbody></table><h4 id="区别">7.2.3 区别</h4><pre><code class="hljs">* display隐藏时不再占据页面中的空间，后面的元素会占据其位置* visibility隐藏时会占据页面中的空间，位置还保留在页面中，知识不显示</code></pre><h3 id="轮廓">7.3 轮廓</h3><h4 id="简介-2">7.3.1 简介</h4><p>轮廓outline，用于在元素周围绘制一个轮廓，位于border外围，可以突出显示元素</p><h4 id="基本用法-1">7.3.2 基本用法</h4><p>常用属性： * outline-width：轮廓宽度 * outline-color：轮廓颜色 *outline-style：轮廓样式 * outline 简写</p><p>在浏览器中，当鼠标单击或者使用<kbd>TAB<kbd>键获得焦点时，该元素会有一个轮廓outline</p><ul><li>优点：可以提高使用表单的用户体验</li><li>缺点：有时影响美观</li></ul><h2 id="页面布局">8 页面布局</h2><h3 id="简介-3">8.1 简介</h3><p>常见布局页面：<br> * 表格布局<br> * div布局</p><h3 id="表格布局">8.2 表格布局</h3><h4 id="简介-4">8.2.1 简介</h4><p>不适用于复杂布局，仅用于简单、有规则的结构</p><p>定位相对准确，与浏览器基本无关，适用于简单分割</p><h4 id="用法">8.2.2 用法</h4><p>table常用样式的属性</p><pre><code class="hljs">* border在表格外围设置边框* border-spacing设置单元格之间的距离(相当于table标签中的cellspacing属性，即间距)* border-collapse表格中相邻边框是否合并，取值：separate，collapse</code></pre><h3 id="div布局">8.3 div布局</h3><p>定位绝对准确，使用灵活，适用于复杂的布局方式</p><h4 id="简单布局">8.3.1 简单布局</h4><p>两种形式：</p><pre><code class="hljs">* 1-1-1布局</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style1.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>header<br><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>main<br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>footer<br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">* 1-2 / 3-1布局</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style2.css&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>herder<br><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>main<br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span><br>right aside<br><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>footer<br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="圣杯布局">8.3.2 圣杯布局</h4><p>页面结构，两边的边栏宽度固定，中间主体在一定范围内可自适应，并且主体优先被加载</p><p>一般防止页面缩放影响浏览，都会为页面设置一个最小宽度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style4.css&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span> <br>            header <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>main<br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span> <br>left<br><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span> <br>right<br><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span> <br>            footer <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="双飞翼布局">8.3.3 双飞翼布局</h4><p>源自淘宝的UED(用户体验设计)团队</p><p>双飞翼布局和圣杯布局要实现的效果是相同的，只是思路不同</p><p>圣杯布局和双飞翼布局的区别</p><p>双飞翼布局比圣杯布局多创建一个div</p><p>双飞翼布局不用设置内边距和相对定位，也不用设置偏移量</p><p>双飞翼布局使用的margin,圣杯布局使用的是padding</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style5.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>            header <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main-wrapper&quot;</span>&gt;</span><br>                    main <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>                left aside<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>                right aside <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>            footer <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web前端</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bootstrap</title>
    <link href="/2024/05/26/Bootstrap/"/>
    <url>/2024/05/26/Bootstrap/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/Bootstrap.webp" alt="Bootstrap"></p><p>I found that many tutorials on Bootstrap are incomplete,and thetransformation is not well,thus I visited w3school and to make sure theaccuracy of this text,I decided to write it in English.</p><h2 id="introduction">1 Introduction</h2><h3 id="what-is-bootstrap">1.1 What is Bootstrap?</h3><ul><li>Bootstrap is a free front-end framework for faster and easier webdevelopment</li><li>Bootstrap includes HTML and CSS based design templates fortypography, forms, buttons, tables, navigation, modals, image carouselsand many other, as well as optional JavaScript plugins</li><li>Bootstrap also gives you the ability to easily create responsivedesigns</li></ul><p>What is Responsive Web Design? <em>Responsive web design is aboutcreating web sites which automatically adjust themselves to look good onall devices, from small phones to large desktops.</em></p><h3 id="first-web">1.2 First Web</h3><h4 id="add-tthe-html5-doctype">1.2.1 Add tthe HTML5 doctype</h4><p>Bootstrap 5 uses HTML elements and CSS properties that require theHTML5 doctype.</p><p>Always include the HTML5 doctype at the beginning of the page, alongwith the lang attribute and the correct title and character set:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap 5 Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="bootstrap-5-is-mobile-first">1.2.2 Bootstrap 5 ismobile-first</h4><p>Bootstrap 5 is designed to be responsive to mobile devices.Mobile-first styles are part of the core framework.</p><p>To ensure proper rendering and touch zooming, add the following<code>&lt;meta&gt;</code> tag inside the <code>head</code> element:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>function: * <code>width=device-width</code>:sets the width of thepage to follow the screen-width of the device (which will vary dependingon the device). * <code>initial-scale=1</code>: sets the initial zoomlevel when the page is first loaded by the browser.</p><h2 id="containers">2 Containers</h2><p>There are two main containers: * <code>.container</code> class:provides a responsive fixed with container *<code>.container-fluid</code> class:proveides a full widthcontainer,spanning the entire width of the viewport</p><h3 id="fixed-container">2.1 Fixed container</h3><p>Use the <code>.container</code> class to create aresponsive,fixed-width container.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My First Bootstrap Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is some text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="fluid-container">2.2 Fluid container</h3><p>Use the <code>.container-fluid</code> class to create a full widthcontainer,that will always span the entire width of the screen(width isalways 100%)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My First Bootstrap Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is some text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="container-padding">2.3 Container padding</h3><p>By default, containers have left and right padding, with no top orbottom padding. Therefore, we often use spacing utilities, such as extrapadding and margins to make them look even better. For example,<code>.pt-5</code> means "add a large top padding":</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container pt5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="container-border-and-color">2.4 Container border and color</h3><h3 id="responsive-containers">2.5 Responsive containers</h3><p>You can also use the <code>.container-sm|md|lg|xl</code> classes todetermine when the container should be responsive.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-sm&quot;</span>&gt;</span>.container-sm<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-md&quot;</span>&gt;</span>.container-md<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-lg&quot;</span>&gt;</span>.container-lg<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-xl&quot;</span>&gt;</span>.container-xl<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-xxl&quot;</span>&gt;</span>.container-xxl<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="grid-system">3 Grid system</h2><p>The Bootstrap 5 grid system has six classes:</p><ul><li>.col-(extra small devices - screen width &lt; 576px)</li><li>.col-sm-(small devices - screen width equal &gt;= than 576px)</li><li>.col-md-(medium devices - screen width &gt;= 768px)</li><li>.col-lg-(large devices - screen width &gt;= 992px)</li><li>.col-xl-(xlarge devices - screen width &gt;= 1200px)</li><li>.col-xxl-(xxlarge devices - screen width &gt;= 1400px)</li></ul><p>The classes above can be combined to create more dynamic and flexiblelayouts.</p><p><em>Each class scales up, so if you want to set the same widths for<code>sm</code> and <code>md</code>,you only need to specify<code>sm</code></em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Grid Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Link Bootstrap CSS --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span>//col-sm-4 specifies that on a small screen, this column will take up a quarter of the width of one of the 12 columns. On a large screen, it will remain the same width if no other class name is specified to override the style.<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-primary text-white p-3&quot;</span>&gt;</span>Column 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>//bg-primary:It is usually the most prominent colour in the page theme and is used to highlight important elements. In Bootstrap, the default primary colour is blue (#007bff).<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-secondary text-white p-3&quot;</span>&gt;</span>Column 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>//bg-secondary:Usually used to complement the primary colour and provide an extra element of colour to the page. The default secondary colour is grey (#6c757d).<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-success text-white p-3&quot;</span>&gt;</span>Column 3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>//bg-success:The colour used when indicating a successful or positive action. The default success colour is green (#28a745).<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Link Bootstrap JS (Optional) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="texttypography">4 Text/Typography</h2><h3 id="h1-to-h6">4.1 <code>&lt;h1&gt;</code> to<code>&lt;h6&gt;</code></h3><ul><li><p>Bootstrap 5 styles HTML headings (<code>&lt;h1&gt;</code> to<code>&lt;h6&gt;</code>) with a bolder font-weight and a responsivefont-size.</p></li><li><p>You can also use .h1 to .h6 classes on other elements to makethem behave as headings if you want:</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>h1 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h2&quot;</span>&gt;</span>h2 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h3&quot;</span>&gt;</span>h3 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h4&quot;</span>&gt;</span>h4 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h5&quot;</span>&gt;</span>h5 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h6&quot;</span>&gt;</span>h6 Bootstrap heading<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="display-headings">4.2 Display Headings</h3><p>Display headings are used to stand out more than normal headings(larger font-size and lighter font-weight), and there are six classes tochoose from: <code>.display-1</code> to <code>.display-6</code></p><h3 id="section">4.3 <small></h3><p>In Bootstrap 5 the HTML <code>&lt;small&gt;</code> element (and the<code>.small</code> class) is used to create a smaller, secondary textin any heading:</p><h3 id="section-1">4.4 <mark></h3><p>Bootstrap 5 will style <code>&lt;mark&gt;</code> and<code>.mark</code> with a yellow background color and some padding</p><h3 id="section-2">4.5 <abbr></h3><p>Bootstrap 5 will style the HTML <code>&lt;abbr&gt;</code> elementwith a dotted border bottom and a cursor with question mark on hover</p>### 4.6<blockquote><p>Add the <code>.blockquote</code> class to a<code>&lt;blockquote&gt;</code> when quoting blocks of content fromanother source. And when naming a source, like "from WWF's website", usethe .blockquote-footer class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container mt-3&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Blockquotes<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The blockquote element is used to present content from another source:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blockquote&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>For 50 years, WWF has been protecting the future of nature. The world&#x27;s leading conservation organization, WWF works in 100 countries and is supported by 1.2 million members in the United States and close to 5 million globally.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blockquote-footer&quot;</span>&gt;</span>From WWF&#x27;s website<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>### 4.6<dl><p><code>&lt;dl&gt;</code>:describtion list</p><h3 id="section-3">4.7 <code></h3><p>Inline snippets of code should be embedded in the code element</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">p&gt;The following HTML elements: <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>section<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>, and <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> defines a section in a document.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="section-4">4.8 <kbd></h3><p>To indicate input that is typically entered via the keyboard, use thekbd element</p>### 4.9<pre><p>Text in a pre elementis displayed in a fixed-width font,and itpreserves both spaces and line breaks.</p><h3 id="more">4.10 more</h3><p><img src="/images/TypographyClass.png" alt="More Typography Classes"></p><ul><li>initialism<ul><li>Display the text inside an <code>&lt;abbr&gt;</code> element</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>  &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;<br>  &lt;link href=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>  &lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;container mt-3&quot;</span>&gt;<br>  &lt;h2&gt;Typography&lt;/h2&gt;<br>  &lt;p&gt;The &lt;abbr title=<span class="hljs-string">&quot;World Health Organization&quot;</span>&gt;WHO&lt;/abbr&gt; was founded in <span class="hljs-number">1948.</span> (normal abbr)&lt;/p&gt;      <br>  &lt;p&gt;The &lt;abbr title=<span class="hljs-string">&quot;World Health Organization&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;initialism&quot;</span>&gt;WHO&lt;/abbr&gt; was founded in <span class="hljs-number">1948.</span> (slightly smaller abbr)&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><ul><li>list-unstyled<ul><li>Removes the default list-style and left margin on list items (workson both <code>&lt;ul&gt;</code> and <code>&lt;ol&gt;</code>). This classonly applies to immediate children list items (to remove the defaultlist-style from any nested lists, apply this class to any nested listsas well)</li></ul></li><li>list-inline<ul><li>Places all list items on a single line(used together with<code>.list-inline-item</code> on each <code>&lt;li&gt;</code>elements)</li></ul></li></ul><h2 id="tables">5 Tables</h2><h3 id="basic-table">5.1 Basic Table</h3><p>The <code>.table</code> class adds basic styling to a table:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>  &lt;title&gt;Bootstrap Example&lt;/title&gt;<br>  &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>  &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;<br>  &lt;link href=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>  &lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;container mt-3&quot;</span>&gt;<br>  &lt;h2&gt;Basic Table&lt;/h2&gt;<br>  &lt;p&gt;The .table <span class="hljs-keyword">class</span> adds basic <span class="hljs-built_in">styling</span> (light padding <span class="hljs-keyword">and</span> horizontal dividers) to a table:&lt;/p&gt;            <br>  &lt;table <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;<br>    &lt;thead&gt;<br>      &lt;tr&gt;<br>        &lt;th&gt;Firstname&lt;/th&gt;<br>        &lt;th&gt;Lastname&lt;/th&gt;<br>        &lt;th&gt;Email&lt;/th&gt;<br>      &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;John&lt;/td&gt;<br>        &lt;td&gt;Doe&lt;/td&gt;<br>        &lt;td&gt;john@example.com&lt;/td&gt;<br>      &lt;/tr&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;Mary&lt;/td&gt;<br>        &lt;td&gt;Moe&lt;/td&gt;<br>        &lt;td&gt;mary@example.com&lt;/td&gt;<br>      &lt;/tr&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;July&lt;/td&gt;<br>        &lt;td&gt;Dooley&lt;/td&gt;<br>        &lt;td&gt;july@example.com&lt;/td&gt;<br>      &lt;/tr&gt;<br>    &lt;/tbody&gt;<br>  &lt;/table&gt;<br>&lt;/div&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="other-classes">Other classes</h3><p><img src="/images/Bootstrap_table.png"></p><h2 id="forms">6 Forms</h2><h3 id="bootstrap-form-layouts">6.1 Bootstrap Form layouts</h3><p>Bootstrap provides three types of form layouts: * Vertival form(thisis default) * Horizontal form * Inline form</p><p>Standard rules for all three form layouts: * Wrap labels and formcontrols in <code>&lt;div class="form-group"&gt;</code> * Add class<code>.form-control</code> to all textual<code>&lt;input&gt;</code>,<code>&lt;textarea&gt;</code>,and<code>&lt;select&gt;</code> elements</p><h3 id="vertical-form">6.2 vertical form</h3><p>Here's an example</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Vertical (basic) form<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/action_page.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span>Email:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span>Password:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember&quot;</span>&gt;</span> Remember me<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="\Bootstrap\vertical%20form.png" alt="vertical form" /><figcaption aria-hidden="true">vertical form</figcaption></figure><h3 id="inline-form">6.3 inline form</h3><p>In an inline form, all of the elements are inline,left-aligned,andthe labels are alongside.</p><p>Additional rule: * Add class <code>.form-inline</code> to the<code>&lt;form&gt;</code> element</p><p>Here's an example</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span>, <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Inline form<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Make the viewport larger than 768px wide to see that all of the form elements are inline, left aligned, and the labels are alongside.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-inline&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/action_page.php&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span>Email:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember&quot;</span>&gt;</span>Remember me<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="/Bootstrap/inline%20form.png" alt="inline form" /><figcaption aria-hidden="true">inline form</figcaption></figure><h3 id="horizontal-form">6.4 Horizontal Form</h3><p>A horizontal form means that the labels are aligned next to the inputfield (horizontal) on large and medium screens. On small screens (767pxand below), it will transform to a vertical form (labels are placed ontop of each input).</p><p>Additional rules for a horizontal form: * Add class<code>.form-horizontal</code> to the <code>&lt;form&gt;</code> element *Add class <code>.control-label</code> to all <code>&lt;label&gt;</code>elements</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Horizontal form<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-horizontal&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/action_page.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;control-label col-sm-2&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span>Email:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;control-label col-sm-2&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span>Password:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span>          <br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember&quot;</span>&gt;</span> Remember me<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bootstrap</tag>
      
      <tag>web前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery入门</title>
    <link href="/2024/05/25/jQuery/"/>
    <url>/2024/05/25/jQuery/</url>
    
    <content type="html"><![CDATA[<head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="ie=edge"><title>Document</title><script src="https://cdn.jsdelivr.net/npm/mermaid@10.6.1/dist/mermaid.min.js"></script><script>        window.onload=mermaid.initialize({"theme": "forest"});    </script></head><p>本文主要从jQuery简介、核心函数、核心对象三方面介绍jQuery</p><p>文章可能有点长，但要相信干货满满</p><p><del>而不是某Dumpling太啰嗦了</del></p><h2 id="前言">0.前言</h2><p>可能对于刚学web前端的同学(比如我)来说，学了很多东西，但是对于他们的内在联系不太清晰。所以在jQuery入门之前我想先梳理一下他们的关系</p><p>话不多说，先上图</p><div class="mermaid"><pre><code class="hljs">    graph TD;</code></pre><p>    HTML[HTML<br>网页结构] --&gt; CSS[CSS<br>网页样式];     HTML--&gt; JS[JavaScript<br>动态交互];     JS --&gt;jQuery[jQuery<br>简化JS操作];     JS --&gt;Bootstrap[Bootstrap<br>响应式设计];     CSS --&gt; Bootstrap;     jQuery--&gt; Bootstrap;     classDef someclassfill:#f9f,stroke:#333,stroke-width:2px;     classHTML,CSS,JS,jQuery,Bootstrap someclass;</p></div><ul><li><code>HTML(HyperText Markup Language)</code>:<ul><li>是用来构建网站的基础，定义网页的结构和内容。</li><li>你可以把它想象成建筑的骨架</li></ul></li><li><code>CSS(Cascading Style Sheets)</code>:<ul><li>用于设置网页布局和样式，比如字体(font)、颜色(color)和间距(padding)等。</li><li>CSS像是给网页穿上衣服，让结构更美观</li></ul></li><li><code>JavaScript</code>:<ul><li>是一种程序语言，用于添加网页的动态功能，如响应用户的点击、数据更新等。</li><li>他让网页有了动起来的能力。</li></ul></li><li><code>jQuery</code>：<ul><li>是一个<code>JavaScript</code>的库，简化<code>JavaScript</code>的编程。</li><li>比如，他让文档操作、事件处理、动画等更容易实现</li><li><code>jQuery</code>就像一个工具包，帮你更好使用<code>JavaScript</code>。</li></ul></li><li><code>BootStrap</code>:<ul><li>一个前端框架，包含了<code>HTML</code>、<code>CSS</code>和<code>JavaScript</code>的组件。</li><li>提供了一套预设的样式和功能，可以快速帮你开发响应式和移动优先的网页</li><li><code>BootStrap</code>就像一个建筑工具包，里面有各种模块和工具，让建筑(网页)更快速的搭建起来</li></ul></li></ul><h2 id="jquery简介">1 jQuery简介</h2><h3 id="jquery简介-1">1.1 jQuery简介</h3><p><del>虽然感觉不会有人喜欢看定义但还是感觉要写</del></p><ul><li><p>jQuery 是一个 JavaScript 函数库。</p></li><li><p>jQuery 是一个轻量级的"写的少，做的多"的 JavaScript 库。</p></li><li><p>jQuery 库包含以下功能：</p><ul><li>HTML 元素选取</li><li>HTML 元素操作</li><li>CSS 操作</li><li>HTML 事件函数</li><li>JavaScript 特效和动画</li><li>HTML DOM 遍历和修改</li><li>AJAX</li><li>Utilities 提示： 除此之外，jQuery 还提供了大量的插件。</li></ul></li></ul><h3 id="jquery上手">1.2 jQuery上手</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/1.9.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 请将jQuery代码书写在这里 ...</span></span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello,World!&#x27;</span>);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="jquery的双枪">1.3 jQuery的双枪</h3><p><code>jQuery</code>的双枪分别是：</p><ul><li>jQuery的核心函数：即：<code>$()</code>或<code>jQuery()</code>。jQuery定义了这个全局函数供我们使用，他既可以作为一般函数调用，且传递的参数类型不同/格式不同，功能就完全不同，也可以作为对象调用其定义好的方法<ul><li>jQuery的核心对象：即执行<code>jQuery</code>核心函数所返回的对象，<code>jQuery</code>对象内部包含的<code>dom</code>元素对象的伪数组(可能只有一个元素)，<code>jQuery</code>对象有很多属性和方法，让程序员能够方便的操纵<code>dom</code>,调用jQuery对象的任何方法后返回的还是当前jQuery对象</li></ul></li></ul><p>以上这段话你可能没看明白，但是没关系，先看完后面的内容再回过头来看</p><h2 id="jquery的核心函数">2 jQuery的核心函数</h2><h3 id="选择器">2.1 选择器</h3><h3 id="基本选择器">2.1.1 基本选择器</h3><p>写在前头：其实选择器的大部分的格式都是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;example&#x27;).css(&#x27;example1&#x27;);<br></code></pre></td></tr></table></figure><p>带着这个公式去读以下内容，你会很容易发现套路</p><h4 id="标签选择器">2.1.1.1 标签选择器</h4><p>需求：选择页面中所有的div标签，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;div&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="id选择器">2.1.1.2 id选择器</h4><p>需求：选择页面中所有id为btn的按钮，将其改为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;#btn&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="class选择器">2.1.1.3 class选择器</h4><p>需求：选择页面中所有class为red的段落，将其背景设置成红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>我会变红<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我不红了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>我又红了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;.red&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="通配符选择器">2.1.1.4 通配符选择器</h4><p>需求：将页面中class为content的div下所有元素的背景设置成红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;.content *&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="并集选择器">2.1.1.5 并集选择器</h4><p>需求：选择页面中所有段落与按钮，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是段落，我是红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>我是按钮，也是红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我不是红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;p, button&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="交集选择器">2.1.1.6 交集选择器</h4><p>需求：选择页面中所有class为红色的段落，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>我是红的<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我不是红的<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>我也不是红的<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;p.red&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h3 id="层级选择器">2.1.2 层级选择器</h3><h4 id="子代选择器">2.1.2.1 子代选择器</h4><p>需求：选择ul下所有span子元素，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span1,我是红的<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我不是红的，因为我是li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我也不是<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;ul&gt;span&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h4 id="后代选择器">2.1.2.2 后代选择器</h4><p>需求：选择ul下所有span元素，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span1,我是红的<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我不是红的，因为我是li <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>但我还是红的<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我也不是<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;ul span&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p><del>DUmpling的唠叨</del> 子代选择器和后代选择器的区别： -我觉得这很像西欧封建领主和中国封建领主的差别，西欧领主认为：我的附庸的附庸不是我的附庸(子代选择器)，但在中国，普天之下莫非王土，率土之滨莫非王臣，管你是谁，耶稣来了也不行，皇-帝说的(后代选择器)。 -子代选择器只能管一个人，所以要带<code>&gt;</code>。 -但是后代选择器却是空格。这是为什么呢？因为这不是空格，而是朕的天下</p><h4 id="兄弟选择器">2.1.2.3 兄弟选择器</h4><p>需求：选中id为box的下一个兄弟li，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是li1 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li1的span1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li2 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li2的span2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <span class="hljs-comment">&lt;!--这一行是红色的--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li3 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li3的span3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;#box+li&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p>需求：选中id为box之后所有的li，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是li1 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li1的span1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li2 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li2的span2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li3 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是li3的span3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是ul的span2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;#box~li&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><h3 id="过滤选择器">2.1.3 过滤选择器</h3><h4 id="基本筛选器">2.1.3.1 基本筛选器</h4><p>需求：隔行变色，让表格奇数行背景为红色，:even代表选取下标为偶数的行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0px&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;10px&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>//我是红的<br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>//我也是红的<br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;tr:even&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p><del>Dumpling又来唠叨了</del> 为什么第1，3行是红色的？因为行数下标是从0开始取的，所以你可以理解为是第0行、第2行是红色的</p><ul><li><p>要使表格偶数行背景为红色，把:even改成:odd就行了(行的下标从0开始)</p></li><li><p>要使表格第一行背景为红色，把:even改成:first</p></li><li><p>要使表格最后一行背景为红色，把:even改成:last</p></li><li><p>要使表格第0行到第n行的下标为红色，把:even改成:lt(n)就行了(行的下标从0开始)</p></li><li><p>要使表格从第n行开始全部变成红色，把:even改成:gt(n)就行了(行的下标从0开始)</p></li><li><p>要使表格第n行的背景为红色，把:even改成:eq(n)就行了(行的下标从0开始)</p></li><li><p>要使表格除了第n行，其他行的背景为红色，把:even改成:not(eq(n))就行了(行的下标从0开始)</p></li></ul><p><del>Dumpling又双叒叕来了</del> 聪明如你，肯定发现了lt是lessthan的缩写，gt是greaterthan的缩写，eq是equal的缩写，所以这些还是很好记的</p><h4 id="内容筛选器">2.1.3.2 内容筛选器</h4><p>需求：实现让内容为"男"的单元格的背景变为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0px&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;10px&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;td:contains(&quot;男&quot;)&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p>需求：实现让内容为span标签的单元格的背景变为红色</p><p>把:contains("男")改成:has(span)就行了</p><p>需求：实现让内容为空的单元格的背景变为红色</p><p>把:contains("男")改成:empty就行了</p><p>需求：实现让内容不为空的单元格的背景变为红色</p><p>把:contains("男")改成:parent就行了</p><h4 id="属性筛选器">2.1.3.3 属性筛选器</h4><p>需求描述：查找herflang属性的标签元素，设置其背景为红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">hreflang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>en<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">hreflang</span>=<span class="hljs-string">&quot;en-UK&quot;</span>&gt;</span>en-UK<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">hreflang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span>zh-CN<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;a[hreflang]&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;);<br></code></pre></td></tr></table></figure><p>需求：查找hreflang属性值是en的所有超链接，设置其背景为红色</p><p>把[hreflang]改成[hreflang="en"]就行了</p><p>需求：查找hreflang属性值不是en的所有超链接，设置其背景为红色</p><p>把[hreflang]改成[hreflang!="en"]就行了</p><h2 id="工具">2.2 工具</h2><h3 id="each方法">2.2.1 $.each方法</h3><p>方法描述：一个通用的迭代函数，它可以用来无缝迭代对象和数组。数组和类似数组的对象通过一个长度属性（如一个函数的参数对象）来迭代数字索引，从0到length- 1，其他对象通过其属性名进行迭代。</p><p>需求：给定一个数组，使用$.each方法进行遍历输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var arr = [10, 90, 20, 80, 30, 70, 40, 60, 50];<br>$.each(arr, function (index, element) &#123;<br>    console.log(index, element);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="trim方法">2.2.2 $.trim方法</h3><p>方法描述：去掉字符串起始和结尾的空格。(trim的中文意思是修剪)</p><p>需求：给定一个字符串，去掉该字符串的前后空格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var str = &#x27;    hello    &#x27;;<br>console.log($.trim(str));//hello<br></code></pre></td></tr></table></figure><h3 id="type方法">2.2.3 $.type方法</h3><p>方法描述：确定JavaScript 对象的类型。</p><p>需求：给定一个对象，输出该对象的类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var str = &#x27;    hello    &#x27;;<br>console.log($.type(str));//string<br></code></pre></td></tr></table></figure><h3 id="isarray方法">2.2.4 $.isArray方法</h3><p>方法描述：用来测试指定对象是否为一个数组。</p><p>需求：给定一个对象，输出该对象是不是数组类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var arr = [10, 90, 20, 80, 30, 70, 40, 60, 50];<br>console.log($.isArray(arr));//true<br></code></pre></td></tr></table></figure><h3 id="isfunction方法">2.2.5 $.isFunction方法</h3><p>方法描述：用来测试指定对象是否为一个函数。</p><p>需求：给定一个对象，输出该对象是不是函数类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">var fun = function () &#123;<br>    console.log(&quot;hello&quot;);<br>&#125;;<br>console.log($.isFunction(fun));//true<br></code></pre></td></tr></table></figure><h2 id="jquery的核心对象">3 jQuery的核心对象</h2><h3 id="属性">3.1 属性</h3><h4 id="属性-1">3.1.1 属性</h4><h4 id="attr">3.1.1.1 attr()</h4><p>方法描述：专门操作属性值为非布尔值的属性，该方法读写一体。</p><p>需求：设置p标签的title属性为"我是attr修改后的段落标题"</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;我是段落标题&quot;</span>&gt;</span>我是段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;#content&#x27;).attr(&#x27;title&#x27;, &#x27;我是attr修改后的段落标题&#x27;);<br></code></pre></td></tr></table></figure><h4 id="prop">3.1.1.2 prop()</h4><p>方法描述：专门操作属性值为布尔值的属性，该方法读写一体。</p><p>需求：设置复选框的状态为选中状态</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>复选框<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;:checkbox&#x27;).prop(&#x27;checked&#x27;, &#x27;true&#x27;);<br></code></pre></td></tr></table></figure><h4 id="val">3.1.1.3 val()</h4><p>方法描述：该方法主要用于获取表单元素的值和设置表单元素的值，该方法读写一体。</p><p>需求：设置文本框的值为"123456"</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;:text&#x27;).val(&#x27;123456&#x27;)<br></code></pre></td></tr></table></figure><h3 id="样式">3.1.2 样式</h3><h4 id="css">3.1.2.1 css()</h4><p>方法描述：获取匹配元素集合中的第一个元素的样式属性的计算值或设置每个匹配元素的一个或多个CSS属性。</p><p>需求描述：设置div的背景颜色为红色，字体颜色为白色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;div&#x27;).css(&#123;<br>    &#x27;background&#x27;: &#x27;red&#x27;,<br>    &#x27;color&#x27;: &#x27;white&#x27;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="addclass">3.1.2.2 addClass()</h4><p>方法描述：为每个匹配的元素添加指定的样式类名。</p><p>需求描述：为所有的li添加样式”beauty“</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML">.beauty &#123;<br>    font-weight: bold;<br>    font-size: 18px;<br>    color: coral;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;li&#x27;).addClass(&#x27;beauty&#x27;);<br></code></pre></td></tr></table></figure><h4 id="removeclass">3.1.2.3 removeClass()</h4><p>方法描述：移除集合中每个匹配元素上一个，多个或全部样式。</p><p>需求：为所有的li移除样式”beauty“</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML">.beauty &#123;<br>    font-weight: bold;<br>    font-size: 18px;<br>    color: coral;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;beauty&quot;</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;beauty&quot;</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;beauty&quot;</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;beauty&quot;</span>&gt;</span>列表项4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;li&#x27;).removeClass(&#x27;beauty&#x27;);<br></code></pre></td></tr></table></figure><h4 id="toggleclass">3.1.2.4 toggleClass()</h4><p>方法描述：为匹配的元素集合中的每个元素上添加或删除一个或多个样式类，取决于这个样式类是否存在。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML">.hide &#123;<br>    width: 100px;<br>    height: 100px;<br>    display: none;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">$(&#x27;button&#x27;).click(function () &#123;<br>    $(&#x27;div&#x27;).toggleClass(&#x27;hide&#x27;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="尺寸">3.1.3 尺寸</h3><h4 id="width">3.1.3.1 width()</h4><p>方法描述：获取内容元素width的值。</p><h4 id="height">3.1.3.2 height()</h4><p>方法描述：获取内容元素height的值。</p><h4 id="innerwidth">3.1.3.3 innerWidth()</h4><p>方法描述：获取内容元素width+padding的值。</p><h4 id="innerheight">3.1.3.4 innerHeight()</h4><p>方法描述：获取内容元素height+padding的值。</p><h4 id="outerwidth">3.1.3.5 outerWidth()</h4><p>方法描述：outerWidth(false/true)，获取内容元素width+padding+border的值，如果是true再加上margin的值。</p><h4 id="outerheight">3.1.3.6 outerHeight()</h4><p>方法描述：outerHeight(false/true)，获取内容元素height+padding+border的值，如果是true再加上margin的值。</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web前端</tag>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ STL</title>
    <link href="/2024/05/23/CPPSTL/"/>
    <url>/2024/05/23/CPPSTL/</url>
    
    <content type="html"><![CDATA[<h2 id="知识框架">知识框架</h2><p><img src="/images/C++STL.png"></p><h2 id="vector">1.vector</h2><h3 id="介绍">1.1 介绍</h3><p><code>vector</code>为可变长数组(我比较喜欢叫他动态数组),可以随时添加数值和删除元素</p><h3 id="初始化">1.2 初始化</h3><p><code>vector</code>分为一维初始化和二维初始化</p><h4 id="一维初始化">一维初始化</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; t1; <span class="hljs-comment">//一维数组</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">t2</span><span class="hljs-params">(n)</span></span>; <span class="hljs-comment">//定义一个长度为n的数组</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">t3</span><span class="hljs-params">(n, <span class="hljs-number">1</span>)</span></span>; <span class="hljs-comment">//定义一个长度为n的数组，t3[0]~t3[n - 1]均初始化为1</span><br>vector&lt;<span class="hljs-type">int</span>&gt; t4&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;; <span class="hljs-comment">//数组中有五个元素，数组长度就为5</span><br>vector&lt;<span class="hljs-type">int</span>&gt; t5 = t4; <span class="hljs-comment">//拷贝初始化</span><br></code></pre></td></tr></table></figure><h4 id="二维初始化">二维初始化</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; t2;<span class="hljs-comment">//二维数组</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v[<span class="hljs-number">5</span>];<span class="hljs-comment">//定义可变长二维数组</span><br><span class="hljs-comment">//注意：行不可变（只有5行）, 而列可变,可以在指定行添加元素</span><br><span class="hljs-comment">//第一维固定长度为5，第二维长度可以改变</span><br><span class="hljs-comment">//注意：[]是二维数组，()是一维数组！ ！ ！</span><br><span class="hljs-comment">//（有个大聪明因为这个debug了半个小时）</span><br></code></pre></td></tr></table></figure><h3 id="方法函数">1.3 方法函数</h3><p>话不多说，直接上</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; c;<br></code></pre></td></tr></table></figure><table><thead><tr><th>代码</th><th>含义</th><th>时间复杂度</th></tr></thead><tbody><tr><td>c.front()</td><td>返回第一个数据</td><td>O(1)</td></tr><tr><td>c.back()</td><td>返回最后一个数据</td><td>O(1)</td></tr><tr><td>c.pop_back()</td><td>删除最后一个数据</td><td>O(1)</td></tr><tr><td>c.push_back(element)</td><td>在尾部加一个数据</td><td>O(1)</td></tr><tr><td>c.emplace_back(ele)</td><td>类似c.push_back(),但有时更快</td><td>O(1)</td></tr><tr><td>c.size()</td><td>返回数据个数</td><td>O(1)</td></tr><tr><td>c.clear()</td><td>清除元素个数</td><td>O(N)</td></tr><tr><td>c.resize(n, v)</td><td>改变数组大小为n并赋值为v，如果没有则默认赋值0</td><td></td></tr><tr><td>c.insert(it, x)</td><td>向迭代器it插入元素x</td><td>O(N)</td></tr><tr><td>c.erase(first,last)</td><td>删除<code>[first, last)</code>所有元素</td><td>O(N)</td></tr><tr><td>c.begin()</td><td>返回首元素迭代器(可以通俗的理解为地址)</td><td>O(1)</td></tr><tr><td>c.end()</td><td>返回最后一个元素后一个位置的迭代器</td><td>O(1)</td></tr><tr><td>c.empty()</td><td>判断是否为空，空为真</td><td>O(1)</td></tr><tr><td>c.at(idx)</td><td>返回c[idx]的值（但还是建议用[]）</td><td></td></tr><tr><td>c.reserve(sz)</td><td>改变<code>capacity</code>的大小</td><td></td></tr><tr><td>c.assign(n, val)</td><td>讲<code>n</code>个<code>val</code>值拷贝到<code>c</code>数组中</td><td></td></tr><tr><td>c.assign(beg, end)</td><td>讲另一个容器的<code>[x.begin(), x.end()]</code>里的内容拷贝到c</td><td></td></tr></tbody></table><h3 id="访问">1.4 访问</h3><p>总共三种方法：<code>下标法</code>、<code>迭代器法</code>、<code>auto</code></p><h4 id="下标访问">1.4.1 下标访问</h4><p>和普通数组的区别是没有区别</p><h4 id="迭代器访问">1.4.2 迭代器访问</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; vi&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-comment">//迭代器访问</span><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator it;   <br><span class="hljs-comment">// 相当于声明了一个迭代器类型的变量it</span><br><span class="hljs-comment">// 通俗来说就是声明了一个指针变量</span><br></code></pre></td></tr></table></figure><ul><li>方法一</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = vi.<span class="hljs-built_in">begin</span>(); <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>cout &lt;&lt; *(it + i) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>方法二</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt;::iterator it; <span class="hljs-keyword">for</span>(it = vi.<span class="hljs-built_in">begin</span>(); it != vi.<span class="hljs-built_in">end</span>();it ++) cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>; <br><span class="hljs-comment">//vi.end()指向尾元素地址的下一个地址 </span><br><span class="hljs-comment">// 或者 </span><br><span class="hljs-keyword">auto</span> it = vi.<span class="hljs-built_in">begin</span>();<br><span class="hljs-keyword">while</span>(it != vi.<span class="hljs-built_in">end</span>())<br>&#123;<br>    cout &lt;&lt; *it &lt;&lt; endl;<br>    it++;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="智能指针">1.4.3 智能指针</h4><p>只能遍历完整个数组，如果要遍历指定内容，参考方法一、二</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 1. 输入 </span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>; <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;x: a) <br>&#123;<br>     cin &gt;&gt; x; <span class="hljs-comment">// 可以进行输入，注意加引用 </span><br>&#125; <br><br><span class="hljs-comment">// 2. 输出 </span><br>vector&lt;<span class="hljs-type">int</span>&gt; v; <br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">12</span>); <br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">241</span>); <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> val : v) <br>&#123;<br>     cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>; <span class="hljs-comment">// 12 241 </span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="stack">2 stack</h2><h3 id="介绍-1">2.1 介绍</h3><p>栈为数据结构的一种，实现先进后出(FILO)的容器</p><h3 id="初始化-1">2.2 初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><br>stack&lt;<span class="hljs-type">int</span>&gt; s1;<br>stack&lt;string&gt; s2;<br>stack&lt;node&gt; s3;<span class="hljs-comment">//node为结构体类型</span><br></code></pre></td></tr></table></figure><h3 id="方法函数-1">2.3 方法函数</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>s.push(ele)</td><td>元素<code>ele</code>入栈，增加元素</td></tr><tr><td>s.pop()</td><td>移除栈顶元素</td></tr><tr><td>s.top()</td><td>取得栈顶元素（但不删除）</td></tr><tr><td>s.empty()</td><td>检查栈内是否为空</td></tr><tr><td>s.size()</td><td>返回栈内元素的个数</td></tr></tbody></table><h3 id="栈遍历">2.4 栈遍历</h3><p>栈只能对栈顶元素进行操作，如果想要操作，只能将栈中元素一个个取出来存在数组中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CPP">stack&lt;<span class="hljs-type">int</span>&gt; st;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) st.<span class="hljs-built_in">push</span>(i);<br><br><span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())<br>&#123;<br>     <span class="hljs-type">int</span> tp = st.<span class="hljs-built_in">top</span>();<br>     st.<span class="hljs-built_in">pop</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组模拟栈进行遍历">2.5 数组模拟栈进行遍历</h3><p>优点：比<code>STL</code>的<code>stack</code>速度更快，遍历元素更方便</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> s[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> tt = <span class="hljs-number">-1</span>;<span class="hljs-comment">//tt代表栈顶指针，初始栈内无元素，tt为-1</span><br><br><span class="hljs-comment">//入栈</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">5</span>; i++)<br>&#123;<br>     s[++tt] = i;<br>&#125;<br><br><span class="hljs-comment">//出栈</span><br><span class="hljs-type">int</span> top_element = s[tt--];<br><br><span class="hljs-comment">//入栈示意图</span><br><span class="hljs-comment">//0 1 2 3 4 5</span><br><span class="hljs-comment">//          tt</span><br><span class="hljs-comment">//出栈后示意图</span><br><span class="hljs-comment">//0 1 2 3 4</span><br><span class="hljs-comment">//        tt</span><br></code></pre></td></tr></table></figure><h2 id="queue">3 queue</h2><h3 id="介绍-2">3.1 介绍</h3><p>队列是一种先进先出的数据结构(FIFO)</p><h3 id="初始化-2">3.2 初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span><span class="hljs-comment">//别忘了头文件</span></span><br><br>queue&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="方法函数-2">3.3 方法函数</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>q.front()</td><td>返回队首元素O(1)</td></tr><tr><td>q.back()</td><td>返回队尾元素O(1)</td></tr><tr><td>q.push(element)</td><td>尾部添加一个元素<code>element</code> 入队</td></tr><tr><td>q.pop()</td><td>删除第一个元素，出队O(1)</td></tr><tr><td>q.size()</td><td>返回队列中元素个数，返回值类型<code>unsigned int</code></td></tr><tr><td>q.empty()</td><td>判断是否为空</td></tr></tbody></table><h3 id="数组模拟">3.4 数组模拟</h3><p>使用<code>q[]</code>数组模拟队列</p><p><code>hh</code>表示队首元素的下标，初始为0</p><p><code>tt</code>表示队尾元素的下标，初始为-1，表示刚开始时队列为空</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br>     <span class="hljs-comment">//入队</span><br>     q[++tt] = <span class="hljs-number">1</span>;<br>     q[++tt] = <span class="hljs-number">2</span>;<br>     <span class="hljs-comment">//出队</span><br>     <span class="hljs-keyword">while</span>(hh &lt;= tt)<br>     &#123;<br>          <span class="hljs-type">int</span> t = q[hh++];<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, t);<br>     &#125;<br><br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="deque">4 deque</h2><h3 id="介绍-3">4.1 介绍</h3><p>首尾都可插入和删除的队列为双端队列<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//添加头文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><span class="hljs-comment">//初始化定义</span><br>deque&lt;<span class="hljs-type">int</span>&gt; dq;<br></code></pre></td></tr></table></figure></p><h3 id="方法函数-3">4.2 方法函数</h3><blockquote><p>注意双端队列的常数比较大</p></blockquote><table><thead><tr><th>代码</th><th>含义</th><th>时间复杂度</th></tr></thead><tbody><tr><td>push_back(x) / push_front(x)</td><td>把<code>x</code>插入队尾后/队首</td><td><span class="math inline">\(O(1)\)</span></td></tr><tr><td>back() / front()</td><td>返回队尾/队首元素</td><td><span class="math inline">\(O(1)\)</span></td></tr><tr><td>pop_back() / pop_front()</td><td>删除队尾/队首元素</td><td><span class="math inline">\(O(1)||erase(iterator it)|删除双端队列中的某一个元素|||erase(iterator first, iterator last)|删除双端队列中[first,last)中的元素|||empty()|判断deque是否为空|\)</span>O(1)<span class="math inline">\(||size()|返回deque的元素数量|\)</span>O(1)$</td></tr><tr><td>clear()</td><td>清空deque</td><td></td></tr></tbody></table><h3 id="注意点">4.3 注意点</h3><blockquote><p>deque可以进行排序 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">//从小到大</span><br><span class="hljs-built_in">sort</span>(q.<span class="hljs-built_in">begin</span>(), q.<span class="hljs-built_in">end</span>());<br><span class="hljs-comment">//从大到小排列</span><br><span class="hljs-built_in">sort</span>(q.<span class="hljs-built_in">begin</span>(), q.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br></code></pre></td></tr></table></figure></p></blockquote><h2 id="priority_queue">5 priority_queue</h2><h3 id="介绍-4">5.1 介绍</h3><p>优先队列是在正常队列的基础上加了优先级，保证每次的队首元素都是优先级最大的。<br />可以实现每次从优先队列中取出的元素都是队列中优先级最大的一个。<br />它的底层是通过堆来实现的。</p><h3 id="函数方法">5.2 函数方法</h3><table><thead><tr><th>代码</th><th>含义</th><th>时间复杂度</th></tr></thead><tbody><tr><td>q.top()</td><td>访问队首元素</td><td><span class="math inline">\(O(1)\)</span></td></tr><tr><td>q.push()</td><td>入队</td><td><span class="math inline">\(O(logN)\)</span></td></tr><tr><td>q.pop()</td><td>堆顶(队首)元素出队</td><td><span class="math inline">\(O(logN)\)</span></td></tr><tr><td>q.size()</td><td>队列元素个数</td><td><span class="math inline">\(O(1)\)</span></td></tr><tr><td>q.empty()</td><td>是否为空</td><td><span class="math inline">\(O(1)\)</span></td></tr><tr><td>注意没有clear()!</td><td>不提供此方法</td><td></td></tr></tbody></table><h3 id="设置优先级">5.3 设置优先级</h3><h3 id="基本数据类型的优先级">5.3.1 基本数据类型的优先级</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CPP">priority_queue&lt;<span class="hljs-type">int</span>&gt; pq;<span class="hljs-comment">//默认大根堆，即每次取出的元素是队列中的最大值</span><br>priortiy_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; q;<span class="hljs-comment">//小根堆，每次取出的元素是队列中的最小值</span><br></code></pre></td></tr></table></figure><h3 id="结构体优先级">5.3.2 结构体优先级</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">cmp</span> &#123;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> Point&amp; a, <span class="hljs-type">const</span> Point&amp; b)</span>  </span>&#123;<br>        <span class="hljs-keyword">return</span> a.x &lt; b.x;<br>    &#125;<br>&#125;;<br><br><span class="hljs-built_in">priority_queue</span>(Point, vector&lt;point&gt;, cmp) q;<br></code></pre></td></tr></table></figure><h2 id="map">6 map</h2><h3 id="介绍-5">6.1 介绍</h3><p>映射类似于函数的对应关系，每一个<code>x</code>对应一个<code>y</code>，而<code>map</code>是每个键对应一个值</p><h3 id="初始化-3">6.2 初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><br>map&lt;string, string&gt; mp1;<br>map&lt;string, <span class="hljs-type">int</span>&gt; mp2;<br>map&lt;<span class="hljs-type">int</span>, node&gt; mp3;<span class="hljs-comment">//node为结构体</span><br></code></pre></td></tr></table></figure><h3 id="函数方法-1">6.3 函数方法</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td><code>mp.find(key)</code></td><td>返回键围殴key的映射迭代器</td></tr><tr><td><code>mp.erase(it)</code></td><td>删除迭代器对应的键和值</td></tr><tr><td><code>mp.erase(key)</code></td><td>根据映射的键删除键和值</td></tr><tr><td><code>mp.insert(first,last)</code></td><td>删除左闭右开区间迭代器对应的键和值</td></tr><tr><td><code>mp.insert()</code></td><td>插入元素，插入时要构造键值对</td></tr><tr><td><code>mp.size()</code></td><td>返回映射的对数</td></tr><tr><td><code>mp.clear()</code></td><td>清空map中所有元素</td></tr><tr><td><code>mp.empty()</code></td><td>如果map为空，返回true，否则返回false</td></tr><tr><td><code>mp.mp.begin()</code></td><td>返回指向map第一个元素的迭代器（地址）</td></tr><tr><td><code>mp.end()</code></td><td>返回指向map尾部的迭代器（最后一个元素的下一个地址）</td></tr><tr><td><code>mp.rbegin()</code></td><td>返回指向map最后一个元素的迭代器（地址）</td></tr><tr><td><code>mp.rend()</code></td><td>返回指向map第一个元素前面(上一个）的逆向迭代器（地址）</td></tr><tr><td><code>mp.count(key)</code></td><td>查看元素是否存在，因为map中键是唯一的，所以存在返回1，不存在返回0</td></tr><tr><td><code>mp.lower_bound()</code></td><td>返回一个迭代器，指向键值&gt;= key的第一个元素</td></tr><tr><td><code>mp.upper_bound()</code></td><td>返回一个迭代器，指向键值&gt; key的第一个元素</td></tr></tbody></table><h2 id="set">7 set</h2><h3 id="介绍-6">7.1 介绍</h3><p><code>set</code>容器中的元素不会重复，当插入集合中已有的元素时不会插入进去，而且<code>set</code>容器里的元素自动从小到大排序</p><p>即：不重复，且有序</p><h3 id="初始化-4">7.2 初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><br>set&lt;<span class="hljs-type">int</span>&gt; s;<br></code></pre></td></tr></table></figure><h3 id="函数方法-2">7.3 函数方法</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td><code>s.begin()</code></td><td>返回set容器的第一个元素的地址</td></tr><tr><td><code>s.end()</code></td><td>返回set容器的最后一个元素的下一个地址</td></tr><tr><td><code>s.rbegin()</code></td><td>返回逆序迭代器，指向容器元素最后一个位置</td></tr><tr><td><code>s.rend()</code></td><td>返回逆序迭代器，指向容器第一个元素前面的位置</td></tr><tr><td><code>s.clear()</code></td><td>删除set容器中的所有的元素，返回unsigned int类型</td></tr><tr><td><code>s.empty()</code></td><td>判断set容器是否为空</td></tr><tr><td><code>s.insert()</code></td><td>插入一个元素</td></tr><tr><td><code>s.size()</code></td><td>返回当前set容器中的元素个数</td></tr><tr><td><code>erase(iterator)</code></td><td>删除定位器iterator指向的值</td></tr><tr><td><code>erase(first, second)</code></td><td>删除定位器first和second之间的值</td></tr><tr><td><code>erase(key_value)</code></td><td>删除键值为key_value的值</td></tr><tr><td>查找</td><td></td></tr><tr><td><code>s.find(element)</code></td><td>查找set中的某一元素，有则返回该元素对应的迭代器，无则返回结束迭代器</td></tr><tr><td><code>s.count(element)</code></td><td>查找set中的元素出现的个数，由于set中元素唯一，此函数相当于查询element是否出现</td></tr><tr><td><code>s.lower_bound(k)</code></td><td>返回大于等于k的第一个元素的迭代器</td></tr><tr><td><code>s.upper_bound(k)</code></td><td>返回大于k的第一个元素的迭代器</td></tr></tbody></table><h3 id="访问-1">7.4 访问</h3><ul><li>迭代器访问</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">for</span>(set&lt;<span class="hljs-type">int</span>&gt;::iterator it = s.<span class="hljs-built_in">begin</span>(); it != s.<span class="hljs-built_in">end</span>(); it++)<br>     cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>智能指针</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i : s)<br>     cout &lt;&lt; i &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="pair">8 pair</h2><h3 id="介绍-7">8.1 介绍</h3><p>pair只含有两个元素，可以看作是只有两个元素的结论体<br />应用：<br />* 代替二元结构体 * 作为map键值对进行插入<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CPP">map&lt;string,<span class="hljs-type">int</span>&gt;mp;<br>mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string,<span class="hljs-type">int</span>&gt;(<span class="hljs-string">&quot;xingmaqi&quot;</span>,<span class="hljs-number">1</span>));<br><span class="hljs-comment">// mp.insert(make_pair(&quot;xingmaqi&quot;, 1));</span><br><span class="hljs-comment">// mp.insert(&#123;&quot;xingmaqi&quot;, 1&#125;);</span><br></code></pre></td></tr></table></figure></p><h3 id="访问-2">8.2 访问</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CPP">map&lt;string,<span class="hljs-type">int</span>&gt;mp;<br>mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string,<span class="hljs-type">int</span>&gt;(<span class="hljs-string">&quot;xingmaqi&quot;</span>,<span class="hljs-number">1</span>));<br><span class="hljs-comment">// mp.insert(make_pair(&quot;xingmaqi&quot;, 1));</span><br><span class="hljs-comment">// mp.insert(&#123;&quot;xingmaqi&quot;, 1&#125;);</span><br></code></pre></td></tr></table></figure><h2 id="string">9 string</h2><h3 id="介绍-8">9.1 介绍</h3><p><code>string</code>是一个字符串类，和<code>char</code>型字符串类似</p><p>可以把<code>string</code>理解为一个字符串类型，像int一样定义</p><h3 id="初始化-5">9.2 初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br>string str1;<span class="hljs-comment">//空字符串</span><br><br><span class="hljs-function">string <span class="hljs-title">str2</span><span class="hljs-params">(<span class="hljs-string">&quot;123456&quot;</span>)</span></span>;<br><br><span class="hljs-function">string <span class="hljs-title">str3</span><span class="hljs-params">(<span class="hljs-string">&quot;12345&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>)</span></span>;<span class="hljs-comment">//结果为&quot;123&quot;</span><br><span class="hljs-comment">//从0索引开始，长度为3</span><br><br><span class="hljs-function">string <span class="hljs-title">str4</span><span class="hljs-params">(<span class="hljs-string">&quot;12345&quot;</span>, <span class="hljs-number">3</span>)</span></span>;<span class="hljs-comment">//结果为&quot;123&quot;</span><br><br><span class="hljs-function">string <span class="hljs-title">str5</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;2&#x27;</span>)</span></span>;<span class="hljs-comment">//结果为&quot;22222&quot;</span><br><br><span class="hljs-function">string <span class="hljs-title">str6</span><span class="hljs-params">(str2, <span class="hljs-number">2</span>)</span></span>;<span class="hljs-comment">//结果为&quot;345&quot;；</span><br><span class="hljs-comment">//截取第二个索引及其之后的元素</span><br></code></pre></td></tr></table></figure><h3 id="简单使用及其特性">9.3 简单使用及其特性</h3><h4 id="访问单个字符">9.3.1 访问单个字符</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     string str=<span class="hljs-string">&quot;12345&quot;</span>;<br><br>     cout &lt;&lt; str[<span class="hljs-number">2</span>] &lt;&lt; endl;<br><br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果为3。</p><p>从这个案例中就可以很直观的感受到string可以作为数组使用</p><h4 id="string特性">9.3.2 string特性</h4><ul><li>支持比较运算符<ul><li><code>string</code>字符串支持常见的比较运算符:<code>&gt;, &gt;=, &lt;, &lt;=, ==, !=</code>。</li><li>本质上是按字符顺序依次比较ASCII码</li><li>常用ASCII码：<code>A：65</code>；<code>a：97</code>；<code>1： 49</code></li><li>故而，在比较时，数字&lt;大写字母&lt;小写字母</li></ul></li><li>支持<code>+</code>运算符，代表拼接</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     string str1 = <span class="hljs-string">&quot;123&quot;</span>;<br>     string str2 = <span class="hljs-string">&quot;456&quot;</span>;<br>     string str3 = str1 + str2;<br>     cout &lt;&lt; str3 &lt;&lt; endl;<span class="hljs-comment">//输出结果为123456</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="string读入">9.3.3 string读入</h4><p>读入字符串，遇空格，回车结束</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s;<br>cin &gt;&gt; s;<br></code></pre></td></tr></table></figure><p>读入一行字符串(包括空格)，遇回车结束</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s;<br><span class="hljs-built_in">getline</span>(cin, s);<br></code></pre></td></tr></table></figure><p><em>注意：<code>getline(cin, s)</code>会获取前一个输入的换行符，需要在前面添加读取换行符的语句，如<code>getchar()</code>或<code>cin.get()</code></em></p><p>错误示例(源自某大聪明调试了一小时的bug)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n;<br>string s;<br><br>cin &gt;&gt; n;<br>cin &gt;&gt; s;<br></code></pre></td></tr></table></figure><p>正确示例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n;<br>string s;<br><br>cin &gt;&gt; n;<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-built_in">getline</span>(cin, s);<br></code></pre></td></tr></table></figure><p><em>当时偶然看见一个大佬的解释，恍然大悟：</em><br /><em><code>cin</code>输入完后，回车，<code>cin</code>遇到回车键结束，但回车还在输入流中，<code>cin</code>不会清除，导致<code>getline</code>读取回车，结束。所以后面的字符串并没有被正确输入</em></p><h3 id="函数方法-3">9.4 函数方法</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">string s <span class="hljs-operator">=</span> <span class="hljs-number">123</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><em>注意：</em> <em>it为迭代器</em></p><ul><li>插入</li></ul><table><thead><tr><th style="text-align: left;">代码</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr><td style="text-align: left;"><code>s.push_back('element')</code></td><td style="text-align: left;">在末尾插入</td></tr><tr><td style="text-align: left;"><code>s.insert(pos,'element')</code></td><td style="text-align: left;">在pos位置插入element</td></tr><tr><td style="text-align: left;">eg:s.insert(s.begin() + 2, 6)</td><td style="text-align: left;">在第二个位置插入6，结果是1263</td></tr><tr><td style="text-align: left;"><code>s.append("str")</code></td><td style="text-align: left;">在s字符串末尾添加str字符串</td></tr></tbody></table><ul><li>删除</li></ul><table><thead><tr><th style="text-align: left;">代码</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr><td style="text-align: left;"><code>erase(iterator p)</code></td><td style="text-align: left;">删除字符串中p所指字符</td></tr><tr><tdstyle="text-align: left;"><code>erase(iterator first, iterator last)</code></td><tdstyle="text-align: left;">删除字符串中迭代器区间<code>[first,last)</code>上的所有值</td></tr><tr><td style="text-align: left;"><code>erase(pos, len)</code></td><td style="text-align: left;">删除字符串中索引从pos开始的len个字符</td></tr><tr><td style="text-align: left;"><code>clear()</code></td><td style="text-align: left;">清空字符串</td></tr></tbody></table><ul><li>字符替换</li></ul><table><thead><tr><th style="text-align: left;">代码</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr><td style="text-align: left;"><code>s.replace(pos, n, str)</code></td><tdstyle="text-align: left;">把当前字符串从索引pos开始的n个字符替换成str</td></tr><tr><td style="text-align: left;"><code>s.replace(pos, n, n1, c)</code></td><tdstyle="text-align: left;">把当前字符串从pos开始n个字符替换为n1个字符c</td></tr><tr><td style="text-align: left;"><code>s.replace(it1, it2, str)</code></td><tdstyle="text-align: left;">把当前字符串<code>[it1, it2)</code>区间替换为str</td></tr></tbody></table><ul><li>大小写转换</li></ul><p>单个字符的转换：</p><table><thead><tr><th style="text-align: left;">代码</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr><td style="text-align: left;"><code>tolower(s[i])</code></td><td style="text-align: left;">转换为小写</td></tr><tr><td style="text-align: left;"><code>toupper(s[i])</code></td><td style="text-align: left;">转换为大写</td></tr></tbody></table><p>多个字符的转换：</p><table><thead><tr><th style="text-align: left;">代码</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr><tdstyle="text-align: left;"><code>transform(s.begin(), s.end(), s.begin(), ::tolower)</code></td><tdstyle="text-align: left;">转换小写。前两个参数指定容器转换起止范围，第三个参数是结果存放容器的开始位置</td></tr><tr><tdstyle="text-align: left;"><code>transform(s.begin(), s.end(), s.begin(), ::toupper)</code></td><td style="text-align: left;">转换大写</td></tr></tbody></table><ul><li>获取字符串长度</li></ul><table><thead><tr><th style="text-align: left;">代码</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr><tdstyle="text-align: left;"><code>s.size()</code>和<code>s.length()</code></td><td style="text-align: left;">返回string字符串个数。两者一个意思</td></tr><tr><td style="text-align: left;"><code>s.max_size()</code></td><td style="text-align: left;">返回string对象最多包含的字符数</td></tr><tr><td style="text-align: left;"><code>s.capcity()</code></td><tdstyle="text-align: left;">重新分配内存之前，string对象能包含的最大字符数</td></tr></tbody></table><ul><li>分割</li></ul><table><thead><tr><th style="text-align: left;">代码</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr><td style="text-align: left;">s.substr(pos, n)</td><td style="text-align: left;">截取从pos索引开始的n个字符</td></tr></tbody></table><ul><li>查找</li></ul><table><thead><tr><th style="text-align: left;">代码</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr><td style="text-align: left;">s.find(str, pos)</td><tdstyle="text-align: left;">默认从索引0开始。从索引pos开始查找子串str,返回找到位置的索引。找不到返回-1</td></tr><tr><td style="text-align: left;">s.find(c, pos)</td><td style="text-align: left;">从pos索引开始查找字符c</td></tr><tr><td style="text-align: left;">s.rfind(str, pos)</td><tdstyle="text-align: left;">从当前字符串pos索引开始，反向查找子串s</td></tr><tr><td style="text-align: left;">s.rfind(c, pos)</td><tdstyle="text-align: left;">从当前字符串pos索引开始，反向查找字符c</td></tr></tbody></table><ul><li>排序</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//按照ASCII码排序</span><br></code></pre></td></tr></table></figure><h2 id="stl-函数">STL 函数</h2><h3 id="sort">sort</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">int</span> a[N];<br><span class="hljs-comment">//对 a 数组的[1, n]位置从小到大排序：</span><br><span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n)<span class="hljs-comment">//因为 a + 1 是起始位置，a + 1 + n 是第 n + 1 个元素的指针，表示排序到第 n 个元素。</span><br><span class="hljs-comment">//对a数组的[0, n-1]位置从大到小排序</span><br><span class="hljs-built_in">sort</span>(a, a + n, <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br><span class="hljs-comment">//对a数组的[0, n-1]位置从小到大排序</span><br><span class="hljs-built_in">sort</span>(a, a + n, <span class="hljs-built_in">less</span>&lt;<span class="hljs-type">int</span>&gt;());<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">b</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>; <br><span class="hljs-built_in">sort</span>(b.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, b.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//升序</span><br><span class="hljs-built_in">sort</span>(b.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, b.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<span class="hljs-comment">//降序</span><br></code></pre></td></tr></table></figure><h3 id="unique">unique</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-built_in">unique</span>(beg, end)<br></code></pre></td></tr></table></figure><p>时间复杂度：<span class="math inline">\(O(N)\)</span></p><blockquote><p>消除重复元素，返回消除完重复元素的下一个位置的地址<br>如：<code>a[] = &#123;1, 3, 2, 3, 6&#125;</code><code>unique</code>之后<code>a</code>数组为<code>&#123;1, 2, 3, 6, 3&#125;</code>前面为无重复元素的数组，后面则是重复元素移到后面，返回a[4]位置的地址（不重复元素的尾后地址）</p></blockquote><p>消除重复元素一般需要原序列是有序序列</p>]]></content>
    
    
    <categories>
      
      <category>C++学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
